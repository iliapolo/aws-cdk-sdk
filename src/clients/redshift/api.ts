import * as cdk from '@aws-cdk/core';
import * as cr from '@aws-cdk/custom-resources';
import * as shapes from './shapes';

export class RedshiftClient extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[]) {
    super(scope, id);
  }

  public acceptReservedNodeExchange(input: shapes.RedshiftAcceptReservedNodeExchangeInputMessage): RedshiftAcceptReservedNodeExchange {
    return new RedshiftAcceptReservedNodeExchange(this, 'AcceptReservedNodeExchange', this.__resources, input);
  }

  public authorizeClusterSecurityGroupIngress(input: shapes.RedshiftAuthorizeClusterSecurityGroupIngressMessage): RedshiftAuthorizeClusterSecurityGroupIngress {
    return new RedshiftAuthorizeClusterSecurityGroupIngress(this, 'AuthorizeClusterSecurityGroupIngress', this.__resources, input);
  }

  public authorizeSnapshotAccess(input: shapes.RedshiftAuthorizeSnapshotAccessMessage): RedshiftAuthorizeSnapshotAccess {
    return new RedshiftAuthorizeSnapshotAccess(this, 'AuthorizeSnapshotAccess', this.__resources, input);
  }

  public batchDeleteClusterSnapshots(input: shapes.RedshiftBatchDeleteClusterSnapshotsRequest): RedshiftBatchDeleteClusterSnapshots {
    return new RedshiftBatchDeleteClusterSnapshots(this, 'BatchDeleteClusterSnapshots', this.__resources, input);
  }

  public batchModifyClusterSnapshots(input: shapes.RedshiftBatchModifyClusterSnapshotsMessage): RedshiftBatchModifyClusterSnapshots {
    return new RedshiftBatchModifyClusterSnapshots(this, 'BatchModifyClusterSnapshots', this.__resources, input);
  }

  public cancelResize(input: shapes.RedshiftCancelResizeMessage): RedshiftCancelResize {
    return new RedshiftCancelResize(this, 'CancelResize', this.__resources, input);
  }

  public copyClusterSnapshot(input: shapes.RedshiftCopyClusterSnapshotMessage): RedshiftCopyClusterSnapshot {
    return new RedshiftCopyClusterSnapshot(this, 'CopyClusterSnapshot', this.__resources, input);
  }

  public createCluster(input: shapes.RedshiftCreateClusterMessage): RedshiftCreateCluster {
    return new RedshiftCreateCluster(this, 'CreateCluster', this.__resources, input);
  }

  public createClusterParameterGroup(input: shapes.RedshiftCreateClusterParameterGroupMessage): RedshiftCreateClusterParameterGroup {
    return new RedshiftCreateClusterParameterGroup(this, 'CreateClusterParameterGroup', this.__resources, input);
  }

  public createClusterSecurityGroup(input: shapes.RedshiftCreateClusterSecurityGroupMessage): RedshiftCreateClusterSecurityGroup {
    return new RedshiftCreateClusterSecurityGroup(this, 'CreateClusterSecurityGroup', this.__resources, input);
  }

  public createClusterSnapshot(input: shapes.RedshiftCreateClusterSnapshotMessage): RedshiftCreateClusterSnapshot {
    return new RedshiftCreateClusterSnapshot(this, 'CreateClusterSnapshot', this.__resources, input);
  }

  public createClusterSubnetGroup(input: shapes.RedshiftCreateClusterSubnetGroupMessage): RedshiftCreateClusterSubnetGroup {
    return new RedshiftCreateClusterSubnetGroup(this, 'CreateClusterSubnetGroup', this.__resources, input);
  }

  public createEventSubscription(input: shapes.RedshiftCreateEventSubscriptionMessage): RedshiftCreateEventSubscription {
    return new RedshiftCreateEventSubscription(this, 'CreateEventSubscription', this.__resources, input);
  }

  public createHsmClientCertificate(input: shapes.RedshiftCreateHsmClientCertificateMessage): RedshiftCreateHsmClientCertificate {
    return new RedshiftCreateHsmClientCertificate(this, 'CreateHsmClientCertificate', this.__resources, input);
  }

  public createHsmConfiguration(input: shapes.RedshiftCreateHsmConfigurationMessage): RedshiftCreateHsmConfiguration {
    return new RedshiftCreateHsmConfiguration(this, 'CreateHsmConfiguration', this.__resources, input);
  }

  public createScheduledAction(input: shapes.RedshiftCreateScheduledActionMessage): RedshiftCreateScheduledAction {
    return new RedshiftCreateScheduledAction(this, 'CreateScheduledAction', this.__resources, input);
  }

  public createSnapshotCopyGrant(input: shapes.RedshiftCreateSnapshotCopyGrantMessage): RedshiftCreateSnapshotCopyGrant {
    return new RedshiftCreateSnapshotCopyGrant(this, 'CreateSnapshotCopyGrant', this.__resources, input);
  }

  public createSnapshotSchedule(input: shapes.RedshiftCreateSnapshotScheduleMessage): RedshiftCreateSnapshotSchedule {
    return new RedshiftCreateSnapshotSchedule(this, 'CreateSnapshotSchedule', this.__resources, input);
  }

  public createTags(input: shapes.RedshiftCreateTagsMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTags',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateTags'),
        parameters: {
          ResourceName: input.resourceName,
          Tags: input.tags,
        },
      },
    };
    new cr.AwsCustomResource(this, 'CreateTags', props);
  }

  public createUsageLimit(input: shapes.RedshiftCreateUsageLimitMessage): RedshiftCreateUsageLimit {
    return new RedshiftCreateUsageLimit(this, 'CreateUsageLimit', this.__resources, input);
  }

  public deleteCluster(input: shapes.RedshiftDeleteClusterMessage): RedshiftDeleteCluster {
    return new RedshiftDeleteCluster(this, 'DeleteCluster', this.__resources, input);
  }

  public deleteClusterParameterGroup(input: shapes.RedshiftDeleteClusterParameterGroupMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterParameterGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterParameterGroup'),
        parameters: {
          ParameterGroupName: input.parameterGroupName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteClusterParameterGroup', props);
  }

  public deleteClusterSecurityGroup(input: shapes.RedshiftDeleteClusterSecurityGroupMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSecurityGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSecurityGroup'),
        parameters: {
          ClusterSecurityGroupName: input.clusterSecurityGroupName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteClusterSecurityGroup', props);
  }

  public deleteClusterSnapshot(input: shapes.RedshiftDeleteClusterSnapshotMessage): RedshiftDeleteClusterSnapshot {
    return new RedshiftDeleteClusterSnapshot(this, 'DeleteClusterSnapshot', this.__resources, input);
  }

  public deleteClusterSubnetGroup(input: shapes.RedshiftDeleteClusterSubnetGroupMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSubnetGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSubnetGroup'),
        parameters: {
          ClusterSubnetGroupName: input.clusterSubnetGroupName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteClusterSubnetGroup', props);
  }

  public deleteEventSubscription(input: shapes.RedshiftDeleteEventSubscriptionMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteEventSubscription'),
        parameters: {
          SubscriptionName: input.subscriptionName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteEventSubscription', props);
  }

  public deleteHsmClientCertificate(input: shapes.RedshiftDeleteHsmClientCertificateMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteHsmClientCertificate',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteHsmClientCertificate'),
        parameters: {
          HsmClientCertificateIdentifier: input.hsmClientCertificateIdentifier,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteHsmClientCertificate', props);
  }

  public deleteHsmConfiguration(input: shapes.RedshiftDeleteHsmConfigurationMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteHsmConfiguration',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteHsmConfiguration'),
        parameters: {
          HsmConfigurationIdentifier: input.hsmConfigurationIdentifier,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteHsmConfiguration', props);
  }

  public deleteScheduledAction(input: shapes.RedshiftDeleteScheduledActionMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteScheduledAction'),
        parameters: {
          ScheduledActionName: input.scheduledActionName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteScheduledAction', props);
  }

  public deleteSnapshotCopyGrant(input: shapes.RedshiftDeleteSnapshotCopyGrantMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteSnapshotCopyGrant',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteSnapshotCopyGrant'),
        parameters: {
          SnapshotCopyGrantName: input.snapshotCopyGrantName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteSnapshotCopyGrant', props);
  }

  public deleteSnapshotSchedule(input: shapes.RedshiftDeleteSnapshotScheduleMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteSnapshotSchedule',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteSnapshotSchedule'),
        parameters: {
          ScheduleIdentifier: input.scheduleIdentifier,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteSnapshotSchedule', props);
  }

  public deleteTags(input: shapes.RedshiftDeleteTagsMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTags',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteTags'),
        parameters: {
          ResourceName: input.resourceName,
          TagKeys: input.tagKeys,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteTags', props);
  }

  public deleteUsageLimit(input: shapes.RedshiftDeleteUsageLimitMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteUsageLimit',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteUsageLimit'),
        parameters: {
          UsageLimitId: input.usageLimitId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteUsageLimit', props);
  }

  public describeAccountAttributes(input: shapes.RedshiftDescribeAccountAttributesMessage): RedshiftDescribeAccountAttributes {
    return new RedshiftDescribeAccountAttributes(this, 'DescribeAccountAttributes', this.__resources, input);
  }

  public describeClusterDbRevisions(input: shapes.RedshiftDescribeClusterDbRevisionsMessage): RedshiftDescribeClusterDbRevisions {
    return new RedshiftDescribeClusterDbRevisions(this, 'DescribeClusterDbRevisions', this.__resources, input);
  }

  public describeClusterParameterGroups(input: shapes.RedshiftDescribeClusterParameterGroupsMessage): RedshiftDescribeClusterParameterGroups {
    return new RedshiftDescribeClusterParameterGroups(this, 'DescribeClusterParameterGroups', this.__resources, input);
  }

  public describeClusterParameters(input: shapes.RedshiftDescribeClusterParametersMessage): RedshiftDescribeClusterParameters {
    return new RedshiftDescribeClusterParameters(this, 'DescribeClusterParameters', this.__resources, input);
  }

  public describeClusterSecurityGroups(input: shapes.RedshiftDescribeClusterSecurityGroupsMessage): RedshiftDescribeClusterSecurityGroups {
    return new RedshiftDescribeClusterSecurityGroups(this, 'DescribeClusterSecurityGroups', this.__resources, input);
  }

  public describeClusterSnapshots(input: shapes.RedshiftDescribeClusterSnapshotsMessage): RedshiftDescribeClusterSnapshots {
    return new RedshiftDescribeClusterSnapshots(this, 'DescribeClusterSnapshots', this.__resources, input);
  }

  public describeClusterSubnetGroups(input: shapes.RedshiftDescribeClusterSubnetGroupsMessage): RedshiftDescribeClusterSubnetGroups {
    return new RedshiftDescribeClusterSubnetGroups(this, 'DescribeClusterSubnetGroups', this.__resources, input);
  }

  public describeClusterTracks(input: shapes.RedshiftDescribeClusterTracksMessage): RedshiftDescribeClusterTracks {
    return new RedshiftDescribeClusterTracks(this, 'DescribeClusterTracks', this.__resources, input);
  }

  public describeClusterVersions(input: shapes.RedshiftDescribeClusterVersionsMessage): RedshiftDescribeClusterVersions {
    return new RedshiftDescribeClusterVersions(this, 'DescribeClusterVersions', this.__resources, input);
  }

  public describeClusters(input: shapes.RedshiftDescribeClustersMessage): RedshiftDescribeClusters {
    return new RedshiftDescribeClusters(this, 'DescribeClusters', this.__resources, input);
  }

  public describeDefaultClusterParameters(input: shapes.RedshiftDescribeDefaultClusterParametersMessage): RedshiftDescribeDefaultClusterParameters {
    return new RedshiftDescribeDefaultClusterParameters(this, 'DescribeDefaultClusterParameters', this.__resources, input);
  }

  public describeEventCategories(input: shapes.RedshiftDescribeEventCategoriesMessage): RedshiftDescribeEventCategories {
    return new RedshiftDescribeEventCategories(this, 'DescribeEventCategories', this.__resources, input);
  }

  public describeEventSubscriptions(input: shapes.RedshiftDescribeEventSubscriptionsMessage): RedshiftDescribeEventSubscriptions {
    return new RedshiftDescribeEventSubscriptions(this, 'DescribeEventSubscriptions', this.__resources, input);
  }

  public describeEvents(input: shapes.RedshiftDescribeEventsMessage): RedshiftDescribeEvents {
    return new RedshiftDescribeEvents(this, 'DescribeEvents', this.__resources, input);
  }

  public describeHsmClientCertificates(input: shapes.RedshiftDescribeHsmClientCertificatesMessage): RedshiftDescribeHsmClientCertificates {
    return new RedshiftDescribeHsmClientCertificates(this, 'DescribeHsmClientCertificates', this.__resources, input);
  }

  public describeHsmConfigurations(input: shapes.RedshiftDescribeHsmConfigurationsMessage): RedshiftDescribeHsmConfigurations {
    return new RedshiftDescribeHsmConfigurations(this, 'DescribeHsmConfigurations', this.__resources, input);
  }

  public describeLoggingStatus(input: shapes.RedshiftDescribeLoggingStatusMessage): RedshiftDescribeLoggingStatus {
    return new RedshiftDescribeLoggingStatus(this, 'DescribeLoggingStatus', this.__resources, input);
  }

  public describeNodeConfigurationOptions(input: shapes.RedshiftDescribeNodeConfigurationOptionsMessage): RedshiftDescribeNodeConfigurationOptions {
    return new RedshiftDescribeNodeConfigurationOptions(this, 'DescribeNodeConfigurationOptions', this.__resources, input);
  }

  public describeOrderableClusterOptions(input: shapes.RedshiftDescribeOrderableClusterOptionsMessage): RedshiftDescribeOrderableClusterOptions {
    return new RedshiftDescribeOrderableClusterOptions(this, 'DescribeOrderableClusterOptions', this.__resources, input);
  }

  public describeReservedNodeOfferings(input: shapes.RedshiftDescribeReservedNodeOfferingsMessage): RedshiftDescribeReservedNodeOfferings {
    return new RedshiftDescribeReservedNodeOfferings(this, 'DescribeReservedNodeOfferings', this.__resources, input);
  }

  public describeReservedNodes(input: shapes.RedshiftDescribeReservedNodesMessage): RedshiftDescribeReservedNodes {
    return new RedshiftDescribeReservedNodes(this, 'DescribeReservedNodes', this.__resources, input);
  }

  public describeResize(input: shapes.RedshiftDescribeResizeMessage): RedshiftDescribeResize {
    return new RedshiftDescribeResize(this, 'DescribeResize', this.__resources, input);
  }

  public describeScheduledActions(input: shapes.RedshiftDescribeScheduledActionsMessage): RedshiftDescribeScheduledActions {
    return new RedshiftDescribeScheduledActions(this, 'DescribeScheduledActions', this.__resources, input);
  }

  public describeSnapshotCopyGrants(input: shapes.RedshiftDescribeSnapshotCopyGrantsMessage): RedshiftDescribeSnapshotCopyGrants {
    return new RedshiftDescribeSnapshotCopyGrants(this, 'DescribeSnapshotCopyGrants', this.__resources, input);
  }

  public describeSnapshotSchedules(input: shapes.RedshiftDescribeSnapshotSchedulesMessage): RedshiftDescribeSnapshotSchedules {
    return new RedshiftDescribeSnapshotSchedules(this, 'DescribeSnapshotSchedules', this.__resources, input);
  }

  public describeStorage(): RedshiftDescribeStorage {
    return new RedshiftDescribeStorage(this, 'DescribeStorage', this.__resources);
  }

  public describeTableRestoreStatus(input: shapes.RedshiftDescribeTableRestoreStatusMessage): RedshiftDescribeTableRestoreStatus {
    return new RedshiftDescribeTableRestoreStatus(this, 'DescribeTableRestoreStatus', this.__resources, input);
  }

  public describeTags(input: shapes.RedshiftDescribeTagsMessage): RedshiftDescribeTags {
    return new RedshiftDescribeTags(this, 'DescribeTags', this.__resources, input);
  }

  public describeUsageLimits(input: shapes.RedshiftDescribeUsageLimitsMessage): RedshiftDescribeUsageLimits {
    return new RedshiftDescribeUsageLimits(this, 'DescribeUsageLimits', this.__resources, input);
  }

  public disableLogging(input: shapes.RedshiftDisableLoggingMessage): RedshiftDisableLogging {
    return new RedshiftDisableLogging(this, 'DisableLogging', this.__resources, input);
  }

  public disableSnapshotCopy(input: shapes.RedshiftDisableSnapshotCopyMessage): RedshiftDisableSnapshotCopy {
    return new RedshiftDisableSnapshotCopy(this, 'DisableSnapshotCopy', this.__resources, input);
  }

  public enableLogging(input: shapes.RedshiftEnableLoggingMessage): RedshiftEnableLogging {
    return new RedshiftEnableLogging(this, 'EnableLogging', this.__resources, input);
  }

  public enableSnapshotCopy(input: shapes.RedshiftEnableSnapshotCopyMessage): RedshiftEnableSnapshotCopy {
    return new RedshiftEnableSnapshotCopy(this, 'EnableSnapshotCopy', this.__resources, input);
  }

  public fetchClusterCredentials(input: shapes.RedshiftGetClusterCredentialsMessage): RedshiftFetchClusterCredentials {
    return new RedshiftFetchClusterCredentials(this, 'FetchClusterCredentials', this.__resources, input);
  }

  public fetchReservedNodeExchangeOfferings(input: shapes.RedshiftGetReservedNodeExchangeOfferingsInputMessage): RedshiftFetchReservedNodeExchangeOfferings {
    return new RedshiftFetchReservedNodeExchangeOfferings(this, 'FetchReservedNodeExchangeOfferings', this.__resources, input);
  }

  public modifyCluster(input: shapes.RedshiftModifyClusterMessage): RedshiftModifyCluster {
    return new RedshiftModifyCluster(this, 'ModifyCluster', this.__resources, input);
  }

  public modifyClusterDbRevision(input: shapes.RedshiftModifyClusterDbRevisionMessage): RedshiftModifyClusterDbRevision {
    return new RedshiftModifyClusterDbRevision(this, 'ModifyClusterDbRevision', this.__resources, input);
  }

  public modifyClusterIamRoles(input: shapes.RedshiftModifyClusterIamRolesMessage): RedshiftModifyClusterIamRoles {
    return new RedshiftModifyClusterIamRoles(this, 'ModifyClusterIamRoles', this.__resources, input);
  }

  public modifyClusterMaintenance(input: shapes.RedshiftModifyClusterMaintenanceMessage): RedshiftModifyClusterMaintenance {
    return new RedshiftModifyClusterMaintenance(this, 'ModifyClusterMaintenance', this.__resources, input);
  }

  public modifyClusterParameterGroup(input: shapes.RedshiftModifyClusterParameterGroupMessage): RedshiftModifyClusterParameterGroup {
    return new RedshiftModifyClusterParameterGroup(this, 'ModifyClusterParameterGroup', this.__resources, input);
  }

  public modifyClusterSnapshot(input: shapes.RedshiftModifyClusterSnapshotMessage): RedshiftModifyClusterSnapshot {
    return new RedshiftModifyClusterSnapshot(this, 'ModifyClusterSnapshot', this.__resources, input);
  }

  public modifyClusterSnapshotSchedule(input: shapes.RedshiftModifyClusterSnapshotScheduleMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshotSchedule',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshotSchedule'),
        parameters: {
          ClusterIdentifier: input.clusterIdentifier,
          ScheduleIdentifier: input.scheduleIdentifier,
          DisassociateSchedule: input.disassociateSchedule,
        },
      },
    };
    new cr.AwsCustomResource(this, 'ModifyClusterSnapshotSchedule', props);
  }

  public modifyClusterSubnetGroup(input: shapes.RedshiftModifyClusterSubnetGroupMessage): RedshiftModifyClusterSubnetGroup {
    return new RedshiftModifyClusterSubnetGroup(this, 'ModifyClusterSubnetGroup', this.__resources, input);
  }

  public modifyEventSubscription(input: shapes.RedshiftModifyEventSubscriptionMessage): RedshiftModifyEventSubscription {
    return new RedshiftModifyEventSubscription(this, 'ModifyEventSubscription', this.__resources, input);
  }

  public modifyScheduledAction(input: shapes.RedshiftModifyScheduledActionMessage): RedshiftModifyScheduledAction {
    return new RedshiftModifyScheduledAction(this, 'ModifyScheduledAction', this.__resources, input);
  }

  public modifySnapshotCopyRetentionPeriod(input: shapes.RedshiftModifySnapshotCopyRetentionPeriodMessage): RedshiftModifySnapshotCopyRetentionPeriod {
    return new RedshiftModifySnapshotCopyRetentionPeriod(this, 'ModifySnapshotCopyRetentionPeriod', this.__resources, input);
  }

  public modifySnapshotSchedule(input: shapes.RedshiftModifySnapshotScheduleMessage): RedshiftModifySnapshotSchedule {
    return new RedshiftModifySnapshotSchedule(this, 'ModifySnapshotSchedule', this.__resources, input);
  }

  public modifyUsageLimit(input: shapes.RedshiftModifyUsageLimitMessage): RedshiftModifyUsageLimit {
    return new RedshiftModifyUsageLimit(this, 'ModifyUsageLimit', this.__resources, input);
  }

  public pauseCluster(input: shapes.RedshiftPauseClusterMessage): RedshiftPauseCluster {
    return new RedshiftPauseCluster(this, 'PauseCluster', this.__resources, input);
  }

  public purchaseReservedNodeOffering(input: shapes.RedshiftPurchaseReservedNodeOfferingMessage): RedshiftPurchaseReservedNodeOffering {
    return new RedshiftPurchaseReservedNodeOffering(this, 'PurchaseReservedNodeOffering', this.__resources, input);
  }

  public rebootCluster(input: shapes.RedshiftRebootClusterMessage): RedshiftRebootCluster {
    return new RedshiftRebootCluster(this, 'RebootCluster', this.__resources, input);
  }

  public resetClusterParameterGroup(input: shapes.RedshiftResetClusterParameterGroupMessage): RedshiftResetClusterParameterGroup {
    return new RedshiftResetClusterParameterGroup(this, 'ResetClusterParameterGroup', this.__resources, input);
  }

  public resizeCluster(input: shapes.RedshiftResizeClusterMessage): RedshiftResizeCluster {
    return new RedshiftResizeCluster(this, 'ResizeCluster', this.__resources, input);
  }

  public restoreFromClusterSnapshot(input: shapes.RedshiftRestoreFromClusterSnapshotMessage): RedshiftRestoreFromClusterSnapshot {
    return new RedshiftRestoreFromClusterSnapshot(this, 'RestoreFromClusterSnapshot', this.__resources, input);
  }

  public restoreTableFromClusterSnapshot(input: shapes.RedshiftRestoreTableFromClusterSnapshotMessage): RedshiftRestoreTableFromClusterSnapshot {
    return new RedshiftRestoreTableFromClusterSnapshot(this, 'RestoreTableFromClusterSnapshot', this.__resources, input);
  }

  public resumeCluster(input: shapes.RedshiftResumeClusterMessage): RedshiftResumeCluster {
    return new RedshiftResumeCluster(this, 'ResumeCluster', this.__resources, input);
  }

  public revokeClusterSecurityGroupIngress(input: shapes.RedshiftRevokeClusterSecurityGroupIngressMessage): RedshiftRevokeClusterSecurityGroupIngress {
    return new RedshiftRevokeClusterSecurityGroupIngress(this, 'RevokeClusterSecurityGroupIngress', this.__resources, input);
  }

  public revokeSnapshotAccess(input: shapes.RedshiftRevokeSnapshotAccessMessage): RedshiftRevokeSnapshotAccess {
    return new RedshiftRevokeSnapshotAccess(this, 'RevokeSnapshotAccess', this.__resources, input);
  }

  public rotateEncryptionKey(input: shapes.RedshiftRotateEncryptionKeyMessage): RedshiftRotateEncryptionKey {
    return new RedshiftRotateEncryptionKey(this, 'RotateEncryptionKey', this.__resources, input);
  }

}

export class RedshiftAcceptReservedNodeExchange extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftAcceptReservedNodeExchangeInputMessage) {
    super(scope, id);
  }

  public get exchangedReservedNode(): RedshiftAcceptReservedNodeExchangeExchangedReservedNode {
    return new RedshiftAcceptReservedNodeExchangeExchangedReservedNode(this, 'ExchangedReservedNode', this.__resources, this.input);
  }

}

export class RedshiftAcceptReservedNodeExchangeExchangedReservedNode extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftAcceptReservedNodeExchangeInputMessage) {
    super(scope, id);
  }

  public get reservedNodeId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptReservedNodeExchange',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AcceptReservedNodeExchange.ExchangedReservedNode.ReservedNodeId'),
        outputPath: 'ExchangedReservedNode.ReservedNodeId',
        parameters: {
          ReservedNodeId: this.input.reservedNodeId,
          TargetReservedNodeOfferingId: this.input.targetReservedNodeOfferingId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptReservedNodeExchange.ExchangedReservedNode.ReservedNodeId', props);
    return resource.getResponseField('ExchangedReservedNode.ReservedNodeId') as unknown as string;
  }

  public get reservedNodeOfferingId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptReservedNodeExchange',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AcceptReservedNodeExchange.ExchangedReservedNode.ReservedNodeOfferingId'),
        outputPath: 'ExchangedReservedNode.ReservedNodeOfferingId',
        parameters: {
          ReservedNodeId: this.input.reservedNodeId,
          TargetReservedNodeOfferingId: this.input.targetReservedNodeOfferingId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptReservedNodeExchange.ExchangedReservedNode.ReservedNodeOfferingId', props);
    return resource.getResponseField('ExchangedReservedNode.ReservedNodeOfferingId') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptReservedNodeExchange',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AcceptReservedNodeExchange.ExchangedReservedNode.NodeType'),
        outputPath: 'ExchangedReservedNode.NodeType',
        parameters: {
          ReservedNodeId: this.input.reservedNodeId,
          TargetReservedNodeOfferingId: this.input.targetReservedNodeOfferingId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptReservedNodeExchange.ExchangedReservedNode.NodeType', props);
    return resource.getResponseField('ExchangedReservedNode.NodeType') as unknown as string;
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptReservedNodeExchange',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AcceptReservedNodeExchange.ExchangedReservedNode.StartTime'),
        outputPath: 'ExchangedReservedNode.StartTime',
        parameters: {
          ReservedNodeId: this.input.reservedNodeId,
          TargetReservedNodeOfferingId: this.input.targetReservedNodeOfferingId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptReservedNodeExchange.ExchangedReservedNode.StartTime', props);
    return resource.getResponseField('ExchangedReservedNode.StartTime') as unknown as string;
  }

  public get duration(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptReservedNodeExchange',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AcceptReservedNodeExchange.ExchangedReservedNode.Duration'),
        outputPath: 'ExchangedReservedNode.Duration',
        parameters: {
          ReservedNodeId: this.input.reservedNodeId,
          TargetReservedNodeOfferingId: this.input.targetReservedNodeOfferingId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptReservedNodeExchange.ExchangedReservedNode.Duration', props);
    return resource.getResponseField('ExchangedReservedNode.Duration') as unknown as number;
  }

  public get fixedPrice(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptReservedNodeExchange',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AcceptReservedNodeExchange.ExchangedReservedNode.FixedPrice'),
        outputPath: 'ExchangedReservedNode.FixedPrice',
        parameters: {
          ReservedNodeId: this.input.reservedNodeId,
          TargetReservedNodeOfferingId: this.input.targetReservedNodeOfferingId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptReservedNodeExchange.ExchangedReservedNode.FixedPrice', props);
    return resource.getResponseField('ExchangedReservedNode.FixedPrice') as unknown as number;
  }

  public get usagePrice(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptReservedNodeExchange',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AcceptReservedNodeExchange.ExchangedReservedNode.UsagePrice'),
        outputPath: 'ExchangedReservedNode.UsagePrice',
        parameters: {
          ReservedNodeId: this.input.reservedNodeId,
          TargetReservedNodeOfferingId: this.input.targetReservedNodeOfferingId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptReservedNodeExchange.ExchangedReservedNode.UsagePrice', props);
    return resource.getResponseField('ExchangedReservedNode.UsagePrice') as unknown as number;
  }

  public get currencyCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptReservedNodeExchange',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AcceptReservedNodeExchange.ExchangedReservedNode.CurrencyCode'),
        outputPath: 'ExchangedReservedNode.CurrencyCode',
        parameters: {
          ReservedNodeId: this.input.reservedNodeId,
          TargetReservedNodeOfferingId: this.input.targetReservedNodeOfferingId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptReservedNodeExchange.ExchangedReservedNode.CurrencyCode', props);
    return resource.getResponseField('ExchangedReservedNode.CurrencyCode') as unknown as string;
  }

  public get nodeCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptReservedNodeExchange',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AcceptReservedNodeExchange.ExchangedReservedNode.NodeCount'),
        outputPath: 'ExchangedReservedNode.NodeCount',
        parameters: {
          ReservedNodeId: this.input.reservedNodeId,
          TargetReservedNodeOfferingId: this.input.targetReservedNodeOfferingId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptReservedNodeExchange.ExchangedReservedNode.NodeCount', props);
    return resource.getResponseField('ExchangedReservedNode.NodeCount') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptReservedNodeExchange',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AcceptReservedNodeExchange.ExchangedReservedNode.State'),
        outputPath: 'ExchangedReservedNode.State',
        parameters: {
          ReservedNodeId: this.input.reservedNodeId,
          TargetReservedNodeOfferingId: this.input.targetReservedNodeOfferingId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptReservedNodeExchange.ExchangedReservedNode.State', props);
    return resource.getResponseField('ExchangedReservedNode.State') as unknown as string;
  }

  public get offeringType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptReservedNodeExchange',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AcceptReservedNodeExchange.ExchangedReservedNode.OfferingType'),
        outputPath: 'ExchangedReservedNode.OfferingType',
        parameters: {
          ReservedNodeId: this.input.reservedNodeId,
          TargetReservedNodeOfferingId: this.input.targetReservedNodeOfferingId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptReservedNodeExchange.ExchangedReservedNode.OfferingType', props);
    return resource.getResponseField('ExchangedReservedNode.OfferingType') as unknown as string;
  }

  public get recurringCharges(): shapes.RedshiftRecurringCharge[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptReservedNodeExchange',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AcceptReservedNodeExchange.ExchangedReservedNode.RecurringCharges'),
        outputPath: 'ExchangedReservedNode.RecurringCharges',
        parameters: {
          ReservedNodeId: this.input.reservedNodeId,
          TargetReservedNodeOfferingId: this.input.targetReservedNodeOfferingId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptReservedNodeExchange.ExchangedReservedNode.RecurringCharges', props);
    return resource.getResponseField('ExchangedReservedNode.RecurringCharges') as unknown as shapes.RedshiftRecurringCharge[];
  }

  public get reservedNodeOfferingType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptReservedNodeExchange',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AcceptReservedNodeExchange.ExchangedReservedNode.ReservedNodeOfferingType'),
        outputPath: 'ExchangedReservedNode.ReservedNodeOfferingType',
        parameters: {
          ReservedNodeId: this.input.reservedNodeId,
          TargetReservedNodeOfferingId: this.input.targetReservedNodeOfferingId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptReservedNodeExchange.ExchangedReservedNode.ReservedNodeOfferingType', props);
    return resource.getResponseField('ExchangedReservedNode.ReservedNodeOfferingType') as unknown as string;
  }

}

export class RedshiftAuthorizeClusterSecurityGroupIngress extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftAuthorizeClusterSecurityGroupIngressMessage) {
    super(scope, id);
  }

  public get clusterSecurityGroup(): RedshiftAuthorizeClusterSecurityGroupIngressClusterSecurityGroup {
    return new RedshiftAuthorizeClusterSecurityGroupIngressClusterSecurityGroup(this, 'ClusterSecurityGroup', this.__resources, this.input);
  }

}

export class RedshiftAuthorizeClusterSecurityGroupIngressClusterSecurityGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftAuthorizeClusterSecurityGroupIngressMessage) {
    super(scope, id);
  }

  public get clusterSecurityGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeClusterSecurityGroupIngress',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeClusterSecurityGroupIngress.ClusterSecurityGroup.ClusterSecurityGroupName'),
        outputPath: 'ClusterSecurityGroup.ClusterSecurityGroupName',
        parameters: {
          ClusterSecurityGroupName: this.input.clusterSecurityGroupName,
          CIDRIP: this.input.cidrip,
          EC2SecurityGroupName: this.input.ec2SecurityGroupName,
          EC2SecurityGroupOwnerId: this.input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeClusterSecurityGroupIngress.ClusterSecurityGroup.ClusterSecurityGroupName', props);
    return resource.getResponseField('ClusterSecurityGroup.ClusterSecurityGroupName') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeClusterSecurityGroupIngress',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeClusterSecurityGroupIngress.ClusterSecurityGroup.Description'),
        outputPath: 'ClusterSecurityGroup.Description',
        parameters: {
          ClusterSecurityGroupName: this.input.clusterSecurityGroupName,
          CIDRIP: this.input.cidrip,
          EC2SecurityGroupName: this.input.ec2SecurityGroupName,
          EC2SecurityGroupOwnerId: this.input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeClusterSecurityGroupIngress.ClusterSecurityGroup.Description', props);
    return resource.getResponseField('ClusterSecurityGroup.Description') as unknown as string;
  }

  public get ec2SecurityGroups(): shapes.RedshiftEc2SecurityGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeClusterSecurityGroupIngress',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeClusterSecurityGroupIngress.ClusterSecurityGroup.EC2SecurityGroups'),
        outputPath: 'ClusterSecurityGroup.EC2SecurityGroups',
        parameters: {
          ClusterSecurityGroupName: this.input.clusterSecurityGroupName,
          CIDRIP: this.input.cidrip,
          EC2SecurityGroupName: this.input.ec2SecurityGroupName,
          EC2SecurityGroupOwnerId: this.input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeClusterSecurityGroupIngress.ClusterSecurityGroup.EC2SecurityGroups', props);
    return resource.getResponseField('ClusterSecurityGroup.EC2SecurityGroups') as unknown as shapes.RedshiftEc2SecurityGroup[];
  }

  public get ipRanges(): shapes.RedshiftIpRange[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeClusterSecurityGroupIngress',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeClusterSecurityGroupIngress.ClusterSecurityGroup.IPRanges'),
        outputPath: 'ClusterSecurityGroup.IPRanges',
        parameters: {
          ClusterSecurityGroupName: this.input.clusterSecurityGroupName,
          CIDRIP: this.input.cidrip,
          EC2SecurityGroupName: this.input.ec2SecurityGroupName,
          EC2SecurityGroupOwnerId: this.input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeClusterSecurityGroupIngress.ClusterSecurityGroup.IPRanges', props);
    return resource.getResponseField('ClusterSecurityGroup.IPRanges') as unknown as shapes.RedshiftIpRange[];
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeClusterSecurityGroupIngress',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeClusterSecurityGroupIngress.ClusterSecurityGroup.Tags'),
        outputPath: 'ClusterSecurityGroup.Tags',
        parameters: {
          ClusterSecurityGroupName: this.input.clusterSecurityGroupName,
          CIDRIP: this.input.cidrip,
          EC2SecurityGroupName: this.input.ec2SecurityGroupName,
          EC2SecurityGroupOwnerId: this.input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeClusterSecurityGroupIngress.ClusterSecurityGroup.Tags', props);
    return resource.getResponseField('ClusterSecurityGroup.Tags') as unknown as shapes.RedshiftTag[];
  }

}

export class RedshiftAuthorizeSnapshotAccess extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftAuthorizeSnapshotAccessMessage) {
    super(scope, id);
  }

  public get snapshot(): RedshiftAuthorizeSnapshotAccessSnapshot {
    return new RedshiftAuthorizeSnapshotAccessSnapshot(this, 'Snapshot', this.__resources, this.input);
  }

}

export class RedshiftAuthorizeSnapshotAccessSnapshot extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftAuthorizeSnapshotAccessMessage) {
    super(scope, id);
  }

  public get snapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.SnapshotIdentifier'),
        outputPath: 'Snapshot.SnapshotIdentifier',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeSnapshotAccess.Snapshot.SnapshotIdentifier', props);
    return resource.getResponseField('Snapshot.SnapshotIdentifier') as unknown as string;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.ClusterIdentifier'),
        outputPath: 'Snapshot.ClusterIdentifier',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeSnapshotAccess.Snapshot.ClusterIdentifier', props);
    return resource.getResponseField('Snapshot.ClusterIdentifier') as unknown as string;
  }

  public get snapshotCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.SnapshotCreateTime'),
        outputPath: 'Snapshot.SnapshotCreateTime',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeSnapshotAccess.Snapshot.SnapshotCreateTime', props);
    return resource.getResponseField('Snapshot.SnapshotCreateTime') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.Status'),
        outputPath: 'Snapshot.Status',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeSnapshotAccess.Snapshot.Status', props);
    return resource.getResponseField('Snapshot.Status') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.Port'),
        outputPath: 'Snapshot.Port',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeSnapshotAccess.Snapshot.Port', props);
    return resource.getResponseField('Snapshot.Port') as unknown as number;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.AvailabilityZone'),
        outputPath: 'Snapshot.AvailabilityZone',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeSnapshotAccess.Snapshot.AvailabilityZone', props);
    return resource.getResponseField('Snapshot.AvailabilityZone') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.ClusterCreateTime'),
        outputPath: 'Snapshot.ClusterCreateTime',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeSnapshotAccess.Snapshot.ClusterCreateTime', props);
    return resource.getResponseField('Snapshot.ClusterCreateTime') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.MasterUsername'),
        outputPath: 'Snapshot.MasterUsername',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeSnapshotAccess.Snapshot.MasterUsername', props);
    return resource.getResponseField('Snapshot.MasterUsername') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.ClusterVersion'),
        outputPath: 'Snapshot.ClusterVersion',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeSnapshotAccess.Snapshot.ClusterVersion', props);
    return resource.getResponseField('Snapshot.ClusterVersion') as unknown as string;
  }

  public get snapshotType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.SnapshotType'),
        outputPath: 'Snapshot.SnapshotType',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeSnapshotAccess.Snapshot.SnapshotType', props);
    return resource.getResponseField('Snapshot.SnapshotType') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.NodeType'),
        outputPath: 'Snapshot.NodeType',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeSnapshotAccess.Snapshot.NodeType', props);
    return resource.getResponseField('Snapshot.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.NumberOfNodes'),
        outputPath: 'Snapshot.NumberOfNodes',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeSnapshotAccess.Snapshot.NumberOfNodes', props);
    return resource.getResponseField('Snapshot.NumberOfNodes') as unknown as number;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.DBName'),
        outputPath: 'Snapshot.DBName',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeSnapshotAccess.Snapshot.DBName', props);
    return resource.getResponseField('Snapshot.DBName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.VpcId'),
        outputPath: 'Snapshot.VpcId',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeSnapshotAccess.Snapshot.VpcId', props);
    return resource.getResponseField('Snapshot.VpcId') as unknown as string;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.Encrypted'),
        outputPath: 'Snapshot.Encrypted',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeSnapshotAccess.Snapshot.Encrypted', props);
    return resource.getResponseField('Snapshot.Encrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.KmsKeyId'),
        outputPath: 'Snapshot.KmsKeyId',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeSnapshotAccess.Snapshot.KmsKeyId', props);
    return resource.getResponseField('Snapshot.KmsKeyId') as unknown as string;
  }

  public get encryptedWithHsm(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.EncryptedWithHSM'),
        outputPath: 'Snapshot.EncryptedWithHSM',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeSnapshotAccess.Snapshot.EncryptedWithHSM', props);
    return resource.getResponseField('Snapshot.EncryptedWithHSM') as unknown as boolean;
  }

  public get accountsWithRestoreAccess(): shapes.RedshiftAccountWithRestoreAccess[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.AccountsWithRestoreAccess'),
        outputPath: 'Snapshot.AccountsWithRestoreAccess',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeSnapshotAccess.Snapshot.AccountsWithRestoreAccess', props);
    return resource.getResponseField('Snapshot.AccountsWithRestoreAccess') as unknown as shapes.RedshiftAccountWithRestoreAccess[];
  }

  public get ownerAccount(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.OwnerAccount'),
        outputPath: 'Snapshot.OwnerAccount',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeSnapshotAccess.Snapshot.OwnerAccount', props);
    return resource.getResponseField('Snapshot.OwnerAccount') as unknown as string;
  }

  public get totalBackupSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.TotalBackupSizeInMegaBytes'),
        outputPath: 'Snapshot.TotalBackupSizeInMegaBytes',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeSnapshotAccess.Snapshot.TotalBackupSizeInMegaBytes', props);
    return resource.getResponseField('Snapshot.TotalBackupSizeInMegaBytes') as unknown as number;
  }

  public get actualIncrementalBackupSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.ActualIncrementalBackupSizeInMegaBytes'),
        outputPath: 'Snapshot.ActualIncrementalBackupSizeInMegaBytes',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeSnapshotAccess.Snapshot.ActualIncrementalBackupSizeInMegaBytes', props);
    return resource.getResponseField('Snapshot.ActualIncrementalBackupSizeInMegaBytes') as unknown as number;
  }

  public get backupProgressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.BackupProgressInMegaBytes'),
        outputPath: 'Snapshot.BackupProgressInMegaBytes',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeSnapshotAccess.Snapshot.BackupProgressInMegaBytes', props);
    return resource.getResponseField('Snapshot.BackupProgressInMegaBytes') as unknown as number;
  }

  public get currentBackupRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.CurrentBackupRateInMegaBytesPerSecond'),
        outputPath: 'Snapshot.CurrentBackupRateInMegaBytesPerSecond',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeSnapshotAccess.Snapshot.CurrentBackupRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Snapshot.CurrentBackupRateInMegaBytesPerSecond') as unknown as number;
  }

  public get estimatedSecondsToCompletion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.EstimatedSecondsToCompletion'),
        outputPath: 'Snapshot.EstimatedSecondsToCompletion',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeSnapshotAccess.Snapshot.EstimatedSecondsToCompletion', props);
    return resource.getResponseField('Snapshot.EstimatedSecondsToCompletion') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.ElapsedTimeInSeconds'),
        outputPath: 'Snapshot.ElapsedTimeInSeconds',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeSnapshotAccess.Snapshot.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Snapshot.ElapsedTimeInSeconds') as unknown as number;
  }

  public get sourceRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.SourceRegion'),
        outputPath: 'Snapshot.SourceRegion',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeSnapshotAccess.Snapshot.SourceRegion', props);
    return resource.getResponseField('Snapshot.SourceRegion') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.Tags'),
        outputPath: 'Snapshot.Tags',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeSnapshotAccess.Snapshot.Tags', props);
    return resource.getResponseField('Snapshot.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get restorableNodeTypes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.RestorableNodeTypes'),
        outputPath: 'Snapshot.RestorableNodeTypes',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeSnapshotAccess.Snapshot.RestorableNodeTypes', props);
    return resource.getResponseField('Snapshot.RestorableNodeTypes') as unknown as string[];
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.EnhancedVpcRouting'),
        outputPath: 'Snapshot.EnhancedVpcRouting',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeSnapshotAccess.Snapshot.EnhancedVpcRouting', props);
    return resource.getResponseField('Snapshot.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.MaintenanceTrackName'),
        outputPath: 'Snapshot.MaintenanceTrackName',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeSnapshotAccess.Snapshot.MaintenanceTrackName', props);
    return resource.getResponseField('Snapshot.MaintenanceTrackName') as unknown as string;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.ManualSnapshotRetentionPeriod'),
        outputPath: 'Snapshot.ManualSnapshotRetentionPeriod',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeSnapshotAccess.Snapshot.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Snapshot.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRemainingDays(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.ManualSnapshotRemainingDays'),
        outputPath: 'Snapshot.ManualSnapshotRemainingDays',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeSnapshotAccess.Snapshot.ManualSnapshotRemainingDays', props);
    return resource.getResponseField('Snapshot.ManualSnapshotRemainingDays') as unknown as number;
  }

  public get snapshotRetentionStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.SnapshotRetentionStartTime'),
        outputPath: 'Snapshot.SnapshotRetentionStartTime',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeSnapshotAccess.Snapshot.SnapshotRetentionStartTime', props);
    return resource.getResponseField('Snapshot.SnapshotRetentionStartTime') as unknown as string;
  }

}

export class RedshiftBatchDeleteClusterSnapshots extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftBatchDeleteClusterSnapshotsRequest) {
    super(scope, id);
  }

  public get resources(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchDeleteClusterSnapshots',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.BatchDeleteClusterSnapshots.Resources'),
        outputPath: 'Resources',
        parameters: {
          Identifiers: this.input.identifiers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BatchDeleteClusterSnapshots.Resources', props);
    return resource.getResponseField('Resources') as unknown as string[];
  }

  public get errors(): shapes.RedshiftSnapshotErrorMessage[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchDeleteClusterSnapshots',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.BatchDeleteClusterSnapshots.Errors'),
        outputPath: 'Errors',
        parameters: {
          Identifiers: this.input.identifiers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BatchDeleteClusterSnapshots.Errors', props);
    return resource.getResponseField('Errors') as unknown as shapes.RedshiftSnapshotErrorMessage[];
  }

}

export class RedshiftBatchModifyClusterSnapshots extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftBatchModifyClusterSnapshotsMessage) {
    super(scope, id);
  }

  public get resources(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchModifyClusterSnapshots',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.BatchModifyClusterSnapshots.Resources'),
        outputPath: 'Resources',
        parameters: {
          SnapshotIdentifierList: this.input.snapshotIdentifierList,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BatchModifyClusterSnapshots.Resources', props);
    return resource.getResponseField('Resources') as unknown as string[];
  }

  public get errors(): shapes.RedshiftSnapshotErrorMessage[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchModifyClusterSnapshots',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.BatchModifyClusterSnapshots.Errors'),
        outputPath: 'Errors',
        parameters: {
          SnapshotIdentifierList: this.input.snapshotIdentifierList,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BatchModifyClusterSnapshots.Errors', props);
    return resource.getResponseField('Errors') as unknown as shapes.RedshiftSnapshotErrorMessage[];
  }

}

export class RedshiftCancelResize extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCancelResizeMessage) {
    super(scope, id);
  }

  public get targetNodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CancelResize.TargetNodeType'),
        outputPath: 'TargetNodeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelResize.TargetNodeType', props);
    return resource.getResponseField('TargetNodeType') as unknown as string;
  }

  public get targetNumberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CancelResize.TargetNumberOfNodes'),
        outputPath: 'TargetNumberOfNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelResize.TargetNumberOfNodes', props);
    return resource.getResponseField('TargetNumberOfNodes') as unknown as number;
  }

  public get targetClusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CancelResize.TargetClusterType'),
        outputPath: 'TargetClusterType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelResize.TargetClusterType', props);
    return resource.getResponseField('TargetClusterType') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CancelResize.Status'),
        outputPath: 'Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelResize.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

  public get importTablesCompleted(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CancelResize.ImportTablesCompleted'),
        outputPath: 'ImportTablesCompleted',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelResize.ImportTablesCompleted', props);
    return resource.getResponseField('ImportTablesCompleted') as unknown as string[];
  }

  public get importTablesInProgress(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CancelResize.ImportTablesInProgress'),
        outputPath: 'ImportTablesInProgress',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelResize.ImportTablesInProgress', props);
    return resource.getResponseField('ImportTablesInProgress') as unknown as string[];
  }

  public get importTablesNotStarted(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CancelResize.ImportTablesNotStarted'),
        outputPath: 'ImportTablesNotStarted',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelResize.ImportTablesNotStarted', props);
    return resource.getResponseField('ImportTablesNotStarted') as unknown as string[];
  }

  public get avgResizeRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CancelResize.AvgResizeRateInMegaBytesPerSecond'),
        outputPath: 'AvgResizeRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelResize.AvgResizeRateInMegaBytesPerSecond', props);
    return resource.getResponseField('AvgResizeRateInMegaBytesPerSecond') as unknown as number;
  }

  public get totalResizeDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CancelResize.TotalResizeDataInMegaBytes'),
        outputPath: 'TotalResizeDataInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelResize.TotalResizeDataInMegaBytes', props);
    return resource.getResponseField('TotalResizeDataInMegaBytes') as unknown as number;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CancelResize.ProgressInMegaBytes'),
        outputPath: 'ProgressInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelResize.ProgressInMegaBytes', props);
    return resource.getResponseField('ProgressInMegaBytes') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CancelResize.ElapsedTimeInSeconds'),
        outputPath: 'ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelResize.ElapsedTimeInSeconds', props);
    return resource.getResponseField('ElapsedTimeInSeconds') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CancelResize.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelResize.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

  public get resizeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CancelResize.ResizeType'),
        outputPath: 'ResizeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelResize.ResizeType', props);
    return resource.getResponseField('ResizeType') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CancelResize.Message'),
        outputPath: 'Message',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelResize.Message', props);
    return resource.getResponseField('Message') as unknown as string;
  }

  public get targetEncryptionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CancelResize.TargetEncryptionType'),
        outputPath: 'TargetEncryptionType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelResize.TargetEncryptionType', props);
    return resource.getResponseField('TargetEncryptionType') as unknown as string;
  }

  public get dataTransferProgressPercent(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CancelResize.DataTransferProgressPercent'),
        outputPath: 'DataTransferProgressPercent',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelResize.DataTransferProgressPercent', props);
    return resource.getResponseField('DataTransferProgressPercent') as unknown as number;
  }

}

export class RedshiftCopyClusterSnapshot extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCopyClusterSnapshotMessage) {
    super(scope, id);
  }

  public get snapshot(): RedshiftCopyClusterSnapshotSnapshot {
    return new RedshiftCopyClusterSnapshotSnapshot(this, 'Snapshot', this.__resources, this.input);
  }

}

export class RedshiftCopyClusterSnapshotSnapshot extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCopyClusterSnapshotMessage) {
    super(scope, id);
  }

  public get snapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.SnapshotIdentifier'),
        outputPath: 'Snapshot.SnapshotIdentifier',
        parameters: {
          SourceSnapshotIdentifier: this.input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyClusterSnapshot.Snapshot.SnapshotIdentifier', props);
    return resource.getResponseField('Snapshot.SnapshotIdentifier') as unknown as string;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.ClusterIdentifier'),
        outputPath: 'Snapshot.ClusterIdentifier',
        parameters: {
          SourceSnapshotIdentifier: this.input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyClusterSnapshot.Snapshot.ClusterIdentifier', props);
    return resource.getResponseField('Snapshot.ClusterIdentifier') as unknown as string;
  }

  public get snapshotCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.SnapshotCreateTime'),
        outputPath: 'Snapshot.SnapshotCreateTime',
        parameters: {
          SourceSnapshotIdentifier: this.input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyClusterSnapshot.Snapshot.SnapshotCreateTime', props);
    return resource.getResponseField('Snapshot.SnapshotCreateTime') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.Status'),
        outputPath: 'Snapshot.Status',
        parameters: {
          SourceSnapshotIdentifier: this.input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyClusterSnapshot.Snapshot.Status', props);
    return resource.getResponseField('Snapshot.Status') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.Port'),
        outputPath: 'Snapshot.Port',
        parameters: {
          SourceSnapshotIdentifier: this.input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyClusterSnapshot.Snapshot.Port', props);
    return resource.getResponseField('Snapshot.Port') as unknown as number;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.AvailabilityZone'),
        outputPath: 'Snapshot.AvailabilityZone',
        parameters: {
          SourceSnapshotIdentifier: this.input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyClusterSnapshot.Snapshot.AvailabilityZone', props);
    return resource.getResponseField('Snapshot.AvailabilityZone') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.ClusterCreateTime'),
        outputPath: 'Snapshot.ClusterCreateTime',
        parameters: {
          SourceSnapshotIdentifier: this.input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyClusterSnapshot.Snapshot.ClusterCreateTime', props);
    return resource.getResponseField('Snapshot.ClusterCreateTime') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.MasterUsername'),
        outputPath: 'Snapshot.MasterUsername',
        parameters: {
          SourceSnapshotIdentifier: this.input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyClusterSnapshot.Snapshot.MasterUsername', props);
    return resource.getResponseField('Snapshot.MasterUsername') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.ClusterVersion'),
        outputPath: 'Snapshot.ClusterVersion',
        parameters: {
          SourceSnapshotIdentifier: this.input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyClusterSnapshot.Snapshot.ClusterVersion', props);
    return resource.getResponseField('Snapshot.ClusterVersion') as unknown as string;
  }

  public get snapshotType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.SnapshotType'),
        outputPath: 'Snapshot.SnapshotType',
        parameters: {
          SourceSnapshotIdentifier: this.input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyClusterSnapshot.Snapshot.SnapshotType', props);
    return resource.getResponseField('Snapshot.SnapshotType') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.NodeType'),
        outputPath: 'Snapshot.NodeType',
        parameters: {
          SourceSnapshotIdentifier: this.input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyClusterSnapshot.Snapshot.NodeType', props);
    return resource.getResponseField('Snapshot.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.NumberOfNodes'),
        outputPath: 'Snapshot.NumberOfNodes',
        parameters: {
          SourceSnapshotIdentifier: this.input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyClusterSnapshot.Snapshot.NumberOfNodes', props);
    return resource.getResponseField('Snapshot.NumberOfNodes') as unknown as number;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.DBName'),
        outputPath: 'Snapshot.DBName',
        parameters: {
          SourceSnapshotIdentifier: this.input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyClusterSnapshot.Snapshot.DBName', props);
    return resource.getResponseField('Snapshot.DBName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.VpcId'),
        outputPath: 'Snapshot.VpcId',
        parameters: {
          SourceSnapshotIdentifier: this.input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyClusterSnapshot.Snapshot.VpcId', props);
    return resource.getResponseField('Snapshot.VpcId') as unknown as string;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.Encrypted'),
        outputPath: 'Snapshot.Encrypted',
        parameters: {
          SourceSnapshotIdentifier: this.input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyClusterSnapshot.Snapshot.Encrypted', props);
    return resource.getResponseField('Snapshot.Encrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.KmsKeyId'),
        outputPath: 'Snapshot.KmsKeyId',
        parameters: {
          SourceSnapshotIdentifier: this.input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyClusterSnapshot.Snapshot.KmsKeyId', props);
    return resource.getResponseField('Snapshot.KmsKeyId') as unknown as string;
  }

  public get encryptedWithHsm(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.EncryptedWithHSM'),
        outputPath: 'Snapshot.EncryptedWithHSM',
        parameters: {
          SourceSnapshotIdentifier: this.input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyClusterSnapshot.Snapshot.EncryptedWithHSM', props);
    return resource.getResponseField('Snapshot.EncryptedWithHSM') as unknown as boolean;
  }

  public get accountsWithRestoreAccess(): shapes.RedshiftAccountWithRestoreAccess[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.AccountsWithRestoreAccess'),
        outputPath: 'Snapshot.AccountsWithRestoreAccess',
        parameters: {
          SourceSnapshotIdentifier: this.input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyClusterSnapshot.Snapshot.AccountsWithRestoreAccess', props);
    return resource.getResponseField('Snapshot.AccountsWithRestoreAccess') as unknown as shapes.RedshiftAccountWithRestoreAccess[];
  }

  public get ownerAccount(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.OwnerAccount'),
        outputPath: 'Snapshot.OwnerAccount',
        parameters: {
          SourceSnapshotIdentifier: this.input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyClusterSnapshot.Snapshot.OwnerAccount', props);
    return resource.getResponseField('Snapshot.OwnerAccount') as unknown as string;
  }

  public get totalBackupSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.TotalBackupSizeInMegaBytes'),
        outputPath: 'Snapshot.TotalBackupSizeInMegaBytes',
        parameters: {
          SourceSnapshotIdentifier: this.input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyClusterSnapshot.Snapshot.TotalBackupSizeInMegaBytes', props);
    return resource.getResponseField('Snapshot.TotalBackupSizeInMegaBytes') as unknown as number;
  }

  public get actualIncrementalBackupSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.ActualIncrementalBackupSizeInMegaBytes'),
        outputPath: 'Snapshot.ActualIncrementalBackupSizeInMegaBytes',
        parameters: {
          SourceSnapshotIdentifier: this.input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyClusterSnapshot.Snapshot.ActualIncrementalBackupSizeInMegaBytes', props);
    return resource.getResponseField('Snapshot.ActualIncrementalBackupSizeInMegaBytes') as unknown as number;
  }

  public get backupProgressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.BackupProgressInMegaBytes'),
        outputPath: 'Snapshot.BackupProgressInMegaBytes',
        parameters: {
          SourceSnapshotIdentifier: this.input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyClusterSnapshot.Snapshot.BackupProgressInMegaBytes', props);
    return resource.getResponseField('Snapshot.BackupProgressInMegaBytes') as unknown as number;
  }

  public get currentBackupRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.CurrentBackupRateInMegaBytesPerSecond'),
        outputPath: 'Snapshot.CurrentBackupRateInMegaBytesPerSecond',
        parameters: {
          SourceSnapshotIdentifier: this.input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyClusterSnapshot.Snapshot.CurrentBackupRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Snapshot.CurrentBackupRateInMegaBytesPerSecond') as unknown as number;
  }

  public get estimatedSecondsToCompletion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.EstimatedSecondsToCompletion'),
        outputPath: 'Snapshot.EstimatedSecondsToCompletion',
        parameters: {
          SourceSnapshotIdentifier: this.input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyClusterSnapshot.Snapshot.EstimatedSecondsToCompletion', props);
    return resource.getResponseField('Snapshot.EstimatedSecondsToCompletion') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.ElapsedTimeInSeconds'),
        outputPath: 'Snapshot.ElapsedTimeInSeconds',
        parameters: {
          SourceSnapshotIdentifier: this.input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyClusterSnapshot.Snapshot.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Snapshot.ElapsedTimeInSeconds') as unknown as number;
  }

  public get sourceRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.SourceRegion'),
        outputPath: 'Snapshot.SourceRegion',
        parameters: {
          SourceSnapshotIdentifier: this.input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyClusterSnapshot.Snapshot.SourceRegion', props);
    return resource.getResponseField('Snapshot.SourceRegion') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.Tags'),
        outputPath: 'Snapshot.Tags',
        parameters: {
          SourceSnapshotIdentifier: this.input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyClusterSnapshot.Snapshot.Tags', props);
    return resource.getResponseField('Snapshot.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get restorableNodeTypes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.RestorableNodeTypes'),
        outputPath: 'Snapshot.RestorableNodeTypes',
        parameters: {
          SourceSnapshotIdentifier: this.input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyClusterSnapshot.Snapshot.RestorableNodeTypes', props);
    return resource.getResponseField('Snapshot.RestorableNodeTypes') as unknown as string[];
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.EnhancedVpcRouting'),
        outputPath: 'Snapshot.EnhancedVpcRouting',
        parameters: {
          SourceSnapshotIdentifier: this.input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyClusterSnapshot.Snapshot.EnhancedVpcRouting', props);
    return resource.getResponseField('Snapshot.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.MaintenanceTrackName'),
        outputPath: 'Snapshot.MaintenanceTrackName',
        parameters: {
          SourceSnapshotIdentifier: this.input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyClusterSnapshot.Snapshot.MaintenanceTrackName', props);
    return resource.getResponseField('Snapshot.MaintenanceTrackName') as unknown as string;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.ManualSnapshotRetentionPeriod'),
        outputPath: 'Snapshot.ManualSnapshotRetentionPeriod',
        parameters: {
          SourceSnapshotIdentifier: this.input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyClusterSnapshot.Snapshot.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Snapshot.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRemainingDays(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.ManualSnapshotRemainingDays'),
        outputPath: 'Snapshot.ManualSnapshotRemainingDays',
        parameters: {
          SourceSnapshotIdentifier: this.input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyClusterSnapshot.Snapshot.ManualSnapshotRemainingDays', props);
    return resource.getResponseField('Snapshot.ManualSnapshotRemainingDays') as unknown as number;
  }

  public get snapshotRetentionStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.SnapshotRetentionStartTime'),
        outputPath: 'Snapshot.SnapshotRetentionStartTime',
        parameters: {
          SourceSnapshotIdentifier: this.input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyClusterSnapshot.Snapshot.SnapshotRetentionStartTime', props);
    return resource.getResponseField('Snapshot.SnapshotRetentionStartTime') as unknown as string;
  }

}

export class RedshiftCreateCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCreateClusterMessage) {
    super(scope, id);
  }

  public get cluster(): RedshiftCreateClusterCluster {
    return new RedshiftCreateClusterCluster(this, 'Cluster', this.__resources, this.input);
  }

}

export class RedshiftCreateClusterCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCreateClusterMessage) {
    super(scope, id);
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ClusterIdentifier'),
        outputPath: 'Cluster.ClusterIdentifier',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.ClusterIdentifier') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.NodeType'),
        outputPath: 'Cluster.NodeType',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.NodeType', props);
    return resource.getResponseField('Cluster.NodeType') as unknown as string;
  }

  public get clusterStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ClusterStatus'),
        outputPath: 'Cluster.ClusterStatus',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.ClusterStatus', props);
    return resource.getResponseField('Cluster.ClusterStatus') as unknown as string;
  }

  public get clusterAvailabilityStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ClusterAvailabilityStatus'),
        outputPath: 'Cluster.ClusterAvailabilityStatus',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.ClusterAvailabilityStatus', props);
    return resource.getResponseField('Cluster.ClusterAvailabilityStatus') as unknown as string;
  }

  public get modifyStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ModifyStatus'),
        outputPath: 'Cluster.ModifyStatus',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.ModifyStatus', props);
    return resource.getResponseField('Cluster.ModifyStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.MasterUsername'),
        outputPath: 'Cluster.MasterUsername',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.MasterUsername', props);
    return resource.getResponseField('Cluster.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.DBName'),
        outputPath: 'Cluster.DBName',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.DBName', props);
    return resource.getResponseField('Cluster.DBName') as unknown as string;
  }

  public get endpoint(): RedshiftCreateClusterClusterEndpoint {
    return new RedshiftCreateClusterClusterEndpoint(this, 'Endpoint', this.__resources, this.input);
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ClusterCreateTime'),
        outputPath: 'Cluster.ClusterCreateTime',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.ClusterCreateTime', props);
    return resource.getResponseField('Cluster.ClusterCreateTime') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.AutomatedSnapshotRetentionPeriod',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ManualSnapshotRetentionPeriod',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterSecurityGroups(): shapes.RedshiftClusterSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ClusterSecurityGroups'),
        outputPath: 'Cluster.ClusterSecurityGroups',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.ClusterSecurityGroups', props);
    return resource.getResponseField('Cluster.ClusterSecurityGroups') as unknown as shapes.RedshiftClusterSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RedshiftVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.VpcSecurityGroups'),
        outputPath: 'Cluster.VpcSecurityGroups',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.VpcSecurityGroups', props);
    return resource.getResponseField('Cluster.VpcSecurityGroups') as unknown as shapes.RedshiftVpcSecurityGroupMembership[];
  }

  public get clusterParameterGroups(): shapes.RedshiftClusterParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ClusterParameterGroups'),
        outputPath: 'Cluster.ClusterParameterGroups',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.ClusterParameterGroups', props);
    return resource.getResponseField('Cluster.ClusterParameterGroups') as unknown as shapes.RedshiftClusterParameterGroupStatus[];
  }

  public get clusterSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ClusterSubnetGroupName'),
        outputPath: 'Cluster.ClusterSubnetGroupName',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.ClusterSubnetGroupName', props);
    return resource.getResponseField('Cluster.ClusterSubnetGroupName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.VpcId'),
        outputPath: 'Cluster.VpcId',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.VpcId', props);
    return resource.getResponseField('Cluster.VpcId') as unknown as string;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.AvailabilityZone'),
        outputPath: 'Cluster.AvailabilityZone',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.AvailabilityZone', props);
    return resource.getResponseField('Cluster.AvailabilityZone') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.PreferredMaintenanceWindow'),
        outputPath: 'Cluster.PreferredMaintenanceWindow',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('Cluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RedshiftCreateClusterClusterPendingModifiedValues {
    return new RedshiftCreateClusterClusterPendingModifiedValues(this, 'PendingModifiedValues', this.__resources, this.input);
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ClusterVersion'),
        outputPath: 'Cluster.ClusterVersion',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.ClusterVersion', props);
    return resource.getResponseField('Cluster.ClusterVersion') as unknown as string;
  }

  public get allowVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.AllowVersionUpgrade'),
        outputPath: 'Cluster.AllowVersionUpgrade',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.AllowVersionUpgrade', props);
    return resource.getResponseField('Cluster.AllowVersionUpgrade') as unknown as boolean;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.NumberOfNodes'),
        outputPath: 'Cluster.NumberOfNodes',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.NumberOfNodes', props);
    return resource.getResponseField('Cluster.NumberOfNodes') as unknown as number;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.PubliclyAccessible'),
        outputPath: 'Cluster.PubliclyAccessible',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PubliclyAccessible') as unknown as boolean;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.Encrypted'),
        outputPath: 'Cluster.Encrypted',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.Encrypted', props);
    return resource.getResponseField('Cluster.Encrypted') as unknown as boolean;
  }

  public get restoreStatus(): RedshiftCreateClusterClusterRestoreStatus {
    return new RedshiftCreateClusterClusterRestoreStatus(this, 'RestoreStatus', this.__resources, this.input);
  }

  public get dataTransferProgress(): RedshiftCreateClusterClusterDataTransferProgress {
    return new RedshiftCreateClusterClusterDataTransferProgress(this, 'DataTransferProgress', this.__resources, this.input);
  }

  public get hsmStatus(): RedshiftCreateClusterClusterHsmStatus {
    return new RedshiftCreateClusterClusterHsmStatus(this, 'HsmStatus', this.__resources, this.input);
  }

  public get clusterSnapshotCopyStatus(): RedshiftCreateClusterClusterClusterSnapshotCopyStatus {
    return new RedshiftCreateClusterClusterClusterSnapshotCopyStatus(this, 'ClusterSnapshotCopyStatus', this.__resources, this.input);
  }

  public get clusterPublicKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ClusterPublicKey'),
        outputPath: 'Cluster.ClusterPublicKey',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.ClusterPublicKey', props);
    return resource.getResponseField('Cluster.ClusterPublicKey') as unknown as string;
  }

  public get clusterNodes(): shapes.RedshiftClusterNode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ClusterNodes'),
        outputPath: 'Cluster.ClusterNodes',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.ClusterNodes', props);
    return resource.getResponseField('Cluster.ClusterNodes') as unknown as shapes.RedshiftClusterNode[];
  }

  public get elasticIpStatus(): RedshiftCreateClusterClusterElasticIpStatus {
    return new RedshiftCreateClusterClusterElasticIpStatus(this, 'ElasticIpStatus', this.__resources, this.input);
  }

  public get clusterRevisionNumber(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ClusterRevisionNumber'),
        outputPath: 'Cluster.ClusterRevisionNumber',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.ClusterRevisionNumber', props);
    return resource.getResponseField('Cluster.ClusterRevisionNumber') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.Tags'),
        outputPath: 'Cluster.Tags',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.Tags', props);
    return resource.getResponseField('Cluster.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.KmsKeyId'),
        outputPath: 'Cluster.KmsKeyId',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.KmsKeyId', props);
    return resource.getResponseField('Cluster.KmsKeyId') as unknown as string;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.EnhancedVpcRouting'),
        outputPath: 'Cluster.EnhancedVpcRouting',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.EnhancedVpcRouting') as unknown as boolean;
  }

  public get iamRoles(): shapes.RedshiftClusterIamRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.IamRoles'),
        outputPath: 'Cluster.IamRoles',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.IamRoles', props);
    return resource.getResponseField('Cluster.IamRoles') as unknown as shapes.RedshiftClusterIamRole[];
  }

  public get pendingActions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.PendingActions'),
        outputPath: 'Cluster.PendingActions',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.PendingActions', props);
    return resource.getResponseField('Cluster.PendingActions') as unknown as string[];
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.MaintenanceTrackName'),
        outputPath: 'Cluster.MaintenanceTrackName',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.MaintenanceTrackName') as unknown as string;
  }

  public get elasticResizeNumberOfNodeOptions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ElasticResizeNumberOfNodeOptions'),
        outputPath: 'Cluster.ElasticResizeNumberOfNodeOptions',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.ElasticResizeNumberOfNodeOptions', props);
    return resource.getResponseField('Cluster.ElasticResizeNumberOfNodeOptions') as unknown as string;
  }

  public get deferredMaintenanceWindows(): shapes.RedshiftDeferredMaintenanceWindow[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.DeferredMaintenanceWindows'),
        outputPath: 'Cluster.DeferredMaintenanceWindows',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.DeferredMaintenanceWindows', props);
    return resource.getResponseField('Cluster.DeferredMaintenanceWindows') as unknown as shapes.RedshiftDeferredMaintenanceWindow[];
  }

  public get snapshotScheduleIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.SnapshotScheduleIdentifier'),
        outputPath: 'Cluster.SnapshotScheduleIdentifier',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.SnapshotScheduleIdentifier', props);
    return resource.getResponseField('Cluster.SnapshotScheduleIdentifier') as unknown as string;
  }

  public get snapshotScheduleState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.SnapshotScheduleState'),
        outputPath: 'Cluster.SnapshotScheduleState',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.SnapshotScheduleState', props);
    return resource.getResponseField('Cluster.SnapshotScheduleState') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ExpectedNextSnapshotScheduleTime'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTime',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.ExpectedNextSnapshotScheduleTime', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTime') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTimeStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ExpectedNextSnapshotScheduleTimeStatus'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTimeStatus',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.ExpectedNextSnapshotScheduleTimeStatus', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTimeStatus') as unknown as string;
  }

  public get nextMaintenanceWindowStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.NextMaintenanceWindowStartTime'),
        outputPath: 'Cluster.NextMaintenanceWindowStartTime',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.NextMaintenanceWindowStartTime', props);
    return resource.getResponseField('Cluster.NextMaintenanceWindowStartTime') as unknown as string;
  }

  public get resizeInfo(): RedshiftCreateClusterClusterResizeInfo {
    return new RedshiftCreateClusterClusterResizeInfo(this, 'ResizeInfo', this.__resources, this.input);
  }

  public get clusterNamespaceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ClusterNamespaceArn'),
        outputPath: 'Cluster.ClusterNamespaceArn',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.ClusterNamespaceArn', props);
    return resource.getResponseField('Cluster.ClusterNamespaceArn') as unknown as string;
  }

}

export class RedshiftCreateClusterClusterEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCreateClusterMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.Endpoint.Address'),
        outputPath: 'Cluster.Endpoint.Address',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.Endpoint.Address', props);
    return resource.getResponseField('Cluster.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.Endpoint.Port'),
        outputPath: 'Cluster.Endpoint.Port',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.Endpoint.Port', props);
    return resource.getResponseField('Cluster.Endpoint.Port') as unknown as number;
  }

}

export class RedshiftCreateClusterClusterPendingModifiedValues extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCreateClusterMessage) {
    super(scope, id);
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'Cluster.PendingModifiedValues.MasterUserPassword',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.PendingModifiedValues.NodeType'),
        outputPath: 'Cluster.PendingModifiedValues.NodeType',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.PendingModifiedValues.NodeType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.PendingModifiedValues.NumberOfNodes'),
        outputPath: 'Cluster.PendingModifiedValues.NumberOfNodes',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.PendingModifiedValues.NumberOfNodes', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NumberOfNodes') as unknown as number;
  }

  public get clusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.PendingModifiedValues.ClusterType'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterType',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.PendingModifiedValues.ClusterType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterType') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.PendingModifiedValues.ClusterVersion'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterVersion',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.PendingModifiedValues.ClusterVersion', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterVersion') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.PendingModifiedValues.ClusterIdentifier'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterIdentifier',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.PendingModifiedValues.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterIdentifier') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.PendingModifiedValues.PubliclyAccessible'),
        outputPath: 'Cluster.PendingModifiedValues.PubliclyAccessible',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.PendingModifiedValues.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.PubliclyAccessible') as unknown as boolean;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.PendingModifiedValues.EnhancedVpcRouting'),
        outputPath: 'Cluster.PendingModifiedValues.EnhancedVpcRouting',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.PendingModifiedValues.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.PendingModifiedValues.MaintenanceTrackName'),
        outputPath: 'Cluster.PendingModifiedValues.MaintenanceTrackName',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.PendingModifiedValues.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MaintenanceTrackName') as unknown as string;
  }

  public get encryptionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.PendingModifiedValues.EncryptionType'),
        outputPath: 'Cluster.PendingModifiedValues.EncryptionType',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.PendingModifiedValues.EncryptionType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EncryptionType') as unknown as string;
  }

}

export class RedshiftCreateClusterClusterRestoreStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCreateClusterMessage) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.RestoreStatus.Status'),
        outputPath: 'Cluster.RestoreStatus.Status',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.RestoreStatus.Status', props);
    return resource.getResponseField('Cluster.RestoreStatus.Status') as unknown as string;
  }

  public get currentRestoreRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond') as unknown as number;
  }

  public get snapshotSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.RestoreStatus.SnapshotSizeInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.SnapshotSizeInMegaBytes',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.RestoreStatus.SnapshotSizeInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.SnapshotSizeInMegaBytes') as unknown as number;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.RestoreStatus.ProgressInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.ProgressInMegaBytes',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.RestoreStatus.ProgressInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.ProgressInMegaBytes') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.RestoreStatus.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.RestoreStatus.ElapsedTimeInSeconds',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.RestoreStatus.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.ElapsedTimeInSeconds') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

}

export class RedshiftCreateClusterClusterDataTransferProgress extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCreateClusterMessage) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.DataTransferProgress.Status'),
        outputPath: 'Cluster.DataTransferProgress.Status',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.DataTransferProgress.Status', props);
    return resource.getResponseField('Cluster.DataTransferProgress.Status') as unknown as string;
  }

  public get currentRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond') as unknown as number;
  }

  public get totalDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.DataTransferProgress.TotalDataInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.TotalDataInMegaBytes',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.DataTransferProgress.TotalDataInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.TotalDataInMegaBytes') as unknown as number;
  }

  public get dataTransferredInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.DataTransferProgress.DataTransferredInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.DataTransferredInMegaBytes',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.DataTransferProgress.DataTransferredInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.DataTransferredInMegaBytes') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.DataTransferProgress.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.ElapsedTimeInSeconds',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.DataTransferProgress.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.ElapsedTimeInSeconds') as unknown as number;
  }

}

export class RedshiftCreateClusterClusterHsmStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCreateClusterMessage) {
    super(scope, id);
  }

  public get hsmClientCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.HsmStatus.HsmClientCertificateIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmClientCertificateIdentifier',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.HsmStatus.HsmClientCertificateIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmClientCertificateIdentifier') as unknown as string;
  }

  public get hsmConfigurationIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.HsmStatus.HsmConfigurationIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmConfigurationIdentifier',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.HsmStatus.HsmConfigurationIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmConfigurationIdentifier') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.HsmStatus.Status'),
        outputPath: 'Cluster.HsmStatus.Status',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.HsmStatus.Status', props);
    return resource.getResponseField('Cluster.HsmStatus.Status') as unknown as string;
  }

}

export class RedshiftCreateClusterClusterClusterSnapshotCopyStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCreateClusterMessage) {
    super(scope, id);
  }

  public get destinationRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ClusterSnapshotCopyStatus.DestinationRegion'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.DestinationRegion',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.ClusterSnapshotCopyStatus.DestinationRegion', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.DestinationRegion') as unknown as string;
  }

  public get retentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.RetentionPeriod',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.RetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get snapshotCopyGrantName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName') as unknown as string;
  }

}

export class RedshiftCreateClusterClusterElasticIpStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCreateClusterMessage) {
    super(scope, id);
  }

  public get elasticIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ElasticIpStatus.ElasticIp'),
        outputPath: 'Cluster.ElasticIpStatus.ElasticIp',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.ElasticIpStatus.ElasticIp', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.ElasticIp') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ElasticIpStatus.Status'),
        outputPath: 'Cluster.ElasticIpStatus.Status',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.ElasticIpStatus.Status', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.Status') as unknown as string;
  }

}

export class RedshiftCreateClusterClusterResizeInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCreateClusterMessage) {
    super(scope, id);
  }

  public get resizeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ResizeInfo.ResizeType'),
        outputPath: 'Cluster.ResizeInfo.ResizeType',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.ResizeInfo.ResizeType', props);
    return resource.getResponseField('Cluster.ResizeInfo.ResizeType') as unknown as string;
  }

  public get allowCancelResize(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ResizeInfo.AllowCancelResize'),
        outputPath: 'Cluster.ResizeInfo.AllowCancelResize',
        parameters: {
          DBName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          AvailabilityZone: this.input.availabilityZone,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Port: this.input.port,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          NumberOfNodes: this.input.numberOfNodes,
          PubliclyAccessible: this.input.publiclyAccessible,
          Encrypted: this.input.encrypted,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCluster.Cluster.ResizeInfo.AllowCancelResize', props);
    return resource.getResponseField('Cluster.ResizeInfo.AllowCancelResize') as unknown as boolean;
  }

}

export class RedshiftCreateClusterParameterGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCreateClusterParameterGroupMessage) {
    super(scope, id);
  }

  public get clusterParameterGroup(): RedshiftCreateClusterParameterGroupClusterParameterGroup {
    return new RedshiftCreateClusterParameterGroupClusterParameterGroup(this, 'ClusterParameterGroup', this.__resources, this.input);
  }

}

export class RedshiftCreateClusterParameterGroupClusterParameterGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCreateClusterParameterGroupMessage) {
    super(scope, id);
  }

  public get parameterGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterParameterGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterParameterGroup.ClusterParameterGroup.ParameterGroupName'),
        outputPath: 'ClusterParameterGroup.ParameterGroupName',
        parameters: {
          ParameterGroupName: this.input.parameterGroupName,
          ParameterGroupFamily: this.input.parameterGroupFamily,
          Description: this.input.description,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterParameterGroup.ClusterParameterGroup.ParameterGroupName', props);
    return resource.getResponseField('ClusterParameterGroup.ParameterGroupName') as unknown as string;
  }

  public get parameterGroupFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterParameterGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterParameterGroup.ClusterParameterGroup.ParameterGroupFamily'),
        outputPath: 'ClusterParameterGroup.ParameterGroupFamily',
        parameters: {
          ParameterGroupName: this.input.parameterGroupName,
          ParameterGroupFamily: this.input.parameterGroupFamily,
          Description: this.input.description,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterParameterGroup.ClusterParameterGroup.ParameterGroupFamily', props);
    return resource.getResponseField('ClusterParameterGroup.ParameterGroupFamily') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterParameterGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterParameterGroup.ClusterParameterGroup.Description'),
        outputPath: 'ClusterParameterGroup.Description',
        parameters: {
          ParameterGroupName: this.input.parameterGroupName,
          ParameterGroupFamily: this.input.parameterGroupFamily,
          Description: this.input.description,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterParameterGroup.ClusterParameterGroup.Description', props);
    return resource.getResponseField('ClusterParameterGroup.Description') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterParameterGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterParameterGroup.ClusterParameterGroup.Tags'),
        outputPath: 'ClusterParameterGroup.Tags',
        parameters: {
          ParameterGroupName: this.input.parameterGroupName,
          ParameterGroupFamily: this.input.parameterGroupFamily,
          Description: this.input.description,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterParameterGroup.ClusterParameterGroup.Tags', props);
    return resource.getResponseField('ClusterParameterGroup.Tags') as unknown as shapes.RedshiftTag[];
  }

}

export class RedshiftCreateClusterSecurityGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCreateClusterSecurityGroupMessage) {
    super(scope, id);
  }

  public get clusterSecurityGroup(): RedshiftCreateClusterSecurityGroupClusterSecurityGroup {
    return new RedshiftCreateClusterSecurityGroupClusterSecurityGroup(this, 'ClusterSecurityGroup', this.__resources, this.input);
  }

}

export class RedshiftCreateClusterSecurityGroupClusterSecurityGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCreateClusterSecurityGroupMessage) {
    super(scope, id);
  }

  public get clusterSecurityGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSecurityGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSecurityGroup.ClusterSecurityGroup.ClusterSecurityGroupName'),
        outputPath: 'ClusterSecurityGroup.ClusterSecurityGroupName',
        parameters: {
          ClusterSecurityGroupName: this.input.clusterSecurityGroupName,
          Description: this.input.description,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSecurityGroup.ClusterSecurityGroup.ClusterSecurityGroupName', props);
    return resource.getResponseField('ClusterSecurityGroup.ClusterSecurityGroupName') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSecurityGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSecurityGroup.ClusterSecurityGroup.Description'),
        outputPath: 'ClusterSecurityGroup.Description',
        parameters: {
          ClusterSecurityGroupName: this.input.clusterSecurityGroupName,
          Description: this.input.description,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSecurityGroup.ClusterSecurityGroup.Description', props);
    return resource.getResponseField('ClusterSecurityGroup.Description') as unknown as string;
  }

  public get ec2SecurityGroups(): shapes.RedshiftEc2SecurityGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSecurityGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSecurityGroup.ClusterSecurityGroup.EC2SecurityGroups'),
        outputPath: 'ClusterSecurityGroup.EC2SecurityGroups',
        parameters: {
          ClusterSecurityGroupName: this.input.clusterSecurityGroupName,
          Description: this.input.description,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSecurityGroup.ClusterSecurityGroup.EC2SecurityGroups', props);
    return resource.getResponseField('ClusterSecurityGroup.EC2SecurityGroups') as unknown as shapes.RedshiftEc2SecurityGroup[];
  }

  public get ipRanges(): shapes.RedshiftIpRange[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSecurityGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSecurityGroup.ClusterSecurityGroup.IPRanges'),
        outputPath: 'ClusterSecurityGroup.IPRanges',
        parameters: {
          ClusterSecurityGroupName: this.input.clusterSecurityGroupName,
          Description: this.input.description,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSecurityGroup.ClusterSecurityGroup.IPRanges', props);
    return resource.getResponseField('ClusterSecurityGroup.IPRanges') as unknown as shapes.RedshiftIpRange[];
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSecurityGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSecurityGroup.ClusterSecurityGroup.Tags'),
        outputPath: 'ClusterSecurityGroup.Tags',
        parameters: {
          ClusterSecurityGroupName: this.input.clusterSecurityGroupName,
          Description: this.input.description,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSecurityGroup.ClusterSecurityGroup.Tags', props);
    return resource.getResponseField('ClusterSecurityGroup.Tags') as unknown as shapes.RedshiftTag[];
  }

}

export class RedshiftCreateClusterSnapshot extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCreateClusterSnapshotMessage) {
    super(scope, id);
  }

  public get snapshot(): RedshiftCreateClusterSnapshotSnapshot {
    return new RedshiftCreateClusterSnapshotSnapshot(this, 'Snapshot', this.__resources, this.input);
  }

}

export class RedshiftCreateClusterSnapshotSnapshot extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCreateClusterSnapshotMessage) {
    super(scope, id);
  }

  public get snapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.SnapshotIdentifier'),
        outputPath: 'Snapshot.SnapshotIdentifier',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ClusterIdentifier: this.input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSnapshot.Snapshot.SnapshotIdentifier', props);
    return resource.getResponseField('Snapshot.SnapshotIdentifier') as unknown as string;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.ClusterIdentifier'),
        outputPath: 'Snapshot.ClusterIdentifier',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ClusterIdentifier: this.input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSnapshot.Snapshot.ClusterIdentifier', props);
    return resource.getResponseField('Snapshot.ClusterIdentifier') as unknown as string;
  }

  public get snapshotCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.SnapshotCreateTime'),
        outputPath: 'Snapshot.SnapshotCreateTime',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ClusterIdentifier: this.input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSnapshot.Snapshot.SnapshotCreateTime', props);
    return resource.getResponseField('Snapshot.SnapshotCreateTime') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.Status'),
        outputPath: 'Snapshot.Status',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ClusterIdentifier: this.input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSnapshot.Snapshot.Status', props);
    return resource.getResponseField('Snapshot.Status') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.Port'),
        outputPath: 'Snapshot.Port',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ClusterIdentifier: this.input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSnapshot.Snapshot.Port', props);
    return resource.getResponseField('Snapshot.Port') as unknown as number;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.AvailabilityZone'),
        outputPath: 'Snapshot.AvailabilityZone',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ClusterIdentifier: this.input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSnapshot.Snapshot.AvailabilityZone', props);
    return resource.getResponseField('Snapshot.AvailabilityZone') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.ClusterCreateTime'),
        outputPath: 'Snapshot.ClusterCreateTime',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ClusterIdentifier: this.input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSnapshot.Snapshot.ClusterCreateTime', props);
    return resource.getResponseField('Snapshot.ClusterCreateTime') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.MasterUsername'),
        outputPath: 'Snapshot.MasterUsername',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ClusterIdentifier: this.input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSnapshot.Snapshot.MasterUsername', props);
    return resource.getResponseField('Snapshot.MasterUsername') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.ClusterVersion'),
        outputPath: 'Snapshot.ClusterVersion',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ClusterIdentifier: this.input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSnapshot.Snapshot.ClusterVersion', props);
    return resource.getResponseField('Snapshot.ClusterVersion') as unknown as string;
  }

  public get snapshotType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.SnapshotType'),
        outputPath: 'Snapshot.SnapshotType',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ClusterIdentifier: this.input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSnapshot.Snapshot.SnapshotType', props);
    return resource.getResponseField('Snapshot.SnapshotType') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.NodeType'),
        outputPath: 'Snapshot.NodeType',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ClusterIdentifier: this.input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSnapshot.Snapshot.NodeType', props);
    return resource.getResponseField('Snapshot.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.NumberOfNodes'),
        outputPath: 'Snapshot.NumberOfNodes',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ClusterIdentifier: this.input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSnapshot.Snapshot.NumberOfNodes', props);
    return resource.getResponseField('Snapshot.NumberOfNodes') as unknown as number;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.DBName'),
        outputPath: 'Snapshot.DBName',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ClusterIdentifier: this.input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSnapshot.Snapshot.DBName', props);
    return resource.getResponseField('Snapshot.DBName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.VpcId'),
        outputPath: 'Snapshot.VpcId',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ClusterIdentifier: this.input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSnapshot.Snapshot.VpcId', props);
    return resource.getResponseField('Snapshot.VpcId') as unknown as string;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.Encrypted'),
        outputPath: 'Snapshot.Encrypted',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ClusterIdentifier: this.input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSnapshot.Snapshot.Encrypted', props);
    return resource.getResponseField('Snapshot.Encrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.KmsKeyId'),
        outputPath: 'Snapshot.KmsKeyId',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ClusterIdentifier: this.input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSnapshot.Snapshot.KmsKeyId', props);
    return resource.getResponseField('Snapshot.KmsKeyId') as unknown as string;
  }

  public get encryptedWithHsm(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.EncryptedWithHSM'),
        outputPath: 'Snapshot.EncryptedWithHSM',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ClusterIdentifier: this.input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSnapshot.Snapshot.EncryptedWithHSM', props);
    return resource.getResponseField('Snapshot.EncryptedWithHSM') as unknown as boolean;
  }

  public get accountsWithRestoreAccess(): shapes.RedshiftAccountWithRestoreAccess[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.AccountsWithRestoreAccess'),
        outputPath: 'Snapshot.AccountsWithRestoreAccess',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ClusterIdentifier: this.input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSnapshot.Snapshot.AccountsWithRestoreAccess', props);
    return resource.getResponseField('Snapshot.AccountsWithRestoreAccess') as unknown as shapes.RedshiftAccountWithRestoreAccess[];
  }

  public get ownerAccount(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.OwnerAccount'),
        outputPath: 'Snapshot.OwnerAccount',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ClusterIdentifier: this.input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSnapshot.Snapshot.OwnerAccount', props);
    return resource.getResponseField('Snapshot.OwnerAccount') as unknown as string;
  }

  public get totalBackupSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.TotalBackupSizeInMegaBytes'),
        outputPath: 'Snapshot.TotalBackupSizeInMegaBytes',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ClusterIdentifier: this.input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSnapshot.Snapshot.TotalBackupSizeInMegaBytes', props);
    return resource.getResponseField('Snapshot.TotalBackupSizeInMegaBytes') as unknown as number;
  }

  public get actualIncrementalBackupSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.ActualIncrementalBackupSizeInMegaBytes'),
        outputPath: 'Snapshot.ActualIncrementalBackupSizeInMegaBytes',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ClusterIdentifier: this.input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSnapshot.Snapshot.ActualIncrementalBackupSizeInMegaBytes', props);
    return resource.getResponseField('Snapshot.ActualIncrementalBackupSizeInMegaBytes') as unknown as number;
  }

  public get backupProgressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.BackupProgressInMegaBytes'),
        outputPath: 'Snapshot.BackupProgressInMegaBytes',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ClusterIdentifier: this.input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSnapshot.Snapshot.BackupProgressInMegaBytes', props);
    return resource.getResponseField('Snapshot.BackupProgressInMegaBytes') as unknown as number;
  }

  public get currentBackupRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.CurrentBackupRateInMegaBytesPerSecond'),
        outputPath: 'Snapshot.CurrentBackupRateInMegaBytesPerSecond',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ClusterIdentifier: this.input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSnapshot.Snapshot.CurrentBackupRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Snapshot.CurrentBackupRateInMegaBytesPerSecond') as unknown as number;
  }

  public get estimatedSecondsToCompletion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.EstimatedSecondsToCompletion'),
        outputPath: 'Snapshot.EstimatedSecondsToCompletion',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ClusterIdentifier: this.input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSnapshot.Snapshot.EstimatedSecondsToCompletion', props);
    return resource.getResponseField('Snapshot.EstimatedSecondsToCompletion') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.ElapsedTimeInSeconds'),
        outputPath: 'Snapshot.ElapsedTimeInSeconds',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ClusterIdentifier: this.input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSnapshot.Snapshot.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Snapshot.ElapsedTimeInSeconds') as unknown as number;
  }

  public get sourceRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.SourceRegion'),
        outputPath: 'Snapshot.SourceRegion',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ClusterIdentifier: this.input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSnapshot.Snapshot.SourceRegion', props);
    return resource.getResponseField('Snapshot.SourceRegion') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.Tags'),
        outputPath: 'Snapshot.Tags',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ClusterIdentifier: this.input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSnapshot.Snapshot.Tags', props);
    return resource.getResponseField('Snapshot.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get restorableNodeTypes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.RestorableNodeTypes'),
        outputPath: 'Snapshot.RestorableNodeTypes',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ClusterIdentifier: this.input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSnapshot.Snapshot.RestorableNodeTypes', props);
    return resource.getResponseField('Snapshot.RestorableNodeTypes') as unknown as string[];
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.EnhancedVpcRouting'),
        outputPath: 'Snapshot.EnhancedVpcRouting',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ClusterIdentifier: this.input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSnapshot.Snapshot.EnhancedVpcRouting', props);
    return resource.getResponseField('Snapshot.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.MaintenanceTrackName'),
        outputPath: 'Snapshot.MaintenanceTrackName',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ClusterIdentifier: this.input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSnapshot.Snapshot.MaintenanceTrackName', props);
    return resource.getResponseField('Snapshot.MaintenanceTrackName') as unknown as string;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.ManualSnapshotRetentionPeriod'),
        outputPath: 'Snapshot.ManualSnapshotRetentionPeriod',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ClusterIdentifier: this.input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSnapshot.Snapshot.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Snapshot.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRemainingDays(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.ManualSnapshotRemainingDays'),
        outputPath: 'Snapshot.ManualSnapshotRemainingDays',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ClusterIdentifier: this.input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSnapshot.Snapshot.ManualSnapshotRemainingDays', props);
    return resource.getResponseField('Snapshot.ManualSnapshotRemainingDays') as unknown as number;
  }

  public get snapshotRetentionStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.SnapshotRetentionStartTime'),
        outputPath: 'Snapshot.SnapshotRetentionStartTime',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ClusterIdentifier: this.input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSnapshot.Snapshot.SnapshotRetentionStartTime', props);
    return resource.getResponseField('Snapshot.SnapshotRetentionStartTime') as unknown as string;
  }

}

export class RedshiftCreateClusterSubnetGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCreateClusterSubnetGroupMessage) {
    super(scope, id);
  }

  public get clusterSubnetGroup(): RedshiftCreateClusterSubnetGroupClusterSubnetGroup {
    return new RedshiftCreateClusterSubnetGroupClusterSubnetGroup(this, 'ClusterSubnetGroup', this.__resources, this.input);
  }

}

export class RedshiftCreateClusterSubnetGroupClusterSubnetGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCreateClusterSubnetGroupMessage) {
    super(scope, id);
  }

  public get clusterSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSubnetGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSubnetGroup.ClusterSubnetGroup.ClusterSubnetGroupName'),
        outputPath: 'ClusterSubnetGroup.ClusterSubnetGroupName',
        parameters: {
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          Description: this.input.description,
          SubnetIds: this.input.subnetIds,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSubnetGroup.ClusterSubnetGroup.ClusterSubnetGroupName', props);
    return resource.getResponseField('ClusterSubnetGroup.ClusterSubnetGroupName') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSubnetGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSubnetGroup.ClusterSubnetGroup.Description'),
        outputPath: 'ClusterSubnetGroup.Description',
        parameters: {
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          Description: this.input.description,
          SubnetIds: this.input.subnetIds,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSubnetGroup.ClusterSubnetGroup.Description', props);
    return resource.getResponseField('ClusterSubnetGroup.Description') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSubnetGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSubnetGroup.ClusterSubnetGroup.VpcId'),
        outputPath: 'ClusterSubnetGroup.VpcId',
        parameters: {
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          Description: this.input.description,
          SubnetIds: this.input.subnetIds,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSubnetGroup.ClusterSubnetGroup.VpcId', props);
    return resource.getResponseField('ClusterSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSubnetGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSubnetGroup.ClusterSubnetGroup.SubnetGroupStatus'),
        outputPath: 'ClusterSubnetGroup.SubnetGroupStatus',
        parameters: {
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          Description: this.input.description,
          SubnetIds: this.input.subnetIds,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSubnetGroup.ClusterSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('ClusterSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.RedshiftSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSubnetGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSubnetGroup.ClusterSubnetGroup.Subnets'),
        outputPath: 'ClusterSubnetGroup.Subnets',
        parameters: {
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          Description: this.input.description,
          SubnetIds: this.input.subnetIds,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSubnetGroup.ClusterSubnetGroup.Subnets', props);
    return resource.getResponseField('ClusterSubnetGroup.Subnets') as unknown as shapes.RedshiftSubnet[];
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSubnetGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSubnetGroup.ClusterSubnetGroup.Tags'),
        outputPath: 'ClusterSubnetGroup.Tags',
        parameters: {
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          Description: this.input.description,
          SubnetIds: this.input.subnetIds,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClusterSubnetGroup.ClusterSubnetGroup.Tags', props);
    return resource.getResponseField('ClusterSubnetGroup.Tags') as unknown as shapes.RedshiftTag[];
  }

}

export class RedshiftCreateEventSubscription extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCreateEventSubscriptionMessage) {
    super(scope, id);
  }

  public get eventSubscription(): RedshiftCreateEventSubscriptionEventSubscription {
    return new RedshiftCreateEventSubscriptionEventSubscription(this, 'EventSubscription', this.__resources, this.input);
  }

}

export class RedshiftCreateEventSubscriptionEventSubscription extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCreateEventSubscriptionMessage) {
    super(scope, id);
  }

  public get customerAwsId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateEventSubscription.EventSubscription.CustomerAwsId'),
        outputPath: 'EventSubscription.CustomerAwsId',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          SourceIds: this.input.sourceIds,
          EventCategories: this.input.eventCategories,
          Severity: this.input.severity,
          Enabled: this.input.enabled,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateEventSubscription.EventSubscription.CustomerAwsId', props);
    return resource.getResponseField('EventSubscription.CustomerAwsId') as unknown as string;
  }

  public get custSubscriptionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateEventSubscription.EventSubscription.CustSubscriptionId'),
        outputPath: 'EventSubscription.CustSubscriptionId',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          SourceIds: this.input.sourceIds,
          EventCategories: this.input.eventCategories,
          Severity: this.input.severity,
          Enabled: this.input.enabled,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateEventSubscription.EventSubscription.CustSubscriptionId', props);
    return resource.getResponseField('EventSubscription.CustSubscriptionId') as unknown as string;
  }

  public get snsTopicArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateEventSubscription.EventSubscription.SnsTopicArn'),
        outputPath: 'EventSubscription.SnsTopicArn',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          SourceIds: this.input.sourceIds,
          EventCategories: this.input.eventCategories,
          Severity: this.input.severity,
          Enabled: this.input.enabled,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateEventSubscription.EventSubscription.SnsTopicArn', props);
    return resource.getResponseField('EventSubscription.SnsTopicArn') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateEventSubscription.EventSubscription.Status'),
        outputPath: 'EventSubscription.Status',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          SourceIds: this.input.sourceIds,
          EventCategories: this.input.eventCategories,
          Severity: this.input.severity,
          Enabled: this.input.enabled,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateEventSubscription.EventSubscription.Status', props);
    return resource.getResponseField('EventSubscription.Status') as unknown as string;
  }

  public get subscriptionCreationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateEventSubscription.EventSubscription.SubscriptionCreationTime'),
        outputPath: 'EventSubscription.SubscriptionCreationTime',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          SourceIds: this.input.sourceIds,
          EventCategories: this.input.eventCategories,
          Severity: this.input.severity,
          Enabled: this.input.enabled,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateEventSubscription.EventSubscription.SubscriptionCreationTime', props);
    return resource.getResponseField('EventSubscription.SubscriptionCreationTime') as unknown as string;
  }

  public get sourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateEventSubscription.EventSubscription.SourceType'),
        outputPath: 'EventSubscription.SourceType',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          SourceIds: this.input.sourceIds,
          EventCategories: this.input.eventCategories,
          Severity: this.input.severity,
          Enabled: this.input.enabled,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateEventSubscription.EventSubscription.SourceType', props);
    return resource.getResponseField('EventSubscription.SourceType') as unknown as string;
  }

  public get sourceIdsList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateEventSubscription.EventSubscription.SourceIdsList'),
        outputPath: 'EventSubscription.SourceIdsList',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          SourceIds: this.input.sourceIds,
          EventCategories: this.input.eventCategories,
          Severity: this.input.severity,
          Enabled: this.input.enabled,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateEventSubscription.EventSubscription.SourceIdsList', props);
    return resource.getResponseField('EventSubscription.SourceIdsList') as unknown as string[];
  }

  public get eventCategoriesList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateEventSubscription.EventSubscription.EventCategoriesList'),
        outputPath: 'EventSubscription.EventCategoriesList',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          SourceIds: this.input.sourceIds,
          EventCategories: this.input.eventCategories,
          Severity: this.input.severity,
          Enabled: this.input.enabled,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateEventSubscription.EventSubscription.EventCategoriesList', props);
    return resource.getResponseField('EventSubscription.EventCategoriesList') as unknown as string[];
  }

  public get severity(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateEventSubscription.EventSubscription.Severity'),
        outputPath: 'EventSubscription.Severity',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          SourceIds: this.input.sourceIds,
          EventCategories: this.input.eventCategories,
          Severity: this.input.severity,
          Enabled: this.input.enabled,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateEventSubscription.EventSubscription.Severity', props);
    return resource.getResponseField('EventSubscription.Severity') as unknown as string;
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateEventSubscription.EventSubscription.Enabled'),
        outputPath: 'EventSubscription.Enabled',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          SourceIds: this.input.sourceIds,
          EventCategories: this.input.eventCategories,
          Severity: this.input.severity,
          Enabled: this.input.enabled,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateEventSubscription.EventSubscription.Enabled', props);
    return resource.getResponseField('EventSubscription.Enabled') as unknown as boolean;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateEventSubscription.EventSubscription.Tags'),
        outputPath: 'EventSubscription.Tags',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          SourceIds: this.input.sourceIds,
          EventCategories: this.input.eventCategories,
          Severity: this.input.severity,
          Enabled: this.input.enabled,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateEventSubscription.EventSubscription.Tags', props);
    return resource.getResponseField('EventSubscription.Tags') as unknown as shapes.RedshiftTag[];
  }

}

export class RedshiftCreateHsmClientCertificate extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCreateHsmClientCertificateMessage) {
    super(scope, id);
  }

  public get hsmClientCertificate(): RedshiftCreateHsmClientCertificateHsmClientCertificate {
    return new RedshiftCreateHsmClientCertificateHsmClientCertificate(this, 'HsmClientCertificate', this.__resources, this.input);
  }

}

export class RedshiftCreateHsmClientCertificateHsmClientCertificate extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCreateHsmClientCertificateMessage) {
    super(scope, id);
  }

  public get hsmClientCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createHsmClientCertificate',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateHsmClientCertificate.HsmClientCertificate.HsmClientCertificateIdentifier'),
        outputPath: 'HsmClientCertificate.HsmClientCertificateIdentifier',
        parameters: {
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateHsmClientCertificate.HsmClientCertificate.HsmClientCertificateIdentifier', props);
    return resource.getResponseField('HsmClientCertificate.HsmClientCertificateIdentifier') as unknown as string;
  }

  public get hsmClientCertificatePublicKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createHsmClientCertificate',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateHsmClientCertificate.HsmClientCertificate.HsmClientCertificatePublicKey'),
        outputPath: 'HsmClientCertificate.HsmClientCertificatePublicKey',
        parameters: {
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateHsmClientCertificate.HsmClientCertificate.HsmClientCertificatePublicKey', props);
    return resource.getResponseField('HsmClientCertificate.HsmClientCertificatePublicKey') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createHsmClientCertificate',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateHsmClientCertificate.HsmClientCertificate.Tags'),
        outputPath: 'HsmClientCertificate.Tags',
        parameters: {
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateHsmClientCertificate.HsmClientCertificate.Tags', props);
    return resource.getResponseField('HsmClientCertificate.Tags') as unknown as shapes.RedshiftTag[];
  }

}

export class RedshiftCreateHsmConfiguration extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCreateHsmConfigurationMessage) {
    super(scope, id);
  }

  public get hsmConfiguration(): RedshiftCreateHsmConfigurationHsmConfiguration {
    return new RedshiftCreateHsmConfigurationHsmConfiguration(this, 'HsmConfiguration', this.__resources, this.input);
  }

}

export class RedshiftCreateHsmConfigurationHsmConfiguration extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCreateHsmConfigurationMessage) {
    super(scope, id);
  }

  public get hsmConfigurationIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createHsmConfiguration',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateHsmConfiguration.HsmConfiguration.HsmConfigurationIdentifier'),
        outputPath: 'HsmConfiguration.HsmConfigurationIdentifier',
        parameters: {
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          Description: this.input.description,
          HsmIpAddress: this.input.hsmIpAddress,
          HsmPartitionName: this.input.hsmPartitionName,
          HsmPartitionPassword: this.input.hsmPartitionPassword,
          HsmServerPublicCertificate: this.input.hsmServerPublicCertificate,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateHsmConfiguration.HsmConfiguration.HsmConfigurationIdentifier', props);
    return resource.getResponseField('HsmConfiguration.HsmConfigurationIdentifier') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createHsmConfiguration',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateHsmConfiguration.HsmConfiguration.Description'),
        outputPath: 'HsmConfiguration.Description',
        parameters: {
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          Description: this.input.description,
          HsmIpAddress: this.input.hsmIpAddress,
          HsmPartitionName: this.input.hsmPartitionName,
          HsmPartitionPassword: this.input.hsmPartitionPassword,
          HsmServerPublicCertificate: this.input.hsmServerPublicCertificate,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateHsmConfiguration.HsmConfiguration.Description', props);
    return resource.getResponseField('HsmConfiguration.Description') as unknown as string;
  }

  public get hsmIpAddress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createHsmConfiguration',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateHsmConfiguration.HsmConfiguration.HsmIpAddress'),
        outputPath: 'HsmConfiguration.HsmIpAddress',
        parameters: {
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          Description: this.input.description,
          HsmIpAddress: this.input.hsmIpAddress,
          HsmPartitionName: this.input.hsmPartitionName,
          HsmPartitionPassword: this.input.hsmPartitionPassword,
          HsmServerPublicCertificate: this.input.hsmServerPublicCertificate,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateHsmConfiguration.HsmConfiguration.HsmIpAddress', props);
    return resource.getResponseField('HsmConfiguration.HsmIpAddress') as unknown as string;
  }

  public get hsmPartitionName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createHsmConfiguration',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateHsmConfiguration.HsmConfiguration.HsmPartitionName'),
        outputPath: 'HsmConfiguration.HsmPartitionName',
        parameters: {
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          Description: this.input.description,
          HsmIpAddress: this.input.hsmIpAddress,
          HsmPartitionName: this.input.hsmPartitionName,
          HsmPartitionPassword: this.input.hsmPartitionPassword,
          HsmServerPublicCertificate: this.input.hsmServerPublicCertificate,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateHsmConfiguration.HsmConfiguration.HsmPartitionName', props);
    return resource.getResponseField('HsmConfiguration.HsmPartitionName') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createHsmConfiguration',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateHsmConfiguration.HsmConfiguration.Tags'),
        outputPath: 'HsmConfiguration.Tags',
        parameters: {
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          Description: this.input.description,
          HsmIpAddress: this.input.hsmIpAddress,
          HsmPartitionName: this.input.hsmPartitionName,
          HsmPartitionPassword: this.input.hsmPartitionPassword,
          HsmServerPublicCertificate: this.input.hsmServerPublicCertificate,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateHsmConfiguration.HsmConfiguration.Tags', props);
    return resource.getResponseField('HsmConfiguration.Tags') as unknown as shapes.RedshiftTag[];
  }

}

export class RedshiftCreateScheduledAction extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCreateScheduledActionMessage) {
    super(scope, id);
  }

  public get scheduledActionName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateScheduledAction.ScheduledActionName'),
        outputPath: 'ScheduledActionName',
        parameters: {
          ScheduledActionName: this.input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.input.targetAction.resizeCluster?.clusterIdentifier,
              ClusterType: this.input.targetAction.resizeCluster?.clusterType,
              NodeType: this.input.targetAction.resizeCluster?.nodeType,
              NumberOfNodes: this.input.targetAction.resizeCluster?.numberOfNodes,
              Classic: this.input.targetAction.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.input.targetAction.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.input.targetAction.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.input.schedule,
          IamRole: this.input.iamRole,
          ScheduledActionDescription: this.input.scheduledActionDescription,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Enable: this.input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateScheduledAction.ScheduledActionName', props);
    return resource.getResponseField('ScheduledActionName') as unknown as string;
  }

  public get targetAction(): RedshiftCreateScheduledActionTargetAction {
    return new RedshiftCreateScheduledActionTargetAction(this, 'TargetAction', this.__resources, this.input);
  }

  public get schedule(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateScheduledAction.Schedule'),
        outputPath: 'Schedule',
        parameters: {
          ScheduledActionName: this.input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.input.targetAction.resizeCluster?.clusterIdentifier,
              ClusterType: this.input.targetAction.resizeCluster?.clusterType,
              NodeType: this.input.targetAction.resizeCluster?.nodeType,
              NumberOfNodes: this.input.targetAction.resizeCluster?.numberOfNodes,
              Classic: this.input.targetAction.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.input.targetAction.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.input.targetAction.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.input.schedule,
          IamRole: this.input.iamRole,
          ScheduledActionDescription: this.input.scheduledActionDescription,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Enable: this.input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateScheduledAction.Schedule', props);
    return resource.getResponseField('Schedule') as unknown as string;
  }

  public get iamRole(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateScheduledAction.IamRole'),
        outputPath: 'IamRole',
        parameters: {
          ScheduledActionName: this.input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.input.targetAction.resizeCluster?.clusterIdentifier,
              ClusterType: this.input.targetAction.resizeCluster?.clusterType,
              NodeType: this.input.targetAction.resizeCluster?.nodeType,
              NumberOfNodes: this.input.targetAction.resizeCluster?.numberOfNodes,
              Classic: this.input.targetAction.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.input.targetAction.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.input.targetAction.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.input.schedule,
          IamRole: this.input.iamRole,
          ScheduledActionDescription: this.input.scheduledActionDescription,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Enable: this.input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateScheduledAction.IamRole', props);
    return resource.getResponseField('IamRole') as unknown as string;
  }

  public get scheduledActionDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateScheduledAction.ScheduledActionDescription'),
        outputPath: 'ScheduledActionDescription',
        parameters: {
          ScheduledActionName: this.input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.input.targetAction.resizeCluster?.clusterIdentifier,
              ClusterType: this.input.targetAction.resizeCluster?.clusterType,
              NodeType: this.input.targetAction.resizeCluster?.nodeType,
              NumberOfNodes: this.input.targetAction.resizeCluster?.numberOfNodes,
              Classic: this.input.targetAction.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.input.targetAction.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.input.targetAction.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.input.schedule,
          IamRole: this.input.iamRole,
          ScheduledActionDescription: this.input.scheduledActionDescription,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Enable: this.input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateScheduledAction.ScheduledActionDescription', props);
    return resource.getResponseField('ScheduledActionDescription') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateScheduledAction.State'),
        outputPath: 'State',
        parameters: {
          ScheduledActionName: this.input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.input.targetAction.resizeCluster?.clusterIdentifier,
              ClusterType: this.input.targetAction.resizeCluster?.clusterType,
              NodeType: this.input.targetAction.resizeCluster?.nodeType,
              NumberOfNodes: this.input.targetAction.resizeCluster?.numberOfNodes,
              Classic: this.input.targetAction.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.input.targetAction.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.input.targetAction.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.input.schedule,
          IamRole: this.input.iamRole,
          ScheduledActionDescription: this.input.scheduledActionDescription,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Enable: this.input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateScheduledAction.State', props);
    return resource.getResponseField('State') as unknown as string;
  }

  public get nextInvocations(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateScheduledAction.NextInvocations'),
        outputPath: 'NextInvocations',
        parameters: {
          ScheduledActionName: this.input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.input.targetAction.resizeCluster?.clusterIdentifier,
              ClusterType: this.input.targetAction.resizeCluster?.clusterType,
              NodeType: this.input.targetAction.resizeCluster?.nodeType,
              NumberOfNodes: this.input.targetAction.resizeCluster?.numberOfNodes,
              Classic: this.input.targetAction.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.input.targetAction.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.input.targetAction.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.input.schedule,
          IamRole: this.input.iamRole,
          ScheduledActionDescription: this.input.scheduledActionDescription,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Enable: this.input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateScheduledAction.NextInvocations', props);
    return resource.getResponseField('NextInvocations') as unknown as string[];
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateScheduledAction.StartTime'),
        outputPath: 'StartTime',
        parameters: {
          ScheduledActionName: this.input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.input.targetAction.resizeCluster?.clusterIdentifier,
              ClusterType: this.input.targetAction.resizeCluster?.clusterType,
              NodeType: this.input.targetAction.resizeCluster?.nodeType,
              NumberOfNodes: this.input.targetAction.resizeCluster?.numberOfNodes,
              Classic: this.input.targetAction.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.input.targetAction.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.input.targetAction.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.input.schedule,
          IamRole: this.input.iamRole,
          ScheduledActionDescription: this.input.scheduledActionDescription,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Enable: this.input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateScheduledAction.StartTime', props);
    return resource.getResponseField('StartTime') as unknown as string;
  }

  public get endTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateScheduledAction.EndTime'),
        outputPath: 'EndTime',
        parameters: {
          ScheduledActionName: this.input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.input.targetAction.resizeCluster?.clusterIdentifier,
              ClusterType: this.input.targetAction.resizeCluster?.clusterType,
              NodeType: this.input.targetAction.resizeCluster?.nodeType,
              NumberOfNodes: this.input.targetAction.resizeCluster?.numberOfNodes,
              Classic: this.input.targetAction.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.input.targetAction.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.input.targetAction.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.input.schedule,
          IamRole: this.input.iamRole,
          ScheduledActionDescription: this.input.scheduledActionDescription,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Enable: this.input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateScheduledAction.EndTime', props);
    return resource.getResponseField('EndTime') as unknown as string;
  }

}

export class RedshiftCreateScheduledActionTargetAction extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCreateScheduledActionMessage) {
    super(scope, id);
  }

  public get resizeCluster(): RedshiftCreateScheduledActionTargetActionResizeCluster {
    return new RedshiftCreateScheduledActionTargetActionResizeCluster(this, 'ResizeCluster', this.__resources, this.input);
  }

  public get pauseCluster(): RedshiftCreateScheduledActionTargetActionPauseCluster {
    return new RedshiftCreateScheduledActionTargetActionPauseCluster(this, 'PauseCluster', this.__resources, this.input);
  }

  public get resumeCluster(): RedshiftCreateScheduledActionTargetActionResumeCluster {
    return new RedshiftCreateScheduledActionTargetActionResumeCluster(this, 'ResumeCluster', this.__resources, this.input);
  }

}

export class RedshiftCreateScheduledActionTargetActionResizeCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCreateScheduledActionMessage) {
    super(scope, id);
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateScheduledAction.TargetAction.ResizeCluster.ClusterIdentifier'),
        outputPath: 'TargetAction.ResizeCluster.ClusterIdentifier',
        parameters: {
          ScheduledActionName: this.input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.input.targetAction.resizeCluster?.clusterIdentifier,
              ClusterType: this.input.targetAction.resizeCluster?.clusterType,
              NodeType: this.input.targetAction.resizeCluster?.nodeType,
              NumberOfNodes: this.input.targetAction.resizeCluster?.numberOfNodes,
              Classic: this.input.targetAction.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.input.targetAction.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.input.targetAction.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.input.schedule,
          IamRole: this.input.iamRole,
          ScheduledActionDescription: this.input.scheduledActionDescription,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Enable: this.input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateScheduledAction.TargetAction.ResizeCluster.ClusterIdentifier', props);
    return resource.getResponseField('TargetAction.ResizeCluster.ClusterIdentifier') as unknown as string;
  }

  public get clusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateScheduledAction.TargetAction.ResizeCluster.ClusterType'),
        outputPath: 'TargetAction.ResizeCluster.ClusterType',
        parameters: {
          ScheduledActionName: this.input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.input.targetAction.resizeCluster?.clusterIdentifier,
              ClusterType: this.input.targetAction.resizeCluster?.clusterType,
              NodeType: this.input.targetAction.resizeCluster?.nodeType,
              NumberOfNodes: this.input.targetAction.resizeCluster?.numberOfNodes,
              Classic: this.input.targetAction.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.input.targetAction.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.input.targetAction.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.input.schedule,
          IamRole: this.input.iamRole,
          ScheduledActionDescription: this.input.scheduledActionDescription,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Enable: this.input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateScheduledAction.TargetAction.ResizeCluster.ClusterType', props);
    return resource.getResponseField('TargetAction.ResizeCluster.ClusterType') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateScheduledAction.TargetAction.ResizeCluster.NodeType'),
        outputPath: 'TargetAction.ResizeCluster.NodeType',
        parameters: {
          ScheduledActionName: this.input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.input.targetAction.resizeCluster?.clusterIdentifier,
              ClusterType: this.input.targetAction.resizeCluster?.clusterType,
              NodeType: this.input.targetAction.resizeCluster?.nodeType,
              NumberOfNodes: this.input.targetAction.resizeCluster?.numberOfNodes,
              Classic: this.input.targetAction.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.input.targetAction.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.input.targetAction.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.input.schedule,
          IamRole: this.input.iamRole,
          ScheduledActionDescription: this.input.scheduledActionDescription,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Enable: this.input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateScheduledAction.TargetAction.ResizeCluster.NodeType', props);
    return resource.getResponseField('TargetAction.ResizeCluster.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateScheduledAction.TargetAction.ResizeCluster.NumberOfNodes'),
        outputPath: 'TargetAction.ResizeCluster.NumberOfNodes',
        parameters: {
          ScheduledActionName: this.input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.input.targetAction.resizeCluster?.clusterIdentifier,
              ClusterType: this.input.targetAction.resizeCluster?.clusterType,
              NodeType: this.input.targetAction.resizeCluster?.nodeType,
              NumberOfNodes: this.input.targetAction.resizeCluster?.numberOfNodes,
              Classic: this.input.targetAction.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.input.targetAction.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.input.targetAction.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.input.schedule,
          IamRole: this.input.iamRole,
          ScheduledActionDescription: this.input.scheduledActionDescription,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Enable: this.input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateScheduledAction.TargetAction.ResizeCluster.NumberOfNodes', props);
    return resource.getResponseField('TargetAction.ResizeCluster.NumberOfNodes') as unknown as number;
  }

  public get classic(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateScheduledAction.TargetAction.ResizeCluster.Classic'),
        outputPath: 'TargetAction.ResizeCluster.Classic',
        parameters: {
          ScheduledActionName: this.input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.input.targetAction.resizeCluster?.clusterIdentifier,
              ClusterType: this.input.targetAction.resizeCluster?.clusterType,
              NodeType: this.input.targetAction.resizeCluster?.nodeType,
              NumberOfNodes: this.input.targetAction.resizeCluster?.numberOfNodes,
              Classic: this.input.targetAction.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.input.targetAction.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.input.targetAction.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.input.schedule,
          IamRole: this.input.iamRole,
          ScheduledActionDescription: this.input.scheduledActionDescription,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Enable: this.input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateScheduledAction.TargetAction.ResizeCluster.Classic', props);
    return resource.getResponseField('TargetAction.ResizeCluster.Classic') as unknown as boolean;
  }

}

export class RedshiftCreateScheduledActionTargetActionPauseCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCreateScheduledActionMessage) {
    super(scope, id);
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateScheduledAction.TargetAction.PauseCluster.ClusterIdentifier'),
        outputPath: 'TargetAction.PauseCluster.ClusterIdentifier',
        parameters: {
          ScheduledActionName: this.input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.input.targetAction.resizeCluster?.clusterIdentifier,
              ClusterType: this.input.targetAction.resizeCluster?.clusterType,
              NodeType: this.input.targetAction.resizeCluster?.nodeType,
              NumberOfNodes: this.input.targetAction.resizeCluster?.numberOfNodes,
              Classic: this.input.targetAction.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.input.targetAction.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.input.targetAction.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.input.schedule,
          IamRole: this.input.iamRole,
          ScheduledActionDescription: this.input.scheduledActionDescription,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Enable: this.input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateScheduledAction.TargetAction.PauseCluster.ClusterIdentifier', props);
    return resource.getResponseField('TargetAction.PauseCluster.ClusterIdentifier') as unknown as string;
  }

}

export class RedshiftCreateScheduledActionTargetActionResumeCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCreateScheduledActionMessage) {
    super(scope, id);
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateScheduledAction.TargetAction.ResumeCluster.ClusterIdentifier'),
        outputPath: 'TargetAction.ResumeCluster.ClusterIdentifier',
        parameters: {
          ScheduledActionName: this.input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.input.targetAction.resizeCluster?.clusterIdentifier,
              ClusterType: this.input.targetAction.resizeCluster?.clusterType,
              NodeType: this.input.targetAction.resizeCluster?.nodeType,
              NumberOfNodes: this.input.targetAction.resizeCluster?.numberOfNodes,
              Classic: this.input.targetAction.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.input.targetAction.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.input.targetAction.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.input.schedule,
          IamRole: this.input.iamRole,
          ScheduledActionDescription: this.input.scheduledActionDescription,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Enable: this.input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateScheduledAction.TargetAction.ResumeCluster.ClusterIdentifier', props);
    return resource.getResponseField('TargetAction.ResumeCluster.ClusterIdentifier') as unknown as string;
  }

}

export class RedshiftCreateSnapshotCopyGrant extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCreateSnapshotCopyGrantMessage) {
    super(scope, id);
  }

  public get snapshotCopyGrant(): RedshiftCreateSnapshotCopyGrantSnapshotCopyGrant {
    return new RedshiftCreateSnapshotCopyGrantSnapshotCopyGrant(this, 'SnapshotCopyGrant', this.__resources, this.input);
  }

}

export class RedshiftCreateSnapshotCopyGrantSnapshotCopyGrant extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCreateSnapshotCopyGrantMessage) {
    super(scope, id);
  }

  public get snapshotCopyGrantName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshotCopyGrant',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateSnapshotCopyGrant.SnapshotCopyGrant.SnapshotCopyGrantName'),
        outputPath: 'SnapshotCopyGrant.SnapshotCopyGrantName',
        parameters: {
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          KmsKeyId: this.input.kmsKeyId,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSnapshotCopyGrant.SnapshotCopyGrant.SnapshotCopyGrantName', props);
    return resource.getResponseField('SnapshotCopyGrant.SnapshotCopyGrantName') as unknown as string;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshotCopyGrant',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateSnapshotCopyGrant.SnapshotCopyGrant.KmsKeyId'),
        outputPath: 'SnapshotCopyGrant.KmsKeyId',
        parameters: {
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          KmsKeyId: this.input.kmsKeyId,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSnapshotCopyGrant.SnapshotCopyGrant.KmsKeyId', props);
    return resource.getResponseField('SnapshotCopyGrant.KmsKeyId') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshotCopyGrant',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateSnapshotCopyGrant.SnapshotCopyGrant.Tags'),
        outputPath: 'SnapshotCopyGrant.Tags',
        parameters: {
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          KmsKeyId: this.input.kmsKeyId,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSnapshotCopyGrant.SnapshotCopyGrant.Tags', props);
    return resource.getResponseField('SnapshotCopyGrant.Tags') as unknown as shapes.RedshiftTag[];
  }

}

export class RedshiftCreateSnapshotSchedule extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCreateSnapshotScheduleMessage) {
    super(scope, id);
  }

  public get scheduleDefinitions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshotSchedule',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateSnapshotSchedule.ScheduleDefinitions'),
        outputPath: 'ScheduleDefinitions',
        parameters: {
          ScheduleDefinitions: this.input.scheduleDefinitions,
          ScheduleIdentifier: this.input.scheduleIdentifier,
          ScheduleDescription: this.input.scheduleDescription,
          Tags: this.input.tags,
          DryRun: this.input.dryRun,
          NextInvocations: this.input.nextInvocations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSnapshotSchedule.ScheduleDefinitions', props);
    return resource.getResponseField('ScheduleDefinitions') as unknown as string[];
  }

  public get scheduleIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshotSchedule',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateSnapshotSchedule.ScheduleIdentifier'),
        outputPath: 'ScheduleIdentifier',
        parameters: {
          ScheduleDefinitions: this.input.scheduleDefinitions,
          ScheduleIdentifier: this.input.scheduleIdentifier,
          ScheduleDescription: this.input.scheduleDescription,
          Tags: this.input.tags,
          DryRun: this.input.dryRun,
          NextInvocations: this.input.nextInvocations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSnapshotSchedule.ScheduleIdentifier', props);
    return resource.getResponseField('ScheduleIdentifier') as unknown as string;
  }

  public get scheduleDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshotSchedule',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateSnapshotSchedule.ScheduleDescription'),
        outputPath: 'ScheduleDescription',
        parameters: {
          ScheduleDefinitions: this.input.scheduleDefinitions,
          ScheduleIdentifier: this.input.scheduleIdentifier,
          ScheduleDescription: this.input.scheduleDescription,
          Tags: this.input.tags,
          DryRun: this.input.dryRun,
          NextInvocations: this.input.nextInvocations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSnapshotSchedule.ScheduleDescription', props);
    return resource.getResponseField('ScheduleDescription') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshotSchedule',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateSnapshotSchedule.Tags'),
        outputPath: 'Tags',
        parameters: {
          ScheduleDefinitions: this.input.scheduleDefinitions,
          ScheduleIdentifier: this.input.scheduleIdentifier,
          ScheduleDescription: this.input.scheduleDescription,
          Tags: this.input.tags,
          DryRun: this.input.dryRun,
          NextInvocations: this.input.nextInvocations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSnapshotSchedule.Tags', props);
    return resource.getResponseField('Tags') as unknown as shapes.RedshiftTag[];
  }

  public get nextInvocations(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshotSchedule',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateSnapshotSchedule.NextInvocations'),
        outputPath: 'NextInvocations',
        parameters: {
          ScheduleDefinitions: this.input.scheduleDefinitions,
          ScheduleIdentifier: this.input.scheduleIdentifier,
          ScheduleDescription: this.input.scheduleDescription,
          Tags: this.input.tags,
          DryRun: this.input.dryRun,
          NextInvocations: this.input.nextInvocations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSnapshotSchedule.NextInvocations', props);
    return resource.getResponseField('NextInvocations') as unknown as string[];
  }

  public get associatedClusterCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshotSchedule',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateSnapshotSchedule.AssociatedClusterCount'),
        outputPath: 'AssociatedClusterCount',
        parameters: {
          ScheduleDefinitions: this.input.scheduleDefinitions,
          ScheduleIdentifier: this.input.scheduleIdentifier,
          ScheduleDescription: this.input.scheduleDescription,
          Tags: this.input.tags,
          DryRun: this.input.dryRun,
          NextInvocations: this.input.nextInvocations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSnapshotSchedule.AssociatedClusterCount', props);
    return resource.getResponseField('AssociatedClusterCount') as unknown as number;
  }

  public get associatedClusters(): shapes.RedshiftClusterAssociatedToSchedule[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshotSchedule',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateSnapshotSchedule.AssociatedClusters'),
        outputPath: 'AssociatedClusters',
        parameters: {
          ScheduleDefinitions: this.input.scheduleDefinitions,
          ScheduleIdentifier: this.input.scheduleIdentifier,
          ScheduleDescription: this.input.scheduleDescription,
          Tags: this.input.tags,
          DryRun: this.input.dryRun,
          NextInvocations: this.input.nextInvocations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSnapshotSchedule.AssociatedClusters', props);
    return resource.getResponseField('AssociatedClusters') as unknown as shapes.RedshiftClusterAssociatedToSchedule[];
  }

}

export class RedshiftCreateUsageLimit extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftCreateUsageLimitMessage) {
    super(scope, id);
  }

  public get usageLimitId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createUsageLimit',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateUsageLimit.UsageLimitId'),
        outputPath: 'UsageLimitId',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          FeatureType: this.input.featureType,
          LimitType: this.input.limitType,
          Amount: this.input.amount,
          Period: this.input.period,
          BreachAction: this.input.breachAction,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateUsageLimit.UsageLimitId', props);
    return resource.getResponseField('UsageLimitId') as unknown as string;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createUsageLimit',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateUsageLimit.ClusterIdentifier'),
        outputPath: 'ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          FeatureType: this.input.featureType,
          LimitType: this.input.limitType,
          Amount: this.input.amount,
          Period: this.input.period,
          BreachAction: this.input.breachAction,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateUsageLimit.ClusterIdentifier', props);
    return resource.getResponseField('ClusterIdentifier') as unknown as string;
  }

  public get featureType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createUsageLimit',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateUsageLimit.FeatureType'),
        outputPath: 'FeatureType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          FeatureType: this.input.featureType,
          LimitType: this.input.limitType,
          Amount: this.input.amount,
          Period: this.input.period,
          BreachAction: this.input.breachAction,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateUsageLimit.FeatureType', props);
    return resource.getResponseField('FeatureType') as unknown as string;
  }

  public get limitType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createUsageLimit',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateUsageLimit.LimitType'),
        outputPath: 'LimitType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          FeatureType: this.input.featureType,
          LimitType: this.input.limitType,
          Amount: this.input.amount,
          Period: this.input.period,
          BreachAction: this.input.breachAction,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateUsageLimit.LimitType', props);
    return resource.getResponseField('LimitType') as unknown as string;
  }

  public get amount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createUsageLimit',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateUsageLimit.Amount'),
        outputPath: 'Amount',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          FeatureType: this.input.featureType,
          LimitType: this.input.limitType,
          Amount: this.input.amount,
          Period: this.input.period,
          BreachAction: this.input.breachAction,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateUsageLimit.Amount', props);
    return resource.getResponseField('Amount') as unknown as number;
  }

  public get period(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createUsageLimit',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateUsageLimit.Period'),
        outputPath: 'Period',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          FeatureType: this.input.featureType,
          LimitType: this.input.limitType,
          Amount: this.input.amount,
          Period: this.input.period,
          BreachAction: this.input.breachAction,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateUsageLimit.Period', props);
    return resource.getResponseField('Period') as unknown as string;
  }

  public get breachAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createUsageLimit',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateUsageLimit.BreachAction'),
        outputPath: 'BreachAction',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          FeatureType: this.input.featureType,
          LimitType: this.input.limitType,
          Amount: this.input.amount,
          Period: this.input.period,
          BreachAction: this.input.breachAction,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateUsageLimit.BreachAction', props);
    return resource.getResponseField('BreachAction') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createUsageLimit',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateUsageLimit.Tags'),
        outputPath: 'Tags',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          FeatureType: this.input.featureType,
          LimitType: this.input.limitType,
          Amount: this.input.amount,
          Period: this.input.period,
          BreachAction: this.input.breachAction,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateUsageLimit.Tags', props);
    return resource.getResponseField('Tags') as unknown as shapes.RedshiftTag[];
  }

}

export class RedshiftDeleteCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDeleteClusterMessage) {
    super(scope, id);
  }

  public get cluster(): RedshiftDeleteClusterCluster {
    return new RedshiftDeleteClusterCluster(this, 'Cluster', this.__resources, this.input);
  }

}

export class RedshiftDeleteClusterCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDeleteClusterMessage) {
    super(scope, id);
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ClusterIdentifier'),
        outputPath: 'Cluster.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.ClusterIdentifier') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.NodeType'),
        outputPath: 'Cluster.NodeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.NodeType', props);
    return resource.getResponseField('Cluster.NodeType') as unknown as string;
  }

  public get clusterStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ClusterStatus'),
        outputPath: 'Cluster.ClusterStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.ClusterStatus', props);
    return resource.getResponseField('Cluster.ClusterStatus') as unknown as string;
  }

  public get clusterAvailabilityStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ClusterAvailabilityStatus'),
        outputPath: 'Cluster.ClusterAvailabilityStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.ClusterAvailabilityStatus', props);
    return resource.getResponseField('Cluster.ClusterAvailabilityStatus') as unknown as string;
  }

  public get modifyStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ModifyStatus'),
        outputPath: 'Cluster.ModifyStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.ModifyStatus', props);
    return resource.getResponseField('Cluster.ModifyStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.MasterUsername'),
        outputPath: 'Cluster.MasterUsername',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.MasterUsername', props);
    return resource.getResponseField('Cluster.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.DBName'),
        outputPath: 'Cluster.DBName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.DBName', props);
    return resource.getResponseField('Cluster.DBName') as unknown as string;
  }

  public get endpoint(): RedshiftDeleteClusterClusterEndpoint {
    return new RedshiftDeleteClusterClusterEndpoint(this, 'Endpoint', this.__resources, this.input);
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ClusterCreateTime'),
        outputPath: 'Cluster.ClusterCreateTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.ClusterCreateTime', props);
    return resource.getResponseField('Cluster.ClusterCreateTime') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterSecurityGroups(): shapes.RedshiftClusterSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ClusterSecurityGroups'),
        outputPath: 'Cluster.ClusterSecurityGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.ClusterSecurityGroups', props);
    return resource.getResponseField('Cluster.ClusterSecurityGroups') as unknown as shapes.RedshiftClusterSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RedshiftVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.VpcSecurityGroups'),
        outputPath: 'Cluster.VpcSecurityGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.VpcSecurityGroups', props);
    return resource.getResponseField('Cluster.VpcSecurityGroups') as unknown as shapes.RedshiftVpcSecurityGroupMembership[];
  }

  public get clusterParameterGroups(): shapes.RedshiftClusterParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ClusterParameterGroups'),
        outputPath: 'Cluster.ClusterParameterGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.ClusterParameterGroups', props);
    return resource.getResponseField('Cluster.ClusterParameterGroups') as unknown as shapes.RedshiftClusterParameterGroupStatus[];
  }

  public get clusterSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ClusterSubnetGroupName'),
        outputPath: 'Cluster.ClusterSubnetGroupName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.ClusterSubnetGroupName', props);
    return resource.getResponseField('Cluster.ClusterSubnetGroupName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.VpcId'),
        outputPath: 'Cluster.VpcId',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.VpcId', props);
    return resource.getResponseField('Cluster.VpcId') as unknown as string;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.AvailabilityZone'),
        outputPath: 'Cluster.AvailabilityZone',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.AvailabilityZone', props);
    return resource.getResponseField('Cluster.AvailabilityZone') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.PreferredMaintenanceWindow'),
        outputPath: 'Cluster.PreferredMaintenanceWindow',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('Cluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RedshiftDeleteClusterClusterPendingModifiedValues {
    return new RedshiftDeleteClusterClusterPendingModifiedValues(this, 'PendingModifiedValues', this.__resources, this.input);
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ClusterVersion'),
        outputPath: 'Cluster.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.ClusterVersion', props);
    return resource.getResponseField('Cluster.ClusterVersion') as unknown as string;
  }

  public get allowVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.AllowVersionUpgrade'),
        outputPath: 'Cluster.AllowVersionUpgrade',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.AllowVersionUpgrade', props);
    return resource.getResponseField('Cluster.AllowVersionUpgrade') as unknown as boolean;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.NumberOfNodes'),
        outputPath: 'Cluster.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.NumberOfNodes', props);
    return resource.getResponseField('Cluster.NumberOfNodes') as unknown as number;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.PubliclyAccessible'),
        outputPath: 'Cluster.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PubliclyAccessible') as unknown as boolean;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.Encrypted'),
        outputPath: 'Cluster.Encrypted',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.Encrypted', props);
    return resource.getResponseField('Cluster.Encrypted') as unknown as boolean;
  }

  public get restoreStatus(): RedshiftDeleteClusterClusterRestoreStatus {
    return new RedshiftDeleteClusterClusterRestoreStatus(this, 'RestoreStatus', this.__resources, this.input);
  }

  public get dataTransferProgress(): RedshiftDeleteClusterClusterDataTransferProgress {
    return new RedshiftDeleteClusterClusterDataTransferProgress(this, 'DataTransferProgress', this.__resources, this.input);
  }

  public get hsmStatus(): RedshiftDeleteClusterClusterHsmStatus {
    return new RedshiftDeleteClusterClusterHsmStatus(this, 'HsmStatus', this.__resources, this.input);
  }

  public get clusterSnapshotCopyStatus(): RedshiftDeleteClusterClusterClusterSnapshotCopyStatus {
    return new RedshiftDeleteClusterClusterClusterSnapshotCopyStatus(this, 'ClusterSnapshotCopyStatus', this.__resources, this.input);
  }

  public get clusterPublicKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ClusterPublicKey'),
        outputPath: 'Cluster.ClusterPublicKey',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.ClusterPublicKey', props);
    return resource.getResponseField('Cluster.ClusterPublicKey') as unknown as string;
  }

  public get clusterNodes(): shapes.RedshiftClusterNode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ClusterNodes'),
        outputPath: 'Cluster.ClusterNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.ClusterNodes', props);
    return resource.getResponseField('Cluster.ClusterNodes') as unknown as shapes.RedshiftClusterNode[];
  }

  public get elasticIpStatus(): RedshiftDeleteClusterClusterElasticIpStatus {
    return new RedshiftDeleteClusterClusterElasticIpStatus(this, 'ElasticIpStatus', this.__resources, this.input);
  }

  public get clusterRevisionNumber(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ClusterRevisionNumber'),
        outputPath: 'Cluster.ClusterRevisionNumber',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.ClusterRevisionNumber', props);
    return resource.getResponseField('Cluster.ClusterRevisionNumber') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.Tags'),
        outputPath: 'Cluster.Tags',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.Tags', props);
    return resource.getResponseField('Cluster.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.KmsKeyId'),
        outputPath: 'Cluster.KmsKeyId',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.KmsKeyId', props);
    return resource.getResponseField('Cluster.KmsKeyId') as unknown as string;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.EnhancedVpcRouting'),
        outputPath: 'Cluster.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.EnhancedVpcRouting') as unknown as boolean;
  }

  public get iamRoles(): shapes.RedshiftClusterIamRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.IamRoles'),
        outputPath: 'Cluster.IamRoles',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.IamRoles', props);
    return resource.getResponseField('Cluster.IamRoles') as unknown as shapes.RedshiftClusterIamRole[];
  }

  public get pendingActions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.PendingActions'),
        outputPath: 'Cluster.PendingActions',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.PendingActions', props);
    return resource.getResponseField('Cluster.PendingActions') as unknown as string[];
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.MaintenanceTrackName'),
        outputPath: 'Cluster.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.MaintenanceTrackName') as unknown as string;
  }

  public get elasticResizeNumberOfNodeOptions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ElasticResizeNumberOfNodeOptions'),
        outputPath: 'Cluster.ElasticResizeNumberOfNodeOptions',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.ElasticResizeNumberOfNodeOptions', props);
    return resource.getResponseField('Cluster.ElasticResizeNumberOfNodeOptions') as unknown as string;
  }

  public get deferredMaintenanceWindows(): shapes.RedshiftDeferredMaintenanceWindow[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.DeferredMaintenanceWindows'),
        outputPath: 'Cluster.DeferredMaintenanceWindows',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.DeferredMaintenanceWindows', props);
    return resource.getResponseField('Cluster.DeferredMaintenanceWindows') as unknown as shapes.RedshiftDeferredMaintenanceWindow[];
  }

  public get snapshotScheduleIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.SnapshotScheduleIdentifier'),
        outputPath: 'Cluster.SnapshotScheduleIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.SnapshotScheduleIdentifier', props);
    return resource.getResponseField('Cluster.SnapshotScheduleIdentifier') as unknown as string;
  }

  public get snapshotScheduleState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.SnapshotScheduleState'),
        outputPath: 'Cluster.SnapshotScheduleState',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.SnapshotScheduleState', props);
    return resource.getResponseField('Cluster.SnapshotScheduleState') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ExpectedNextSnapshotScheduleTime'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.ExpectedNextSnapshotScheduleTime', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTime') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTimeStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ExpectedNextSnapshotScheduleTimeStatus'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTimeStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.ExpectedNextSnapshotScheduleTimeStatus', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTimeStatus') as unknown as string;
  }

  public get nextMaintenanceWindowStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.NextMaintenanceWindowStartTime'),
        outputPath: 'Cluster.NextMaintenanceWindowStartTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.NextMaintenanceWindowStartTime', props);
    return resource.getResponseField('Cluster.NextMaintenanceWindowStartTime') as unknown as string;
  }

  public get resizeInfo(): RedshiftDeleteClusterClusterResizeInfo {
    return new RedshiftDeleteClusterClusterResizeInfo(this, 'ResizeInfo', this.__resources, this.input);
  }

  public get clusterNamespaceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ClusterNamespaceArn'),
        outputPath: 'Cluster.ClusterNamespaceArn',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.ClusterNamespaceArn', props);
    return resource.getResponseField('Cluster.ClusterNamespaceArn') as unknown as string;
  }

}

export class RedshiftDeleteClusterClusterEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDeleteClusterMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.Endpoint.Address'),
        outputPath: 'Cluster.Endpoint.Address',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.Endpoint.Address', props);
    return resource.getResponseField('Cluster.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.Endpoint.Port'),
        outputPath: 'Cluster.Endpoint.Port',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.Endpoint.Port', props);
    return resource.getResponseField('Cluster.Endpoint.Port') as unknown as number;
  }

}

export class RedshiftDeleteClusterClusterPendingModifiedValues extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDeleteClusterMessage) {
    super(scope, id);
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'Cluster.PendingModifiedValues.MasterUserPassword',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.PendingModifiedValues.NodeType'),
        outputPath: 'Cluster.PendingModifiedValues.NodeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.PendingModifiedValues.NodeType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.PendingModifiedValues.NumberOfNodes'),
        outputPath: 'Cluster.PendingModifiedValues.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.PendingModifiedValues.NumberOfNodes', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NumberOfNodes') as unknown as number;
  }

  public get clusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.PendingModifiedValues.ClusterType'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.PendingModifiedValues.ClusterType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterType') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.PendingModifiedValues.ClusterVersion'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.PendingModifiedValues.ClusterVersion', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterVersion') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.PendingModifiedValues.ClusterIdentifier'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.PendingModifiedValues.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterIdentifier') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.PendingModifiedValues.PubliclyAccessible'),
        outputPath: 'Cluster.PendingModifiedValues.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.PendingModifiedValues.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.PubliclyAccessible') as unknown as boolean;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.PendingModifiedValues.EnhancedVpcRouting'),
        outputPath: 'Cluster.PendingModifiedValues.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.PendingModifiedValues.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.PendingModifiedValues.MaintenanceTrackName'),
        outputPath: 'Cluster.PendingModifiedValues.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.PendingModifiedValues.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MaintenanceTrackName') as unknown as string;
  }

  public get encryptionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.PendingModifiedValues.EncryptionType'),
        outputPath: 'Cluster.PendingModifiedValues.EncryptionType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.PendingModifiedValues.EncryptionType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EncryptionType') as unknown as string;
  }

}

export class RedshiftDeleteClusterClusterRestoreStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDeleteClusterMessage) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.RestoreStatus.Status'),
        outputPath: 'Cluster.RestoreStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.RestoreStatus.Status', props);
    return resource.getResponseField('Cluster.RestoreStatus.Status') as unknown as string;
  }

  public get currentRestoreRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond') as unknown as number;
  }

  public get snapshotSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.RestoreStatus.SnapshotSizeInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.SnapshotSizeInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.RestoreStatus.SnapshotSizeInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.SnapshotSizeInMegaBytes') as unknown as number;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.RestoreStatus.ProgressInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.ProgressInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.RestoreStatus.ProgressInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.ProgressInMegaBytes') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.RestoreStatus.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.RestoreStatus.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.RestoreStatus.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.ElapsedTimeInSeconds') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

}

export class RedshiftDeleteClusterClusterDataTransferProgress extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDeleteClusterMessage) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.DataTransferProgress.Status'),
        outputPath: 'Cluster.DataTransferProgress.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.DataTransferProgress.Status', props);
    return resource.getResponseField('Cluster.DataTransferProgress.Status') as unknown as string;
  }

  public get currentRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond') as unknown as number;
  }

  public get totalDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.DataTransferProgress.TotalDataInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.TotalDataInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.DataTransferProgress.TotalDataInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.TotalDataInMegaBytes') as unknown as number;
  }

  public get dataTransferredInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.DataTransferProgress.DataTransferredInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.DataTransferredInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.DataTransferProgress.DataTransferredInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.DataTransferredInMegaBytes') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.DataTransferProgress.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.DataTransferProgress.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.ElapsedTimeInSeconds') as unknown as number;
  }

}

export class RedshiftDeleteClusterClusterHsmStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDeleteClusterMessage) {
    super(scope, id);
  }

  public get hsmClientCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.HsmStatus.HsmClientCertificateIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmClientCertificateIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.HsmStatus.HsmClientCertificateIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmClientCertificateIdentifier') as unknown as string;
  }

  public get hsmConfigurationIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.HsmStatus.HsmConfigurationIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmConfigurationIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.HsmStatus.HsmConfigurationIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmConfigurationIdentifier') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.HsmStatus.Status'),
        outputPath: 'Cluster.HsmStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.HsmStatus.Status', props);
    return resource.getResponseField('Cluster.HsmStatus.Status') as unknown as string;
  }

}

export class RedshiftDeleteClusterClusterClusterSnapshotCopyStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDeleteClusterMessage) {
    super(scope, id);
  }

  public get destinationRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ClusterSnapshotCopyStatus.DestinationRegion'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.DestinationRegion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.ClusterSnapshotCopyStatus.DestinationRegion', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.DestinationRegion') as unknown as string;
  }

  public get retentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.RetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.RetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get snapshotCopyGrantName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName') as unknown as string;
  }

}

export class RedshiftDeleteClusterClusterElasticIpStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDeleteClusterMessage) {
    super(scope, id);
  }

  public get elasticIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ElasticIpStatus.ElasticIp'),
        outputPath: 'Cluster.ElasticIpStatus.ElasticIp',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.ElasticIpStatus.ElasticIp', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.ElasticIp') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ElasticIpStatus.Status'),
        outputPath: 'Cluster.ElasticIpStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.ElasticIpStatus.Status', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.Status') as unknown as string;
  }

}

export class RedshiftDeleteClusterClusterResizeInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDeleteClusterMessage) {
    super(scope, id);
  }

  public get resizeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ResizeInfo.ResizeType'),
        outputPath: 'Cluster.ResizeInfo.ResizeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.ResizeInfo.ResizeType', props);
    return resource.getResponseField('Cluster.ResizeInfo.ResizeType') as unknown as string;
  }

  public get allowCancelResize(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ResizeInfo.AllowCancelResize'),
        outputPath: 'Cluster.ResizeInfo.AllowCancelResize',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCluster.Cluster.ResizeInfo.AllowCancelResize', props);
    return resource.getResponseField('Cluster.ResizeInfo.AllowCancelResize') as unknown as boolean;
  }

}

export class RedshiftDeleteClusterSnapshot extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDeleteClusterSnapshotMessage) {
    super(scope, id);
  }

  public get snapshot(): RedshiftDeleteClusterSnapshotSnapshot {
    return new RedshiftDeleteClusterSnapshotSnapshot(this, 'Snapshot', this.__resources, this.input);
  }

}

export class RedshiftDeleteClusterSnapshotSnapshot extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDeleteClusterSnapshotMessage) {
    super(scope, id);
  }

  public get snapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.SnapshotIdentifier'),
        outputPath: 'Snapshot.SnapshotIdentifier',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClusterSnapshot.Snapshot.SnapshotIdentifier', props);
    return resource.getResponseField('Snapshot.SnapshotIdentifier') as unknown as string;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.ClusterIdentifier'),
        outputPath: 'Snapshot.ClusterIdentifier',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClusterSnapshot.Snapshot.ClusterIdentifier', props);
    return resource.getResponseField('Snapshot.ClusterIdentifier') as unknown as string;
  }

  public get snapshotCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.SnapshotCreateTime'),
        outputPath: 'Snapshot.SnapshotCreateTime',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClusterSnapshot.Snapshot.SnapshotCreateTime', props);
    return resource.getResponseField('Snapshot.SnapshotCreateTime') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.Status'),
        outputPath: 'Snapshot.Status',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClusterSnapshot.Snapshot.Status', props);
    return resource.getResponseField('Snapshot.Status') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.Port'),
        outputPath: 'Snapshot.Port',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClusterSnapshot.Snapshot.Port', props);
    return resource.getResponseField('Snapshot.Port') as unknown as number;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.AvailabilityZone'),
        outputPath: 'Snapshot.AvailabilityZone',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClusterSnapshot.Snapshot.AvailabilityZone', props);
    return resource.getResponseField('Snapshot.AvailabilityZone') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.ClusterCreateTime'),
        outputPath: 'Snapshot.ClusterCreateTime',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClusterSnapshot.Snapshot.ClusterCreateTime', props);
    return resource.getResponseField('Snapshot.ClusterCreateTime') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.MasterUsername'),
        outputPath: 'Snapshot.MasterUsername',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClusterSnapshot.Snapshot.MasterUsername', props);
    return resource.getResponseField('Snapshot.MasterUsername') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.ClusterVersion'),
        outputPath: 'Snapshot.ClusterVersion',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClusterSnapshot.Snapshot.ClusterVersion', props);
    return resource.getResponseField('Snapshot.ClusterVersion') as unknown as string;
  }

  public get snapshotType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.SnapshotType'),
        outputPath: 'Snapshot.SnapshotType',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClusterSnapshot.Snapshot.SnapshotType', props);
    return resource.getResponseField('Snapshot.SnapshotType') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.NodeType'),
        outputPath: 'Snapshot.NodeType',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClusterSnapshot.Snapshot.NodeType', props);
    return resource.getResponseField('Snapshot.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.NumberOfNodes'),
        outputPath: 'Snapshot.NumberOfNodes',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClusterSnapshot.Snapshot.NumberOfNodes', props);
    return resource.getResponseField('Snapshot.NumberOfNodes') as unknown as number;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.DBName'),
        outputPath: 'Snapshot.DBName',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClusterSnapshot.Snapshot.DBName', props);
    return resource.getResponseField('Snapshot.DBName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.VpcId'),
        outputPath: 'Snapshot.VpcId',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClusterSnapshot.Snapshot.VpcId', props);
    return resource.getResponseField('Snapshot.VpcId') as unknown as string;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.Encrypted'),
        outputPath: 'Snapshot.Encrypted',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClusterSnapshot.Snapshot.Encrypted', props);
    return resource.getResponseField('Snapshot.Encrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.KmsKeyId'),
        outputPath: 'Snapshot.KmsKeyId',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClusterSnapshot.Snapshot.KmsKeyId', props);
    return resource.getResponseField('Snapshot.KmsKeyId') as unknown as string;
  }

  public get encryptedWithHsm(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.EncryptedWithHSM'),
        outputPath: 'Snapshot.EncryptedWithHSM',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClusterSnapshot.Snapshot.EncryptedWithHSM', props);
    return resource.getResponseField('Snapshot.EncryptedWithHSM') as unknown as boolean;
  }

  public get accountsWithRestoreAccess(): shapes.RedshiftAccountWithRestoreAccess[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.AccountsWithRestoreAccess'),
        outputPath: 'Snapshot.AccountsWithRestoreAccess',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClusterSnapshot.Snapshot.AccountsWithRestoreAccess', props);
    return resource.getResponseField('Snapshot.AccountsWithRestoreAccess') as unknown as shapes.RedshiftAccountWithRestoreAccess[];
  }

  public get ownerAccount(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.OwnerAccount'),
        outputPath: 'Snapshot.OwnerAccount',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClusterSnapshot.Snapshot.OwnerAccount', props);
    return resource.getResponseField('Snapshot.OwnerAccount') as unknown as string;
  }

  public get totalBackupSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.TotalBackupSizeInMegaBytes'),
        outputPath: 'Snapshot.TotalBackupSizeInMegaBytes',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClusterSnapshot.Snapshot.TotalBackupSizeInMegaBytes', props);
    return resource.getResponseField('Snapshot.TotalBackupSizeInMegaBytes') as unknown as number;
  }

  public get actualIncrementalBackupSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.ActualIncrementalBackupSizeInMegaBytes'),
        outputPath: 'Snapshot.ActualIncrementalBackupSizeInMegaBytes',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClusterSnapshot.Snapshot.ActualIncrementalBackupSizeInMegaBytes', props);
    return resource.getResponseField('Snapshot.ActualIncrementalBackupSizeInMegaBytes') as unknown as number;
  }

  public get backupProgressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.BackupProgressInMegaBytes'),
        outputPath: 'Snapshot.BackupProgressInMegaBytes',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClusterSnapshot.Snapshot.BackupProgressInMegaBytes', props);
    return resource.getResponseField('Snapshot.BackupProgressInMegaBytes') as unknown as number;
  }

  public get currentBackupRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.CurrentBackupRateInMegaBytesPerSecond'),
        outputPath: 'Snapshot.CurrentBackupRateInMegaBytesPerSecond',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClusterSnapshot.Snapshot.CurrentBackupRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Snapshot.CurrentBackupRateInMegaBytesPerSecond') as unknown as number;
  }

  public get estimatedSecondsToCompletion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.EstimatedSecondsToCompletion'),
        outputPath: 'Snapshot.EstimatedSecondsToCompletion',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClusterSnapshot.Snapshot.EstimatedSecondsToCompletion', props);
    return resource.getResponseField('Snapshot.EstimatedSecondsToCompletion') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.ElapsedTimeInSeconds'),
        outputPath: 'Snapshot.ElapsedTimeInSeconds',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClusterSnapshot.Snapshot.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Snapshot.ElapsedTimeInSeconds') as unknown as number;
  }

  public get sourceRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.SourceRegion'),
        outputPath: 'Snapshot.SourceRegion',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClusterSnapshot.Snapshot.SourceRegion', props);
    return resource.getResponseField('Snapshot.SourceRegion') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.Tags'),
        outputPath: 'Snapshot.Tags',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClusterSnapshot.Snapshot.Tags', props);
    return resource.getResponseField('Snapshot.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get restorableNodeTypes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.RestorableNodeTypes'),
        outputPath: 'Snapshot.RestorableNodeTypes',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClusterSnapshot.Snapshot.RestorableNodeTypes', props);
    return resource.getResponseField('Snapshot.RestorableNodeTypes') as unknown as string[];
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.EnhancedVpcRouting'),
        outputPath: 'Snapshot.EnhancedVpcRouting',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClusterSnapshot.Snapshot.EnhancedVpcRouting', props);
    return resource.getResponseField('Snapshot.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.MaintenanceTrackName'),
        outputPath: 'Snapshot.MaintenanceTrackName',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClusterSnapshot.Snapshot.MaintenanceTrackName', props);
    return resource.getResponseField('Snapshot.MaintenanceTrackName') as unknown as string;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.ManualSnapshotRetentionPeriod'),
        outputPath: 'Snapshot.ManualSnapshotRetentionPeriod',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClusterSnapshot.Snapshot.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Snapshot.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRemainingDays(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.ManualSnapshotRemainingDays'),
        outputPath: 'Snapshot.ManualSnapshotRemainingDays',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClusterSnapshot.Snapshot.ManualSnapshotRemainingDays', props);
    return resource.getResponseField('Snapshot.ManualSnapshotRemainingDays') as unknown as number;
  }

  public get snapshotRetentionStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.SnapshotRetentionStartTime'),
        outputPath: 'Snapshot.SnapshotRetentionStartTime',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClusterSnapshot.Snapshot.SnapshotRetentionStartTime', props);
    return resource.getResponseField('Snapshot.SnapshotRetentionStartTime') as unknown as string;
  }

}

export class RedshiftDescribeAccountAttributes extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDescribeAccountAttributesMessage) {
    super(scope, id);
  }

  public get accountAttributes(): shapes.RedshiftAccountAttribute[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeAccountAttributes',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeAccountAttributes.AccountAttributes'),
        outputPath: 'AccountAttributes',
        parameters: {
          AttributeNames: this.input.attributeNames,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeAccountAttributes.AccountAttributes', props);
    return resource.getResponseField('AccountAttributes') as unknown as shapes.RedshiftAccountAttribute[];
  }

}

export class RedshiftDescribeClusterDbRevisions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDescribeClusterDbRevisionsMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusterDbRevisions',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusterDbRevisions.Marker'),
        outputPath: 'Marker',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeClusterDbRevisions.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get clusterDbRevisions(): shapes.RedshiftClusterDbRevision[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusterDbRevisions',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusterDbRevisions.ClusterDbRevisions'),
        outputPath: 'ClusterDbRevisions',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeClusterDbRevisions.ClusterDbRevisions', props);
    return resource.getResponseField('ClusterDbRevisions') as unknown as shapes.RedshiftClusterDbRevision[];
  }

}

export class RedshiftDescribeClusterParameterGroups extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDescribeClusterParameterGroupsMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusterParameterGroups',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusterParameterGroups.Marker'),
        outputPath: 'Marker',
        parameters: {
          ParameterGroupName: this.input.parameterGroupName,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
          TagKeys: this.input.tagKeys,
          TagValues: this.input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeClusterParameterGroups.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get parameterGroups(): shapes.RedshiftClusterParameterGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusterParameterGroups',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusterParameterGroups.ParameterGroups'),
        outputPath: 'ParameterGroups',
        parameters: {
          ParameterGroupName: this.input.parameterGroupName,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
          TagKeys: this.input.tagKeys,
          TagValues: this.input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeClusterParameterGroups.ParameterGroups', props);
    return resource.getResponseField('ParameterGroups') as unknown as shapes.RedshiftClusterParameterGroup[];
  }

}

export class RedshiftDescribeClusterParameters extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDescribeClusterParametersMessage) {
    super(scope, id);
  }

  public get parameters(): shapes.RedshiftParameter[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusterParameters',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusterParameters.Parameters'),
        outputPath: 'Parameters',
        parameters: {
          ParameterGroupName: this.input.parameterGroupName,
          Source: this.input.source,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeClusterParameters.Parameters', props);
    return resource.getResponseField('Parameters') as unknown as shapes.RedshiftParameter[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusterParameters',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusterParameters.Marker'),
        outputPath: 'Marker',
        parameters: {
          ParameterGroupName: this.input.parameterGroupName,
          Source: this.input.source,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeClusterParameters.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RedshiftDescribeClusterSecurityGroups extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDescribeClusterSecurityGroupsMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusterSecurityGroups',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusterSecurityGroups.Marker'),
        outputPath: 'Marker',
        parameters: {
          ClusterSecurityGroupName: this.input.clusterSecurityGroupName,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
          TagKeys: this.input.tagKeys,
          TagValues: this.input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeClusterSecurityGroups.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get clusterSecurityGroups(): shapes.RedshiftClusterSecurityGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusterSecurityGroups',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusterSecurityGroups.ClusterSecurityGroups'),
        outputPath: 'ClusterSecurityGroups',
        parameters: {
          ClusterSecurityGroupName: this.input.clusterSecurityGroupName,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
          TagKeys: this.input.tagKeys,
          TagValues: this.input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeClusterSecurityGroups.ClusterSecurityGroups', props);
    return resource.getResponseField('ClusterSecurityGroups') as unknown as shapes.RedshiftClusterSecurityGroup[];
  }

}

export class RedshiftDescribeClusterSnapshots extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDescribeClusterSnapshotsMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusterSnapshots',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusterSnapshots.Marker'),
        outputPath: 'Marker',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotType: this.input.snapshotType,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
          OwnerAccount: this.input.ownerAccount,
          TagKeys: this.input.tagKeys,
          TagValues: this.input.tagValues,
          ClusterExists: this.input.clusterExists,
          SortingEntities: this.input.sortingEntities,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeClusterSnapshots.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get snapshots(): shapes.RedshiftSnapshot[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusterSnapshots',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusterSnapshots.Snapshots'),
        outputPath: 'Snapshots',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotType: this.input.snapshotType,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
          OwnerAccount: this.input.ownerAccount,
          TagKeys: this.input.tagKeys,
          TagValues: this.input.tagValues,
          ClusterExists: this.input.clusterExists,
          SortingEntities: this.input.sortingEntities,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeClusterSnapshots.Snapshots', props);
    return resource.getResponseField('Snapshots') as unknown as shapes.RedshiftSnapshot[];
  }

}

export class RedshiftDescribeClusterSubnetGroups extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDescribeClusterSubnetGroupsMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusterSubnetGroups',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusterSubnetGroups.Marker'),
        outputPath: 'Marker',
        parameters: {
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
          TagKeys: this.input.tagKeys,
          TagValues: this.input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeClusterSubnetGroups.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get clusterSubnetGroups(): shapes.RedshiftClusterSubnetGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusterSubnetGroups',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusterSubnetGroups.ClusterSubnetGroups'),
        outputPath: 'ClusterSubnetGroups',
        parameters: {
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
          TagKeys: this.input.tagKeys,
          TagValues: this.input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeClusterSubnetGroups.ClusterSubnetGroups', props);
    return resource.getResponseField('ClusterSubnetGroups') as unknown as shapes.RedshiftClusterSubnetGroup[];
  }

}

export class RedshiftDescribeClusterTracks extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDescribeClusterTracksMessage) {
    super(scope, id);
  }

  public get maintenanceTracks(): shapes.RedshiftMaintenanceTrack[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusterTracks',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusterTracks.MaintenanceTracks'),
        outputPath: 'MaintenanceTracks',
        parameters: {
          MaintenanceTrackName: this.input.maintenanceTrackName,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeClusterTracks.MaintenanceTracks', props);
    return resource.getResponseField('MaintenanceTracks') as unknown as shapes.RedshiftMaintenanceTrack[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusterTracks',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusterTracks.Marker'),
        outputPath: 'Marker',
        parameters: {
          MaintenanceTrackName: this.input.maintenanceTrackName,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeClusterTracks.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RedshiftDescribeClusterVersions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDescribeClusterVersionsMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusterVersions',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusterVersions.Marker'),
        outputPath: 'Marker',
        parameters: {
          ClusterVersion: this.input.clusterVersion,
          ClusterParameterGroupFamily: this.input.clusterParameterGroupFamily,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeClusterVersions.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get clusterVersions(): shapes.RedshiftClusterVersion[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusterVersions',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusterVersions.ClusterVersions'),
        outputPath: 'ClusterVersions',
        parameters: {
          ClusterVersion: this.input.clusterVersion,
          ClusterParameterGroupFamily: this.input.clusterParameterGroupFamily,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeClusterVersions.ClusterVersions', props);
    return resource.getResponseField('ClusterVersions') as unknown as shapes.RedshiftClusterVersion[];
  }

}

export class RedshiftDescribeClusters extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDescribeClustersMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusters',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusters.Marker'),
        outputPath: 'Marker',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
          TagKeys: this.input.tagKeys,
          TagValues: this.input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeClusters.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get clusters(): shapes.RedshiftCluster[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusters',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusters.Clusters'),
        outputPath: 'Clusters',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
          TagKeys: this.input.tagKeys,
          TagValues: this.input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeClusters.Clusters', props);
    return resource.getResponseField('Clusters') as unknown as shapes.RedshiftCluster[];
  }

}

export class RedshiftDescribeDefaultClusterParameters extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDescribeDefaultClusterParametersMessage) {
    super(scope, id);
  }

  public get defaultClusterParameters(): RedshiftDescribeDefaultClusterParametersDefaultClusterParameters {
    return new RedshiftDescribeDefaultClusterParametersDefaultClusterParameters(this, 'DefaultClusterParameters', this.__resources, this.input);
  }

}

export class RedshiftDescribeDefaultClusterParametersDefaultClusterParameters extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDescribeDefaultClusterParametersMessage) {
    super(scope, id);
  }

  public get parameterGroupFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDefaultClusterParameters',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeDefaultClusterParameters.DefaultClusterParameters.ParameterGroupFamily'),
        outputPath: 'DefaultClusterParameters.ParameterGroupFamily',
        parameters: {
          ParameterGroupFamily: this.input.parameterGroupFamily,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDefaultClusterParameters.DefaultClusterParameters.ParameterGroupFamily', props);
    return resource.getResponseField('DefaultClusterParameters.ParameterGroupFamily') as unknown as string;
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDefaultClusterParameters',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeDefaultClusterParameters.DefaultClusterParameters.Marker'),
        outputPath: 'DefaultClusterParameters.Marker',
        parameters: {
          ParameterGroupFamily: this.input.parameterGroupFamily,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDefaultClusterParameters.DefaultClusterParameters.Marker', props);
    return resource.getResponseField('DefaultClusterParameters.Marker') as unknown as string;
  }

  public get parameters(): shapes.RedshiftParameter[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDefaultClusterParameters',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeDefaultClusterParameters.DefaultClusterParameters.Parameters'),
        outputPath: 'DefaultClusterParameters.Parameters',
        parameters: {
          ParameterGroupFamily: this.input.parameterGroupFamily,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDefaultClusterParameters.DefaultClusterParameters.Parameters', props);
    return resource.getResponseField('DefaultClusterParameters.Parameters') as unknown as shapes.RedshiftParameter[];
  }

}

export class RedshiftDescribeEventCategories extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDescribeEventCategoriesMessage) {
    super(scope, id);
  }

  public get eventCategoriesMapList(): shapes.RedshiftEventCategoriesMap[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEventCategories',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeEventCategories.EventCategoriesMapList'),
        outputPath: 'EventCategoriesMapList',
        parameters: {
          SourceType: this.input.sourceType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeEventCategories.EventCategoriesMapList', props);
    return resource.getResponseField('EventCategoriesMapList') as unknown as shapes.RedshiftEventCategoriesMap[];
  }

}

export class RedshiftDescribeEventSubscriptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDescribeEventSubscriptionsMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEventSubscriptions',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeEventSubscriptions.Marker'),
        outputPath: 'Marker',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
          TagKeys: this.input.tagKeys,
          TagValues: this.input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeEventSubscriptions.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get eventSubscriptionsList(): shapes.RedshiftEventSubscription[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEventSubscriptions',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeEventSubscriptions.EventSubscriptionsList'),
        outputPath: 'EventSubscriptionsList',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
          TagKeys: this.input.tagKeys,
          TagValues: this.input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeEventSubscriptions.EventSubscriptionsList', props);
    return resource.getResponseField('EventSubscriptionsList') as unknown as shapes.RedshiftEventSubscription[];
  }

}

export class RedshiftDescribeEvents extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDescribeEventsMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEvents',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeEvents.Marker'),
        outputPath: 'Marker',
        parameters: {
          SourceIdentifier: this.input.sourceIdentifier,
          SourceType: this.input.sourceType,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Duration: this.input.duration,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeEvents.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get events(): shapes.RedshiftEvent[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEvents',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeEvents.Events'),
        outputPath: 'Events',
        parameters: {
          SourceIdentifier: this.input.sourceIdentifier,
          SourceType: this.input.sourceType,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Duration: this.input.duration,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeEvents.Events', props);
    return resource.getResponseField('Events') as unknown as shapes.RedshiftEvent[];
  }

}

export class RedshiftDescribeHsmClientCertificates extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDescribeHsmClientCertificatesMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeHsmClientCertificates',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeHsmClientCertificates.Marker'),
        outputPath: 'Marker',
        parameters: {
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
          TagKeys: this.input.tagKeys,
          TagValues: this.input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeHsmClientCertificates.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get hsmClientCertificates(): shapes.RedshiftHsmClientCertificate[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeHsmClientCertificates',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeHsmClientCertificates.HsmClientCertificates'),
        outputPath: 'HsmClientCertificates',
        parameters: {
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
          TagKeys: this.input.tagKeys,
          TagValues: this.input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeHsmClientCertificates.HsmClientCertificates', props);
    return resource.getResponseField('HsmClientCertificates') as unknown as shapes.RedshiftHsmClientCertificate[];
  }

}

export class RedshiftDescribeHsmConfigurations extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDescribeHsmConfigurationsMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeHsmConfigurations',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeHsmConfigurations.Marker'),
        outputPath: 'Marker',
        parameters: {
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
          TagKeys: this.input.tagKeys,
          TagValues: this.input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeHsmConfigurations.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get hsmConfigurations(): shapes.RedshiftHsmConfiguration[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeHsmConfigurations',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeHsmConfigurations.HsmConfigurations'),
        outputPath: 'HsmConfigurations',
        parameters: {
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
          TagKeys: this.input.tagKeys,
          TagValues: this.input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeHsmConfigurations.HsmConfigurations', props);
    return resource.getResponseField('HsmConfigurations') as unknown as shapes.RedshiftHsmConfiguration[];
  }

}

export class RedshiftDescribeLoggingStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDescribeLoggingStatusMessage) {
    super(scope, id);
  }

  public get loggingEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLoggingStatus',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeLoggingStatus.LoggingEnabled'),
        outputPath: 'LoggingEnabled',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeLoggingStatus.LoggingEnabled', props);
    return resource.getResponseField('LoggingEnabled') as unknown as boolean;
  }

  public get bucketName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLoggingStatus',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeLoggingStatus.BucketName'),
        outputPath: 'BucketName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeLoggingStatus.BucketName', props);
    return resource.getResponseField('BucketName') as unknown as string;
  }

  public get s3KeyPrefix(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLoggingStatus',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeLoggingStatus.S3KeyPrefix'),
        outputPath: 'S3KeyPrefix',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeLoggingStatus.S3KeyPrefix', props);
    return resource.getResponseField('S3KeyPrefix') as unknown as string;
  }

  public get lastSuccessfulDeliveryTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLoggingStatus',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeLoggingStatus.LastSuccessfulDeliveryTime'),
        outputPath: 'LastSuccessfulDeliveryTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeLoggingStatus.LastSuccessfulDeliveryTime', props);
    return resource.getResponseField('LastSuccessfulDeliveryTime') as unknown as string;
  }

  public get lastFailureTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLoggingStatus',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeLoggingStatus.LastFailureTime'),
        outputPath: 'LastFailureTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeLoggingStatus.LastFailureTime', props);
    return resource.getResponseField('LastFailureTime') as unknown as string;
  }

  public get lastFailureMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLoggingStatus',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeLoggingStatus.LastFailureMessage'),
        outputPath: 'LastFailureMessage',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeLoggingStatus.LastFailureMessage', props);
    return resource.getResponseField('LastFailureMessage') as unknown as string;
  }

}

export class RedshiftDescribeNodeConfigurationOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDescribeNodeConfigurationOptionsMessage) {
    super(scope, id);
  }

  public get nodeConfigurationOptionList(): shapes.RedshiftNodeConfigurationOption[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNodeConfigurationOptions',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeNodeConfigurationOptions.NodeConfigurationOptionList'),
        outputPath: 'NodeConfigurationOptionList',
        parameters: {
          ActionType: this.input.actionType,
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          OwnerAccount: this.input.ownerAccount,
          Filters: this.input.filters,
          Marker: this.input.marker,
          MaxRecords: this.input.maxRecords,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeNodeConfigurationOptions.NodeConfigurationOptionList', props);
    return resource.getResponseField('NodeConfigurationOptionList') as unknown as shapes.RedshiftNodeConfigurationOption[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNodeConfigurationOptions',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeNodeConfigurationOptions.Marker'),
        outputPath: 'Marker',
        parameters: {
          ActionType: this.input.actionType,
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          OwnerAccount: this.input.ownerAccount,
          Filters: this.input.filters,
          Marker: this.input.marker,
          MaxRecords: this.input.maxRecords,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeNodeConfigurationOptions.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RedshiftDescribeOrderableClusterOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDescribeOrderableClusterOptionsMessage) {
    super(scope, id);
  }

  public get orderableClusterOptions(): shapes.RedshiftOrderableClusterOption[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOrderableClusterOptions',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeOrderableClusterOptions.OrderableClusterOptions'),
        outputPath: 'OrderableClusterOptions',
        parameters: {
          ClusterVersion: this.input.clusterVersion,
          NodeType: this.input.nodeType,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOrderableClusterOptions.OrderableClusterOptions', props);
    return resource.getResponseField('OrderableClusterOptions') as unknown as shapes.RedshiftOrderableClusterOption[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOrderableClusterOptions',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeOrderableClusterOptions.Marker'),
        outputPath: 'Marker',
        parameters: {
          ClusterVersion: this.input.clusterVersion,
          NodeType: this.input.nodeType,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOrderableClusterOptions.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RedshiftDescribeReservedNodeOfferings extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDescribeReservedNodeOfferingsMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedNodeOfferings',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeReservedNodeOfferings.Marker'),
        outputPath: 'Marker',
        parameters: {
          ReservedNodeOfferingId: this.input.reservedNodeOfferingId,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeReservedNodeOfferings.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get reservedNodeOfferings(): shapes.RedshiftReservedNodeOffering[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedNodeOfferings',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeReservedNodeOfferings.ReservedNodeOfferings'),
        outputPath: 'ReservedNodeOfferings',
        parameters: {
          ReservedNodeOfferingId: this.input.reservedNodeOfferingId,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeReservedNodeOfferings.ReservedNodeOfferings', props);
    return resource.getResponseField('ReservedNodeOfferings') as unknown as shapes.RedshiftReservedNodeOffering[];
  }

}

export class RedshiftDescribeReservedNodes extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDescribeReservedNodesMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedNodes',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeReservedNodes.Marker'),
        outputPath: 'Marker',
        parameters: {
          ReservedNodeId: this.input.reservedNodeId,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeReservedNodes.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get reservedNodes(): shapes.RedshiftReservedNode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedNodes',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeReservedNodes.ReservedNodes'),
        outputPath: 'ReservedNodes',
        parameters: {
          ReservedNodeId: this.input.reservedNodeId,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeReservedNodes.ReservedNodes', props);
    return resource.getResponseField('ReservedNodes') as unknown as shapes.RedshiftReservedNode[];
  }

}

export class RedshiftDescribeResize extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDescribeResizeMessage) {
    super(scope, id);
  }

  public get targetNodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeResize.TargetNodeType'),
        outputPath: 'TargetNodeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeResize.TargetNodeType', props);
    return resource.getResponseField('TargetNodeType') as unknown as string;
  }

  public get targetNumberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeResize.TargetNumberOfNodes'),
        outputPath: 'TargetNumberOfNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeResize.TargetNumberOfNodes', props);
    return resource.getResponseField('TargetNumberOfNodes') as unknown as number;
  }

  public get targetClusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeResize.TargetClusterType'),
        outputPath: 'TargetClusterType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeResize.TargetClusterType', props);
    return resource.getResponseField('TargetClusterType') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeResize.Status'),
        outputPath: 'Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeResize.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

  public get importTablesCompleted(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeResize.ImportTablesCompleted'),
        outputPath: 'ImportTablesCompleted',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeResize.ImportTablesCompleted', props);
    return resource.getResponseField('ImportTablesCompleted') as unknown as string[];
  }

  public get importTablesInProgress(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeResize.ImportTablesInProgress'),
        outputPath: 'ImportTablesInProgress',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeResize.ImportTablesInProgress', props);
    return resource.getResponseField('ImportTablesInProgress') as unknown as string[];
  }

  public get importTablesNotStarted(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeResize.ImportTablesNotStarted'),
        outputPath: 'ImportTablesNotStarted',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeResize.ImportTablesNotStarted', props);
    return resource.getResponseField('ImportTablesNotStarted') as unknown as string[];
  }

  public get avgResizeRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeResize.AvgResizeRateInMegaBytesPerSecond'),
        outputPath: 'AvgResizeRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeResize.AvgResizeRateInMegaBytesPerSecond', props);
    return resource.getResponseField('AvgResizeRateInMegaBytesPerSecond') as unknown as number;
  }

  public get totalResizeDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeResize.TotalResizeDataInMegaBytes'),
        outputPath: 'TotalResizeDataInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeResize.TotalResizeDataInMegaBytes', props);
    return resource.getResponseField('TotalResizeDataInMegaBytes') as unknown as number;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeResize.ProgressInMegaBytes'),
        outputPath: 'ProgressInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeResize.ProgressInMegaBytes', props);
    return resource.getResponseField('ProgressInMegaBytes') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeResize.ElapsedTimeInSeconds'),
        outputPath: 'ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeResize.ElapsedTimeInSeconds', props);
    return resource.getResponseField('ElapsedTimeInSeconds') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeResize.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeResize.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

  public get resizeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeResize.ResizeType'),
        outputPath: 'ResizeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeResize.ResizeType', props);
    return resource.getResponseField('ResizeType') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeResize.Message'),
        outputPath: 'Message',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeResize.Message', props);
    return resource.getResponseField('Message') as unknown as string;
  }

  public get targetEncryptionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeResize.TargetEncryptionType'),
        outputPath: 'TargetEncryptionType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeResize.TargetEncryptionType', props);
    return resource.getResponseField('TargetEncryptionType') as unknown as string;
  }

  public get dataTransferProgressPercent(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeResize.DataTransferProgressPercent'),
        outputPath: 'DataTransferProgressPercent',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeResize.DataTransferProgressPercent', props);
    return resource.getResponseField('DataTransferProgressPercent') as unknown as number;
  }

}

export class RedshiftDescribeScheduledActions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDescribeScheduledActionsMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeScheduledActions',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeScheduledActions.Marker'),
        outputPath: 'Marker',
        parameters: {
          ScheduledActionName: this.input.scheduledActionName,
          TargetActionType: this.input.targetActionType,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Active: this.input.active,
          Filters: this.input.filters,
          Marker: this.input.marker,
          MaxRecords: this.input.maxRecords,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeScheduledActions.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get scheduledActions(): shapes.RedshiftScheduledAction[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeScheduledActions',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeScheduledActions.ScheduledActions'),
        outputPath: 'ScheduledActions',
        parameters: {
          ScheduledActionName: this.input.scheduledActionName,
          TargetActionType: this.input.targetActionType,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Active: this.input.active,
          Filters: this.input.filters,
          Marker: this.input.marker,
          MaxRecords: this.input.maxRecords,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeScheduledActions.ScheduledActions', props);
    return resource.getResponseField('ScheduledActions') as unknown as shapes.RedshiftScheduledAction[];
  }

}

export class RedshiftDescribeSnapshotCopyGrants extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDescribeSnapshotCopyGrantsMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSnapshotCopyGrants',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeSnapshotCopyGrants.Marker'),
        outputPath: 'Marker',
        parameters: {
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
          TagKeys: this.input.tagKeys,
          TagValues: this.input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSnapshotCopyGrants.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get snapshotCopyGrants(): shapes.RedshiftSnapshotCopyGrant[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSnapshotCopyGrants',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeSnapshotCopyGrants.SnapshotCopyGrants'),
        outputPath: 'SnapshotCopyGrants',
        parameters: {
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
          TagKeys: this.input.tagKeys,
          TagValues: this.input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSnapshotCopyGrants.SnapshotCopyGrants', props);
    return resource.getResponseField('SnapshotCopyGrants') as unknown as shapes.RedshiftSnapshotCopyGrant[];
  }

}

export class RedshiftDescribeSnapshotSchedules extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDescribeSnapshotSchedulesMessage) {
    super(scope, id);
  }

  public get snapshotSchedules(): shapes.RedshiftSnapshotSchedule[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSnapshotSchedules',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeSnapshotSchedules.SnapshotSchedules'),
        outputPath: 'SnapshotSchedules',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ScheduleIdentifier: this.input.scheduleIdentifier,
          TagKeys: this.input.tagKeys,
          TagValues: this.input.tagValues,
          Marker: this.input.marker,
          MaxRecords: this.input.maxRecords,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSnapshotSchedules.SnapshotSchedules', props);
    return resource.getResponseField('SnapshotSchedules') as unknown as shapes.RedshiftSnapshotSchedule[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSnapshotSchedules',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeSnapshotSchedules.Marker'),
        outputPath: 'Marker',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ScheduleIdentifier: this.input.scheduleIdentifier,
          TagKeys: this.input.tagKeys,
          TagValues: this.input.tagValues,
          Marker: this.input.marker,
          MaxRecords: this.input.maxRecords,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSnapshotSchedules.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RedshiftDescribeStorage extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[]) {
    super(scope, id);
  }

  public get totalBackupSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeStorage',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeStorage.TotalBackupSizeInMegaBytes'),
        outputPath: 'TotalBackupSizeInMegaBytes',
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeStorage.TotalBackupSizeInMegaBytes', props);
    return resource.getResponseField('TotalBackupSizeInMegaBytes') as unknown as number;
  }

  public get totalProvisionedStorageInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeStorage',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeStorage.TotalProvisionedStorageInMegaBytes'),
        outputPath: 'TotalProvisionedStorageInMegaBytes',
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeStorage.TotalProvisionedStorageInMegaBytes', props);
    return resource.getResponseField('TotalProvisionedStorageInMegaBytes') as unknown as number;
  }

}

export class RedshiftDescribeTableRestoreStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDescribeTableRestoreStatusMessage) {
    super(scope, id);
  }

  public get tableRestoreStatusDetails(): shapes.RedshiftTableRestoreStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTableRestoreStatus',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeTableRestoreStatus.TableRestoreStatusDetails'),
        outputPath: 'TableRestoreStatusDetails',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          TableRestoreRequestId: this.input.tableRestoreRequestId,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeTableRestoreStatus.TableRestoreStatusDetails', props);
    return resource.getResponseField('TableRestoreStatusDetails') as unknown as shapes.RedshiftTableRestoreStatus[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTableRestoreStatus',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeTableRestoreStatus.Marker'),
        outputPath: 'Marker',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          TableRestoreRequestId: this.input.tableRestoreRequestId,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeTableRestoreStatus.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RedshiftDescribeTags extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDescribeTagsMessage) {
    super(scope, id);
  }

  public get taggedResources(): shapes.RedshiftTaggedResource[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTags',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeTags.TaggedResources'),
        outputPath: 'TaggedResources',
        parameters: {
          ResourceName: this.input.resourceName,
          ResourceType: this.input.resourceType,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
          TagKeys: this.input.tagKeys,
          TagValues: this.input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeTags.TaggedResources', props);
    return resource.getResponseField('TaggedResources') as unknown as shapes.RedshiftTaggedResource[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTags',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeTags.Marker'),
        outputPath: 'Marker',
        parameters: {
          ResourceName: this.input.resourceName,
          ResourceType: this.input.resourceType,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
          TagKeys: this.input.tagKeys,
          TagValues: this.input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeTags.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RedshiftDescribeUsageLimits extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDescribeUsageLimitsMessage) {
    super(scope, id);
  }

  public get usageLimits(): shapes.RedshiftUsageLimit[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeUsageLimits',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeUsageLimits.UsageLimits'),
        outputPath: 'UsageLimits',
        parameters: {
          UsageLimitId: this.input.usageLimitId,
          ClusterIdentifier: this.input.clusterIdentifier,
          FeatureType: this.input.featureType,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
          TagKeys: this.input.tagKeys,
          TagValues: this.input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeUsageLimits.UsageLimits', props);
    return resource.getResponseField('UsageLimits') as unknown as shapes.RedshiftUsageLimit[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeUsageLimits',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeUsageLimits.Marker'),
        outputPath: 'Marker',
        parameters: {
          UsageLimitId: this.input.usageLimitId,
          ClusterIdentifier: this.input.clusterIdentifier,
          FeatureType: this.input.featureType,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
          TagKeys: this.input.tagKeys,
          TagValues: this.input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeUsageLimits.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RedshiftDisableLogging extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDisableLoggingMessage) {
    super(scope, id);
  }

  public get loggingEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableLogging',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableLogging.LoggingEnabled'),
        outputPath: 'LoggingEnabled',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableLogging.LoggingEnabled', props);
    return resource.getResponseField('LoggingEnabled') as unknown as boolean;
  }

  public get bucketName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableLogging',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableLogging.BucketName'),
        outputPath: 'BucketName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableLogging.BucketName', props);
    return resource.getResponseField('BucketName') as unknown as string;
  }

  public get s3KeyPrefix(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableLogging',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableLogging.S3KeyPrefix'),
        outputPath: 'S3KeyPrefix',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableLogging.S3KeyPrefix', props);
    return resource.getResponseField('S3KeyPrefix') as unknown as string;
  }

  public get lastSuccessfulDeliveryTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableLogging',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableLogging.LastSuccessfulDeliveryTime'),
        outputPath: 'LastSuccessfulDeliveryTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableLogging.LastSuccessfulDeliveryTime', props);
    return resource.getResponseField('LastSuccessfulDeliveryTime') as unknown as string;
  }

  public get lastFailureTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableLogging',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableLogging.LastFailureTime'),
        outputPath: 'LastFailureTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableLogging.LastFailureTime', props);
    return resource.getResponseField('LastFailureTime') as unknown as string;
  }

  public get lastFailureMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableLogging',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableLogging.LastFailureMessage'),
        outputPath: 'LastFailureMessage',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableLogging.LastFailureMessage', props);
    return resource.getResponseField('LastFailureMessage') as unknown as string;
  }

}

export class RedshiftDisableSnapshotCopy extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDisableSnapshotCopyMessage) {
    super(scope, id);
  }

  public get cluster(): RedshiftDisableSnapshotCopyCluster {
    return new RedshiftDisableSnapshotCopyCluster(this, 'Cluster', this.__resources, this.input);
  }

}

export class RedshiftDisableSnapshotCopyCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDisableSnapshotCopyMessage) {
    super(scope, id);
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ClusterIdentifier'),
        outputPath: 'Cluster.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.ClusterIdentifier') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.NodeType'),
        outputPath: 'Cluster.NodeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.NodeType', props);
    return resource.getResponseField('Cluster.NodeType') as unknown as string;
  }

  public get clusterStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ClusterStatus'),
        outputPath: 'Cluster.ClusterStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.ClusterStatus', props);
    return resource.getResponseField('Cluster.ClusterStatus') as unknown as string;
  }

  public get clusterAvailabilityStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ClusterAvailabilityStatus'),
        outputPath: 'Cluster.ClusterAvailabilityStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.ClusterAvailabilityStatus', props);
    return resource.getResponseField('Cluster.ClusterAvailabilityStatus') as unknown as string;
  }

  public get modifyStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ModifyStatus'),
        outputPath: 'Cluster.ModifyStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.ModifyStatus', props);
    return resource.getResponseField('Cluster.ModifyStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.MasterUsername'),
        outputPath: 'Cluster.MasterUsername',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.MasterUsername', props);
    return resource.getResponseField('Cluster.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.DBName'),
        outputPath: 'Cluster.DBName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.DBName', props);
    return resource.getResponseField('Cluster.DBName') as unknown as string;
  }

  public get endpoint(): RedshiftDisableSnapshotCopyClusterEndpoint {
    return new RedshiftDisableSnapshotCopyClusterEndpoint(this, 'Endpoint', this.__resources, this.input);
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ClusterCreateTime'),
        outputPath: 'Cluster.ClusterCreateTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.ClusterCreateTime', props);
    return resource.getResponseField('Cluster.ClusterCreateTime') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterSecurityGroups(): shapes.RedshiftClusterSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ClusterSecurityGroups'),
        outputPath: 'Cluster.ClusterSecurityGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.ClusterSecurityGroups', props);
    return resource.getResponseField('Cluster.ClusterSecurityGroups') as unknown as shapes.RedshiftClusterSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RedshiftVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.VpcSecurityGroups'),
        outputPath: 'Cluster.VpcSecurityGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.VpcSecurityGroups', props);
    return resource.getResponseField('Cluster.VpcSecurityGroups') as unknown as shapes.RedshiftVpcSecurityGroupMembership[];
  }

  public get clusterParameterGroups(): shapes.RedshiftClusterParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ClusterParameterGroups'),
        outputPath: 'Cluster.ClusterParameterGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.ClusterParameterGroups', props);
    return resource.getResponseField('Cluster.ClusterParameterGroups') as unknown as shapes.RedshiftClusterParameterGroupStatus[];
  }

  public get clusterSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ClusterSubnetGroupName'),
        outputPath: 'Cluster.ClusterSubnetGroupName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.ClusterSubnetGroupName', props);
    return resource.getResponseField('Cluster.ClusterSubnetGroupName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.VpcId'),
        outputPath: 'Cluster.VpcId',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.VpcId', props);
    return resource.getResponseField('Cluster.VpcId') as unknown as string;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.AvailabilityZone'),
        outputPath: 'Cluster.AvailabilityZone',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.AvailabilityZone', props);
    return resource.getResponseField('Cluster.AvailabilityZone') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.PreferredMaintenanceWindow'),
        outputPath: 'Cluster.PreferredMaintenanceWindow',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('Cluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RedshiftDisableSnapshotCopyClusterPendingModifiedValues {
    return new RedshiftDisableSnapshotCopyClusterPendingModifiedValues(this, 'PendingModifiedValues', this.__resources, this.input);
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ClusterVersion'),
        outputPath: 'Cluster.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.ClusterVersion', props);
    return resource.getResponseField('Cluster.ClusterVersion') as unknown as string;
  }

  public get allowVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.AllowVersionUpgrade'),
        outputPath: 'Cluster.AllowVersionUpgrade',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.AllowVersionUpgrade', props);
    return resource.getResponseField('Cluster.AllowVersionUpgrade') as unknown as boolean;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.NumberOfNodes'),
        outputPath: 'Cluster.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.NumberOfNodes', props);
    return resource.getResponseField('Cluster.NumberOfNodes') as unknown as number;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.PubliclyAccessible'),
        outputPath: 'Cluster.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PubliclyAccessible') as unknown as boolean;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.Encrypted'),
        outputPath: 'Cluster.Encrypted',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.Encrypted', props);
    return resource.getResponseField('Cluster.Encrypted') as unknown as boolean;
  }

  public get restoreStatus(): RedshiftDisableSnapshotCopyClusterRestoreStatus {
    return new RedshiftDisableSnapshotCopyClusterRestoreStatus(this, 'RestoreStatus', this.__resources, this.input);
  }

  public get dataTransferProgress(): RedshiftDisableSnapshotCopyClusterDataTransferProgress {
    return new RedshiftDisableSnapshotCopyClusterDataTransferProgress(this, 'DataTransferProgress', this.__resources, this.input);
  }

  public get hsmStatus(): RedshiftDisableSnapshotCopyClusterHsmStatus {
    return new RedshiftDisableSnapshotCopyClusterHsmStatus(this, 'HsmStatus', this.__resources, this.input);
  }

  public get clusterSnapshotCopyStatus(): RedshiftDisableSnapshotCopyClusterClusterSnapshotCopyStatus {
    return new RedshiftDisableSnapshotCopyClusterClusterSnapshotCopyStatus(this, 'ClusterSnapshotCopyStatus', this.__resources, this.input);
  }

  public get clusterPublicKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ClusterPublicKey'),
        outputPath: 'Cluster.ClusterPublicKey',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.ClusterPublicKey', props);
    return resource.getResponseField('Cluster.ClusterPublicKey') as unknown as string;
  }

  public get clusterNodes(): shapes.RedshiftClusterNode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ClusterNodes'),
        outputPath: 'Cluster.ClusterNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.ClusterNodes', props);
    return resource.getResponseField('Cluster.ClusterNodes') as unknown as shapes.RedshiftClusterNode[];
  }

  public get elasticIpStatus(): RedshiftDisableSnapshotCopyClusterElasticIpStatus {
    return new RedshiftDisableSnapshotCopyClusterElasticIpStatus(this, 'ElasticIpStatus', this.__resources, this.input);
  }

  public get clusterRevisionNumber(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ClusterRevisionNumber'),
        outputPath: 'Cluster.ClusterRevisionNumber',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.ClusterRevisionNumber', props);
    return resource.getResponseField('Cluster.ClusterRevisionNumber') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.Tags'),
        outputPath: 'Cluster.Tags',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.Tags', props);
    return resource.getResponseField('Cluster.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.KmsKeyId'),
        outputPath: 'Cluster.KmsKeyId',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.KmsKeyId', props);
    return resource.getResponseField('Cluster.KmsKeyId') as unknown as string;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.EnhancedVpcRouting'),
        outputPath: 'Cluster.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.EnhancedVpcRouting') as unknown as boolean;
  }

  public get iamRoles(): shapes.RedshiftClusterIamRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.IamRoles'),
        outputPath: 'Cluster.IamRoles',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.IamRoles', props);
    return resource.getResponseField('Cluster.IamRoles') as unknown as shapes.RedshiftClusterIamRole[];
  }

  public get pendingActions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.PendingActions'),
        outputPath: 'Cluster.PendingActions',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.PendingActions', props);
    return resource.getResponseField('Cluster.PendingActions') as unknown as string[];
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.MaintenanceTrackName'),
        outputPath: 'Cluster.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.MaintenanceTrackName') as unknown as string;
  }

  public get elasticResizeNumberOfNodeOptions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ElasticResizeNumberOfNodeOptions'),
        outputPath: 'Cluster.ElasticResizeNumberOfNodeOptions',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.ElasticResizeNumberOfNodeOptions', props);
    return resource.getResponseField('Cluster.ElasticResizeNumberOfNodeOptions') as unknown as string;
  }

  public get deferredMaintenanceWindows(): shapes.RedshiftDeferredMaintenanceWindow[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.DeferredMaintenanceWindows'),
        outputPath: 'Cluster.DeferredMaintenanceWindows',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.DeferredMaintenanceWindows', props);
    return resource.getResponseField('Cluster.DeferredMaintenanceWindows') as unknown as shapes.RedshiftDeferredMaintenanceWindow[];
  }

  public get snapshotScheduleIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.SnapshotScheduleIdentifier'),
        outputPath: 'Cluster.SnapshotScheduleIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.SnapshotScheduleIdentifier', props);
    return resource.getResponseField('Cluster.SnapshotScheduleIdentifier') as unknown as string;
  }

  public get snapshotScheduleState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.SnapshotScheduleState'),
        outputPath: 'Cluster.SnapshotScheduleState',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.SnapshotScheduleState', props);
    return resource.getResponseField('Cluster.SnapshotScheduleState') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ExpectedNextSnapshotScheduleTime'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.ExpectedNextSnapshotScheduleTime', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTime') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTimeStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ExpectedNextSnapshotScheduleTimeStatus'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTimeStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.ExpectedNextSnapshotScheduleTimeStatus', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTimeStatus') as unknown as string;
  }

  public get nextMaintenanceWindowStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.NextMaintenanceWindowStartTime'),
        outputPath: 'Cluster.NextMaintenanceWindowStartTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.NextMaintenanceWindowStartTime', props);
    return resource.getResponseField('Cluster.NextMaintenanceWindowStartTime') as unknown as string;
  }

  public get resizeInfo(): RedshiftDisableSnapshotCopyClusterResizeInfo {
    return new RedshiftDisableSnapshotCopyClusterResizeInfo(this, 'ResizeInfo', this.__resources, this.input);
  }

  public get clusterNamespaceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ClusterNamespaceArn'),
        outputPath: 'Cluster.ClusterNamespaceArn',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.ClusterNamespaceArn', props);
    return resource.getResponseField('Cluster.ClusterNamespaceArn') as unknown as string;
  }

}

export class RedshiftDisableSnapshotCopyClusterEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDisableSnapshotCopyMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.Endpoint.Address'),
        outputPath: 'Cluster.Endpoint.Address',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.Endpoint.Address', props);
    return resource.getResponseField('Cluster.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.Endpoint.Port'),
        outputPath: 'Cluster.Endpoint.Port',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.Endpoint.Port', props);
    return resource.getResponseField('Cluster.Endpoint.Port') as unknown as number;
  }

}

export class RedshiftDisableSnapshotCopyClusterPendingModifiedValues extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDisableSnapshotCopyMessage) {
    super(scope, id);
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'Cluster.PendingModifiedValues.MasterUserPassword',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.PendingModifiedValues.NodeType'),
        outputPath: 'Cluster.PendingModifiedValues.NodeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.PendingModifiedValues.NodeType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.PendingModifiedValues.NumberOfNodes'),
        outputPath: 'Cluster.PendingModifiedValues.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.PendingModifiedValues.NumberOfNodes', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NumberOfNodes') as unknown as number;
  }

  public get clusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.PendingModifiedValues.ClusterType'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.PendingModifiedValues.ClusterType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterType') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.PendingModifiedValues.ClusterVersion'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.PendingModifiedValues.ClusterVersion', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterVersion') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.PendingModifiedValues.ClusterIdentifier'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.PendingModifiedValues.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterIdentifier') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.PendingModifiedValues.PubliclyAccessible'),
        outputPath: 'Cluster.PendingModifiedValues.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.PendingModifiedValues.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.PubliclyAccessible') as unknown as boolean;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.PendingModifiedValues.EnhancedVpcRouting'),
        outputPath: 'Cluster.PendingModifiedValues.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.PendingModifiedValues.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.PendingModifiedValues.MaintenanceTrackName'),
        outputPath: 'Cluster.PendingModifiedValues.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.PendingModifiedValues.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MaintenanceTrackName') as unknown as string;
  }

  public get encryptionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.PendingModifiedValues.EncryptionType'),
        outputPath: 'Cluster.PendingModifiedValues.EncryptionType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.PendingModifiedValues.EncryptionType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EncryptionType') as unknown as string;
  }

}

export class RedshiftDisableSnapshotCopyClusterRestoreStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDisableSnapshotCopyMessage) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.RestoreStatus.Status'),
        outputPath: 'Cluster.RestoreStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.RestoreStatus.Status', props);
    return resource.getResponseField('Cluster.RestoreStatus.Status') as unknown as string;
  }

  public get currentRestoreRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond') as unknown as number;
  }

  public get snapshotSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.RestoreStatus.SnapshotSizeInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.SnapshotSizeInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.RestoreStatus.SnapshotSizeInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.SnapshotSizeInMegaBytes') as unknown as number;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.RestoreStatus.ProgressInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.ProgressInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.RestoreStatus.ProgressInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.ProgressInMegaBytes') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.RestoreStatus.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.RestoreStatus.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.RestoreStatus.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.ElapsedTimeInSeconds') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

}

export class RedshiftDisableSnapshotCopyClusterDataTransferProgress extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDisableSnapshotCopyMessage) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.DataTransferProgress.Status'),
        outputPath: 'Cluster.DataTransferProgress.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.DataTransferProgress.Status', props);
    return resource.getResponseField('Cluster.DataTransferProgress.Status') as unknown as string;
  }

  public get currentRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond') as unknown as number;
  }

  public get totalDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.DataTransferProgress.TotalDataInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.TotalDataInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.DataTransferProgress.TotalDataInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.TotalDataInMegaBytes') as unknown as number;
  }

  public get dataTransferredInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.DataTransferProgress.DataTransferredInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.DataTransferredInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.DataTransferProgress.DataTransferredInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.DataTransferredInMegaBytes') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.DataTransferProgress.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.DataTransferProgress.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.ElapsedTimeInSeconds') as unknown as number;
  }

}

export class RedshiftDisableSnapshotCopyClusterHsmStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDisableSnapshotCopyMessage) {
    super(scope, id);
  }

  public get hsmClientCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.HsmStatus.HsmClientCertificateIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmClientCertificateIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.HsmStatus.HsmClientCertificateIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmClientCertificateIdentifier') as unknown as string;
  }

  public get hsmConfigurationIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.HsmStatus.HsmConfigurationIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmConfigurationIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.HsmStatus.HsmConfigurationIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmConfigurationIdentifier') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.HsmStatus.Status'),
        outputPath: 'Cluster.HsmStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.HsmStatus.Status', props);
    return resource.getResponseField('Cluster.HsmStatus.Status') as unknown as string;
  }

}

export class RedshiftDisableSnapshotCopyClusterClusterSnapshotCopyStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDisableSnapshotCopyMessage) {
    super(scope, id);
  }

  public get destinationRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ClusterSnapshotCopyStatus.DestinationRegion'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.DestinationRegion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.ClusterSnapshotCopyStatus.DestinationRegion', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.DestinationRegion') as unknown as string;
  }

  public get retentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.RetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.RetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get snapshotCopyGrantName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName') as unknown as string;
  }

}

export class RedshiftDisableSnapshotCopyClusterElasticIpStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDisableSnapshotCopyMessage) {
    super(scope, id);
  }

  public get elasticIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ElasticIpStatus.ElasticIp'),
        outputPath: 'Cluster.ElasticIpStatus.ElasticIp',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.ElasticIpStatus.ElasticIp', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.ElasticIp') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ElasticIpStatus.Status'),
        outputPath: 'Cluster.ElasticIpStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.ElasticIpStatus.Status', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.Status') as unknown as string;
  }

}

export class RedshiftDisableSnapshotCopyClusterResizeInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftDisableSnapshotCopyMessage) {
    super(scope, id);
  }

  public get resizeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ResizeInfo.ResizeType'),
        outputPath: 'Cluster.ResizeInfo.ResizeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.ResizeInfo.ResizeType', props);
    return resource.getResponseField('Cluster.ResizeInfo.ResizeType') as unknown as string;
  }

  public get allowCancelResize(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ResizeInfo.AllowCancelResize'),
        outputPath: 'Cluster.ResizeInfo.AllowCancelResize',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableSnapshotCopy.Cluster.ResizeInfo.AllowCancelResize', props);
    return resource.getResponseField('Cluster.ResizeInfo.AllowCancelResize') as unknown as boolean;
  }

}

export class RedshiftEnableLogging extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftEnableLoggingMessage) {
    super(scope, id);
  }

  public get loggingEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableLogging',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableLogging.LoggingEnabled'),
        outputPath: 'LoggingEnabled',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          BucketName: this.input.bucketName,
          S3KeyPrefix: this.input.s3KeyPrefix,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableLogging.LoggingEnabled', props);
    return resource.getResponseField('LoggingEnabled') as unknown as boolean;
  }

  public get bucketName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableLogging',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableLogging.BucketName'),
        outputPath: 'BucketName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          BucketName: this.input.bucketName,
          S3KeyPrefix: this.input.s3KeyPrefix,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableLogging.BucketName', props);
    return resource.getResponseField('BucketName') as unknown as string;
  }

  public get s3KeyPrefix(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableLogging',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableLogging.S3KeyPrefix'),
        outputPath: 'S3KeyPrefix',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          BucketName: this.input.bucketName,
          S3KeyPrefix: this.input.s3KeyPrefix,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableLogging.S3KeyPrefix', props);
    return resource.getResponseField('S3KeyPrefix') as unknown as string;
  }

  public get lastSuccessfulDeliveryTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableLogging',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableLogging.LastSuccessfulDeliveryTime'),
        outputPath: 'LastSuccessfulDeliveryTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          BucketName: this.input.bucketName,
          S3KeyPrefix: this.input.s3KeyPrefix,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableLogging.LastSuccessfulDeliveryTime', props);
    return resource.getResponseField('LastSuccessfulDeliveryTime') as unknown as string;
  }

  public get lastFailureTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableLogging',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableLogging.LastFailureTime'),
        outputPath: 'LastFailureTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          BucketName: this.input.bucketName,
          S3KeyPrefix: this.input.s3KeyPrefix,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableLogging.LastFailureTime', props);
    return resource.getResponseField('LastFailureTime') as unknown as string;
  }

  public get lastFailureMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableLogging',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableLogging.LastFailureMessage'),
        outputPath: 'LastFailureMessage',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          BucketName: this.input.bucketName,
          S3KeyPrefix: this.input.s3KeyPrefix,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableLogging.LastFailureMessage', props);
    return resource.getResponseField('LastFailureMessage') as unknown as string;
  }

}

export class RedshiftEnableSnapshotCopy extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftEnableSnapshotCopyMessage) {
    super(scope, id);
  }

  public get cluster(): RedshiftEnableSnapshotCopyCluster {
    return new RedshiftEnableSnapshotCopyCluster(this, 'Cluster', this.__resources, this.input);
  }

}

export class RedshiftEnableSnapshotCopyCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftEnableSnapshotCopyMessage) {
    super(scope, id);
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ClusterIdentifier'),
        outputPath: 'Cluster.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.ClusterIdentifier') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.NodeType'),
        outputPath: 'Cluster.NodeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.NodeType', props);
    return resource.getResponseField('Cluster.NodeType') as unknown as string;
  }

  public get clusterStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ClusterStatus'),
        outputPath: 'Cluster.ClusterStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.ClusterStatus', props);
    return resource.getResponseField('Cluster.ClusterStatus') as unknown as string;
  }

  public get clusterAvailabilityStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ClusterAvailabilityStatus'),
        outputPath: 'Cluster.ClusterAvailabilityStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.ClusterAvailabilityStatus', props);
    return resource.getResponseField('Cluster.ClusterAvailabilityStatus') as unknown as string;
  }

  public get modifyStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ModifyStatus'),
        outputPath: 'Cluster.ModifyStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.ModifyStatus', props);
    return resource.getResponseField('Cluster.ModifyStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.MasterUsername'),
        outputPath: 'Cluster.MasterUsername',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.MasterUsername', props);
    return resource.getResponseField('Cluster.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.DBName'),
        outputPath: 'Cluster.DBName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.DBName', props);
    return resource.getResponseField('Cluster.DBName') as unknown as string;
  }

  public get endpoint(): RedshiftEnableSnapshotCopyClusterEndpoint {
    return new RedshiftEnableSnapshotCopyClusterEndpoint(this, 'Endpoint', this.__resources, this.input);
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ClusterCreateTime'),
        outputPath: 'Cluster.ClusterCreateTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.ClusterCreateTime', props);
    return resource.getResponseField('Cluster.ClusterCreateTime') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterSecurityGroups(): shapes.RedshiftClusterSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ClusterSecurityGroups'),
        outputPath: 'Cluster.ClusterSecurityGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.ClusterSecurityGroups', props);
    return resource.getResponseField('Cluster.ClusterSecurityGroups') as unknown as shapes.RedshiftClusterSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RedshiftVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.VpcSecurityGroups'),
        outputPath: 'Cluster.VpcSecurityGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.VpcSecurityGroups', props);
    return resource.getResponseField('Cluster.VpcSecurityGroups') as unknown as shapes.RedshiftVpcSecurityGroupMembership[];
  }

  public get clusterParameterGroups(): shapes.RedshiftClusterParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ClusterParameterGroups'),
        outputPath: 'Cluster.ClusterParameterGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.ClusterParameterGroups', props);
    return resource.getResponseField('Cluster.ClusterParameterGroups') as unknown as shapes.RedshiftClusterParameterGroupStatus[];
  }

  public get clusterSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ClusterSubnetGroupName'),
        outputPath: 'Cluster.ClusterSubnetGroupName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.ClusterSubnetGroupName', props);
    return resource.getResponseField('Cluster.ClusterSubnetGroupName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.VpcId'),
        outputPath: 'Cluster.VpcId',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.VpcId', props);
    return resource.getResponseField('Cluster.VpcId') as unknown as string;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.AvailabilityZone'),
        outputPath: 'Cluster.AvailabilityZone',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.AvailabilityZone', props);
    return resource.getResponseField('Cluster.AvailabilityZone') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.PreferredMaintenanceWindow'),
        outputPath: 'Cluster.PreferredMaintenanceWindow',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('Cluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RedshiftEnableSnapshotCopyClusterPendingModifiedValues {
    return new RedshiftEnableSnapshotCopyClusterPendingModifiedValues(this, 'PendingModifiedValues', this.__resources, this.input);
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ClusterVersion'),
        outputPath: 'Cluster.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.ClusterVersion', props);
    return resource.getResponseField('Cluster.ClusterVersion') as unknown as string;
  }

  public get allowVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.AllowVersionUpgrade'),
        outputPath: 'Cluster.AllowVersionUpgrade',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.AllowVersionUpgrade', props);
    return resource.getResponseField('Cluster.AllowVersionUpgrade') as unknown as boolean;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.NumberOfNodes'),
        outputPath: 'Cluster.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.NumberOfNodes', props);
    return resource.getResponseField('Cluster.NumberOfNodes') as unknown as number;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.PubliclyAccessible'),
        outputPath: 'Cluster.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PubliclyAccessible') as unknown as boolean;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.Encrypted'),
        outputPath: 'Cluster.Encrypted',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.Encrypted', props);
    return resource.getResponseField('Cluster.Encrypted') as unknown as boolean;
  }

  public get restoreStatus(): RedshiftEnableSnapshotCopyClusterRestoreStatus {
    return new RedshiftEnableSnapshotCopyClusterRestoreStatus(this, 'RestoreStatus', this.__resources, this.input);
  }

  public get dataTransferProgress(): RedshiftEnableSnapshotCopyClusterDataTransferProgress {
    return new RedshiftEnableSnapshotCopyClusterDataTransferProgress(this, 'DataTransferProgress', this.__resources, this.input);
  }

  public get hsmStatus(): RedshiftEnableSnapshotCopyClusterHsmStatus {
    return new RedshiftEnableSnapshotCopyClusterHsmStatus(this, 'HsmStatus', this.__resources, this.input);
  }

  public get clusterSnapshotCopyStatus(): RedshiftEnableSnapshotCopyClusterClusterSnapshotCopyStatus {
    return new RedshiftEnableSnapshotCopyClusterClusterSnapshotCopyStatus(this, 'ClusterSnapshotCopyStatus', this.__resources, this.input);
  }

  public get clusterPublicKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ClusterPublicKey'),
        outputPath: 'Cluster.ClusterPublicKey',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.ClusterPublicKey', props);
    return resource.getResponseField('Cluster.ClusterPublicKey') as unknown as string;
  }

  public get clusterNodes(): shapes.RedshiftClusterNode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ClusterNodes'),
        outputPath: 'Cluster.ClusterNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.ClusterNodes', props);
    return resource.getResponseField('Cluster.ClusterNodes') as unknown as shapes.RedshiftClusterNode[];
  }

  public get elasticIpStatus(): RedshiftEnableSnapshotCopyClusterElasticIpStatus {
    return new RedshiftEnableSnapshotCopyClusterElasticIpStatus(this, 'ElasticIpStatus', this.__resources, this.input);
  }

  public get clusterRevisionNumber(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ClusterRevisionNumber'),
        outputPath: 'Cluster.ClusterRevisionNumber',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.ClusterRevisionNumber', props);
    return resource.getResponseField('Cluster.ClusterRevisionNumber') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.Tags'),
        outputPath: 'Cluster.Tags',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.Tags', props);
    return resource.getResponseField('Cluster.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.KmsKeyId'),
        outputPath: 'Cluster.KmsKeyId',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.KmsKeyId', props);
    return resource.getResponseField('Cluster.KmsKeyId') as unknown as string;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.EnhancedVpcRouting'),
        outputPath: 'Cluster.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.EnhancedVpcRouting') as unknown as boolean;
  }

  public get iamRoles(): shapes.RedshiftClusterIamRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.IamRoles'),
        outputPath: 'Cluster.IamRoles',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.IamRoles', props);
    return resource.getResponseField('Cluster.IamRoles') as unknown as shapes.RedshiftClusterIamRole[];
  }

  public get pendingActions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.PendingActions'),
        outputPath: 'Cluster.PendingActions',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.PendingActions', props);
    return resource.getResponseField('Cluster.PendingActions') as unknown as string[];
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.MaintenanceTrackName'),
        outputPath: 'Cluster.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.MaintenanceTrackName') as unknown as string;
  }

  public get elasticResizeNumberOfNodeOptions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ElasticResizeNumberOfNodeOptions'),
        outputPath: 'Cluster.ElasticResizeNumberOfNodeOptions',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.ElasticResizeNumberOfNodeOptions', props);
    return resource.getResponseField('Cluster.ElasticResizeNumberOfNodeOptions') as unknown as string;
  }

  public get deferredMaintenanceWindows(): shapes.RedshiftDeferredMaintenanceWindow[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.DeferredMaintenanceWindows'),
        outputPath: 'Cluster.DeferredMaintenanceWindows',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.DeferredMaintenanceWindows', props);
    return resource.getResponseField('Cluster.DeferredMaintenanceWindows') as unknown as shapes.RedshiftDeferredMaintenanceWindow[];
  }

  public get snapshotScheduleIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.SnapshotScheduleIdentifier'),
        outputPath: 'Cluster.SnapshotScheduleIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.SnapshotScheduleIdentifier', props);
    return resource.getResponseField('Cluster.SnapshotScheduleIdentifier') as unknown as string;
  }

  public get snapshotScheduleState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.SnapshotScheduleState'),
        outputPath: 'Cluster.SnapshotScheduleState',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.SnapshotScheduleState', props);
    return resource.getResponseField('Cluster.SnapshotScheduleState') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ExpectedNextSnapshotScheduleTime'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.ExpectedNextSnapshotScheduleTime', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTime') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTimeStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ExpectedNextSnapshotScheduleTimeStatus'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTimeStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.ExpectedNextSnapshotScheduleTimeStatus', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTimeStatus') as unknown as string;
  }

  public get nextMaintenanceWindowStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.NextMaintenanceWindowStartTime'),
        outputPath: 'Cluster.NextMaintenanceWindowStartTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.NextMaintenanceWindowStartTime', props);
    return resource.getResponseField('Cluster.NextMaintenanceWindowStartTime') as unknown as string;
  }

  public get resizeInfo(): RedshiftEnableSnapshotCopyClusterResizeInfo {
    return new RedshiftEnableSnapshotCopyClusterResizeInfo(this, 'ResizeInfo', this.__resources, this.input);
  }

  public get clusterNamespaceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ClusterNamespaceArn'),
        outputPath: 'Cluster.ClusterNamespaceArn',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.ClusterNamespaceArn', props);
    return resource.getResponseField('Cluster.ClusterNamespaceArn') as unknown as string;
  }

}

export class RedshiftEnableSnapshotCopyClusterEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftEnableSnapshotCopyMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.Endpoint.Address'),
        outputPath: 'Cluster.Endpoint.Address',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.Endpoint.Address', props);
    return resource.getResponseField('Cluster.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.Endpoint.Port'),
        outputPath: 'Cluster.Endpoint.Port',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.Endpoint.Port', props);
    return resource.getResponseField('Cluster.Endpoint.Port') as unknown as number;
  }

}

export class RedshiftEnableSnapshotCopyClusterPendingModifiedValues extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftEnableSnapshotCopyMessage) {
    super(scope, id);
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'Cluster.PendingModifiedValues.MasterUserPassword',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.PendingModifiedValues.NodeType'),
        outputPath: 'Cluster.PendingModifiedValues.NodeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.PendingModifiedValues.NodeType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.PendingModifiedValues.NumberOfNodes'),
        outputPath: 'Cluster.PendingModifiedValues.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.PendingModifiedValues.NumberOfNodes', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NumberOfNodes') as unknown as number;
  }

  public get clusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.PendingModifiedValues.ClusterType'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.PendingModifiedValues.ClusterType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterType') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.PendingModifiedValues.ClusterVersion'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.PendingModifiedValues.ClusterVersion', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterVersion') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.PendingModifiedValues.ClusterIdentifier'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.PendingModifiedValues.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterIdentifier') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.PendingModifiedValues.PubliclyAccessible'),
        outputPath: 'Cluster.PendingModifiedValues.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.PendingModifiedValues.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.PubliclyAccessible') as unknown as boolean;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.PendingModifiedValues.EnhancedVpcRouting'),
        outputPath: 'Cluster.PendingModifiedValues.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.PendingModifiedValues.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.PendingModifiedValues.MaintenanceTrackName'),
        outputPath: 'Cluster.PendingModifiedValues.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.PendingModifiedValues.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MaintenanceTrackName') as unknown as string;
  }

  public get encryptionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.PendingModifiedValues.EncryptionType'),
        outputPath: 'Cluster.PendingModifiedValues.EncryptionType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.PendingModifiedValues.EncryptionType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EncryptionType') as unknown as string;
  }

}

export class RedshiftEnableSnapshotCopyClusterRestoreStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftEnableSnapshotCopyMessage) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.RestoreStatus.Status'),
        outputPath: 'Cluster.RestoreStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.RestoreStatus.Status', props);
    return resource.getResponseField('Cluster.RestoreStatus.Status') as unknown as string;
  }

  public get currentRestoreRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond') as unknown as number;
  }

  public get snapshotSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.RestoreStatus.SnapshotSizeInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.SnapshotSizeInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.RestoreStatus.SnapshotSizeInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.SnapshotSizeInMegaBytes') as unknown as number;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.RestoreStatus.ProgressInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.ProgressInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.RestoreStatus.ProgressInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.ProgressInMegaBytes') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.RestoreStatus.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.RestoreStatus.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.RestoreStatus.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.ElapsedTimeInSeconds') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

}

export class RedshiftEnableSnapshotCopyClusterDataTransferProgress extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftEnableSnapshotCopyMessage) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.DataTransferProgress.Status'),
        outputPath: 'Cluster.DataTransferProgress.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.DataTransferProgress.Status', props);
    return resource.getResponseField('Cluster.DataTransferProgress.Status') as unknown as string;
  }

  public get currentRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond') as unknown as number;
  }

  public get totalDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.DataTransferProgress.TotalDataInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.TotalDataInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.DataTransferProgress.TotalDataInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.TotalDataInMegaBytes') as unknown as number;
  }

  public get dataTransferredInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.DataTransferProgress.DataTransferredInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.DataTransferredInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.DataTransferProgress.DataTransferredInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.DataTransferredInMegaBytes') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.DataTransferProgress.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.DataTransferProgress.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.ElapsedTimeInSeconds') as unknown as number;
  }

}

export class RedshiftEnableSnapshotCopyClusterHsmStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftEnableSnapshotCopyMessage) {
    super(scope, id);
  }

  public get hsmClientCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.HsmStatus.HsmClientCertificateIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmClientCertificateIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.HsmStatus.HsmClientCertificateIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmClientCertificateIdentifier') as unknown as string;
  }

  public get hsmConfigurationIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.HsmStatus.HsmConfigurationIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmConfigurationIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.HsmStatus.HsmConfigurationIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmConfigurationIdentifier') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.HsmStatus.Status'),
        outputPath: 'Cluster.HsmStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.HsmStatus.Status', props);
    return resource.getResponseField('Cluster.HsmStatus.Status') as unknown as string;
  }

}

export class RedshiftEnableSnapshotCopyClusterClusterSnapshotCopyStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftEnableSnapshotCopyMessage) {
    super(scope, id);
  }

  public get destinationRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ClusterSnapshotCopyStatus.DestinationRegion'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.DestinationRegion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.ClusterSnapshotCopyStatus.DestinationRegion', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.DestinationRegion') as unknown as string;
  }

  public get retentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.RetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.RetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get snapshotCopyGrantName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName') as unknown as string;
  }

}

export class RedshiftEnableSnapshotCopyClusterElasticIpStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftEnableSnapshotCopyMessage) {
    super(scope, id);
  }

  public get elasticIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ElasticIpStatus.ElasticIp'),
        outputPath: 'Cluster.ElasticIpStatus.ElasticIp',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.ElasticIpStatus.ElasticIp', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.ElasticIp') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ElasticIpStatus.Status'),
        outputPath: 'Cluster.ElasticIpStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.ElasticIpStatus.Status', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.Status') as unknown as string;
  }

}

export class RedshiftEnableSnapshotCopyClusterResizeInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftEnableSnapshotCopyMessage) {
    super(scope, id);
  }

  public get resizeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ResizeInfo.ResizeType'),
        outputPath: 'Cluster.ResizeInfo.ResizeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.ResizeInfo.ResizeType', props);
    return resource.getResponseField('Cluster.ResizeInfo.ResizeType') as unknown as string;
  }

  public get allowCancelResize(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ResizeInfo.AllowCancelResize'),
        outputPath: 'Cluster.ResizeInfo.AllowCancelResize',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DestinationRegion: this.input.destinationRegion,
          RetentionPeriod: this.input.retentionPeriod,
          SnapshotCopyGrantName: this.input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableSnapshotCopy.Cluster.ResizeInfo.AllowCancelResize', props);
    return resource.getResponseField('Cluster.ResizeInfo.AllowCancelResize') as unknown as boolean;
  }

}

export class RedshiftFetchClusterCredentials extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftGetClusterCredentialsMessage) {
    super(scope, id);
  }

  public get dbUser(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getClusterCredentials',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.GetClusterCredentials.DbUser'),
        outputPath: 'DbUser',
        parameters: {
          DbUser: this.input.dbUser,
          DbName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          DurationSeconds: this.input.durationSeconds,
          AutoCreate: this.input.autoCreate,
          DbGroups: this.input.dbGroups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetClusterCredentials.DbUser', props);
    return resource.getResponseField('DbUser') as unknown as string;
  }

  public get dbPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getClusterCredentials',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.GetClusterCredentials.DbPassword'),
        outputPath: 'DbPassword',
        parameters: {
          DbUser: this.input.dbUser,
          DbName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          DurationSeconds: this.input.durationSeconds,
          AutoCreate: this.input.autoCreate,
          DbGroups: this.input.dbGroups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetClusterCredentials.DbPassword', props);
    return resource.getResponseField('DbPassword') as unknown as string;
  }

  public get expiration(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getClusterCredentials',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.GetClusterCredentials.Expiration'),
        outputPath: 'Expiration',
        parameters: {
          DbUser: this.input.dbUser,
          DbName: this.input.dbName,
          ClusterIdentifier: this.input.clusterIdentifier,
          DurationSeconds: this.input.durationSeconds,
          AutoCreate: this.input.autoCreate,
          DbGroups: this.input.dbGroups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetClusterCredentials.Expiration', props);
    return resource.getResponseField('Expiration') as unknown as string;
  }

}

export class RedshiftFetchReservedNodeExchangeOfferings extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftGetReservedNodeExchangeOfferingsInputMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReservedNodeExchangeOfferings',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.GetReservedNodeExchangeOfferings.Marker'),
        outputPath: 'Marker',
        parameters: {
          ReservedNodeId: this.input.reservedNodeId,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetReservedNodeExchangeOfferings.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get reservedNodeOfferings(): shapes.RedshiftReservedNodeOffering[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReservedNodeExchangeOfferings',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.GetReservedNodeExchangeOfferings.ReservedNodeOfferings'),
        outputPath: 'ReservedNodeOfferings',
        parameters: {
          ReservedNodeId: this.input.reservedNodeId,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetReservedNodeExchangeOfferings.ReservedNodeOfferings', props);
    return resource.getResponseField('ReservedNodeOfferings') as unknown as shapes.RedshiftReservedNodeOffering[];
  }

}

export class RedshiftModifyCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterMessage) {
    super(scope, id);
  }

  public get cluster(): RedshiftModifyClusterCluster {
    return new RedshiftModifyClusterCluster(this, 'Cluster', this.__resources, this.input);
  }

}

export class RedshiftModifyClusterCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterMessage) {
    super(scope, id);
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ClusterIdentifier'),
        outputPath: 'Cluster.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.ClusterIdentifier') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.NodeType'),
        outputPath: 'Cluster.NodeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.NodeType', props);
    return resource.getResponseField('Cluster.NodeType') as unknown as string;
  }

  public get clusterStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ClusterStatus'),
        outputPath: 'Cluster.ClusterStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.ClusterStatus', props);
    return resource.getResponseField('Cluster.ClusterStatus') as unknown as string;
  }

  public get clusterAvailabilityStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ClusterAvailabilityStatus'),
        outputPath: 'Cluster.ClusterAvailabilityStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.ClusterAvailabilityStatus', props);
    return resource.getResponseField('Cluster.ClusterAvailabilityStatus') as unknown as string;
  }

  public get modifyStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ModifyStatus'),
        outputPath: 'Cluster.ModifyStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.ModifyStatus', props);
    return resource.getResponseField('Cluster.ModifyStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.MasterUsername'),
        outputPath: 'Cluster.MasterUsername',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.MasterUsername', props);
    return resource.getResponseField('Cluster.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.DBName'),
        outputPath: 'Cluster.DBName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.DBName', props);
    return resource.getResponseField('Cluster.DBName') as unknown as string;
  }

  public get endpoint(): RedshiftModifyClusterClusterEndpoint {
    return new RedshiftModifyClusterClusterEndpoint(this, 'Endpoint', this.__resources, this.input);
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ClusterCreateTime'),
        outputPath: 'Cluster.ClusterCreateTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.ClusterCreateTime', props);
    return resource.getResponseField('Cluster.ClusterCreateTime') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterSecurityGroups(): shapes.RedshiftClusterSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ClusterSecurityGroups'),
        outputPath: 'Cluster.ClusterSecurityGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.ClusterSecurityGroups', props);
    return resource.getResponseField('Cluster.ClusterSecurityGroups') as unknown as shapes.RedshiftClusterSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RedshiftVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.VpcSecurityGroups'),
        outputPath: 'Cluster.VpcSecurityGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.VpcSecurityGroups', props);
    return resource.getResponseField('Cluster.VpcSecurityGroups') as unknown as shapes.RedshiftVpcSecurityGroupMembership[];
  }

  public get clusterParameterGroups(): shapes.RedshiftClusterParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ClusterParameterGroups'),
        outputPath: 'Cluster.ClusterParameterGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.ClusterParameterGroups', props);
    return resource.getResponseField('Cluster.ClusterParameterGroups') as unknown as shapes.RedshiftClusterParameterGroupStatus[];
  }

  public get clusterSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ClusterSubnetGroupName'),
        outputPath: 'Cluster.ClusterSubnetGroupName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.ClusterSubnetGroupName', props);
    return resource.getResponseField('Cluster.ClusterSubnetGroupName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.VpcId'),
        outputPath: 'Cluster.VpcId',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.VpcId', props);
    return resource.getResponseField('Cluster.VpcId') as unknown as string;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.AvailabilityZone'),
        outputPath: 'Cluster.AvailabilityZone',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.AvailabilityZone', props);
    return resource.getResponseField('Cluster.AvailabilityZone') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.PreferredMaintenanceWindow'),
        outputPath: 'Cluster.PreferredMaintenanceWindow',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('Cluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RedshiftModifyClusterClusterPendingModifiedValues {
    return new RedshiftModifyClusterClusterPendingModifiedValues(this, 'PendingModifiedValues', this.__resources, this.input);
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ClusterVersion'),
        outputPath: 'Cluster.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.ClusterVersion', props);
    return resource.getResponseField('Cluster.ClusterVersion') as unknown as string;
  }

  public get allowVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.AllowVersionUpgrade'),
        outputPath: 'Cluster.AllowVersionUpgrade',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.AllowVersionUpgrade', props);
    return resource.getResponseField('Cluster.AllowVersionUpgrade') as unknown as boolean;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.NumberOfNodes'),
        outputPath: 'Cluster.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.NumberOfNodes', props);
    return resource.getResponseField('Cluster.NumberOfNodes') as unknown as number;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.PubliclyAccessible'),
        outputPath: 'Cluster.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PubliclyAccessible') as unknown as boolean;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.Encrypted'),
        outputPath: 'Cluster.Encrypted',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.Encrypted', props);
    return resource.getResponseField('Cluster.Encrypted') as unknown as boolean;
  }

  public get restoreStatus(): RedshiftModifyClusterClusterRestoreStatus {
    return new RedshiftModifyClusterClusterRestoreStatus(this, 'RestoreStatus', this.__resources, this.input);
  }

  public get dataTransferProgress(): RedshiftModifyClusterClusterDataTransferProgress {
    return new RedshiftModifyClusterClusterDataTransferProgress(this, 'DataTransferProgress', this.__resources, this.input);
  }

  public get hsmStatus(): RedshiftModifyClusterClusterHsmStatus {
    return new RedshiftModifyClusterClusterHsmStatus(this, 'HsmStatus', this.__resources, this.input);
  }

  public get clusterSnapshotCopyStatus(): RedshiftModifyClusterClusterClusterSnapshotCopyStatus {
    return new RedshiftModifyClusterClusterClusterSnapshotCopyStatus(this, 'ClusterSnapshotCopyStatus', this.__resources, this.input);
  }

  public get clusterPublicKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ClusterPublicKey'),
        outputPath: 'Cluster.ClusterPublicKey',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.ClusterPublicKey', props);
    return resource.getResponseField('Cluster.ClusterPublicKey') as unknown as string;
  }

  public get clusterNodes(): shapes.RedshiftClusterNode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ClusterNodes'),
        outputPath: 'Cluster.ClusterNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.ClusterNodes', props);
    return resource.getResponseField('Cluster.ClusterNodes') as unknown as shapes.RedshiftClusterNode[];
  }

  public get elasticIpStatus(): RedshiftModifyClusterClusterElasticIpStatus {
    return new RedshiftModifyClusterClusterElasticIpStatus(this, 'ElasticIpStatus', this.__resources, this.input);
  }

  public get clusterRevisionNumber(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ClusterRevisionNumber'),
        outputPath: 'Cluster.ClusterRevisionNumber',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.ClusterRevisionNumber', props);
    return resource.getResponseField('Cluster.ClusterRevisionNumber') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.Tags'),
        outputPath: 'Cluster.Tags',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.Tags', props);
    return resource.getResponseField('Cluster.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.KmsKeyId'),
        outputPath: 'Cluster.KmsKeyId',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.KmsKeyId', props);
    return resource.getResponseField('Cluster.KmsKeyId') as unknown as string;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.EnhancedVpcRouting'),
        outputPath: 'Cluster.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.EnhancedVpcRouting') as unknown as boolean;
  }

  public get iamRoles(): shapes.RedshiftClusterIamRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.IamRoles'),
        outputPath: 'Cluster.IamRoles',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.IamRoles', props);
    return resource.getResponseField('Cluster.IamRoles') as unknown as shapes.RedshiftClusterIamRole[];
  }

  public get pendingActions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.PendingActions'),
        outputPath: 'Cluster.PendingActions',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.PendingActions', props);
    return resource.getResponseField('Cluster.PendingActions') as unknown as string[];
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.MaintenanceTrackName'),
        outputPath: 'Cluster.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.MaintenanceTrackName') as unknown as string;
  }

  public get elasticResizeNumberOfNodeOptions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ElasticResizeNumberOfNodeOptions'),
        outputPath: 'Cluster.ElasticResizeNumberOfNodeOptions',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.ElasticResizeNumberOfNodeOptions', props);
    return resource.getResponseField('Cluster.ElasticResizeNumberOfNodeOptions') as unknown as string;
  }

  public get deferredMaintenanceWindows(): shapes.RedshiftDeferredMaintenanceWindow[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.DeferredMaintenanceWindows'),
        outputPath: 'Cluster.DeferredMaintenanceWindows',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.DeferredMaintenanceWindows', props);
    return resource.getResponseField('Cluster.DeferredMaintenanceWindows') as unknown as shapes.RedshiftDeferredMaintenanceWindow[];
  }

  public get snapshotScheduleIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.SnapshotScheduleIdentifier'),
        outputPath: 'Cluster.SnapshotScheduleIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.SnapshotScheduleIdentifier', props);
    return resource.getResponseField('Cluster.SnapshotScheduleIdentifier') as unknown as string;
  }

  public get snapshotScheduleState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.SnapshotScheduleState'),
        outputPath: 'Cluster.SnapshotScheduleState',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.SnapshotScheduleState', props);
    return resource.getResponseField('Cluster.SnapshotScheduleState') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ExpectedNextSnapshotScheduleTime'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.ExpectedNextSnapshotScheduleTime', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTime') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTimeStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ExpectedNextSnapshotScheduleTimeStatus'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTimeStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.ExpectedNextSnapshotScheduleTimeStatus', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTimeStatus') as unknown as string;
  }

  public get nextMaintenanceWindowStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.NextMaintenanceWindowStartTime'),
        outputPath: 'Cluster.NextMaintenanceWindowStartTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.NextMaintenanceWindowStartTime', props);
    return resource.getResponseField('Cluster.NextMaintenanceWindowStartTime') as unknown as string;
  }

  public get resizeInfo(): RedshiftModifyClusterClusterResizeInfo {
    return new RedshiftModifyClusterClusterResizeInfo(this, 'ResizeInfo', this.__resources, this.input);
  }

  public get clusterNamespaceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ClusterNamespaceArn'),
        outputPath: 'Cluster.ClusterNamespaceArn',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.ClusterNamespaceArn', props);
    return resource.getResponseField('Cluster.ClusterNamespaceArn') as unknown as string;
  }

}

export class RedshiftModifyClusterClusterEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.Endpoint.Address'),
        outputPath: 'Cluster.Endpoint.Address',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.Endpoint.Address', props);
    return resource.getResponseField('Cluster.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.Endpoint.Port'),
        outputPath: 'Cluster.Endpoint.Port',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.Endpoint.Port', props);
    return resource.getResponseField('Cluster.Endpoint.Port') as unknown as number;
  }

}

export class RedshiftModifyClusterClusterPendingModifiedValues extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterMessage) {
    super(scope, id);
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'Cluster.PendingModifiedValues.MasterUserPassword',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.PendingModifiedValues.NodeType'),
        outputPath: 'Cluster.PendingModifiedValues.NodeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.PendingModifiedValues.NodeType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.PendingModifiedValues.NumberOfNodes'),
        outputPath: 'Cluster.PendingModifiedValues.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.PendingModifiedValues.NumberOfNodes', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NumberOfNodes') as unknown as number;
  }

  public get clusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.PendingModifiedValues.ClusterType'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.PendingModifiedValues.ClusterType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterType') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.PendingModifiedValues.ClusterVersion'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.PendingModifiedValues.ClusterVersion', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterVersion') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.PendingModifiedValues.ClusterIdentifier'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.PendingModifiedValues.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterIdentifier') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.PendingModifiedValues.PubliclyAccessible'),
        outputPath: 'Cluster.PendingModifiedValues.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.PendingModifiedValues.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.PubliclyAccessible') as unknown as boolean;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.PendingModifiedValues.EnhancedVpcRouting'),
        outputPath: 'Cluster.PendingModifiedValues.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.PendingModifiedValues.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.PendingModifiedValues.MaintenanceTrackName'),
        outputPath: 'Cluster.PendingModifiedValues.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.PendingModifiedValues.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MaintenanceTrackName') as unknown as string;
  }

  public get encryptionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.PendingModifiedValues.EncryptionType'),
        outputPath: 'Cluster.PendingModifiedValues.EncryptionType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.PendingModifiedValues.EncryptionType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EncryptionType') as unknown as string;
  }

}

export class RedshiftModifyClusterClusterRestoreStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterMessage) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.RestoreStatus.Status'),
        outputPath: 'Cluster.RestoreStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.RestoreStatus.Status', props);
    return resource.getResponseField('Cluster.RestoreStatus.Status') as unknown as string;
  }

  public get currentRestoreRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond') as unknown as number;
  }

  public get snapshotSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.RestoreStatus.SnapshotSizeInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.SnapshotSizeInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.RestoreStatus.SnapshotSizeInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.SnapshotSizeInMegaBytes') as unknown as number;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.RestoreStatus.ProgressInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.ProgressInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.RestoreStatus.ProgressInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.ProgressInMegaBytes') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.RestoreStatus.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.RestoreStatus.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.RestoreStatus.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.ElapsedTimeInSeconds') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

}

export class RedshiftModifyClusterClusterDataTransferProgress extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterMessage) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.DataTransferProgress.Status'),
        outputPath: 'Cluster.DataTransferProgress.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.DataTransferProgress.Status', props);
    return resource.getResponseField('Cluster.DataTransferProgress.Status') as unknown as string;
  }

  public get currentRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond') as unknown as number;
  }

  public get totalDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.DataTransferProgress.TotalDataInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.TotalDataInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.DataTransferProgress.TotalDataInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.TotalDataInMegaBytes') as unknown as number;
  }

  public get dataTransferredInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.DataTransferProgress.DataTransferredInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.DataTransferredInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.DataTransferProgress.DataTransferredInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.DataTransferredInMegaBytes') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.DataTransferProgress.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.DataTransferProgress.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.ElapsedTimeInSeconds') as unknown as number;
  }

}

export class RedshiftModifyClusterClusterHsmStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterMessage) {
    super(scope, id);
  }

  public get hsmClientCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.HsmStatus.HsmClientCertificateIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmClientCertificateIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.HsmStatus.HsmClientCertificateIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmClientCertificateIdentifier') as unknown as string;
  }

  public get hsmConfigurationIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.HsmStatus.HsmConfigurationIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmConfigurationIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.HsmStatus.HsmConfigurationIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmConfigurationIdentifier') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.HsmStatus.Status'),
        outputPath: 'Cluster.HsmStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.HsmStatus.Status', props);
    return resource.getResponseField('Cluster.HsmStatus.Status') as unknown as string;
  }

}

export class RedshiftModifyClusterClusterClusterSnapshotCopyStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterMessage) {
    super(scope, id);
  }

  public get destinationRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ClusterSnapshotCopyStatus.DestinationRegion'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.DestinationRegion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.ClusterSnapshotCopyStatus.DestinationRegion', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.DestinationRegion') as unknown as string;
  }

  public get retentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.RetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.RetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get snapshotCopyGrantName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName') as unknown as string;
  }

}

export class RedshiftModifyClusterClusterElasticIpStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterMessage) {
    super(scope, id);
  }

  public get elasticIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ElasticIpStatus.ElasticIp'),
        outputPath: 'Cluster.ElasticIpStatus.ElasticIp',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.ElasticIpStatus.ElasticIp', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.ElasticIp') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ElasticIpStatus.Status'),
        outputPath: 'Cluster.ElasticIpStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.ElasticIpStatus.Status', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.Status') as unknown as string;
  }

}

export class RedshiftModifyClusterClusterResizeInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterMessage) {
    super(scope, id);
  }

  public get resizeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ResizeInfo.ResizeType'),
        outputPath: 'Cluster.ResizeInfo.ResizeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.ResizeInfo.ResizeType', props);
    return resource.getResponseField('Cluster.ResizeInfo.ResizeType') as unknown as string;
  }

  public get allowCancelResize(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ResizeInfo.AllowCancelResize'),
        outputPath: 'Cluster.ResizeInfo.AllowCancelResize',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          MasterUserPassword: this.input.masterUserPassword,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ClusterVersion: this.input.clusterVersion,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.input.newClusterIdentifier,
          PubliclyAccessible: this.input.publiclyAccessible,
          ElasticIp: this.input.elasticIp,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCluster.Cluster.ResizeInfo.AllowCancelResize', props);
    return resource.getResponseField('Cluster.ResizeInfo.AllowCancelResize') as unknown as boolean;
  }

}

export class RedshiftModifyClusterDbRevision extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterDbRevisionMessage) {
    super(scope, id);
  }

  public get cluster(): RedshiftModifyClusterDbRevisionCluster {
    return new RedshiftModifyClusterDbRevisionCluster(this, 'Cluster', this.__resources, this.input);
  }

}

export class RedshiftModifyClusterDbRevisionCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterDbRevisionMessage) {
    super(scope, id);
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ClusterIdentifier'),
        outputPath: 'Cluster.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.ClusterIdentifier') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.NodeType'),
        outputPath: 'Cluster.NodeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.NodeType', props);
    return resource.getResponseField('Cluster.NodeType') as unknown as string;
  }

  public get clusterStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ClusterStatus'),
        outputPath: 'Cluster.ClusterStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.ClusterStatus', props);
    return resource.getResponseField('Cluster.ClusterStatus') as unknown as string;
  }

  public get clusterAvailabilityStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ClusterAvailabilityStatus'),
        outputPath: 'Cluster.ClusterAvailabilityStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.ClusterAvailabilityStatus', props);
    return resource.getResponseField('Cluster.ClusterAvailabilityStatus') as unknown as string;
  }

  public get modifyStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ModifyStatus'),
        outputPath: 'Cluster.ModifyStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.ModifyStatus', props);
    return resource.getResponseField('Cluster.ModifyStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.MasterUsername'),
        outputPath: 'Cluster.MasterUsername',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.MasterUsername', props);
    return resource.getResponseField('Cluster.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.DBName'),
        outputPath: 'Cluster.DBName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.DBName', props);
    return resource.getResponseField('Cluster.DBName') as unknown as string;
  }

  public get endpoint(): RedshiftModifyClusterDbRevisionClusterEndpoint {
    return new RedshiftModifyClusterDbRevisionClusterEndpoint(this, 'Endpoint', this.__resources, this.input);
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ClusterCreateTime'),
        outputPath: 'Cluster.ClusterCreateTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.ClusterCreateTime', props);
    return resource.getResponseField('Cluster.ClusterCreateTime') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterSecurityGroups(): shapes.RedshiftClusterSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ClusterSecurityGroups'),
        outputPath: 'Cluster.ClusterSecurityGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.ClusterSecurityGroups', props);
    return resource.getResponseField('Cluster.ClusterSecurityGroups') as unknown as shapes.RedshiftClusterSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RedshiftVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.VpcSecurityGroups'),
        outputPath: 'Cluster.VpcSecurityGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.VpcSecurityGroups', props);
    return resource.getResponseField('Cluster.VpcSecurityGroups') as unknown as shapes.RedshiftVpcSecurityGroupMembership[];
  }

  public get clusterParameterGroups(): shapes.RedshiftClusterParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ClusterParameterGroups'),
        outputPath: 'Cluster.ClusterParameterGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.ClusterParameterGroups', props);
    return resource.getResponseField('Cluster.ClusterParameterGroups') as unknown as shapes.RedshiftClusterParameterGroupStatus[];
  }

  public get clusterSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ClusterSubnetGroupName'),
        outputPath: 'Cluster.ClusterSubnetGroupName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.ClusterSubnetGroupName', props);
    return resource.getResponseField('Cluster.ClusterSubnetGroupName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.VpcId'),
        outputPath: 'Cluster.VpcId',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.VpcId', props);
    return resource.getResponseField('Cluster.VpcId') as unknown as string;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.AvailabilityZone'),
        outputPath: 'Cluster.AvailabilityZone',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.AvailabilityZone', props);
    return resource.getResponseField('Cluster.AvailabilityZone') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.PreferredMaintenanceWindow'),
        outputPath: 'Cluster.PreferredMaintenanceWindow',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('Cluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RedshiftModifyClusterDbRevisionClusterPendingModifiedValues {
    return new RedshiftModifyClusterDbRevisionClusterPendingModifiedValues(this, 'PendingModifiedValues', this.__resources, this.input);
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ClusterVersion'),
        outputPath: 'Cluster.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.ClusterVersion', props);
    return resource.getResponseField('Cluster.ClusterVersion') as unknown as string;
  }

  public get allowVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.AllowVersionUpgrade'),
        outputPath: 'Cluster.AllowVersionUpgrade',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.AllowVersionUpgrade', props);
    return resource.getResponseField('Cluster.AllowVersionUpgrade') as unknown as boolean;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.NumberOfNodes'),
        outputPath: 'Cluster.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.NumberOfNodes', props);
    return resource.getResponseField('Cluster.NumberOfNodes') as unknown as number;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.PubliclyAccessible'),
        outputPath: 'Cluster.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PubliclyAccessible') as unknown as boolean;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.Encrypted'),
        outputPath: 'Cluster.Encrypted',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.Encrypted', props);
    return resource.getResponseField('Cluster.Encrypted') as unknown as boolean;
  }

  public get restoreStatus(): RedshiftModifyClusterDbRevisionClusterRestoreStatus {
    return new RedshiftModifyClusterDbRevisionClusterRestoreStatus(this, 'RestoreStatus', this.__resources, this.input);
  }

  public get dataTransferProgress(): RedshiftModifyClusterDbRevisionClusterDataTransferProgress {
    return new RedshiftModifyClusterDbRevisionClusterDataTransferProgress(this, 'DataTransferProgress', this.__resources, this.input);
  }

  public get hsmStatus(): RedshiftModifyClusterDbRevisionClusterHsmStatus {
    return new RedshiftModifyClusterDbRevisionClusterHsmStatus(this, 'HsmStatus', this.__resources, this.input);
  }

  public get clusterSnapshotCopyStatus(): RedshiftModifyClusterDbRevisionClusterClusterSnapshotCopyStatus {
    return new RedshiftModifyClusterDbRevisionClusterClusterSnapshotCopyStatus(this, 'ClusterSnapshotCopyStatus', this.__resources, this.input);
  }

  public get clusterPublicKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ClusterPublicKey'),
        outputPath: 'Cluster.ClusterPublicKey',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.ClusterPublicKey', props);
    return resource.getResponseField('Cluster.ClusterPublicKey') as unknown as string;
  }

  public get clusterNodes(): shapes.RedshiftClusterNode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ClusterNodes'),
        outputPath: 'Cluster.ClusterNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.ClusterNodes', props);
    return resource.getResponseField('Cluster.ClusterNodes') as unknown as shapes.RedshiftClusterNode[];
  }

  public get elasticIpStatus(): RedshiftModifyClusterDbRevisionClusterElasticIpStatus {
    return new RedshiftModifyClusterDbRevisionClusterElasticIpStatus(this, 'ElasticIpStatus', this.__resources, this.input);
  }

  public get clusterRevisionNumber(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ClusterRevisionNumber'),
        outputPath: 'Cluster.ClusterRevisionNumber',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.ClusterRevisionNumber', props);
    return resource.getResponseField('Cluster.ClusterRevisionNumber') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.Tags'),
        outputPath: 'Cluster.Tags',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.Tags', props);
    return resource.getResponseField('Cluster.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.KmsKeyId'),
        outputPath: 'Cluster.KmsKeyId',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.KmsKeyId', props);
    return resource.getResponseField('Cluster.KmsKeyId') as unknown as string;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.EnhancedVpcRouting'),
        outputPath: 'Cluster.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.EnhancedVpcRouting') as unknown as boolean;
  }

  public get iamRoles(): shapes.RedshiftClusterIamRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.IamRoles'),
        outputPath: 'Cluster.IamRoles',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.IamRoles', props);
    return resource.getResponseField('Cluster.IamRoles') as unknown as shapes.RedshiftClusterIamRole[];
  }

  public get pendingActions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.PendingActions'),
        outputPath: 'Cluster.PendingActions',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.PendingActions', props);
    return resource.getResponseField('Cluster.PendingActions') as unknown as string[];
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.MaintenanceTrackName'),
        outputPath: 'Cluster.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.MaintenanceTrackName') as unknown as string;
  }

  public get elasticResizeNumberOfNodeOptions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ElasticResizeNumberOfNodeOptions'),
        outputPath: 'Cluster.ElasticResizeNumberOfNodeOptions',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.ElasticResizeNumberOfNodeOptions', props);
    return resource.getResponseField('Cluster.ElasticResizeNumberOfNodeOptions') as unknown as string;
  }

  public get deferredMaintenanceWindows(): shapes.RedshiftDeferredMaintenanceWindow[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.DeferredMaintenanceWindows'),
        outputPath: 'Cluster.DeferredMaintenanceWindows',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.DeferredMaintenanceWindows', props);
    return resource.getResponseField('Cluster.DeferredMaintenanceWindows') as unknown as shapes.RedshiftDeferredMaintenanceWindow[];
  }

  public get snapshotScheduleIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.SnapshotScheduleIdentifier'),
        outputPath: 'Cluster.SnapshotScheduleIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.SnapshotScheduleIdentifier', props);
    return resource.getResponseField('Cluster.SnapshotScheduleIdentifier') as unknown as string;
  }

  public get snapshotScheduleState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.SnapshotScheduleState'),
        outputPath: 'Cluster.SnapshotScheduleState',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.SnapshotScheduleState', props);
    return resource.getResponseField('Cluster.SnapshotScheduleState') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ExpectedNextSnapshotScheduleTime'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.ExpectedNextSnapshotScheduleTime', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTime') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTimeStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ExpectedNextSnapshotScheduleTimeStatus'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTimeStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.ExpectedNextSnapshotScheduleTimeStatus', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTimeStatus') as unknown as string;
  }

  public get nextMaintenanceWindowStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.NextMaintenanceWindowStartTime'),
        outputPath: 'Cluster.NextMaintenanceWindowStartTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.NextMaintenanceWindowStartTime', props);
    return resource.getResponseField('Cluster.NextMaintenanceWindowStartTime') as unknown as string;
  }

  public get resizeInfo(): RedshiftModifyClusterDbRevisionClusterResizeInfo {
    return new RedshiftModifyClusterDbRevisionClusterResizeInfo(this, 'ResizeInfo', this.__resources, this.input);
  }

  public get clusterNamespaceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ClusterNamespaceArn'),
        outputPath: 'Cluster.ClusterNamespaceArn',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.ClusterNamespaceArn', props);
    return resource.getResponseField('Cluster.ClusterNamespaceArn') as unknown as string;
  }

}

export class RedshiftModifyClusterDbRevisionClusterEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterDbRevisionMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.Endpoint.Address'),
        outputPath: 'Cluster.Endpoint.Address',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.Endpoint.Address', props);
    return resource.getResponseField('Cluster.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.Endpoint.Port'),
        outputPath: 'Cluster.Endpoint.Port',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.Endpoint.Port', props);
    return resource.getResponseField('Cluster.Endpoint.Port') as unknown as number;
  }

}

export class RedshiftModifyClusterDbRevisionClusterPendingModifiedValues extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterDbRevisionMessage) {
    super(scope, id);
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'Cluster.PendingModifiedValues.MasterUserPassword',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.PendingModifiedValues.NodeType'),
        outputPath: 'Cluster.PendingModifiedValues.NodeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.PendingModifiedValues.NodeType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.PendingModifiedValues.NumberOfNodes'),
        outputPath: 'Cluster.PendingModifiedValues.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.PendingModifiedValues.NumberOfNodes', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NumberOfNodes') as unknown as number;
  }

  public get clusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.PendingModifiedValues.ClusterType'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.PendingModifiedValues.ClusterType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterType') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.PendingModifiedValues.ClusterVersion'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.PendingModifiedValues.ClusterVersion', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterVersion') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.PendingModifiedValues.ClusterIdentifier'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.PendingModifiedValues.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterIdentifier') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.PendingModifiedValues.PubliclyAccessible'),
        outputPath: 'Cluster.PendingModifiedValues.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.PendingModifiedValues.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.PubliclyAccessible') as unknown as boolean;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.PendingModifiedValues.EnhancedVpcRouting'),
        outputPath: 'Cluster.PendingModifiedValues.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.PendingModifiedValues.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.PendingModifiedValues.MaintenanceTrackName'),
        outputPath: 'Cluster.PendingModifiedValues.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.PendingModifiedValues.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MaintenanceTrackName') as unknown as string;
  }

  public get encryptionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.PendingModifiedValues.EncryptionType'),
        outputPath: 'Cluster.PendingModifiedValues.EncryptionType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.PendingModifiedValues.EncryptionType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EncryptionType') as unknown as string;
  }

}

export class RedshiftModifyClusterDbRevisionClusterRestoreStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterDbRevisionMessage) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.RestoreStatus.Status'),
        outputPath: 'Cluster.RestoreStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.RestoreStatus.Status', props);
    return resource.getResponseField('Cluster.RestoreStatus.Status') as unknown as string;
  }

  public get currentRestoreRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond') as unknown as number;
  }

  public get snapshotSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.RestoreStatus.SnapshotSizeInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.SnapshotSizeInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.RestoreStatus.SnapshotSizeInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.SnapshotSizeInMegaBytes') as unknown as number;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.RestoreStatus.ProgressInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.ProgressInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.RestoreStatus.ProgressInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.ProgressInMegaBytes') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.RestoreStatus.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.RestoreStatus.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.RestoreStatus.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.ElapsedTimeInSeconds') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

}

export class RedshiftModifyClusterDbRevisionClusterDataTransferProgress extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterDbRevisionMessage) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.DataTransferProgress.Status'),
        outputPath: 'Cluster.DataTransferProgress.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.DataTransferProgress.Status', props);
    return resource.getResponseField('Cluster.DataTransferProgress.Status') as unknown as string;
  }

  public get currentRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond') as unknown as number;
  }

  public get totalDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.DataTransferProgress.TotalDataInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.TotalDataInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.DataTransferProgress.TotalDataInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.TotalDataInMegaBytes') as unknown as number;
  }

  public get dataTransferredInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.DataTransferProgress.DataTransferredInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.DataTransferredInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.DataTransferProgress.DataTransferredInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.DataTransferredInMegaBytes') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.DataTransferProgress.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.DataTransferProgress.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.ElapsedTimeInSeconds') as unknown as number;
  }

}

export class RedshiftModifyClusterDbRevisionClusterHsmStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterDbRevisionMessage) {
    super(scope, id);
  }

  public get hsmClientCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.HsmStatus.HsmClientCertificateIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmClientCertificateIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.HsmStatus.HsmClientCertificateIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmClientCertificateIdentifier') as unknown as string;
  }

  public get hsmConfigurationIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.HsmStatus.HsmConfigurationIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmConfigurationIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.HsmStatus.HsmConfigurationIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmConfigurationIdentifier') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.HsmStatus.Status'),
        outputPath: 'Cluster.HsmStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.HsmStatus.Status', props);
    return resource.getResponseField('Cluster.HsmStatus.Status') as unknown as string;
  }

}

export class RedshiftModifyClusterDbRevisionClusterClusterSnapshotCopyStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterDbRevisionMessage) {
    super(scope, id);
  }

  public get destinationRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ClusterSnapshotCopyStatus.DestinationRegion'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.DestinationRegion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.ClusterSnapshotCopyStatus.DestinationRegion', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.DestinationRegion') as unknown as string;
  }

  public get retentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.RetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.RetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get snapshotCopyGrantName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName') as unknown as string;
  }

}

export class RedshiftModifyClusterDbRevisionClusterElasticIpStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterDbRevisionMessage) {
    super(scope, id);
  }

  public get elasticIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ElasticIpStatus.ElasticIp'),
        outputPath: 'Cluster.ElasticIpStatus.ElasticIp',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.ElasticIpStatus.ElasticIp', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.ElasticIp') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ElasticIpStatus.Status'),
        outputPath: 'Cluster.ElasticIpStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.ElasticIpStatus.Status', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.Status') as unknown as string;
  }

}

export class RedshiftModifyClusterDbRevisionClusterResizeInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterDbRevisionMessage) {
    super(scope, id);
  }

  public get resizeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ResizeInfo.ResizeType'),
        outputPath: 'Cluster.ResizeInfo.ResizeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.ResizeInfo.ResizeType', props);
    return resource.getResponseField('Cluster.ResizeInfo.ResizeType') as unknown as string;
  }

  public get allowCancelResize(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ResizeInfo.AllowCancelResize'),
        outputPath: 'Cluster.ResizeInfo.AllowCancelResize',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RevisionTarget: this.input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterDbRevision.Cluster.ResizeInfo.AllowCancelResize', props);
    return resource.getResponseField('Cluster.ResizeInfo.AllowCancelResize') as unknown as boolean;
  }

}

export class RedshiftModifyClusterIamRoles extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterIamRolesMessage) {
    super(scope, id);
  }

  public get cluster(): RedshiftModifyClusterIamRolesCluster {
    return new RedshiftModifyClusterIamRolesCluster(this, 'Cluster', this.__resources, this.input);
  }

}

export class RedshiftModifyClusterIamRolesCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterIamRolesMessage) {
    super(scope, id);
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ClusterIdentifier'),
        outputPath: 'Cluster.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.ClusterIdentifier') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.NodeType'),
        outputPath: 'Cluster.NodeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.NodeType', props);
    return resource.getResponseField('Cluster.NodeType') as unknown as string;
  }

  public get clusterStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ClusterStatus'),
        outputPath: 'Cluster.ClusterStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.ClusterStatus', props);
    return resource.getResponseField('Cluster.ClusterStatus') as unknown as string;
  }

  public get clusterAvailabilityStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ClusterAvailabilityStatus'),
        outputPath: 'Cluster.ClusterAvailabilityStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.ClusterAvailabilityStatus', props);
    return resource.getResponseField('Cluster.ClusterAvailabilityStatus') as unknown as string;
  }

  public get modifyStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ModifyStatus'),
        outputPath: 'Cluster.ModifyStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.ModifyStatus', props);
    return resource.getResponseField('Cluster.ModifyStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.MasterUsername'),
        outputPath: 'Cluster.MasterUsername',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.MasterUsername', props);
    return resource.getResponseField('Cluster.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.DBName'),
        outputPath: 'Cluster.DBName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.DBName', props);
    return resource.getResponseField('Cluster.DBName') as unknown as string;
  }

  public get endpoint(): RedshiftModifyClusterIamRolesClusterEndpoint {
    return new RedshiftModifyClusterIamRolesClusterEndpoint(this, 'Endpoint', this.__resources, this.input);
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ClusterCreateTime'),
        outputPath: 'Cluster.ClusterCreateTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.ClusterCreateTime', props);
    return resource.getResponseField('Cluster.ClusterCreateTime') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterSecurityGroups(): shapes.RedshiftClusterSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ClusterSecurityGroups'),
        outputPath: 'Cluster.ClusterSecurityGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.ClusterSecurityGroups', props);
    return resource.getResponseField('Cluster.ClusterSecurityGroups') as unknown as shapes.RedshiftClusterSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RedshiftVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.VpcSecurityGroups'),
        outputPath: 'Cluster.VpcSecurityGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.VpcSecurityGroups', props);
    return resource.getResponseField('Cluster.VpcSecurityGroups') as unknown as shapes.RedshiftVpcSecurityGroupMembership[];
  }

  public get clusterParameterGroups(): shapes.RedshiftClusterParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ClusterParameterGroups'),
        outputPath: 'Cluster.ClusterParameterGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.ClusterParameterGroups', props);
    return resource.getResponseField('Cluster.ClusterParameterGroups') as unknown as shapes.RedshiftClusterParameterGroupStatus[];
  }

  public get clusterSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ClusterSubnetGroupName'),
        outputPath: 'Cluster.ClusterSubnetGroupName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.ClusterSubnetGroupName', props);
    return resource.getResponseField('Cluster.ClusterSubnetGroupName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.VpcId'),
        outputPath: 'Cluster.VpcId',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.VpcId', props);
    return resource.getResponseField('Cluster.VpcId') as unknown as string;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.AvailabilityZone'),
        outputPath: 'Cluster.AvailabilityZone',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.AvailabilityZone', props);
    return resource.getResponseField('Cluster.AvailabilityZone') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.PreferredMaintenanceWindow'),
        outputPath: 'Cluster.PreferredMaintenanceWindow',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('Cluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RedshiftModifyClusterIamRolesClusterPendingModifiedValues {
    return new RedshiftModifyClusterIamRolesClusterPendingModifiedValues(this, 'PendingModifiedValues', this.__resources, this.input);
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ClusterVersion'),
        outputPath: 'Cluster.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.ClusterVersion', props);
    return resource.getResponseField('Cluster.ClusterVersion') as unknown as string;
  }

  public get allowVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.AllowVersionUpgrade'),
        outputPath: 'Cluster.AllowVersionUpgrade',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.AllowVersionUpgrade', props);
    return resource.getResponseField('Cluster.AllowVersionUpgrade') as unknown as boolean;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.NumberOfNodes'),
        outputPath: 'Cluster.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.NumberOfNodes', props);
    return resource.getResponseField('Cluster.NumberOfNodes') as unknown as number;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.PubliclyAccessible'),
        outputPath: 'Cluster.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PubliclyAccessible') as unknown as boolean;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.Encrypted'),
        outputPath: 'Cluster.Encrypted',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.Encrypted', props);
    return resource.getResponseField('Cluster.Encrypted') as unknown as boolean;
  }

  public get restoreStatus(): RedshiftModifyClusterIamRolesClusterRestoreStatus {
    return new RedshiftModifyClusterIamRolesClusterRestoreStatus(this, 'RestoreStatus', this.__resources, this.input);
  }

  public get dataTransferProgress(): RedshiftModifyClusterIamRolesClusterDataTransferProgress {
    return new RedshiftModifyClusterIamRolesClusterDataTransferProgress(this, 'DataTransferProgress', this.__resources, this.input);
  }

  public get hsmStatus(): RedshiftModifyClusterIamRolesClusterHsmStatus {
    return new RedshiftModifyClusterIamRolesClusterHsmStatus(this, 'HsmStatus', this.__resources, this.input);
  }

  public get clusterSnapshotCopyStatus(): RedshiftModifyClusterIamRolesClusterClusterSnapshotCopyStatus {
    return new RedshiftModifyClusterIamRolesClusterClusterSnapshotCopyStatus(this, 'ClusterSnapshotCopyStatus', this.__resources, this.input);
  }

  public get clusterPublicKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ClusterPublicKey'),
        outputPath: 'Cluster.ClusterPublicKey',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.ClusterPublicKey', props);
    return resource.getResponseField('Cluster.ClusterPublicKey') as unknown as string;
  }

  public get clusterNodes(): shapes.RedshiftClusterNode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ClusterNodes'),
        outputPath: 'Cluster.ClusterNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.ClusterNodes', props);
    return resource.getResponseField('Cluster.ClusterNodes') as unknown as shapes.RedshiftClusterNode[];
  }

  public get elasticIpStatus(): RedshiftModifyClusterIamRolesClusterElasticIpStatus {
    return new RedshiftModifyClusterIamRolesClusterElasticIpStatus(this, 'ElasticIpStatus', this.__resources, this.input);
  }

  public get clusterRevisionNumber(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ClusterRevisionNumber'),
        outputPath: 'Cluster.ClusterRevisionNumber',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.ClusterRevisionNumber', props);
    return resource.getResponseField('Cluster.ClusterRevisionNumber') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.Tags'),
        outputPath: 'Cluster.Tags',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.Tags', props);
    return resource.getResponseField('Cluster.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.KmsKeyId'),
        outputPath: 'Cluster.KmsKeyId',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.KmsKeyId', props);
    return resource.getResponseField('Cluster.KmsKeyId') as unknown as string;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.EnhancedVpcRouting'),
        outputPath: 'Cluster.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.EnhancedVpcRouting') as unknown as boolean;
  }

  public get iamRoles(): shapes.RedshiftClusterIamRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.IamRoles'),
        outputPath: 'Cluster.IamRoles',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.IamRoles', props);
    return resource.getResponseField('Cluster.IamRoles') as unknown as shapes.RedshiftClusterIamRole[];
  }

  public get pendingActions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.PendingActions'),
        outputPath: 'Cluster.PendingActions',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.PendingActions', props);
    return resource.getResponseField('Cluster.PendingActions') as unknown as string[];
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.MaintenanceTrackName'),
        outputPath: 'Cluster.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.MaintenanceTrackName') as unknown as string;
  }

  public get elasticResizeNumberOfNodeOptions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ElasticResizeNumberOfNodeOptions'),
        outputPath: 'Cluster.ElasticResizeNumberOfNodeOptions',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.ElasticResizeNumberOfNodeOptions', props);
    return resource.getResponseField('Cluster.ElasticResizeNumberOfNodeOptions') as unknown as string;
  }

  public get deferredMaintenanceWindows(): shapes.RedshiftDeferredMaintenanceWindow[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.DeferredMaintenanceWindows'),
        outputPath: 'Cluster.DeferredMaintenanceWindows',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.DeferredMaintenanceWindows', props);
    return resource.getResponseField('Cluster.DeferredMaintenanceWindows') as unknown as shapes.RedshiftDeferredMaintenanceWindow[];
  }

  public get snapshotScheduleIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.SnapshotScheduleIdentifier'),
        outputPath: 'Cluster.SnapshotScheduleIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.SnapshotScheduleIdentifier', props);
    return resource.getResponseField('Cluster.SnapshotScheduleIdentifier') as unknown as string;
  }

  public get snapshotScheduleState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.SnapshotScheduleState'),
        outputPath: 'Cluster.SnapshotScheduleState',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.SnapshotScheduleState', props);
    return resource.getResponseField('Cluster.SnapshotScheduleState') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ExpectedNextSnapshotScheduleTime'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.ExpectedNextSnapshotScheduleTime', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTime') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTimeStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ExpectedNextSnapshotScheduleTimeStatus'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTimeStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.ExpectedNextSnapshotScheduleTimeStatus', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTimeStatus') as unknown as string;
  }

  public get nextMaintenanceWindowStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.NextMaintenanceWindowStartTime'),
        outputPath: 'Cluster.NextMaintenanceWindowStartTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.NextMaintenanceWindowStartTime', props);
    return resource.getResponseField('Cluster.NextMaintenanceWindowStartTime') as unknown as string;
  }

  public get resizeInfo(): RedshiftModifyClusterIamRolesClusterResizeInfo {
    return new RedshiftModifyClusterIamRolesClusterResizeInfo(this, 'ResizeInfo', this.__resources, this.input);
  }

  public get clusterNamespaceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ClusterNamespaceArn'),
        outputPath: 'Cluster.ClusterNamespaceArn',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.ClusterNamespaceArn', props);
    return resource.getResponseField('Cluster.ClusterNamespaceArn') as unknown as string;
  }

}

export class RedshiftModifyClusterIamRolesClusterEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterIamRolesMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.Endpoint.Address'),
        outputPath: 'Cluster.Endpoint.Address',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.Endpoint.Address', props);
    return resource.getResponseField('Cluster.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.Endpoint.Port'),
        outputPath: 'Cluster.Endpoint.Port',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.Endpoint.Port', props);
    return resource.getResponseField('Cluster.Endpoint.Port') as unknown as number;
  }

}

export class RedshiftModifyClusterIamRolesClusterPendingModifiedValues extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterIamRolesMessage) {
    super(scope, id);
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'Cluster.PendingModifiedValues.MasterUserPassword',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.PendingModifiedValues.NodeType'),
        outputPath: 'Cluster.PendingModifiedValues.NodeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.PendingModifiedValues.NodeType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.PendingModifiedValues.NumberOfNodes'),
        outputPath: 'Cluster.PendingModifiedValues.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.PendingModifiedValues.NumberOfNodes', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NumberOfNodes') as unknown as number;
  }

  public get clusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.PendingModifiedValues.ClusterType'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.PendingModifiedValues.ClusterType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterType') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.PendingModifiedValues.ClusterVersion'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.PendingModifiedValues.ClusterVersion', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterVersion') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.PendingModifiedValues.ClusterIdentifier'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.PendingModifiedValues.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterIdentifier') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.PendingModifiedValues.PubliclyAccessible'),
        outputPath: 'Cluster.PendingModifiedValues.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.PendingModifiedValues.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.PubliclyAccessible') as unknown as boolean;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.PendingModifiedValues.EnhancedVpcRouting'),
        outputPath: 'Cluster.PendingModifiedValues.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.PendingModifiedValues.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.PendingModifiedValues.MaintenanceTrackName'),
        outputPath: 'Cluster.PendingModifiedValues.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.PendingModifiedValues.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MaintenanceTrackName') as unknown as string;
  }

  public get encryptionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.PendingModifiedValues.EncryptionType'),
        outputPath: 'Cluster.PendingModifiedValues.EncryptionType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.PendingModifiedValues.EncryptionType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EncryptionType') as unknown as string;
  }

}

export class RedshiftModifyClusterIamRolesClusterRestoreStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterIamRolesMessage) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.RestoreStatus.Status'),
        outputPath: 'Cluster.RestoreStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.RestoreStatus.Status', props);
    return resource.getResponseField('Cluster.RestoreStatus.Status') as unknown as string;
  }

  public get currentRestoreRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond') as unknown as number;
  }

  public get snapshotSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.RestoreStatus.SnapshotSizeInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.SnapshotSizeInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.RestoreStatus.SnapshotSizeInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.SnapshotSizeInMegaBytes') as unknown as number;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.RestoreStatus.ProgressInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.ProgressInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.RestoreStatus.ProgressInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.ProgressInMegaBytes') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.RestoreStatus.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.RestoreStatus.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.RestoreStatus.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.ElapsedTimeInSeconds') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

}

export class RedshiftModifyClusterIamRolesClusterDataTransferProgress extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterIamRolesMessage) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.DataTransferProgress.Status'),
        outputPath: 'Cluster.DataTransferProgress.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.DataTransferProgress.Status', props);
    return resource.getResponseField('Cluster.DataTransferProgress.Status') as unknown as string;
  }

  public get currentRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond') as unknown as number;
  }

  public get totalDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.DataTransferProgress.TotalDataInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.TotalDataInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.DataTransferProgress.TotalDataInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.TotalDataInMegaBytes') as unknown as number;
  }

  public get dataTransferredInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.DataTransferProgress.DataTransferredInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.DataTransferredInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.DataTransferProgress.DataTransferredInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.DataTransferredInMegaBytes') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.DataTransferProgress.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.DataTransferProgress.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.ElapsedTimeInSeconds') as unknown as number;
  }

}

export class RedshiftModifyClusterIamRolesClusterHsmStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterIamRolesMessage) {
    super(scope, id);
  }

  public get hsmClientCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.HsmStatus.HsmClientCertificateIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmClientCertificateIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.HsmStatus.HsmClientCertificateIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmClientCertificateIdentifier') as unknown as string;
  }

  public get hsmConfigurationIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.HsmStatus.HsmConfigurationIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmConfigurationIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.HsmStatus.HsmConfigurationIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmConfigurationIdentifier') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.HsmStatus.Status'),
        outputPath: 'Cluster.HsmStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.HsmStatus.Status', props);
    return resource.getResponseField('Cluster.HsmStatus.Status') as unknown as string;
  }

}

export class RedshiftModifyClusterIamRolesClusterClusterSnapshotCopyStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterIamRolesMessage) {
    super(scope, id);
  }

  public get destinationRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ClusterSnapshotCopyStatus.DestinationRegion'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.DestinationRegion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.ClusterSnapshotCopyStatus.DestinationRegion', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.DestinationRegion') as unknown as string;
  }

  public get retentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.RetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.RetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get snapshotCopyGrantName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName') as unknown as string;
  }

}

export class RedshiftModifyClusterIamRolesClusterElasticIpStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterIamRolesMessage) {
    super(scope, id);
  }

  public get elasticIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ElasticIpStatus.ElasticIp'),
        outputPath: 'Cluster.ElasticIpStatus.ElasticIp',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.ElasticIpStatus.ElasticIp', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.ElasticIp') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ElasticIpStatus.Status'),
        outputPath: 'Cluster.ElasticIpStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.ElasticIpStatus.Status', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.Status') as unknown as string;
  }

}

export class RedshiftModifyClusterIamRolesClusterResizeInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterIamRolesMessage) {
    super(scope, id);
  }

  public get resizeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ResizeInfo.ResizeType'),
        outputPath: 'Cluster.ResizeInfo.ResizeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.ResizeInfo.ResizeType', props);
    return resource.getResponseField('Cluster.ResizeInfo.ResizeType') as unknown as string;
  }

  public get allowCancelResize(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ResizeInfo.AllowCancelResize'),
        outputPath: 'Cluster.ResizeInfo.AllowCancelResize',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          AddIamRoles: this.input.addIamRoles,
          RemoveIamRoles: this.input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterIamRoles.Cluster.ResizeInfo.AllowCancelResize', props);
    return resource.getResponseField('Cluster.ResizeInfo.AllowCancelResize') as unknown as boolean;
  }

}

export class RedshiftModifyClusterMaintenance extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterMaintenanceMessage) {
    super(scope, id);
  }

  public get cluster(): RedshiftModifyClusterMaintenanceCluster {
    return new RedshiftModifyClusterMaintenanceCluster(this, 'Cluster', this.__resources, this.input);
  }

}

export class RedshiftModifyClusterMaintenanceCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterMaintenanceMessage) {
    super(scope, id);
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ClusterIdentifier'),
        outputPath: 'Cluster.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.ClusterIdentifier') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.NodeType'),
        outputPath: 'Cluster.NodeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.NodeType', props);
    return resource.getResponseField('Cluster.NodeType') as unknown as string;
  }

  public get clusterStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ClusterStatus'),
        outputPath: 'Cluster.ClusterStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.ClusterStatus', props);
    return resource.getResponseField('Cluster.ClusterStatus') as unknown as string;
  }

  public get clusterAvailabilityStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ClusterAvailabilityStatus'),
        outputPath: 'Cluster.ClusterAvailabilityStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.ClusterAvailabilityStatus', props);
    return resource.getResponseField('Cluster.ClusterAvailabilityStatus') as unknown as string;
  }

  public get modifyStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ModifyStatus'),
        outputPath: 'Cluster.ModifyStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.ModifyStatus', props);
    return resource.getResponseField('Cluster.ModifyStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.MasterUsername'),
        outputPath: 'Cluster.MasterUsername',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.MasterUsername', props);
    return resource.getResponseField('Cluster.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.DBName'),
        outputPath: 'Cluster.DBName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.DBName', props);
    return resource.getResponseField('Cluster.DBName') as unknown as string;
  }

  public get endpoint(): RedshiftModifyClusterMaintenanceClusterEndpoint {
    return new RedshiftModifyClusterMaintenanceClusterEndpoint(this, 'Endpoint', this.__resources, this.input);
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ClusterCreateTime'),
        outputPath: 'Cluster.ClusterCreateTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.ClusterCreateTime', props);
    return resource.getResponseField('Cluster.ClusterCreateTime') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterSecurityGroups(): shapes.RedshiftClusterSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ClusterSecurityGroups'),
        outputPath: 'Cluster.ClusterSecurityGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.ClusterSecurityGroups', props);
    return resource.getResponseField('Cluster.ClusterSecurityGroups') as unknown as shapes.RedshiftClusterSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RedshiftVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.VpcSecurityGroups'),
        outputPath: 'Cluster.VpcSecurityGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.VpcSecurityGroups', props);
    return resource.getResponseField('Cluster.VpcSecurityGroups') as unknown as shapes.RedshiftVpcSecurityGroupMembership[];
  }

  public get clusterParameterGroups(): shapes.RedshiftClusterParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ClusterParameterGroups'),
        outputPath: 'Cluster.ClusterParameterGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.ClusterParameterGroups', props);
    return resource.getResponseField('Cluster.ClusterParameterGroups') as unknown as shapes.RedshiftClusterParameterGroupStatus[];
  }

  public get clusterSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ClusterSubnetGroupName'),
        outputPath: 'Cluster.ClusterSubnetGroupName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.ClusterSubnetGroupName', props);
    return resource.getResponseField('Cluster.ClusterSubnetGroupName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.VpcId'),
        outputPath: 'Cluster.VpcId',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.VpcId', props);
    return resource.getResponseField('Cluster.VpcId') as unknown as string;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.AvailabilityZone'),
        outputPath: 'Cluster.AvailabilityZone',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.AvailabilityZone', props);
    return resource.getResponseField('Cluster.AvailabilityZone') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.PreferredMaintenanceWindow'),
        outputPath: 'Cluster.PreferredMaintenanceWindow',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('Cluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RedshiftModifyClusterMaintenanceClusterPendingModifiedValues {
    return new RedshiftModifyClusterMaintenanceClusterPendingModifiedValues(this, 'PendingModifiedValues', this.__resources, this.input);
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ClusterVersion'),
        outputPath: 'Cluster.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.ClusterVersion', props);
    return resource.getResponseField('Cluster.ClusterVersion') as unknown as string;
  }

  public get allowVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.AllowVersionUpgrade'),
        outputPath: 'Cluster.AllowVersionUpgrade',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.AllowVersionUpgrade', props);
    return resource.getResponseField('Cluster.AllowVersionUpgrade') as unknown as boolean;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.NumberOfNodes'),
        outputPath: 'Cluster.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.NumberOfNodes', props);
    return resource.getResponseField('Cluster.NumberOfNodes') as unknown as number;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.PubliclyAccessible'),
        outputPath: 'Cluster.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PubliclyAccessible') as unknown as boolean;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.Encrypted'),
        outputPath: 'Cluster.Encrypted',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.Encrypted', props);
    return resource.getResponseField('Cluster.Encrypted') as unknown as boolean;
  }

  public get restoreStatus(): RedshiftModifyClusterMaintenanceClusterRestoreStatus {
    return new RedshiftModifyClusterMaintenanceClusterRestoreStatus(this, 'RestoreStatus', this.__resources, this.input);
  }

  public get dataTransferProgress(): RedshiftModifyClusterMaintenanceClusterDataTransferProgress {
    return new RedshiftModifyClusterMaintenanceClusterDataTransferProgress(this, 'DataTransferProgress', this.__resources, this.input);
  }

  public get hsmStatus(): RedshiftModifyClusterMaintenanceClusterHsmStatus {
    return new RedshiftModifyClusterMaintenanceClusterHsmStatus(this, 'HsmStatus', this.__resources, this.input);
  }

  public get clusterSnapshotCopyStatus(): RedshiftModifyClusterMaintenanceClusterClusterSnapshotCopyStatus {
    return new RedshiftModifyClusterMaintenanceClusterClusterSnapshotCopyStatus(this, 'ClusterSnapshotCopyStatus', this.__resources, this.input);
  }

  public get clusterPublicKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ClusterPublicKey'),
        outputPath: 'Cluster.ClusterPublicKey',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.ClusterPublicKey', props);
    return resource.getResponseField('Cluster.ClusterPublicKey') as unknown as string;
  }

  public get clusterNodes(): shapes.RedshiftClusterNode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ClusterNodes'),
        outputPath: 'Cluster.ClusterNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.ClusterNodes', props);
    return resource.getResponseField('Cluster.ClusterNodes') as unknown as shapes.RedshiftClusterNode[];
  }

  public get elasticIpStatus(): RedshiftModifyClusterMaintenanceClusterElasticIpStatus {
    return new RedshiftModifyClusterMaintenanceClusterElasticIpStatus(this, 'ElasticIpStatus', this.__resources, this.input);
  }

  public get clusterRevisionNumber(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ClusterRevisionNumber'),
        outputPath: 'Cluster.ClusterRevisionNumber',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.ClusterRevisionNumber', props);
    return resource.getResponseField('Cluster.ClusterRevisionNumber') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.Tags'),
        outputPath: 'Cluster.Tags',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.Tags', props);
    return resource.getResponseField('Cluster.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.KmsKeyId'),
        outputPath: 'Cluster.KmsKeyId',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.KmsKeyId', props);
    return resource.getResponseField('Cluster.KmsKeyId') as unknown as string;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.EnhancedVpcRouting'),
        outputPath: 'Cluster.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.EnhancedVpcRouting') as unknown as boolean;
  }

  public get iamRoles(): shapes.RedshiftClusterIamRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.IamRoles'),
        outputPath: 'Cluster.IamRoles',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.IamRoles', props);
    return resource.getResponseField('Cluster.IamRoles') as unknown as shapes.RedshiftClusterIamRole[];
  }

  public get pendingActions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.PendingActions'),
        outputPath: 'Cluster.PendingActions',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.PendingActions', props);
    return resource.getResponseField('Cluster.PendingActions') as unknown as string[];
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.MaintenanceTrackName'),
        outputPath: 'Cluster.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.MaintenanceTrackName') as unknown as string;
  }

  public get elasticResizeNumberOfNodeOptions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ElasticResizeNumberOfNodeOptions'),
        outputPath: 'Cluster.ElasticResizeNumberOfNodeOptions',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.ElasticResizeNumberOfNodeOptions', props);
    return resource.getResponseField('Cluster.ElasticResizeNumberOfNodeOptions') as unknown as string;
  }

  public get deferredMaintenanceWindows(): shapes.RedshiftDeferredMaintenanceWindow[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.DeferredMaintenanceWindows'),
        outputPath: 'Cluster.DeferredMaintenanceWindows',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.DeferredMaintenanceWindows', props);
    return resource.getResponseField('Cluster.DeferredMaintenanceWindows') as unknown as shapes.RedshiftDeferredMaintenanceWindow[];
  }

  public get snapshotScheduleIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.SnapshotScheduleIdentifier'),
        outputPath: 'Cluster.SnapshotScheduleIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.SnapshotScheduleIdentifier', props);
    return resource.getResponseField('Cluster.SnapshotScheduleIdentifier') as unknown as string;
  }

  public get snapshotScheduleState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.SnapshotScheduleState'),
        outputPath: 'Cluster.SnapshotScheduleState',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.SnapshotScheduleState', props);
    return resource.getResponseField('Cluster.SnapshotScheduleState') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ExpectedNextSnapshotScheduleTime'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.ExpectedNextSnapshotScheduleTime', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTime') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTimeStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ExpectedNextSnapshotScheduleTimeStatus'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTimeStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.ExpectedNextSnapshotScheduleTimeStatus', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTimeStatus') as unknown as string;
  }

  public get nextMaintenanceWindowStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.NextMaintenanceWindowStartTime'),
        outputPath: 'Cluster.NextMaintenanceWindowStartTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.NextMaintenanceWindowStartTime', props);
    return resource.getResponseField('Cluster.NextMaintenanceWindowStartTime') as unknown as string;
  }

  public get resizeInfo(): RedshiftModifyClusterMaintenanceClusterResizeInfo {
    return new RedshiftModifyClusterMaintenanceClusterResizeInfo(this, 'ResizeInfo', this.__resources, this.input);
  }

  public get clusterNamespaceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ClusterNamespaceArn'),
        outputPath: 'Cluster.ClusterNamespaceArn',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.ClusterNamespaceArn', props);
    return resource.getResponseField('Cluster.ClusterNamespaceArn') as unknown as string;
  }

}

export class RedshiftModifyClusterMaintenanceClusterEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterMaintenanceMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.Endpoint.Address'),
        outputPath: 'Cluster.Endpoint.Address',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.Endpoint.Address', props);
    return resource.getResponseField('Cluster.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.Endpoint.Port'),
        outputPath: 'Cluster.Endpoint.Port',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.Endpoint.Port', props);
    return resource.getResponseField('Cluster.Endpoint.Port') as unknown as number;
  }

}

export class RedshiftModifyClusterMaintenanceClusterPendingModifiedValues extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterMaintenanceMessage) {
    super(scope, id);
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'Cluster.PendingModifiedValues.MasterUserPassword',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.PendingModifiedValues.NodeType'),
        outputPath: 'Cluster.PendingModifiedValues.NodeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.PendingModifiedValues.NodeType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.PendingModifiedValues.NumberOfNodes'),
        outputPath: 'Cluster.PendingModifiedValues.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.PendingModifiedValues.NumberOfNodes', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NumberOfNodes') as unknown as number;
  }

  public get clusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.PendingModifiedValues.ClusterType'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.PendingModifiedValues.ClusterType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterType') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.PendingModifiedValues.ClusterVersion'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.PendingModifiedValues.ClusterVersion', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterVersion') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.PendingModifiedValues.ClusterIdentifier'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.PendingModifiedValues.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterIdentifier') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.PendingModifiedValues.PubliclyAccessible'),
        outputPath: 'Cluster.PendingModifiedValues.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.PendingModifiedValues.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.PubliclyAccessible') as unknown as boolean;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.PendingModifiedValues.EnhancedVpcRouting'),
        outputPath: 'Cluster.PendingModifiedValues.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.PendingModifiedValues.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.PendingModifiedValues.MaintenanceTrackName'),
        outputPath: 'Cluster.PendingModifiedValues.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.PendingModifiedValues.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MaintenanceTrackName') as unknown as string;
  }

  public get encryptionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.PendingModifiedValues.EncryptionType'),
        outputPath: 'Cluster.PendingModifiedValues.EncryptionType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.PendingModifiedValues.EncryptionType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EncryptionType') as unknown as string;
  }

}

export class RedshiftModifyClusterMaintenanceClusterRestoreStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterMaintenanceMessage) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.RestoreStatus.Status'),
        outputPath: 'Cluster.RestoreStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.RestoreStatus.Status', props);
    return resource.getResponseField('Cluster.RestoreStatus.Status') as unknown as string;
  }

  public get currentRestoreRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond') as unknown as number;
  }

  public get snapshotSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.RestoreStatus.SnapshotSizeInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.SnapshotSizeInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.RestoreStatus.SnapshotSizeInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.SnapshotSizeInMegaBytes') as unknown as number;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.RestoreStatus.ProgressInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.ProgressInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.RestoreStatus.ProgressInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.ProgressInMegaBytes') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.RestoreStatus.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.RestoreStatus.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.RestoreStatus.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.ElapsedTimeInSeconds') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

}

export class RedshiftModifyClusterMaintenanceClusterDataTransferProgress extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterMaintenanceMessage) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.DataTransferProgress.Status'),
        outputPath: 'Cluster.DataTransferProgress.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.DataTransferProgress.Status', props);
    return resource.getResponseField('Cluster.DataTransferProgress.Status') as unknown as string;
  }

  public get currentRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond') as unknown as number;
  }

  public get totalDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.DataTransferProgress.TotalDataInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.TotalDataInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.DataTransferProgress.TotalDataInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.TotalDataInMegaBytes') as unknown as number;
  }

  public get dataTransferredInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.DataTransferProgress.DataTransferredInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.DataTransferredInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.DataTransferProgress.DataTransferredInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.DataTransferredInMegaBytes') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.DataTransferProgress.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.DataTransferProgress.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.ElapsedTimeInSeconds') as unknown as number;
  }

}

export class RedshiftModifyClusterMaintenanceClusterHsmStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterMaintenanceMessage) {
    super(scope, id);
  }

  public get hsmClientCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.HsmStatus.HsmClientCertificateIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmClientCertificateIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.HsmStatus.HsmClientCertificateIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmClientCertificateIdentifier') as unknown as string;
  }

  public get hsmConfigurationIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.HsmStatus.HsmConfigurationIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmConfigurationIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.HsmStatus.HsmConfigurationIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmConfigurationIdentifier') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.HsmStatus.Status'),
        outputPath: 'Cluster.HsmStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.HsmStatus.Status', props);
    return resource.getResponseField('Cluster.HsmStatus.Status') as unknown as string;
  }

}

export class RedshiftModifyClusterMaintenanceClusterClusterSnapshotCopyStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterMaintenanceMessage) {
    super(scope, id);
  }

  public get destinationRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ClusterSnapshotCopyStatus.DestinationRegion'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.DestinationRegion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.ClusterSnapshotCopyStatus.DestinationRegion', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.DestinationRegion') as unknown as string;
  }

  public get retentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.RetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.RetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get snapshotCopyGrantName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName') as unknown as string;
  }

}

export class RedshiftModifyClusterMaintenanceClusterElasticIpStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterMaintenanceMessage) {
    super(scope, id);
  }

  public get elasticIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ElasticIpStatus.ElasticIp'),
        outputPath: 'Cluster.ElasticIpStatus.ElasticIp',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.ElasticIpStatus.ElasticIp', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.ElasticIp') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ElasticIpStatus.Status'),
        outputPath: 'Cluster.ElasticIpStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.ElasticIpStatus.Status', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.Status') as unknown as string;
  }

}

export class RedshiftModifyClusterMaintenanceClusterResizeInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterMaintenanceMessage) {
    super(scope, id);
  }

  public get resizeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ResizeInfo.ResizeType'),
        outputPath: 'Cluster.ResizeInfo.ResizeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.ResizeInfo.ResizeType', props);
    return resource.getResponseField('Cluster.ResizeInfo.ResizeType') as unknown as string;
  }

  public get allowCancelResize(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ResizeInfo.AllowCancelResize'),
        outputPath: 'Cluster.ResizeInfo.AllowCancelResize',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          DeferMaintenance: this.input.deferMaintenance,
          DeferMaintenanceIdentifier: this.input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterMaintenance.Cluster.ResizeInfo.AllowCancelResize', props);
    return resource.getResponseField('Cluster.ResizeInfo.AllowCancelResize') as unknown as boolean;
  }

}

export class RedshiftModifyClusterParameterGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterParameterGroupMessage) {
    super(scope, id);
  }

  public get parameterGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterParameterGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterParameterGroup.ParameterGroupName'),
        outputPath: 'ParameterGroupName',
        parameters: {
          ParameterGroupName: this.input.parameterGroupName,
          Parameters: this.input.parameters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterParameterGroup.ParameterGroupName', props);
    return resource.getResponseField('ParameterGroupName') as unknown as string;
  }

  public get parameterGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterParameterGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterParameterGroup.ParameterGroupStatus'),
        outputPath: 'ParameterGroupStatus',
        parameters: {
          ParameterGroupName: this.input.parameterGroupName,
          Parameters: this.input.parameters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterParameterGroup.ParameterGroupStatus', props);
    return resource.getResponseField('ParameterGroupStatus') as unknown as string;
  }

}

export class RedshiftModifyClusterSnapshot extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterSnapshotMessage) {
    super(scope, id);
  }

  public get snapshot(): RedshiftModifyClusterSnapshotSnapshot {
    return new RedshiftModifyClusterSnapshotSnapshot(this, 'Snapshot', this.__resources, this.input);
  }

}

export class RedshiftModifyClusterSnapshotSnapshot extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterSnapshotMessage) {
    super(scope, id);
  }

  public get snapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.SnapshotIdentifier'),
        outputPath: 'Snapshot.SnapshotIdentifier',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSnapshot.Snapshot.SnapshotIdentifier', props);
    return resource.getResponseField('Snapshot.SnapshotIdentifier') as unknown as string;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.ClusterIdentifier'),
        outputPath: 'Snapshot.ClusterIdentifier',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSnapshot.Snapshot.ClusterIdentifier', props);
    return resource.getResponseField('Snapshot.ClusterIdentifier') as unknown as string;
  }

  public get snapshotCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.SnapshotCreateTime'),
        outputPath: 'Snapshot.SnapshotCreateTime',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSnapshot.Snapshot.SnapshotCreateTime', props);
    return resource.getResponseField('Snapshot.SnapshotCreateTime') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.Status'),
        outputPath: 'Snapshot.Status',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSnapshot.Snapshot.Status', props);
    return resource.getResponseField('Snapshot.Status') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.Port'),
        outputPath: 'Snapshot.Port',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSnapshot.Snapshot.Port', props);
    return resource.getResponseField('Snapshot.Port') as unknown as number;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.AvailabilityZone'),
        outputPath: 'Snapshot.AvailabilityZone',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSnapshot.Snapshot.AvailabilityZone', props);
    return resource.getResponseField('Snapshot.AvailabilityZone') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.ClusterCreateTime'),
        outputPath: 'Snapshot.ClusterCreateTime',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSnapshot.Snapshot.ClusterCreateTime', props);
    return resource.getResponseField('Snapshot.ClusterCreateTime') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.MasterUsername'),
        outputPath: 'Snapshot.MasterUsername',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSnapshot.Snapshot.MasterUsername', props);
    return resource.getResponseField('Snapshot.MasterUsername') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.ClusterVersion'),
        outputPath: 'Snapshot.ClusterVersion',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSnapshot.Snapshot.ClusterVersion', props);
    return resource.getResponseField('Snapshot.ClusterVersion') as unknown as string;
  }

  public get snapshotType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.SnapshotType'),
        outputPath: 'Snapshot.SnapshotType',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSnapshot.Snapshot.SnapshotType', props);
    return resource.getResponseField('Snapshot.SnapshotType') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.NodeType'),
        outputPath: 'Snapshot.NodeType',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSnapshot.Snapshot.NodeType', props);
    return resource.getResponseField('Snapshot.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.NumberOfNodes'),
        outputPath: 'Snapshot.NumberOfNodes',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSnapshot.Snapshot.NumberOfNodes', props);
    return resource.getResponseField('Snapshot.NumberOfNodes') as unknown as number;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.DBName'),
        outputPath: 'Snapshot.DBName',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSnapshot.Snapshot.DBName', props);
    return resource.getResponseField('Snapshot.DBName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.VpcId'),
        outputPath: 'Snapshot.VpcId',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSnapshot.Snapshot.VpcId', props);
    return resource.getResponseField('Snapshot.VpcId') as unknown as string;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.Encrypted'),
        outputPath: 'Snapshot.Encrypted',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSnapshot.Snapshot.Encrypted', props);
    return resource.getResponseField('Snapshot.Encrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.KmsKeyId'),
        outputPath: 'Snapshot.KmsKeyId',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSnapshot.Snapshot.KmsKeyId', props);
    return resource.getResponseField('Snapshot.KmsKeyId') as unknown as string;
  }

  public get encryptedWithHsm(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.EncryptedWithHSM'),
        outputPath: 'Snapshot.EncryptedWithHSM',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSnapshot.Snapshot.EncryptedWithHSM', props);
    return resource.getResponseField('Snapshot.EncryptedWithHSM') as unknown as boolean;
  }

  public get accountsWithRestoreAccess(): shapes.RedshiftAccountWithRestoreAccess[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.AccountsWithRestoreAccess'),
        outputPath: 'Snapshot.AccountsWithRestoreAccess',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSnapshot.Snapshot.AccountsWithRestoreAccess', props);
    return resource.getResponseField('Snapshot.AccountsWithRestoreAccess') as unknown as shapes.RedshiftAccountWithRestoreAccess[];
  }

  public get ownerAccount(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.OwnerAccount'),
        outputPath: 'Snapshot.OwnerAccount',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSnapshot.Snapshot.OwnerAccount', props);
    return resource.getResponseField('Snapshot.OwnerAccount') as unknown as string;
  }

  public get totalBackupSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.TotalBackupSizeInMegaBytes'),
        outputPath: 'Snapshot.TotalBackupSizeInMegaBytes',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSnapshot.Snapshot.TotalBackupSizeInMegaBytes', props);
    return resource.getResponseField('Snapshot.TotalBackupSizeInMegaBytes') as unknown as number;
  }

  public get actualIncrementalBackupSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.ActualIncrementalBackupSizeInMegaBytes'),
        outputPath: 'Snapshot.ActualIncrementalBackupSizeInMegaBytes',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSnapshot.Snapshot.ActualIncrementalBackupSizeInMegaBytes', props);
    return resource.getResponseField('Snapshot.ActualIncrementalBackupSizeInMegaBytes') as unknown as number;
  }

  public get backupProgressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.BackupProgressInMegaBytes'),
        outputPath: 'Snapshot.BackupProgressInMegaBytes',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSnapshot.Snapshot.BackupProgressInMegaBytes', props);
    return resource.getResponseField('Snapshot.BackupProgressInMegaBytes') as unknown as number;
  }

  public get currentBackupRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.CurrentBackupRateInMegaBytesPerSecond'),
        outputPath: 'Snapshot.CurrentBackupRateInMegaBytesPerSecond',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSnapshot.Snapshot.CurrentBackupRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Snapshot.CurrentBackupRateInMegaBytesPerSecond') as unknown as number;
  }

  public get estimatedSecondsToCompletion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.EstimatedSecondsToCompletion'),
        outputPath: 'Snapshot.EstimatedSecondsToCompletion',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSnapshot.Snapshot.EstimatedSecondsToCompletion', props);
    return resource.getResponseField('Snapshot.EstimatedSecondsToCompletion') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.ElapsedTimeInSeconds'),
        outputPath: 'Snapshot.ElapsedTimeInSeconds',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSnapshot.Snapshot.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Snapshot.ElapsedTimeInSeconds') as unknown as number;
  }

  public get sourceRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.SourceRegion'),
        outputPath: 'Snapshot.SourceRegion',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSnapshot.Snapshot.SourceRegion', props);
    return resource.getResponseField('Snapshot.SourceRegion') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.Tags'),
        outputPath: 'Snapshot.Tags',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSnapshot.Snapshot.Tags', props);
    return resource.getResponseField('Snapshot.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get restorableNodeTypes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.RestorableNodeTypes'),
        outputPath: 'Snapshot.RestorableNodeTypes',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSnapshot.Snapshot.RestorableNodeTypes', props);
    return resource.getResponseField('Snapshot.RestorableNodeTypes') as unknown as string[];
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.EnhancedVpcRouting'),
        outputPath: 'Snapshot.EnhancedVpcRouting',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSnapshot.Snapshot.EnhancedVpcRouting', props);
    return resource.getResponseField('Snapshot.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.MaintenanceTrackName'),
        outputPath: 'Snapshot.MaintenanceTrackName',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSnapshot.Snapshot.MaintenanceTrackName', props);
    return resource.getResponseField('Snapshot.MaintenanceTrackName') as unknown as string;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.ManualSnapshotRetentionPeriod'),
        outputPath: 'Snapshot.ManualSnapshotRetentionPeriod',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSnapshot.Snapshot.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Snapshot.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRemainingDays(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.ManualSnapshotRemainingDays'),
        outputPath: 'Snapshot.ManualSnapshotRemainingDays',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSnapshot.Snapshot.ManualSnapshotRemainingDays', props);
    return resource.getResponseField('Snapshot.ManualSnapshotRemainingDays') as unknown as number;
  }

  public get snapshotRetentionStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.SnapshotRetentionStartTime'),
        outputPath: 'Snapshot.SnapshotRetentionStartTime',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSnapshot.Snapshot.SnapshotRetentionStartTime', props);
    return resource.getResponseField('Snapshot.SnapshotRetentionStartTime') as unknown as string;
  }

}

export class RedshiftModifyClusterSubnetGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterSubnetGroupMessage) {
    super(scope, id);
  }

  public get clusterSubnetGroup(): RedshiftModifyClusterSubnetGroupClusterSubnetGroup {
    return new RedshiftModifyClusterSubnetGroupClusterSubnetGroup(this, 'ClusterSubnetGroup', this.__resources, this.input);
  }

}

export class RedshiftModifyClusterSubnetGroupClusterSubnetGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyClusterSubnetGroupMessage) {
    super(scope, id);
  }

  public get clusterSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSubnetGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSubnetGroup.ClusterSubnetGroup.ClusterSubnetGroupName'),
        outputPath: 'ClusterSubnetGroup.ClusterSubnetGroupName',
        parameters: {
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          Description: this.input.description,
          SubnetIds: this.input.subnetIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSubnetGroup.ClusterSubnetGroup.ClusterSubnetGroupName', props);
    return resource.getResponseField('ClusterSubnetGroup.ClusterSubnetGroupName') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSubnetGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSubnetGroup.ClusterSubnetGroup.Description'),
        outputPath: 'ClusterSubnetGroup.Description',
        parameters: {
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          Description: this.input.description,
          SubnetIds: this.input.subnetIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSubnetGroup.ClusterSubnetGroup.Description', props);
    return resource.getResponseField('ClusterSubnetGroup.Description') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSubnetGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSubnetGroup.ClusterSubnetGroup.VpcId'),
        outputPath: 'ClusterSubnetGroup.VpcId',
        parameters: {
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          Description: this.input.description,
          SubnetIds: this.input.subnetIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSubnetGroup.ClusterSubnetGroup.VpcId', props);
    return resource.getResponseField('ClusterSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSubnetGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSubnetGroup.ClusterSubnetGroup.SubnetGroupStatus'),
        outputPath: 'ClusterSubnetGroup.SubnetGroupStatus',
        parameters: {
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          Description: this.input.description,
          SubnetIds: this.input.subnetIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSubnetGroup.ClusterSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('ClusterSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.RedshiftSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSubnetGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSubnetGroup.ClusterSubnetGroup.Subnets'),
        outputPath: 'ClusterSubnetGroup.Subnets',
        parameters: {
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          Description: this.input.description,
          SubnetIds: this.input.subnetIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSubnetGroup.ClusterSubnetGroup.Subnets', props);
    return resource.getResponseField('ClusterSubnetGroup.Subnets') as unknown as shapes.RedshiftSubnet[];
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSubnetGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSubnetGroup.ClusterSubnetGroup.Tags'),
        outputPath: 'ClusterSubnetGroup.Tags',
        parameters: {
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          Description: this.input.description,
          SubnetIds: this.input.subnetIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClusterSubnetGroup.ClusterSubnetGroup.Tags', props);
    return resource.getResponseField('ClusterSubnetGroup.Tags') as unknown as shapes.RedshiftTag[];
  }

}

export class RedshiftModifyEventSubscription extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyEventSubscriptionMessage) {
    super(scope, id);
  }

  public get eventSubscription(): RedshiftModifyEventSubscriptionEventSubscription {
    return new RedshiftModifyEventSubscriptionEventSubscription(this, 'EventSubscription', this.__resources, this.input);
  }

}

export class RedshiftModifyEventSubscriptionEventSubscription extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyEventSubscriptionMessage) {
    super(scope, id);
  }

  public get customerAwsId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyEventSubscription.EventSubscription.CustomerAwsId'),
        outputPath: 'EventSubscription.CustomerAwsId',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          SourceIds: this.input.sourceIds,
          EventCategories: this.input.eventCategories,
          Severity: this.input.severity,
          Enabled: this.input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyEventSubscription.EventSubscription.CustomerAwsId', props);
    return resource.getResponseField('EventSubscription.CustomerAwsId') as unknown as string;
  }

  public get custSubscriptionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyEventSubscription.EventSubscription.CustSubscriptionId'),
        outputPath: 'EventSubscription.CustSubscriptionId',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          SourceIds: this.input.sourceIds,
          EventCategories: this.input.eventCategories,
          Severity: this.input.severity,
          Enabled: this.input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyEventSubscription.EventSubscription.CustSubscriptionId', props);
    return resource.getResponseField('EventSubscription.CustSubscriptionId') as unknown as string;
  }

  public get snsTopicArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyEventSubscription.EventSubscription.SnsTopicArn'),
        outputPath: 'EventSubscription.SnsTopicArn',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          SourceIds: this.input.sourceIds,
          EventCategories: this.input.eventCategories,
          Severity: this.input.severity,
          Enabled: this.input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyEventSubscription.EventSubscription.SnsTopicArn', props);
    return resource.getResponseField('EventSubscription.SnsTopicArn') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyEventSubscription.EventSubscription.Status'),
        outputPath: 'EventSubscription.Status',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          SourceIds: this.input.sourceIds,
          EventCategories: this.input.eventCategories,
          Severity: this.input.severity,
          Enabled: this.input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyEventSubscription.EventSubscription.Status', props);
    return resource.getResponseField('EventSubscription.Status') as unknown as string;
  }

  public get subscriptionCreationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyEventSubscription.EventSubscription.SubscriptionCreationTime'),
        outputPath: 'EventSubscription.SubscriptionCreationTime',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          SourceIds: this.input.sourceIds,
          EventCategories: this.input.eventCategories,
          Severity: this.input.severity,
          Enabled: this.input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyEventSubscription.EventSubscription.SubscriptionCreationTime', props);
    return resource.getResponseField('EventSubscription.SubscriptionCreationTime') as unknown as string;
  }

  public get sourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyEventSubscription.EventSubscription.SourceType'),
        outputPath: 'EventSubscription.SourceType',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          SourceIds: this.input.sourceIds,
          EventCategories: this.input.eventCategories,
          Severity: this.input.severity,
          Enabled: this.input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyEventSubscription.EventSubscription.SourceType', props);
    return resource.getResponseField('EventSubscription.SourceType') as unknown as string;
  }

  public get sourceIdsList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyEventSubscription.EventSubscription.SourceIdsList'),
        outputPath: 'EventSubscription.SourceIdsList',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          SourceIds: this.input.sourceIds,
          EventCategories: this.input.eventCategories,
          Severity: this.input.severity,
          Enabled: this.input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyEventSubscription.EventSubscription.SourceIdsList', props);
    return resource.getResponseField('EventSubscription.SourceIdsList') as unknown as string[];
  }

  public get eventCategoriesList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyEventSubscription.EventSubscription.EventCategoriesList'),
        outputPath: 'EventSubscription.EventCategoriesList',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          SourceIds: this.input.sourceIds,
          EventCategories: this.input.eventCategories,
          Severity: this.input.severity,
          Enabled: this.input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyEventSubscription.EventSubscription.EventCategoriesList', props);
    return resource.getResponseField('EventSubscription.EventCategoriesList') as unknown as string[];
  }

  public get severity(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyEventSubscription.EventSubscription.Severity'),
        outputPath: 'EventSubscription.Severity',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          SourceIds: this.input.sourceIds,
          EventCategories: this.input.eventCategories,
          Severity: this.input.severity,
          Enabled: this.input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyEventSubscription.EventSubscription.Severity', props);
    return resource.getResponseField('EventSubscription.Severity') as unknown as string;
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyEventSubscription.EventSubscription.Enabled'),
        outputPath: 'EventSubscription.Enabled',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          SourceIds: this.input.sourceIds,
          EventCategories: this.input.eventCategories,
          Severity: this.input.severity,
          Enabled: this.input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyEventSubscription.EventSubscription.Enabled', props);
    return resource.getResponseField('EventSubscription.Enabled') as unknown as boolean;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyEventSubscription.EventSubscription.Tags'),
        outputPath: 'EventSubscription.Tags',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          SourceIds: this.input.sourceIds,
          EventCategories: this.input.eventCategories,
          Severity: this.input.severity,
          Enabled: this.input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyEventSubscription.EventSubscription.Tags', props);
    return resource.getResponseField('EventSubscription.Tags') as unknown as shapes.RedshiftTag[];
  }

}

export class RedshiftModifyScheduledAction extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyScheduledActionMessage) {
    super(scope, id);
  }

  public get scheduledActionName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyScheduledAction.ScheduledActionName'),
        outputPath: 'ScheduledActionName',
        parameters: {
          ScheduledActionName: this.input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.input.targetAction?.resizeCluster?.clusterIdentifier,
              ClusterType: this.input.targetAction?.resizeCluster?.clusterType,
              NodeType: this.input.targetAction?.resizeCluster?.nodeType,
              NumberOfNodes: this.input.targetAction?.resizeCluster?.numberOfNodes,
              Classic: this.input.targetAction?.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.input.targetAction?.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.input.targetAction?.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.input.schedule,
          IamRole: this.input.iamRole,
          ScheduledActionDescription: this.input.scheduledActionDescription,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Enable: this.input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyScheduledAction.ScheduledActionName', props);
    return resource.getResponseField('ScheduledActionName') as unknown as string;
  }

  public get targetAction(): RedshiftModifyScheduledActionTargetAction {
    return new RedshiftModifyScheduledActionTargetAction(this, 'TargetAction', this.__resources, this.input);
  }

  public get schedule(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyScheduledAction.Schedule'),
        outputPath: 'Schedule',
        parameters: {
          ScheduledActionName: this.input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.input.targetAction?.resizeCluster?.clusterIdentifier,
              ClusterType: this.input.targetAction?.resizeCluster?.clusterType,
              NodeType: this.input.targetAction?.resizeCluster?.nodeType,
              NumberOfNodes: this.input.targetAction?.resizeCluster?.numberOfNodes,
              Classic: this.input.targetAction?.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.input.targetAction?.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.input.targetAction?.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.input.schedule,
          IamRole: this.input.iamRole,
          ScheduledActionDescription: this.input.scheduledActionDescription,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Enable: this.input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyScheduledAction.Schedule', props);
    return resource.getResponseField('Schedule') as unknown as string;
  }

  public get iamRole(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyScheduledAction.IamRole'),
        outputPath: 'IamRole',
        parameters: {
          ScheduledActionName: this.input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.input.targetAction?.resizeCluster?.clusterIdentifier,
              ClusterType: this.input.targetAction?.resizeCluster?.clusterType,
              NodeType: this.input.targetAction?.resizeCluster?.nodeType,
              NumberOfNodes: this.input.targetAction?.resizeCluster?.numberOfNodes,
              Classic: this.input.targetAction?.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.input.targetAction?.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.input.targetAction?.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.input.schedule,
          IamRole: this.input.iamRole,
          ScheduledActionDescription: this.input.scheduledActionDescription,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Enable: this.input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyScheduledAction.IamRole', props);
    return resource.getResponseField('IamRole') as unknown as string;
  }

  public get scheduledActionDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyScheduledAction.ScheduledActionDescription'),
        outputPath: 'ScheduledActionDescription',
        parameters: {
          ScheduledActionName: this.input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.input.targetAction?.resizeCluster?.clusterIdentifier,
              ClusterType: this.input.targetAction?.resizeCluster?.clusterType,
              NodeType: this.input.targetAction?.resizeCluster?.nodeType,
              NumberOfNodes: this.input.targetAction?.resizeCluster?.numberOfNodes,
              Classic: this.input.targetAction?.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.input.targetAction?.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.input.targetAction?.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.input.schedule,
          IamRole: this.input.iamRole,
          ScheduledActionDescription: this.input.scheduledActionDescription,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Enable: this.input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyScheduledAction.ScheduledActionDescription', props);
    return resource.getResponseField('ScheduledActionDescription') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyScheduledAction.State'),
        outputPath: 'State',
        parameters: {
          ScheduledActionName: this.input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.input.targetAction?.resizeCluster?.clusterIdentifier,
              ClusterType: this.input.targetAction?.resizeCluster?.clusterType,
              NodeType: this.input.targetAction?.resizeCluster?.nodeType,
              NumberOfNodes: this.input.targetAction?.resizeCluster?.numberOfNodes,
              Classic: this.input.targetAction?.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.input.targetAction?.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.input.targetAction?.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.input.schedule,
          IamRole: this.input.iamRole,
          ScheduledActionDescription: this.input.scheduledActionDescription,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Enable: this.input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyScheduledAction.State', props);
    return resource.getResponseField('State') as unknown as string;
  }

  public get nextInvocations(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyScheduledAction.NextInvocations'),
        outputPath: 'NextInvocations',
        parameters: {
          ScheduledActionName: this.input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.input.targetAction?.resizeCluster?.clusterIdentifier,
              ClusterType: this.input.targetAction?.resizeCluster?.clusterType,
              NodeType: this.input.targetAction?.resizeCluster?.nodeType,
              NumberOfNodes: this.input.targetAction?.resizeCluster?.numberOfNodes,
              Classic: this.input.targetAction?.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.input.targetAction?.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.input.targetAction?.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.input.schedule,
          IamRole: this.input.iamRole,
          ScheduledActionDescription: this.input.scheduledActionDescription,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Enable: this.input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyScheduledAction.NextInvocations', props);
    return resource.getResponseField('NextInvocations') as unknown as string[];
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyScheduledAction.StartTime'),
        outputPath: 'StartTime',
        parameters: {
          ScheduledActionName: this.input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.input.targetAction?.resizeCluster?.clusterIdentifier,
              ClusterType: this.input.targetAction?.resizeCluster?.clusterType,
              NodeType: this.input.targetAction?.resizeCluster?.nodeType,
              NumberOfNodes: this.input.targetAction?.resizeCluster?.numberOfNodes,
              Classic: this.input.targetAction?.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.input.targetAction?.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.input.targetAction?.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.input.schedule,
          IamRole: this.input.iamRole,
          ScheduledActionDescription: this.input.scheduledActionDescription,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Enable: this.input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyScheduledAction.StartTime', props);
    return resource.getResponseField('StartTime') as unknown as string;
  }

  public get endTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyScheduledAction.EndTime'),
        outputPath: 'EndTime',
        parameters: {
          ScheduledActionName: this.input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.input.targetAction?.resizeCluster?.clusterIdentifier,
              ClusterType: this.input.targetAction?.resizeCluster?.clusterType,
              NodeType: this.input.targetAction?.resizeCluster?.nodeType,
              NumberOfNodes: this.input.targetAction?.resizeCluster?.numberOfNodes,
              Classic: this.input.targetAction?.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.input.targetAction?.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.input.targetAction?.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.input.schedule,
          IamRole: this.input.iamRole,
          ScheduledActionDescription: this.input.scheduledActionDescription,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Enable: this.input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyScheduledAction.EndTime', props);
    return resource.getResponseField('EndTime') as unknown as string;
  }

}

export class RedshiftModifyScheduledActionTargetAction extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyScheduledActionMessage) {
    super(scope, id);
  }

  public get resizeCluster(): RedshiftModifyScheduledActionTargetActionResizeCluster {
    return new RedshiftModifyScheduledActionTargetActionResizeCluster(this, 'ResizeCluster', this.__resources, this.input);
  }

  public get pauseCluster(): RedshiftModifyScheduledActionTargetActionPauseCluster {
    return new RedshiftModifyScheduledActionTargetActionPauseCluster(this, 'PauseCluster', this.__resources, this.input);
  }

  public get resumeCluster(): RedshiftModifyScheduledActionTargetActionResumeCluster {
    return new RedshiftModifyScheduledActionTargetActionResumeCluster(this, 'ResumeCluster', this.__resources, this.input);
  }

}

export class RedshiftModifyScheduledActionTargetActionResizeCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyScheduledActionMessage) {
    super(scope, id);
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyScheduledAction.TargetAction.ResizeCluster.ClusterIdentifier'),
        outputPath: 'TargetAction.ResizeCluster.ClusterIdentifier',
        parameters: {
          ScheduledActionName: this.input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.input.targetAction?.resizeCluster?.clusterIdentifier,
              ClusterType: this.input.targetAction?.resizeCluster?.clusterType,
              NodeType: this.input.targetAction?.resizeCluster?.nodeType,
              NumberOfNodes: this.input.targetAction?.resizeCluster?.numberOfNodes,
              Classic: this.input.targetAction?.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.input.targetAction?.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.input.targetAction?.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.input.schedule,
          IamRole: this.input.iamRole,
          ScheduledActionDescription: this.input.scheduledActionDescription,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Enable: this.input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyScheduledAction.TargetAction.ResizeCluster.ClusterIdentifier', props);
    return resource.getResponseField('TargetAction.ResizeCluster.ClusterIdentifier') as unknown as string;
  }

  public get clusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyScheduledAction.TargetAction.ResizeCluster.ClusterType'),
        outputPath: 'TargetAction.ResizeCluster.ClusterType',
        parameters: {
          ScheduledActionName: this.input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.input.targetAction?.resizeCluster?.clusterIdentifier,
              ClusterType: this.input.targetAction?.resizeCluster?.clusterType,
              NodeType: this.input.targetAction?.resizeCluster?.nodeType,
              NumberOfNodes: this.input.targetAction?.resizeCluster?.numberOfNodes,
              Classic: this.input.targetAction?.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.input.targetAction?.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.input.targetAction?.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.input.schedule,
          IamRole: this.input.iamRole,
          ScheduledActionDescription: this.input.scheduledActionDescription,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Enable: this.input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyScheduledAction.TargetAction.ResizeCluster.ClusterType', props);
    return resource.getResponseField('TargetAction.ResizeCluster.ClusterType') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyScheduledAction.TargetAction.ResizeCluster.NodeType'),
        outputPath: 'TargetAction.ResizeCluster.NodeType',
        parameters: {
          ScheduledActionName: this.input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.input.targetAction?.resizeCluster?.clusterIdentifier,
              ClusterType: this.input.targetAction?.resizeCluster?.clusterType,
              NodeType: this.input.targetAction?.resizeCluster?.nodeType,
              NumberOfNodes: this.input.targetAction?.resizeCluster?.numberOfNodes,
              Classic: this.input.targetAction?.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.input.targetAction?.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.input.targetAction?.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.input.schedule,
          IamRole: this.input.iamRole,
          ScheduledActionDescription: this.input.scheduledActionDescription,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Enable: this.input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyScheduledAction.TargetAction.ResizeCluster.NodeType', props);
    return resource.getResponseField('TargetAction.ResizeCluster.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyScheduledAction.TargetAction.ResizeCluster.NumberOfNodes'),
        outputPath: 'TargetAction.ResizeCluster.NumberOfNodes',
        parameters: {
          ScheduledActionName: this.input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.input.targetAction?.resizeCluster?.clusterIdentifier,
              ClusterType: this.input.targetAction?.resizeCluster?.clusterType,
              NodeType: this.input.targetAction?.resizeCluster?.nodeType,
              NumberOfNodes: this.input.targetAction?.resizeCluster?.numberOfNodes,
              Classic: this.input.targetAction?.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.input.targetAction?.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.input.targetAction?.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.input.schedule,
          IamRole: this.input.iamRole,
          ScheduledActionDescription: this.input.scheduledActionDescription,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Enable: this.input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyScheduledAction.TargetAction.ResizeCluster.NumberOfNodes', props);
    return resource.getResponseField('TargetAction.ResizeCluster.NumberOfNodes') as unknown as number;
  }

  public get classic(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyScheduledAction.TargetAction.ResizeCluster.Classic'),
        outputPath: 'TargetAction.ResizeCluster.Classic',
        parameters: {
          ScheduledActionName: this.input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.input.targetAction?.resizeCluster?.clusterIdentifier,
              ClusterType: this.input.targetAction?.resizeCluster?.clusterType,
              NodeType: this.input.targetAction?.resizeCluster?.nodeType,
              NumberOfNodes: this.input.targetAction?.resizeCluster?.numberOfNodes,
              Classic: this.input.targetAction?.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.input.targetAction?.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.input.targetAction?.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.input.schedule,
          IamRole: this.input.iamRole,
          ScheduledActionDescription: this.input.scheduledActionDescription,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Enable: this.input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyScheduledAction.TargetAction.ResizeCluster.Classic', props);
    return resource.getResponseField('TargetAction.ResizeCluster.Classic') as unknown as boolean;
  }

}

export class RedshiftModifyScheduledActionTargetActionPauseCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyScheduledActionMessage) {
    super(scope, id);
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyScheduledAction.TargetAction.PauseCluster.ClusterIdentifier'),
        outputPath: 'TargetAction.PauseCluster.ClusterIdentifier',
        parameters: {
          ScheduledActionName: this.input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.input.targetAction?.resizeCluster?.clusterIdentifier,
              ClusterType: this.input.targetAction?.resizeCluster?.clusterType,
              NodeType: this.input.targetAction?.resizeCluster?.nodeType,
              NumberOfNodes: this.input.targetAction?.resizeCluster?.numberOfNodes,
              Classic: this.input.targetAction?.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.input.targetAction?.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.input.targetAction?.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.input.schedule,
          IamRole: this.input.iamRole,
          ScheduledActionDescription: this.input.scheduledActionDescription,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Enable: this.input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyScheduledAction.TargetAction.PauseCluster.ClusterIdentifier', props);
    return resource.getResponseField('TargetAction.PauseCluster.ClusterIdentifier') as unknown as string;
  }

}

export class RedshiftModifyScheduledActionTargetActionResumeCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyScheduledActionMessage) {
    super(scope, id);
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyScheduledAction.TargetAction.ResumeCluster.ClusterIdentifier'),
        outputPath: 'TargetAction.ResumeCluster.ClusterIdentifier',
        parameters: {
          ScheduledActionName: this.input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.input.targetAction?.resizeCluster?.clusterIdentifier,
              ClusterType: this.input.targetAction?.resizeCluster?.clusterType,
              NodeType: this.input.targetAction?.resizeCluster?.nodeType,
              NumberOfNodes: this.input.targetAction?.resizeCluster?.numberOfNodes,
              Classic: this.input.targetAction?.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.input.targetAction?.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.input.targetAction?.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.input.schedule,
          IamRole: this.input.iamRole,
          ScheduledActionDescription: this.input.scheduledActionDescription,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Enable: this.input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyScheduledAction.TargetAction.ResumeCluster.ClusterIdentifier', props);
    return resource.getResponseField('TargetAction.ResumeCluster.ClusterIdentifier') as unknown as string;
  }

}

export class RedshiftModifySnapshotCopyRetentionPeriod extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifySnapshotCopyRetentionPeriodMessage) {
    super(scope, id);
  }

  public get cluster(): RedshiftModifySnapshotCopyRetentionPeriodCluster {
    return new RedshiftModifySnapshotCopyRetentionPeriodCluster(this, 'Cluster', this.__resources, this.input);
  }

}

export class RedshiftModifySnapshotCopyRetentionPeriodCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifySnapshotCopyRetentionPeriodMessage) {
    super(scope, id);
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ClusterIdentifier'),
        outputPath: 'Cluster.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.ClusterIdentifier') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.NodeType'),
        outputPath: 'Cluster.NodeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.NodeType', props);
    return resource.getResponseField('Cluster.NodeType') as unknown as string;
  }

  public get clusterStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ClusterStatus'),
        outputPath: 'Cluster.ClusterStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.ClusterStatus', props);
    return resource.getResponseField('Cluster.ClusterStatus') as unknown as string;
  }

  public get clusterAvailabilityStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ClusterAvailabilityStatus'),
        outputPath: 'Cluster.ClusterAvailabilityStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.ClusterAvailabilityStatus', props);
    return resource.getResponseField('Cluster.ClusterAvailabilityStatus') as unknown as string;
  }

  public get modifyStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ModifyStatus'),
        outputPath: 'Cluster.ModifyStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.ModifyStatus', props);
    return resource.getResponseField('Cluster.ModifyStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.MasterUsername'),
        outputPath: 'Cluster.MasterUsername',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.MasterUsername', props);
    return resource.getResponseField('Cluster.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.DBName'),
        outputPath: 'Cluster.DBName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.DBName', props);
    return resource.getResponseField('Cluster.DBName') as unknown as string;
  }

  public get endpoint(): RedshiftModifySnapshotCopyRetentionPeriodClusterEndpoint {
    return new RedshiftModifySnapshotCopyRetentionPeriodClusterEndpoint(this, 'Endpoint', this.__resources, this.input);
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ClusterCreateTime'),
        outputPath: 'Cluster.ClusterCreateTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.ClusterCreateTime', props);
    return resource.getResponseField('Cluster.ClusterCreateTime') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterSecurityGroups(): shapes.RedshiftClusterSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ClusterSecurityGroups'),
        outputPath: 'Cluster.ClusterSecurityGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.ClusterSecurityGroups', props);
    return resource.getResponseField('Cluster.ClusterSecurityGroups') as unknown as shapes.RedshiftClusterSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RedshiftVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.VpcSecurityGroups'),
        outputPath: 'Cluster.VpcSecurityGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.VpcSecurityGroups', props);
    return resource.getResponseField('Cluster.VpcSecurityGroups') as unknown as shapes.RedshiftVpcSecurityGroupMembership[];
  }

  public get clusterParameterGroups(): shapes.RedshiftClusterParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ClusterParameterGroups'),
        outputPath: 'Cluster.ClusterParameterGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.ClusterParameterGroups', props);
    return resource.getResponseField('Cluster.ClusterParameterGroups') as unknown as shapes.RedshiftClusterParameterGroupStatus[];
  }

  public get clusterSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ClusterSubnetGroupName'),
        outputPath: 'Cluster.ClusterSubnetGroupName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.ClusterSubnetGroupName', props);
    return resource.getResponseField('Cluster.ClusterSubnetGroupName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.VpcId'),
        outputPath: 'Cluster.VpcId',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.VpcId', props);
    return resource.getResponseField('Cluster.VpcId') as unknown as string;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.AvailabilityZone'),
        outputPath: 'Cluster.AvailabilityZone',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.AvailabilityZone', props);
    return resource.getResponseField('Cluster.AvailabilityZone') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.PreferredMaintenanceWindow'),
        outputPath: 'Cluster.PreferredMaintenanceWindow',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('Cluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RedshiftModifySnapshotCopyRetentionPeriodClusterPendingModifiedValues {
    return new RedshiftModifySnapshotCopyRetentionPeriodClusterPendingModifiedValues(this, 'PendingModifiedValues', this.__resources, this.input);
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ClusterVersion'),
        outputPath: 'Cluster.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.ClusterVersion', props);
    return resource.getResponseField('Cluster.ClusterVersion') as unknown as string;
  }

  public get allowVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.AllowVersionUpgrade'),
        outputPath: 'Cluster.AllowVersionUpgrade',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.AllowVersionUpgrade', props);
    return resource.getResponseField('Cluster.AllowVersionUpgrade') as unknown as boolean;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.NumberOfNodes'),
        outputPath: 'Cluster.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.NumberOfNodes', props);
    return resource.getResponseField('Cluster.NumberOfNodes') as unknown as number;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.PubliclyAccessible'),
        outputPath: 'Cluster.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PubliclyAccessible') as unknown as boolean;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.Encrypted'),
        outputPath: 'Cluster.Encrypted',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.Encrypted', props);
    return resource.getResponseField('Cluster.Encrypted') as unknown as boolean;
  }

  public get restoreStatus(): RedshiftModifySnapshotCopyRetentionPeriodClusterRestoreStatus {
    return new RedshiftModifySnapshotCopyRetentionPeriodClusterRestoreStatus(this, 'RestoreStatus', this.__resources, this.input);
  }

  public get dataTransferProgress(): RedshiftModifySnapshotCopyRetentionPeriodClusterDataTransferProgress {
    return new RedshiftModifySnapshotCopyRetentionPeriodClusterDataTransferProgress(this, 'DataTransferProgress', this.__resources, this.input);
  }

  public get hsmStatus(): RedshiftModifySnapshotCopyRetentionPeriodClusterHsmStatus {
    return new RedshiftModifySnapshotCopyRetentionPeriodClusterHsmStatus(this, 'HsmStatus', this.__resources, this.input);
  }

  public get clusterSnapshotCopyStatus(): RedshiftModifySnapshotCopyRetentionPeriodClusterClusterSnapshotCopyStatus {
    return new RedshiftModifySnapshotCopyRetentionPeriodClusterClusterSnapshotCopyStatus(this, 'ClusterSnapshotCopyStatus', this.__resources, this.input);
  }

  public get clusterPublicKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ClusterPublicKey'),
        outputPath: 'Cluster.ClusterPublicKey',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.ClusterPublicKey', props);
    return resource.getResponseField('Cluster.ClusterPublicKey') as unknown as string;
  }

  public get clusterNodes(): shapes.RedshiftClusterNode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ClusterNodes'),
        outputPath: 'Cluster.ClusterNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.ClusterNodes', props);
    return resource.getResponseField('Cluster.ClusterNodes') as unknown as shapes.RedshiftClusterNode[];
  }

  public get elasticIpStatus(): RedshiftModifySnapshotCopyRetentionPeriodClusterElasticIpStatus {
    return new RedshiftModifySnapshotCopyRetentionPeriodClusterElasticIpStatus(this, 'ElasticIpStatus', this.__resources, this.input);
  }

  public get clusterRevisionNumber(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ClusterRevisionNumber'),
        outputPath: 'Cluster.ClusterRevisionNumber',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.ClusterRevisionNumber', props);
    return resource.getResponseField('Cluster.ClusterRevisionNumber') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.Tags'),
        outputPath: 'Cluster.Tags',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.Tags', props);
    return resource.getResponseField('Cluster.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.KmsKeyId'),
        outputPath: 'Cluster.KmsKeyId',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.KmsKeyId', props);
    return resource.getResponseField('Cluster.KmsKeyId') as unknown as string;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.EnhancedVpcRouting'),
        outputPath: 'Cluster.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.EnhancedVpcRouting') as unknown as boolean;
  }

  public get iamRoles(): shapes.RedshiftClusterIamRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.IamRoles'),
        outputPath: 'Cluster.IamRoles',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.IamRoles', props);
    return resource.getResponseField('Cluster.IamRoles') as unknown as shapes.RedshiftClusterIamRole[];
  }

  public get pendingActions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.PendingActions'),
        outputPath: 'Cluster.PendingActions',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.PendingActions', props);
    return resource.getResponseField('Cluster.PendingActions') as unknown as string[];
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.MaintenanceTrackName'),
        outputPath: 'Cluster.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.MaintenanceTrackName') as unknown as string;
  }

  public get elasticResizeNumberOfNodeOptions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ElasticResizeNumberOfNodeOptions'),
        outputPath: 'Cluster.ElasticResizeNumberOfNodeOptions',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.ElasticResizeNumberOfNodeOptions', props);
    return resource.getResponseField('Cluster.ElasticResizeNumberOfNodeOptions') as unknown as string;
  }

  public get deferredMaintenanceWindows(): shapes.RedshiftDeferredMaintenanceWindow[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.DeferredMaintenanceWindows'),
        outputPath: 'Cluster.DeferredMaintenanceWindows',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.DeferredMaintenanceWindows', props);
    return resource.getResponseField('Cluster.DeferredMaintenanceWindows') as unknown as shapes.RedshiftDeferredMaintenanceWindow[];
  }

  public get snapshotScheduleIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.SnapshotScheduleIdentifier'),
        outputPath: 'Cluster.SnapshotScheduleIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.SnapshotScheduleIdentifier', props);
    return resource.getResponseField('Cluster.SnapshotScheduleIdentifier') as unknown as string;
  }

  public get snapshotScheduleState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.SnapshotScheduleState'),
        outputPath: 'Cluster.SnapshotScheduleState',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.SnapshotScheduleState', props);
    return resource.getResponseField('Cluster.SnapshotScheduleState') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ExpectedNextSnapshotScheduleTime'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.ExpectedNextSnapshotScheduleTime', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTime') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTimeStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ExpectedNextSnapshotScheduleTimeStatus'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTimeStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.ExpectedNextSnapshotScheduleTimeStatus', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTimeStatus') as unknown as string;
  }

  public get nextMaintenanceWindowStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.NextMaintenanceWindowStartTime'),
        outputPath: 'Cluster.NextMaintenanceWindowStartTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.NextMaintenanceWindowStartTime', props);
    return resource.getResponseField('Cluster.NextMaintenanceWindowStartTime') as unknown as string;
  }

  public get resizeInfo(): RedshiftModifySnapshotCopyRetentionPeriodClusterResizeInfo {
    return new RedshiftModifySnapshotCopyRetentionPeriodClusterResizeInfo(this, 'ResizeInfo', this.__resources, this.input);
  }

  public get clusterNamespaceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ClusterNamespaceArn'),
        outputPath: 'Cluster.ClusterNamespaceArn',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.ClusterNamespaceArn', props);
    return resource.getResponseField('Cluster.ClusterNamespaceArn') as unknown as string;
  }

}

export class RedshiftModifySnapshotCopyRetentionPeriodClusterEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifySnapshotCopyRetentionPeriodMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.Endpoint.Address'),
        outputPath: 'Cluster.Endpoint.Address',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.Endpoint.Address', props);
    return resource.getResponseField('Cluster.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.Endpoint.Port'),
        outputPath: 'Cluster.Endpoint.Port',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.Endpoint.Port', props);
    return resource.getResponseField('Cluster.Endpoint.Port') as unknown as number;
  }

}

export class RedshiftModifySnapshotCopyRetentionPeriodClusterPendingModifiedValues extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifySnapshotCopyRetentionPeriodMessage) {
    super(scope, id);
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'Cluster.PendingModifiedValues.MasterUserPassword',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.NodeType'),
        outputPath: 'Cluster.PendingModifiedValues.NodeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.NodeType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.NumberOfNodes'),
        outputPath: 'Cluster.PendingModifiedValues.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.NumberOfNodes', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NumberOfNodes') as unknown as number;
  }

  public get clusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.ClusterType'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.ClusterType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterType') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.ClusterVersion'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.ClusterVersion', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterVersion') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.ClusterIdentifier'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterIdentifier') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.PubliclyAccessible'),
        outputPath: 'Cluster.PendingModifiedValues.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.PubliclyAccessible') as unknown as boolean;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.EnhancedVpcRouting'),
        outputPath: 'Cluster.PendingModifiedValues.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.MaintenanceTrackName'),
        outputPath: 'Cluster.PendingModifiedValues.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MaintenanceTrackName') as unknown as string;
  }

  public get encryptionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.EncryptionType'),
        outputPath: 'Cluster.PendingModifiedValues.EncryptionType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.EncryptionType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EncryptionType') as unknown as string;
  }

}

export class RedshiftModifySnapshotCopyRetentionPeriodClusterRestoreStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifySnapshotCopyRetentionPeriodMessage) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.RestoreStatus.Status'),
        outputPath: 'Cluster.RestoreStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.RestoreStatus.Status', props);
    return resource.getResponseField('Cluster.RestoreStatus.Status') as unknown as string;
  }

  public get currentRestoreRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond') as unknown as number;
  }

  public get snapshotSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.RestoreStatus.SnapshotSizeInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.SnapshotSizeInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.RestoreStatus.SnapshotSizeInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.SnapshotSizeInMegaBytes') as unknown as number;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.RestoreStatus.ProgressInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.ProgressInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.RestoreStatus.ProgressInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.ProgressInMegaBytes') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.RestoreStatus.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.RestoreStatus.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.RestoreStatus.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.ElapsedTimeInSeconds') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

}

export class RedshiftModifySnapshotCopyRetentionPeriodClusterDataTransferProgress extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifySnapshotCopyRetentionPeriodMessage) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.DataTransferProgress.Status'),
        outputPath: 'Cluster.DataTransferProgress.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.DataTransferProgress.Status', props);
    return resource.getResponseField('Cluster.DataTransferProgress.Status') as unknown as string;
  }

  public get currentRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond') as unknown as number;
  }

  public get totalDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.DataTransferProgress.TotalDataInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.TotalDataInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.DataTransferProgress.TotalDataInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.TotalDataInMegaBytes') as unknown as number;
  }

  public get dataTransferredInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.DataTransferProgress.DataTransferredInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.DataTransferredInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.DataTransferProgress.DataTransferredInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.DataTransferredInMegaBytes') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.DataTransferProgress.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.DataTransferProgress.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.ElapsedTimeInSeconds') as unknown as number;
  }

}

export class RedshiftModifySnapshotCopyRetentionPeriodClusterHsmStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifySnapshotCopyRetentionPeriodMessage) {
    super(scope, id);
  }

  public get hsmClientCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.HsmStatus.HsmClientCertificateIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmClientCertificateIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.HsmStatus.HsmClientCertificateIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmClientCertificateIdentifier') as unknown as string;
  }

  public get hsmConfigurationIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.HsmStatus.HsmConfigurationIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmConfigurationIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.HsmStatus.HsmConfigurationIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmConfigurationIdentifier') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.HsmStatus.Status'),
        outputPath: 'Cluster.HsmStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.HsmStatus.Status', props);
    return resource.getResponseField('Cluster.HsmStatus.Status') as unknown as string;
  }

}

export class RedshiftModifySnapshotCopyRetentionPeriodClusterClusterSnapshotCopyStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifySnapshotCopyRetentionPeriodMessage) {
    super(scope, id);
  }

  public get destinationRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ClusterSnapshotCopyStatus.DestinationRegion'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.DestinationRegion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.ClusterSnapshotCopyStatus.DestinationRegion', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.DestinationRegion') as unknown as string;
  }

  public get retentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.RetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.RetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get snapshotCopyGrantName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName') as unknown as string;
  }

}

export class RedshiftModifySnapshotCopyRetentionPeriodClusterElasticIpStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifySnapshotCopyRetentionPeriodMessage) {
    super(scope, id);
  }

  public get elasticIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ElasticIpStatus.ElasticIp'),
        outputPath: 'Cluster.ElasticIpStatus.ElasticIp',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.ElasticIpStatus.ElasticIp', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.ElasticIp') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ElasticIpStatus.Status'),
        outputPath: 'Cluster.ElasticIpStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.ElasticIpStatus.Status', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.Status') as unknown as string;
  }

}

export class RedshiftModifySnapshotCopyRetentionPeriodClusterResizeInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifySnapshotCopyRetentionPeriodMessage) {
    super(scope, id);
  }

  public get resizeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ResizeInfo.ResizeType'),
        outputPath: 'Cluster.ResizeInfo.ResizeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.ResizeInfo.ResizeType', props);
    return resource.getResponseField('Cluster.ResizeInfo.ResizeType') as unknown as string;
  }

  public get allowCancelResize(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ResizeInfo.AllowCancelResize'),
        outputPath: 'Cluster.ResizeInfo.AllowCancelResize',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          RetentionPeriod: this.input.retentionPeriod,
          Manual: this.input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotCopyRetentionPeriod.Cluster.ResizeInfo.AllowCancelResize', props);
    return resource.getResponseField('Cluster.ResizeInfo.AllowCancelResize') as unknown as boolean;
  }

}

export class RedshiftModifySnapshotSchedule extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifySnapshotScheduleMessage) {
    super(scope, id);
  }

  public get scheduleDefinitions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotSchedule',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotSchedule.ScheduleDefinitions'),
        outputPath: 'ScheduleDefinitions',
        parameters: {
          ScheduleIdentifier: this.input.scheduleIdentifier,
          ScheduleDefinitions: this.input.scheduleDefinitions,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotSchedule.ScheduleDefinitions', props);
    return resource.getResponseField('ScheduleDefinitions') as unknown as string[];
  }

  public get scheduleIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotSchedule',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotSchedule.ScheduleIdentifier'),
        outputPath: 'ScheduleIdentifier',
        parameters: {
          ScheduleIdentifier: this.input.scheduleIdentifier,
          ScheduleDefinitions: this.input.scheduleDefinitions,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotSchedule.ScheduleIdentifier', props);
    return resource.getResponseField('ScheduleIdentifier') as unknown as string;
  }

  public get scheduleDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotSchedule',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotSchedule.ScheduleDescription'),
        outputPath: 'ScheduleDescription',
        parameters: {
          ScheduleIdentifier: this.input.scheduleIdentifier,
          ScheduleDefinitions: this.input.scheduleDefinitions,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotSchedule.ScheduleDescription', props);
    return resource.getResponseField('ScheduleDescription') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotSchedule',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotSchedule.Tags'),
        outputPath: 'Tags',
        parameters: {
          ScheduleIdentifier: this.input.scheduleIdentifier,
          ScheduleDefinitions: this.input.scheduleDefinitions,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotSchedule.Tags', props);
    return resource.getResponseField('Tags') as unknown as shapes.RedshiftTag[];
  }

  public get nextInvocations(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotSchedule',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotSchedule.NextInvocations'),
        outputPath: 'NextInvocations',
        parameters: {
          ScheduleIdentifier: this.input.scheduleIdentifier,
          ScheduleDefinitions: this.input.scheduleDefinitions,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotSchedule.NextInvocations', props);
    return resource.getResponseField('NextInvocations') as unknown as string[];
  }

  public get associatedClusterCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotSchedule',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotSchedule.AssociatedClusterCount'),
        outputPath: 'AssociatedClusterCount',
        parameters: {
          ScheduleIdentifier: this.input.scheduleIdentifier,
          ScheduleDefinitions: this.input.scheduleDefinitions,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotSchedule.AssociatedClusterCount', props);
    return resource.getResponseField('AssociatedClusterCount') as unknown as number;
  }

  public get associatedClusters(): shapes.RedshiftClusterAssociatedToSchedule[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotSchedule',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotSchedule.AssociatedClusters'),
        outputPath: 'AssociatedClusters',
        parameters: {
          ScheduleIdentifier: this.input.scheduleIdentifier,
          ScheduleDefinitions: this.input.scheduleDefinitions,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySnapshotSchedule.AssociatedClusters', props);
    return resource.getResponseField('AssociatedClusters') as unknown as shapes.RedshiftClusterAssociatedToSchedule[];
  }

}

export class RedshiftModifyUsageLimit extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftModifyUsageLimitMessage) {
    super(scope, id);
  }

  public get usageLimitId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyUsageLimit',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyUsageLimit.UsageLimitId'),
        outputPath: 'UsageLimitId',
        parameters: {
          UsageLimitId: this.input.usageLimitId,
          Amount: this.input.amount,
          BreachAction: this.input.breachAction,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyUsageLimit.UsageLimitId', props);
    return resource.getResponseField('UsageLimitId') as unknown as string;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyUsageLimit',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyUsageLimit.ClusterIdentifier'),
        outputPath: 'ClusterIdentifier',
        parameters: {
          UsageLimitId: this.input.usageLimitId,
          Amount: this.input.amount,
          BreachAction: this.input.breachAction,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyUsageLimit.ClusterIdentifier', props);
    return resource.getResponseField('ClusterIdentifier') as unknown as string;
  }

  public get featureType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyUsageLimit',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyUsageLimit.FeatureType'),
        outputPath: 'FeatureType',
        parameters: {
          UsageLimitId: this.input.usageLimitId,
          Amount: this.input.amount,
          BreachAction: this.input.breachAction,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyUsageLimit.FeatureType', props);
    return resource.getResponseField('FeatureType') as unknown as string;
  }

  public get limitType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyUsageLimit',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyUsageLimit.LimitType'),
        outputPath: 'LimitType',
        parameters: {
          UsageLimitId: this.input.usageLimitId,
          Amount: this.input.amount,
          BreachAction: this.input.breachAction,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyUsageLimit.LimitType', props);
    return resource.getResponseField('LimitType') as unknown as string;
  }

  public get amount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyUsageLimit',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyUsageLimit.Amount'),
        outputPath: 'Amount',
        parameters: {
          UsageLimitId: this.input.usageLimitId,
          Amount: this.input.amount,
          BreachAction: this.input.breachAction,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyUsageLimit.Amount', props);
    return resource.getResponseField('Amount') as unknown as number;
  }

  public get period(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyUsageLimit',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyUsageLimit.Period'),
        outputPath: 'Period',
        parameters: {
          UsageLimitId: this.input.usageLimitId,
          Amount: this.input.amount,
          BreachAction: this.input.breachAction,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyUsageLimit.Period', props);
    return resource.getResponseField('Period') as unknown as string;
  }

  public get breachAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyUsageLimit',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyUsageLimit.BreachAction'),
        outputPath: 'BreachAction',
        parameters: {
          UsageLimitId: this.input.usageLimitId,
          Amount: this.input.amount,
          BreachAction: this.input.breachAction,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyUsageLimit.BreachAction', props);
    return resource.getResponseField('BreachAction') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyUsageLimit',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyUsageLimit.Tags'),
        outputPath: 'Tags',
        parameters: {
          UsageLimitId: this.input.usageLimitId,
          Amount: this.input.amount,
          BreachAction: this.input.breachAction,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyUsageLimit.Tags', props);
    return resource.getResponseField('Tags') as unknown as shapes.RedshiftTag[];
  }

}

export class RedshiftPauseCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftPauseClusterMessage) {
    super(scope, id);
  }

  public get cluster(): RedshiftPauseClusterCluster {
    return new RedshiftPauseClusterCluster(this, 'Cluster', this.__resources, this.input);
  }

}

export class RedshiftPauseClusterCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftPauseClusterMessage) {
    super(scope, id);
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ClusterIdentifier'),
        outputPath: 'Cluster.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.ClusterIdentifier') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.NodeType'),
        outputPath: 'Cluster.NodeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.NodeType', props);
    return resource.getResponseField('Cluster.NodeType') as unknown as string;
  }

  public get clusterStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ClusterStatus'),
        outputPath: 'Cluster.ClusterStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.ClusterStatus', props);
    return resource.getResponseField('Cluster.ClusterStatus') as unknown as string;
  }

  public get clusterAvailabilityStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ClusterAvailabilityStatus'),
        outputPath: 'Cluster.ClusterAvailabilityStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.ClusterAvailabilityStatus', props);
    return resource.getResponseField('Cluster.ClusterAvailabilityStatus') as unknown as string;
  }

  public get modifyStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ModifyStatus'),
        outputPath: 'Cluster.ModifyStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.ModifyStatus', props);
    return resource.getResponseField('Cluster.ModifyStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.MasterUsername'),
        outputPath: 'Cluster.MasterUsername',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.MasterUsername', props);
    return resource.getResponseField('Cluster.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.DBName'),
        outputPath: 'Cluster.DBName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.DBName', props);
    return resource.getResponseField('Cluster.DBName') as unknown as string;
  }

  public get endpoint(): RedshiftPauseClusterClusterEndpoint {
    return new RedshiftPauseClusterClusterEndpoint(this, 'Endpoint', this.__resources, this.input);
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ClusterCreateTime'),
        outputPath: 'Cluster.ClusterCreateTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.ClusterCreateTime', props);
    return resource.getResponseField('Cluster.ClusterCreateTime') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterSecurityGroups(): shapes.RedshiftClusterSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ClusterSecurityGroups'),
        outputPath: 'Cluster.ClusterSecurityGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.ClusterSecurityGroups', props);
    return resource.getResponseField('Cluster.ClusterSecurityGroups') as unknown as shapes.RedshiftClusterSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RedshiftVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.VpcSecurityGroups'),
        outputPath: 'Cluster.VpcSecurityGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.VpcSecurityGroups', props);
    return resource.getResponseField('Cluster.VpcSecurityGroups') as unknown as shapes.RedshiftVpcSecurityGroupMembership[];
  }

  public get clusterParameterGroups(): shapes.RedshiftClusterParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ClusterParameterGroups'),
        outputPath: 'Cluster.ClusterParameterGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.ClusterParameterGroups', props);
    return resource.getResponseField('Cluster.ClusterParameterGroups') as unknown as shapes.RedshiftClusterParameterGroupStatus[];
  }

  public get clusterSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ClusterSubnetGroupName'),
        outputPath: 'Cluster.ClusterSubnetGroupName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.ClusterSubnetGroupName', props);
    return resource.getResponseField('Cluster.ClusterSubnetGroupName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.VpcId'),
        outputPath: 'Cluster.VpcId',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.VpcId', props);
    return resource.getResponseField('Cluster.VpcId') as unknown as string;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.AvailabilityZone'),
        outputPath: 'Cluster.AvailabilityZone',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.AvailabilityZone', props);
    return resource.getResponseField('Cluster.AvailabilityZone') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.PreferredMaintenanceWindow'),
        outputPath: 'Cluster.PreferredMaintenanceWindow',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('Cluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RedshiftPauseClusterClusterPendingModifiedValues {
    return new RedshiftPauseClusterClusterPendingModifiedValues(this, 'PendingModifiedValues', this.__resources, this.input);
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ClusterVersion'),
        outputPath: 'Cluster.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.ClusterVersion', props);
    return resource.getResponseField('Cluster.ClusterVersion') as unknown as string;
  }

  public get allowVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.AllowVersionUpgrade'),
        outputPath: 'Cluster.AllowVersionUpgrade',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.AllowVersionUpgrade', props);
    return resource.getResponseField('Cluster.AllowVersionUpgrade') as unknown as boolean;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.NumberOfNodes'),
        outputPath: 'Cluster.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.NumberOfNodes', props);
    return resource.getResponseField('Cluster.NumberOfNodes') as unknown as number;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.PubliclyAccessible'),
        outputPath: 'Cluster.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PubliclyAccessible') as unknown as boolean;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.Encrypted'),
        outputPath: 'Cluster.Encrypted',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.Encrypted', props);
    return resource.getResponseField('Cluster.Encrypted') as unknown as boolean;
  }

  public get restoreStatus(): RedshiftPauseClusterClusterRestoreStatus {
    return new RedshiftPauseClusterClusterRestoreStatus(this, 'RestoreStatus', this.__resources, this.input);
  }

  public get dataTransferProgress(): RedshiftPauseClusterClusterDataTransferProgress {
    return new RedshiftPauseClusterClusterDataTransferProgress(this, 'DataTransferProgress', this.__resources, this.input);
  }

  public get hsmStatus(): RedshiftPauseClusterClusterHsmStatus {
    return new RedshiftPauseClusterClusterHsmStatus(this, 'HsmStatus', this.__resources, this.input);
  }

  public get clusterSnapshotCopyStatus(): RedshiftPauseClusterClusterClusterSnapshotCopyStatus {
    return new RedshiftPauseClusterClusterClusterSnapshotCopyStatus(this, 'ClusterSnapshotCopyStatus', this.__resources, this.input);
  }

  public get clusterPublicKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ClusterPublicKey'),
        outputPath: 'Cluster.ClusterPublicKey',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.ClusterPublicKey', props);
    return resource.getResponseField('Cluster.ClusterPublicKey') as unknown as string;
  }

  public get clusterNodes(): shapes.RedshiftClusterNode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ClusterNodes'),
        outputPath: 'Cluster.ClusterNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.ClusterNodes', props);
    return resource.getResponseField('Cluster.ClusterNodes') as unknown as shapes.RedshiftClusterNode[];
  }

  public get elasticIpStatus(): RedshiftPauseClusterClusterElasticIpStatus {
    return new RedshiftPauseClusterClusterElasticIpStatus(this, 'ElasticIpStatus', this.__resources, this.input);
  }

  public get clusterRevisionNumber(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ClusterRevisionNumber'),
        outputPath: 'Cluster.ClusterRevisionNumber',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.ClusterRevisionNumber', props);
    return resource.getResponseField('Cluster.ClusterRevisionNumber') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.Tags'),
        outputPath: 'Cluster.Tags',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.Tags', props);
    return resource.getResponseField('Cluster.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.KmsKeyId'),
        outputPath: 'Cluster.KmsKeyId',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.KmsKeyId', props);
    return resource.getResponseField('Cluster.KmsKeyId') as unknown as string;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.EnhancedVpcRouting'),
        outputPath: 'Cluster.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.EnhancedVpcRouting') as unknown as boolean;
  }

  public get iamRoles(): shapes.RedshiftClusterIamRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.IamRoles'),
        outputPath: 'Cluster.IamRoles',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.IamRoles', props);
    return resource.getResponseField('Cluster.IamRoles') as unknown as shapes.RedshiftClusterIamRole[];
  }

  public get pendingActions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.PendingActions'),
        outputPath: 'Cluster.PendingActions',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.PendingActions', props);
    return resource.getResponseField('Cluster.PendingActions') as unknown as string[];
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.MaintenanceTrackName'),
        outputPath: 'Cluster.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.MaintenanceTrackName') as unknown as string;
  }

  public get elasticResizeNumberOfNodeOptions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ElasticResizeNumberOfNodeOptions'),
        outputPath: 'Cluster.ElasticResizeNumberOfNodeOptions',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.ElasticResizeNumberOfNodeOptions', props);
    return resource.getResponseField('Cluster.ElasticResizeNumberOfNodeOptions') as unknown as string;
  }

  public get deferredMaintenanceWindows(): shapes.RedshiftDeferredMaintenanceWindow[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.DeferredMaintenanceWindows'),
        outputPath: 'Cluster.DeferredMaintenanceWindows',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.DeferredMaintenanceWindows', props);
    return resource.getResponseField('Cluster.DeferredMaintenanceWindows') as unknown as shapes.RedshiftDeferredMaintenanceWindow[];
  }

  public get snapshotScheduleIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.SnapshotScheduleIdentifier'),
        outputPath: 'Cluster.SnapshotScheduleIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.SnapshotScheduleIdentifier', props);
    return resource.getResponseField('Cluster.SnapshotScheduleIdentifier') as unknown as string;
  }

  public get snapshotScheduleState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.SnapshotScheduleState'),
        outputPath: 'Cluster.SnapshotScheduleState',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.SnapshotScheduleState', props);
    return resource.getResponseField('Cluster.SnapshotScheduleState') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ExpectedNextSnapshotScheduleTime'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.ExpectedNextSnapshotScheduleTime', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTime') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTimeStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ExpectedNextSnapshotScheduleTimeStatus'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTimeStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.ExpectedNextSnapshotScheduleTimeStatus', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTimeStatus') as unknown as string;
  }

  public get nextMaintenanceWindowStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.NextMaintenanceWindowStartTime'),
        outputPath: 'Cluster.NextMaintenanceWindowStartTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.NextMaintenanceWindowStartTime', props);
    return resource.getResponseField('Cluster.NextMaintenanceWindowStartTime') as unknown as string;
  }

  public get resizeInfo(): RedshiftPauseClusterClusterResizeInfo {
    return new RedshiftPauseClusterClusterResizeInfo(this, 'ResizeInfo', this.__resources, this.input);
  }

  public get clusterNamespaceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ClusterNamespaceArn'),
        outputPath: 'Cluster.ClusterNamespaceArn',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.ClusterNamespaceArn', props);
    return resource.getResponseField('Cluster.ClusterNamespaceArn') as unknown as string;
  }

}

export class RedshiftPauseClusterClusterEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftPauseClusterMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.Endpoint.Address'),
        outputPath: 'Cluster.Endpoint.Address',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.Endpoint.Address', props);
    return resource.getResponseField('Cluster.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.Endpoint.Port'),
        outputPath: 'Cluster.Endpoint.Port',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.Endpoint.Port', props);
    return resource.getResponseField('Cluster.Endpoint.Port') as unknown as number;
  }

}

export class RedshiftPauseClusterClusterPendingModifiedValues extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftPauseClusterMessage) {
    super(scope, id);
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'Cluster.PendingModifiedValues.MasterUserPassword',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.PendingModifiedValues.NodeType'),
        outputPath: 'Cluster.PendingModifiedValues.NodeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.PendingModifiedValues.NodeType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.PendingModifiedValues.NumberOfNodes'),
        outputPath: 'Cluster.PendingModifiedValues.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.PendingModifiedValues.NumberOfNodes', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NumberOfNodes') as unknown as number;
  }

  public get clusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.PendingModifiedValues.ClusterType'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.PendingModifiedValues.ClusterType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterType') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.PendingModifiedValues.ClusterVersion'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.PendingModifiedValues.ClusterVersion', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterVersion') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.PendingModifiedValues.ClusterIdentifier'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.PendingModifiedValues.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterIdentifier') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.PendingModifiedValues.PubliclyAccessible'),
        outputPath: 'Cluster.PendingModifiedValues.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.PendingModifiedValues.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.PubliclyAccessible') as unknown as boolean;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.PendingModifiedValues.EnhancedVpcRouting'),
        outputPath: 'Cluster.PendingModifiedValues.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.PendingModifiedValues.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.PendingModifiedValues.MaintenanceTrackName'),
        outputPath: 'Cluster.PendingModifiedValues.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.PendingModifiedValues.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MaintenanceTrackName') as unknown as string;
  }

  public get encryptionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.PendingModifiedValues.EncryptionType'),
        outputPath: 'Cluster.PendingModifiedValues.EncryptionType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.PendingModifiedValues.EncryptionType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EncryptionType') as unknown as string;
  }

}

export class RedshiftPauseClusterClusterRestoreStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftPauseClusterMessage) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.RestoreStatus.Status'),
        outputPath: 'Cluster.RestoreStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.RestoreStatus.Status', props);
    return resource.getResponseField('Cluster.RestoreStatus.Status') as unknown as string;
  }

  public get currentRestoreRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond') as unknown as number;
  }

  public get snapshotSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.RestoreStatus.SnapshotSizeInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.SnapshotSizeInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.RestoreStatus.SnapshotSizeInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.SnapshotSizeInMegaBytes') as unknown as number;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.RestoreStatus.ProgressInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.ProgressInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.RestoreStatus.ProgressInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.ProgressInMegaBytes') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.RestoreStatus.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.RestoreStatus.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.RestoreStatus.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.ElapsedTimeInSeconds') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

}

export class RedshiftPauseClusterClusterDataTransferProgress extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftPauseClusterMessage) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.DataTransferProgress.Status'),
        outputPath: 'Cluster.DataTransferProgress.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.DataTransferProgress.Status', props);
    return resource.getResponseField('Cluster.DataTransferProgress.Status') as unknown as string;
  }

  public get currentRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond') as unknown as number;
  }

  public get totalDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.DataTransferProgress.TotalDataInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.TotalDataInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.DataTransferProgress.TotalDataInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.TotalDataInMegaBytes') as unknown as number;
  }

  public get dataTransferredInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.DataTransferProgress.DataTransferredInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.DataTransferredInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.DataTransferProgress.DataTransferredInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.DataTransferredInMegaBytes') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.DataTransferProgress.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.DataTransferProgress.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.ElapsedTimeInSeconds') as unknown as number;
  }

}

export class RedshiftPauseClusterClusterHsmStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftPauseClusterMessage) {
    super(scope, id);
  }

  public get hsmClientCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.HsmStatus.HsmClientCertificateIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmClientCertificateIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.HsmStatus.HsmClientCertificateIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmClientCertificateIdentifier') as unknown as string;
  }

  public get hsmConfigurationIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.HsmStatus.HsmConfigurationIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmConfigurationIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.HsmStatus.HsmConfigurationIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmConfigurationIdentifier') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.HsmStatus.Status'),
        outputPath: 'Cluster.HsmStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.HsmStatus.Status', props);
    return resource.getResponseField('Cluster.HsmStatus.Status') as unknown as string;
  }

}

export class RedshiftPauseClusterClusterClusterSnapshotCopyStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftPauseClusterMessage) {
    super(scope, id);
  }

  public get destinationRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ClusterSnapshotCopyStatus.DestinationRegion'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.DestinationRegion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.ClusterSnapshotCopyStatus.DestinationRegion', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.DestinationRegion') as unknown as string;
  }

  public get retentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.RetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.RetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get snapshotCopyGrantName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName') as unknown as string;
  }

}

export class RedshiftPauseClusterClusterElasticIpStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftPauseClusterMessage) {
    super(scope, id);
  }

  public get elasticIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ElasticIpStatus.ElasticIp'),
        outputPath: 'Cluster.ElasticIpStatus.ElasticIp',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.ElasticIpStatus.ElasticIp', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.ElasticIp') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ElasticIpStatus.Status'),
        outputPath: 'Cluster.ElasticIpStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.ElasticIpStatus.Status', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.Status') as unknown as string;
  }

}

export class RedshiftPauseClusterClusterResizeInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftPauseClusterMessage) {
    super(scope, id);
  }

  public get resizeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ResizeInfo.ResizeType'),
        outputPath: 'Cluster.ResizeInfo.ResizeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.ResizeInfo.ResizeType', props);
    return resource.getResponseField('Cluster.ResizeInfo.ResizeType') as unknown as string;
  }

  public get allowCancelResize(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ResizeInfo.AllowCancelResize'),
        outputPath: 'Cluster.ResizeInfo.AllowCancelResize',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PauseCluster.Cluster.ResizeInfo.AllowCancelResize', props);
    return resource.getResponseField('Cluster.ResizeInfo.AllowCancelResize') as unknown as boolean;
  }

}

export class RedshiftPurchaseReservedNodeOffering extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftPurchaseReservedNodeOfferingMessage) {
    super(scope, id);
  }

  public get reservedNode(): RedshiftPurchaseReservedNodeOfferingReservedNode {
    return new RedshiftPurchaseReservedNodeOfferingReservedNode(this, 'ReservedNode', this.__resources, this.input);
  }

}

export class RedshiftPurchaseReservedNodeOfferingReservedNode extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftPurchaseReservedNodeOfferingMessage) {
    super(scope, id);
  }

  public get reservedNodeId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedNodeOffering',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PurchaseReservedNodeOffering.ReservedNode.ReservedNodeId'),
        outputPath: 'ReservedNode.ReservedNodeId',
        parameters: {
          ReservedNodeOfferingId: this.input.reservedNodeOfferingId,
          NodeCount: this.input.nodeCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedNodeOffering.ReservedNode.ReservedNodeId', props);
    return resource.getResponseField('ReservedNode.ReservedNodeId') as unknown as string;
  }

  public get reservedNodeOfferingId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedNodeOffering',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PurchaseReservedNodeOffering.ReservedNode.ReservedNodeOfferingId'),
        outputPath: 'ReservedNode.ReservedNodeOfferingId',
        parameters: {
          ReservedNodeOfferingId: this.input.reservedNodeOfferingId,
          NodeCount: this.input.nodeCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedNodeOffering.ReservedNode.ReservedNodeOfferingId', props);
    return resource.getResponseField('ReservedNode.ReservedNodeOfferingId') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedNodeOffering',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PurchaseReservedNodeOffering.ReservedNode.NodeType'),
        outputPath: 'ReservedNode.NodeType',
        parameters: {
          ReservedNodeOfferingId: this.input.reservedNodeOfferingId,
          NodeCount: this.input.nodeCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedNodeOffering.ReservedNode.NodeType', props);
    return resource.getResponseField('ReservedNode.NodeType') as unknown as string;
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedNodeOffering',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PurchaseReservedNodeOffering.ReservedNode.StartTime'),
        outputPath: 'ReservedNode.StartTime',
        parameters: {
          ReservedNodeOfferingId: this.input.reservedNodeOfferingId,
          NodeCount: this.input.nodeCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedNodeOffering.ReservedNode.StartTime', props);
    return resource.getResponseField('ReservedNode.StartTime') as unknown as string;
  }

  public get duration(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedNodeOffering',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PurchaseReservedNodeOffering.ReservedNode.Duration'),
        outputPath: 'ReservedNode.Duration',
        parameters: {
          ReservedNodeOfferingId: this.input.reservedNodeOfferingId,
          NodeCount: this.input.nodeCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedNodeOffering.ReservedNode.Duration', props);
    return resource.getResponseField('ReservedNode.Duration') as unknown as number;
  }

  public get fixedPrice(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedNodeOffering',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PurchaseReservedNodeOffering.ReservedNode.FixedPrice'),
        outputPath: 'ReservedNode.FixedPrice',
        parameters: {
          ReservedNodeOfferingId: this.input.reservedNodeOfferingId,
          NodeCount: this.input.nodeCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedNodeOffering.ReservedNode.FixedPrice', props);
    return resource.getResponseField('ReservedNode.FixedPrice') as unknown as number;
  }

  public get usagePrice(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedNodeOffering',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PurchaseReservedNodeOffering.ReservedNode.UsagePrice'),
        outputPath: 'ReservedNode.UsagePrice',
        parameters: {
          ReservedNodeOfferingId: this.input.reservedNodeOfferingId,
          NodeCount: this.input.nodeCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedNodeOffering.ReservedNode.UsagePrice', props);
    return resource.getResponseField('ReservedNode.UsagePrice') as unknown as number;
  }

  public get currencyCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedNodeOffering',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PurchaseReservedNodeOffering.ReservedNode.CurrencyCode'),
        outputPath: 'ReservedNode.CurrencyCode',
        parameters: {
          ReservedNodeOfferingId: this.input.reservedNodeOfferingId,
          NodeCount: this.input.nodeCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedNodeOffering.ReservedNode.CurrencyCode', props);
    return resource.getResponseField('ReservedNode.CurrencyCode') as unknown as string;
  }

  public get nodeCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedNodeOffering',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PurchaseReservedNodeOffering.ReservedNode.NodeCount'),
        outputPath: 'ReservedNode.NodeCount',
        parameters: {
          ReservedNodeOfferingId: this.input.reservedNodeOfferingId,
          NodeCount: this.input.nodeCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedNodeOffering.ReservedNode.NodeCount', props);
    return resource.getResponseField('ReservedNode.NodeCount') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedNodeOffering',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PurchaseReservedNodeOffering.ReservedNode.State'),
        outputPath: 'ReservedNode.State',
        parameters: {
          ReservedNodeOfferingId: this.input.reservedNodeOfferingId,
          NodeCount: this.input.nodeCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedNodeOffering.ReservedNode.State', props);
    return resource.getResponseField('ReservedNode.State') as unknown as string;
  }

  public get offeringType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedNodeOffering',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PurchaseReservedNodeOffering.ReservedNode.OfferingType'),
        outputPath: 'ReservedNode.OfferingType',
        parameters: {
          ReservedNodeOfferingId: this.input.reservedNodeOfferingId,
          NodeCount: this.input.nodeCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedNodeOffering.ReservedNode.OfferingType', props);
    return resource.getResponseField('ReservedNode.OfferingType') as unknown as string;
  }

  public get recurringCharges(): shapes.RedshiftRecurringCharge[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedNodeOffering',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PurchaseReservedNodeOffering.ReservedNode.RecurringCharges'),
        outputPath: 'ReservedNode.RecurringCharges',
        parameters: {
          ReservedNodeOfferingId: this.input.reservedNodeOfferingId,
          NodeCount: this.input.nodeCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedNodeOffering.ReservedNode.RecurringCharges', props);
    return resource.getResponseField('ReservedNode.RecurringCharges') as unknown as shapes.RedshiftRecurringCharge[];
  }

  public get reservedNodeOfferingType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedNodeOffering',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PurchaseReservedNodeOffering.ReservedNode.ReservedNodeOfferingType'),
        outputPath: 'ReservedNode.ReservedNodeOfferingType',
        parameters: {
          ReservedNodeOfferingId: this.input.reservedNodeOfferingId,
          NodeCount: this.input.nodeCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedNodeOffering.ReservedNode.ReservedNodeOfferingType', props);
    return resource.getResponseField('ReservedNode.ReservedNodeOfferingType') as unknown as string;
  }

}

export class RedshiftRebootCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRebootClusterMessage) {
    super(scope, id);
  }

  public get cluster(): RedshiftRebootClusterCluster {
    return new RedshiftRebootClusterCluster(this, 'Cluster', this.__resources, this.input);
  }

}

export class RedshiftRebootClusterCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRebootClusterMessage) {
    super(scope, id);
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ClusterIdentifier'),
        outputPath: 'Cluster.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.ClusterIdentifier') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.NodeType'),
        outputPath: 'Cluster.NodeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.NodeType', props);
    return resource.getResponseField('Cluster.NodeType') as unknown as string;
  }

  public get clusterStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ClusterStatus'),
        outputPath: 'Cluster.ClusterStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.ClusterStatus', props);
    return resource.getResponseField('Cluster.ClusterStatus') as unknown as string;
  }

  public get clusterAvailabilityStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ClusterAvailabilityStatus'),
        outputPath: 'Cluster.ClusterAvailabilityStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.ClusterAvailabilityStatus', props);
    return resource.getResponseField('Cluster.ClusterAvailabilityStatus') as unknown as string;
  }

  public get modifyStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ModifyStatus'),
        outputPath: 'Cluster.ModifyStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.ModifyStatus', props);
    return resource.getResponseField('Cluster.ModifyStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.MasterUsername'),
        outputPath: 'Cluster.MasterUsername',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.MasterUsername', props);
    return resource.getResponseField('Cluster.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.DBName'),
        outputPath: 'Cluster.DBName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.DBName', props);
    return resource.getResponseField('Cluster.DBName') as unknown as string;
  }

  public get endpoint(): RedshiftRebootClusterClusterEndpoint {
    return new RedshiftRebootClusterClusterEndpoint(this, 'Endpoint', this.__resources, this.input);
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ClusterCreateTime'),
        outputPath: 'Cluster.ClusterCreateTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.ClusterCreateTime', props);
    return resource.getResponseField('Cluster.ClusterCreateTime') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterSecurityGroups(): shapes.RedshiftClusterSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ClusterSecurityGroups'),
        outputPath: 'Cluster.ClusterSecurityGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.ClusterSecurityGroups', props);
    return resource.getResponseField('Cluster.ClusterSecurityGroups') as unknown as shapes.RedshiftClusterSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RedshiftVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.VpcSecurityGroups'),
        outputPath: 'Cluster.VpcSecurityGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.VpcSecurityGroups', props);
    return resource.getResponseField('Cluster.VpcSecurityGroups') as unknown as shapes.RedshiftVpcSecurityGroupMembership[];
  }

  public get clusterParameterGroups(): shapes.RedshiftClusterParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ClusterParameterGroups'),
        outputPath: 'Cluster.ClusterParameterGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.ClusterParameterGroups', props);
    return resource.getResponseField('Cluster.ClusterParameterGroups') as unknown as shapes.RedshiftClusterParameterGroupStatus[];
  }

  public get clusterSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ClusterSubnetGroupName'),
        outputPath: 'Cluster.ClusterSubnetGroupName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.ClusterSubnetGroupName', props);
    return resource.getResponseField('Cluster.ClusterSubnetGroupName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.VpcId'),
        outputPath: 'Cluster.VpcId',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.VpcId', props);
    return resource.getResponseField('Cluster.VpcId') as unknown as string;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.AvailabilityZone'),
        outputPath: 'Cluster.AvailabilityZone',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.AvailabilityZone', props);
    return resource.getResponseField('Cluster.AvailabilityZone') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.PreferredMaintenanceWindow'),
        outputPath: 'Cluster.PreferredMaintenanceWindow',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('Cluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RedshiftRebootClusterClusterPendingModifiedValues {
    return new RedshiftRebootClusterClusterPendingModifiedValues(this, 'PendingModifiedValues', this.__resources, this.input);
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ClusterVersion'),
        outputPath: 'Cluster.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.ClusterVersion', props);
    return resource.getResponseField('Cluster.ClusterVersion') as unknown as string;
  }

  public get allowVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.AllowVersionUpgrade'),
        outputPath: 'Cluster.AllowVersionUpgrade',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.AllowVersionUpgrade', props);
    return resource.getResponseField('Cluster.AllowVersionUpgrade') as unknown as boolean;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.NumberOfNodes'),
        outputPath: 'Cluster.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.NumberOfNodes', props);
    return resource.getResponseField('Cluster.NumberOfNodes') as unknown as number;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.PubliclyAccessible'),
        outputPath: 'Cluster.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PubliclyAccessible') as unknown as boolean;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.Encrypted'),
        outputPath: 'Cluster.Encrypted',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.Encrypted', props);
    return resource.getResponseField('Cluster.Encrypted') as unknown as boolean;
  }

  public get restoreStatus(): RedshiftRebootClusterClusterRestoreStatus {
    return new RedshiftRebootClusterClusterRestoreStatus(this, 'RestoreStatus', this.__resources, this.input);
  }

  public get dataTransferProgress(): RedshiftRebootClusterClusterDataTransferProgress {
    return new RedshiftRebootClusterClusterDataTransferProgress(this, 'DataTransferProgress', this.__resources, this.input);
  }

  public get hsmStatus(): RedshiftRebootClusterClusterHsmStatus {
    return new RedshiftRebootClusterClusterHsmStatus(this, 'HsmStatus', this.__resources, this.input);
  }

  public get clusterSnapshotCopyStatus(): RedshiftRebootClusterClusterClusterSnapshotCopyStatus {
    return new RedshiftRebootClusterClusterClusterSnapshotCopyStatus(this, 'ClusterSnapshotCopyStatus', this.__resources, this.input);
  }

  public get clusterPublicKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ClusterPublicKey'),
        outputPath: 'Cluster.ClusterPublicKey',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.ClusterPublicKey', props);
    return resource.getResponseField('Cluster.ClusterPublicKey') as unknown as string;
  }

  public get clusterNodes(): shapes.RedshiftClusterNode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ClusterNodes'),
        outputPath: 'Cluster.ClusterNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.ClusterNodes', props);
    return resource.getResponseField('Cluster.ClusterNodes') as unknown as shapes.RedshiftClusterNode[];
  }

  public get elasticIpStatus(): RedshiftRebootClusterClusterElasticIpStatus {
    return new RedshiftRebootClusterClusterElasticIpStatus(this, 'ElasticIpStatus', this.__resources, this.input);
  }

  public get clusterRevisionNumber(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ClusterRevisionNumber'),
        outputPath: 'Cluster.ClusterRevisionNumber',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.ClusterRevisionNumber', props);
    return resource.getResponseField('Cluster.ClusterRevisionNumber') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.Tags'),
        outputPath: 'Cluster.Tags',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.Tags', props);
    return resource.getResponseField('Cluster.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.KmsKeyId'),
        outputPath: 'Cluster.KmsKeyId',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.KmsKeyId', props);
    return resource.getResponseField('Cluster.KmsKeyId') as unknown as string;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.EnhancedVpcRouting'),
        outputPath: 'Cluster.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.EnhancedVpcRouting') as unknown as boolean;
  }

  public get iamRoles(): shapes.RedshiftClusterIamRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.IamRoles'),
        outputPath: 'Cluster.IamRoles',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.IamRoles', props);
    return resource.getResponseField('Cluster.IamRoles') as unknown as shapes.RedshiftClusterIamRole[];
  }

  public get pendingActions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.PendingActions'),
        outputPath: 'Cluster.PendingActions',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.PendingActions', props);
    return resource.getResponseField('Cluster.PendingActions') as unknown as string[];
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.MaintenanceTrackName'),
        outputPath: 'Cluster.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.MaintenanceTrackName') as unknown as string;
  }

  public get elasticResizeNumberOfNodeOptions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ElasticResizeNumberOfNodeOptions'),
        outputPath: 'Cluster.ElasticResizeNumberOfNodeOptions',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.ElasticResizeNumberOfNodeOptions', props);
    return resource.getResponseField('Cluster.ElasticResizeNumberOfNodeOptions') as unknown as string;
  }

  public get deferredMaintenanceWindows(): shapes.RedshiftDeferredMaintenanceWindow[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.DeferredMaintenanceWindows'),
        outputPath: 'Cluster.DeferredMaintenanceWindows',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.DeferredMaintenanceWindows', props);
    return resource.getResponseField('Cluster.DeferredMaintenanceWindows') as unknown as shapes.RedshiftDeferredMaintenanceWindow[];
  }

  public get snapshotScheduleIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.SnapshotScheduleIdentifier'),
        outputPath: 'Cluster.SnapshotScheduleIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.SnapshotScheduleIdentifier', props);
    return resource.getResponseField('Cluster.SnapshotScheduleIdentifier') as unknown as string;
  }

  public get snapshotScheduleState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.SnapshotScheduleState'),
        outputPath: 'Cluster.SnapshotScheduleState',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.SnapshotScheduleState', props);
    return resource.getResponseField('Cluster.SnapshotScheduleState') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ExpectedNextSnapshotScheduleTime'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.ExpectedNextSnapshotScheduleTime', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTime') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTimeStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ExpectedNextSnapshotScheduleTimeStatus'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTimeStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.ExpectedNextSnapshotScheduleTimeStatus', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTimeStatus') as unknown as string;
  }

  public get nextMaintenanceWindowStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.NextMaintenanceWindowStartTime'),
        outputPath: 'Cluster.NextMaintenanceWindowStartTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.NextMaintenanceWindowStartTime', props);
    return resource.getResponseField('Cluster.NextMaintenanceWindowStartTime') as unknown as string;
  }

  public get resizeInfo(): RedshiftRebootClusterClusterResizeInfo {
    return new RedshiftRebootClusterClusterResizeInfo(this, 'ResizeInfo', this.__resources, this.input);
  }

  public get clusterNamespaceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ClusterNamespaceArn'),
        outputPath: 'Cluster.ClusterNamespaceArn',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.ClusterNamespaceArn', props);
    return resource.getResponseField('Cluster.ClusterNamespaceArn') as unknown as string;
  }

}

export class RedshiftRebootClusterClusterEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRebootClusterMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.Endpoint.Address'),
        outputPath: 'Cluster.Endpoint.Address',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.Endpoint.Address', props);
    return resource.getResponseField('Cluster.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.Endpoint.Port'),
        outputPath: 'Cluster.Endpoint.Port',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.Endpoint.Port', props);
    return resource.getResponseField('Cluster.Endpoint.Port') as unknown as number;
  }

}

export class RedshiftRebootClusterClusterPendingModifiedValues extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRebootClusterMessage) {
    super(scope, id);
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'Cluster.PendingModifiedValues.MasterUserPassword',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.PendingModifiedValues.NodeType'),
        outputPath: 'Cluster.PendingModifiedValues.NodeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.PendingModifiedValues.NodeType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.PendingModifiedValues.NumberOfNodes'),
        outputPath: 'Cluster.PendingModifiedValues.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.PendingModifiedValues.NumberOfNodes', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NumberOfNodes') as unknown as number;
  }

  public get clusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.PendingModifiedValues.ClusterType'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.PendingModifiedValues.ClusterType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterType') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.PendingModifiedValues.ClusterVersion'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.PendingModifiedValues.ClusterVersion', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterVersion') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.PendingModifiedValues.ClusterIdentifier'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.PendingModifiedValues.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterIdentifier') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.PendingModifiedValues.PubliclyAccessible'),
        outputPath: 'Cluster.PendingModifiedValues.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.PendingModifiedValues.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.PubliclyAccessible') as unknown as boolean;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.PendingModifiedValues.EnhancedVpcRouting'),
        outputPath: 'Cluster.PendingModifiedValues.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.PendingModifiedValues.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.PendingModifiedValues.MaintenanceTrackName'),
        outputPath: 'Cluster.PendingModifiedValues.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.PendingModifiedValues.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MaintenanceTrackName') as unknown as string;
  }

  public get encryptionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.PendingModifiedValues.EncryptionType'),
        outputPath: 'Cluster.PendingModifiedValues.EncryptionType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.PendingModifiedValues.EncryptionType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EncryptionType') as unknown as string;
  }

}

export class RedshiftRebootClusterClusterRestoreStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRebootClusterMessage) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.RestoreStatus.Status'),
        outputPath: 'Cluster.RestoreStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.RestoreStatus.Status', props);
    return resource.getResponseField('Cluster.RestoreStatus.Status') as unknown as string;
  }

  public get currentRestoreRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond') as unknown as number;
  }

  public get snapshotSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.RestoreStatus.SnapshotSizeInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.SnapshotSizeInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.RestoreStatus.SnapshotSizeInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.SnapshotSizeInMegaBytes') as unknown as number;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.RestoreStatus.ProgressInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.ProgressInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.RestoreStatus.ProgressInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.ProgressInMegaBytes') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.RestoreStatus.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.RestoreStatus.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.RestoreStatus.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.ElapsedTimeInSeconds') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

}

export class RedshiftRebootClusterClusterDataTransferProgress extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRebootClusterMessage) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.DataTransferProgress.Status'),
        outputPath: 'Cluster.DataTransferProgress.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.DataTransferProgress.Status', props);
    return resource.getResponseField('Cluster.DataTransferProgress.Status') as unknown as string;
  }

  public get currentRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond') as unknown as number;
  }

  public get totalDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.DataTransferProgress.TotalDataInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.TotalDataInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.DataTransferProgress.TotalDataInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.TotalDataInMegaBytes') as unknown as number;
  }

  public get dataTransferredInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.DataTransferProgress.DataTransferredInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.DataTransferredInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.DataTransferProgress.DataTransferredInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.DataTransferredInMegaBytes') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.DataTransferProgress.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.DataTransferProgress.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.ElapsedTimeInSeconds') as unknown as number;
  }

}

export class RedshiftRebootClusterClusterHsmStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRebootClusterMessage) {
    super(scope, id);
  }

  public get hsmClientCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.HsmStatus.HsmClientCertificateIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmClientCertificateIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.HsmStatus.HsmClientCertificateIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmClientCertificateIdentifier') as unknown as string;
  }

  public get hsmConfigurationIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.HsmStatus.HsmConfigurationIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmConfigurationIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.HsmStatus.HsmConfigurationIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmConfigurationIdentifier') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.HsmStatus.Status'),
        outputPath: 'Cluster.HsmStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.HsmStatus.Status', props);
    return resource.getResponseField('Cluster.HsmStatus.Status') as unknown as string;
  }

}

export class RedshiftRebootClusterClusterClusterSnapshotCopyStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRebootClusterMessage) {
    super(scope, id);
  }

  public get destinationRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ClusterSnapshotCopyStatus.DestinationRegion'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.DestinationRegion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.ClusterSnapshotCopyStatus.DestinationRegion', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.DestinationRegion') as unknown as string;
  }

  public get retentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.RetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.RetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get snapshotCopyGrantName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName') as unknown as string;
  }

}

export class RedshiftRebootClusterClusterElasticIpStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRebootClusterMessage) {
    super(scope, id);
  }

  public get elasticIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ElasticIpStatus.ElasticIp'),
        outputPath: 'Cluster.ElasticIpStatus.ElasticIp',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.ElasticIpStatus.ElasticIp', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.ElasticIp') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ElasticIpStatus.Status'),
        outputPath: 'Cluster.ElasticIpStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.ElasticIpStatus.Status', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.Status') as unknown as string;
  }

}

export class RedshiftRebootClusterClusterResizeInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRebootClusterMessage) {
    super(scope, id);
  }

  public get resizeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ResizeInfo.ResizeType'),
        outputPath: 'Cluster.ResizeInfo.ResizeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.ResizeInfo.ResizeType', props);
    return resource.getResponseField('Cluster.ResizeInfo.ResizeType') as unknown as string;
  }

  public get allowCancelResize(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ResizeInfo.AllowCancelResize'),
        outputPath: 'Cluster.ResizeInfo.AllowCancelResize',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootCluster.Cluster.ResizeInfo.AllowCancelResize', props);
    return resource.getResponseField('Cluster.ResizeInfo.AllowCancelResize') as unknown as boolean;
  }

}

export class RedshiftResetClusterParameterGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftResetClusterParameterGroupMessage) {
    super(scope, id);
  }

  public get parameterGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resetClusterParameterGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResetClusterParameterGroup.ParameterGroupName'),
        outputPath: 'ParameterGroupName',
        parameters: {
          ParameterGroupName: this.input.parameterGroupName,
          ResetAllParameters: this.input.resetAllParameters,
          Parameters: this.input.parameters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResetClusterParameterGroup.ParameterGroupName', props);
    return resource.getResponseField('ParameterGroupName') as unknown as string;
  }

  public get parameterGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resetClusterParameterGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResetClusterParameterGroup.ParameterGroupStatus'),
        outputPath: 'ParameterGroupStatus',
        parameters: {
          ParameterGroupName: this.input.parameterGroupName,
          ResetAllParameters: this.input.resetAllParameters,
          Parameters: this.input.parameters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResetClusterParameterGroup.ParameterGroupStatus', props);
    return resource.getResponseField('ParameterGroupStatus') as unknown as string;
  }

}

export class RedshiftResizeCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftResizeClusterMessage) {
    super(scope, id);
  }

  public get cluster(): RedshiftResizeClusterCluster {
    return new RedshiftResizeClusterCluster(this, 'Cluster', this.__resources, this.input);
  }

}

export class RedshiftResizeClusterCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftResizeClusterMessage) {
    super(scope, id);
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ClusterIdentifier'),
        outputPath: 'Cluster.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.ClusterIdentifier') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.NodeType'),
        outputPath: 'Cluster.NodeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.NodeType', props);
    return resource.getResponseField('Cluster.NodeType') as unknown as string;
  }

  public get clusterStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ClusterStatus'),
        outputPath: 'Cluster.ClusterStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.ClusterStatus', props);
    return resource.getResponseField('Cluster.ClusterStatus') as unknown as string;
  }

  public get clusterAvailabilityStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ClusterAvailabilityStatus'),
        outputPath: 'Cluster.ClusterAvailabilityStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.ClusterAvailabilityStatus', props);
    return resource.getResponseField('Cluster.ClusterAvailabilityStatus') as unknown as string;
  }

  public get modifyStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ModifyStatus'),
        outputPath: 'Cluster.ModifyStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.ModifyStatus', props);
    return resource.getResponseField('Cluster.ModifyStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.MasterUsername'),
        outputPath: 'Cluster.MasterUsername',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.MasterUsername', props);
    return resource.getResponseField('Cluster.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.DBName'),
        outputPath: 'Cluster.DBName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.DBName', props);
    return resource.getResponseField('Cluster.DBName') as unknown as string;
  }

  public get endpoint(): RedshiftResizeClusterClusterEndpoint {
    return new RedshiftResizeClusterClusterEndpoint(this, 'Endpoint', this.__resources, this.input);
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ClusterCreateTime'),
        outputPath: 'Cluster.ClusterCreateTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.ClusterCreateTime', props);
    return resource.getResponseField('Cluster.ClusterCreateTime') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterSecurityGroups(): shapes.RedshiftClusterSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ClusterSecurityGroups'),
        outputPath: 'Cluster.ClusterSecurityGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.ClusterSecurityGroups', props);
    return resource.getResponseField('Cluster.ClusterSecurityGroups') as unknown as shapes.RedshiftClusterSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RedshiftVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.VpcSecurityGroups'),
        outputPath: 'Cluster.VpcSecurityGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.VpcSecurityGroups', props);
    return resource.getResponseField('Cluster.VpcSecurityGroups') as unknown as shapes.RedshiftVpcSecurityGroupMembership[];
  }

  public get clusterParameterGroups(): shapes.RedshiftClusterParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ClusterParameterGroups'),
        outputPath: 'Cluster.ClusterParameterGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.ClusterParameterGroups', props);
    return resource.getResponseField('Cluster.ClusterParameterGroups') as unknown as shapes.RedshiftClusterParameterGroupStatus[];
  }

  public get clusterSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ClusterSubnetGroupName'),
        outputPath: 'Cluster.ClusterSubnetGroupName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.ClusterSubnetGroupName', props);
    return resource.getResponseField('Cluster.ClusterSubnetGroupName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.VpcId'),
        outputPath: 'Cluster.VpcId',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.VpcId', props);
    return resource.getResponseField('Cluster.VpcId') as unknown as string;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.AvailabilityZone'),
        outputPath: 'Cluster.AvailabilityZone',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.AvailabilityZone', props);
    return resource.getResponseField('Cluster.AvailabilityZone') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.PreferredMaintenanceWindow'),
        outputPath: 'Cluster.PreferredMaintenanceWindow',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('Cluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RedshiftResizeClusterClusterPendingModifiedValues {
    return new RedshiftResizeClusterClusterPendingModifiedValues(this, 'PendingModifiedValues', this.__resources, this.input);
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ClusterVersion'),
        outputPath: 'Cluster.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.ClusterVersion', props);
    return resource.getResponseField('Cluster.ClusterVersion') as unknown as string;
  }

  public get allowVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.AllowVersionUpgrade'),
        outputPath: 'Cluster.AllowVersionUpgrade',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.AllowVersionUpgrade', props);
    return resource.getResponseField('Cluster.AllowVersionUpgrade') as unknown as boolean;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.NumberOfNodes'),
        outputPath: 'Cluster.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.NumberOfNodes', props);
    return resource.getResponseField('Cluster.NumberOfNodes') as unknown as number;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.PubliclyAccessible'),
        outputPath: 'Cluster.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PubliclyAccessible') as unknown as boolean;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.Encrypted'),
        outputPath: 'Cluster.Encrypted',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.Encrypted', props);
    return resource.getResponseField('Cluster.Encrypted') as unknown as boolean;
  }

  public get restoreStatus(): RedshiftResizeClusterClusterRestoreStatus {
    return new RedshiftResizeClusterClusterRestoreStatus(this, 'RestoreStatus', this.__resources, this.input);
  }

  public get dataTransferProgress(): RedshiftResizeClusterClusterDataTransferProgress {
    return new RedshiftResizeClusterClusterDataTransferProgress(this, 'DataTransferProgress', this.__resources, this.input);
  }

  public get hsmStatus(): RedshiftResizeClusterClusterHsmStatus {
    return new RedshiftResizeClusterClusterHsmStatus(this, 'HsmStatus', this.__resources, this.input);
  }

  public get clusterSnapshotCopyStatus(): RedshiftResizeClusterClusterClusterSnapshotCopyStatus {
    return new RedshiftResizeClusterClusterClusterSnapshotCopyStatus(this, 'ClusterSnapshotCopyStatus', this.__resources, this.input);
  }

  public get clusterPublicKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ClusterPublicKey'),
        outputPath: 'Cluster.ClusterPublicKey',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.ClusterPublicKey', props);
    return resource.getResponseField('Cluster.ClusterPublicKey') as unknown as string;
  }

  public get clusterNodes(): shapes.RedshiftClusterNode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ClusterNodes'),
        outputPath: 'Cluster.ClusterNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.ClusterNodes', props);
    return resource.getResponseField('Cluster.ClusterNodes') as unknown as shapes.RedshiftClusterNode[];
  }

  public get elasticIpStatus(): RedshiftResizeClusterClusterElasticIpStatus {
    return new RedshiftResizeClusterClusterElasticIpStatus(this, 'ElasticIpStatus', this.__resources, this.input);
  }

  public get clusterRevisionNumber(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ClusterRevisionNumber'),
        outputPath: 'Cluster.ClusterRevisionNumber',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.ClusterRevisionNumber', props);
    return resource.getResponseField('Cluster.ClusterRevisionNumber') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.Tags'),
        outputPath: 'Cluster.Tags',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.Tags', props);
    return resource.getResponseField('Cluster.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.KmsKeyId'),
        outputPath: 'Cluster.KmsKeyId',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.KmsKeyId', props);
    return resource.getResponseField('Cluster.KmsKeyId') as unknown as string;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.EnhancedVpcRouting'),
        outputPath: 'Cluster.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.EnhancedVpcRouting') as unknown as boolean;
  }

  public get iamRoles(): shapes.RedshiftClusterIamRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.IamRoles'),
        outputPath: 'Cluster.IamRoles',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.IamRoles', props);
    return resource.getResponseField('Cluster.IamRoles') as unknown as shapes.RedshiftClusterIamRole[];
  }

  public get pendingActions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.PendingActions'),
        outputPath: 'Cluster.PendingActions',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.PendingActions', props);
    return resource.getResponseField('Cluster.PendingActions') as unknown as string[];
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.MaintenanceTrackName'),
        outputPath: 'Cluster.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.MaintenanceTrackName') as unknown as string;
  }

  public get elasticResizeNumberOfNodeOptions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ElasticResizeNumberOfNodeOptions'),
        outputPath: 'Cluster.ElasticResizeNumberOfNodeOptions',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.ElasticResizeNumberOfNodeOptions', props);
    return resource.getResponseField('Cluster.ElasticResizeNumberOfNodeOptions') as unknown as string;
  }

  public get deferredMaintenanceWindows(): shapes.RedshiftDeferredMaintenanceWindow[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.DeferredMaintenanceWindows'),
        outputPath: 'Cluster.DeferredMaintenanceWindows',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.DeferredMaintenanceWindows', props);
    return resource.getResponseField('Cluster.DeferredMaintenanceWindows') as unknown as shapes.RedshiftDeferredMaintenanceWindow[];
  }

  public get snapshotScheduleIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.SnapshotScheduleIdentifier'),
        outputPath: 'Cluster.SnapshotScheduleIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.SnapshotScheduleIdentifier', props);
    return resource.getResponseField('Cluster.SnapshotScheduleIdentifier') as unknown as string;
  }

  public get snapshotScheduleState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.SnapshotScheduleState'),
        outputPath: 'Cluster.SnapshotScheduleState',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.SnapshotScheduleState', props);
    return resource.getResponseField('Cluster.SnapshotScheduleState') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ExpectedNextSnapshotScheduleTime'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.ExpectedNextSnapshotScheduleTime', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTime') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTimeStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ExpectedNextSnapshotScheduleTimeStatus'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTimeStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.ExpectedNextSnapshotScheduleTimeStatus', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTimeStatus') as unknown as string;
  }

  public get nextMaintenanceWindowStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.NextMaintenanceWindowStartTime'),
        outputPath: 'Cluster.NextMaintenanceWindowStartTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.NextMaintenanceWindowStartTime', props);
    return resource.getResponseField('Cluster.NextMaintenanceWindowStartTime') as unknown as string;
  }

  public get resizeInfo(): RedshiftResizeClusterClusterResizeInfo {
    return new RedshiftResizeClusterClusterResizeInfo(this, 'ResizeInfo', this.__resources, this.input);
  }

  public get clusterNamespaceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ClusterNamespaceArn'),
        outputPath: 'Cluster.ClusterNamespaceArn',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.ClusterNamespaceArn', props);
    return resource.getResponseField('Cluster.ClusterNamespaceArn') as unknown as string;
  }

}

export class RedshiftResizeClusterClusterEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftResizeClusterMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.Endpoint.Address'),
        outputPath: 'Cluster.Endpoint.Address',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.Endpoint.Address', props);
    return resource.getResponseField('Cluster.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.Endpoint.Port'),
        outputPath: 'Cluster.Endpoint.Port',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.Endpoint.Port', props);
    return resource.getResponseField('Cluster.Endpoint.Port') as unknown as number;
  }

}

export class RedshiftResizeClusterClusterPendingModifiedValues extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftResizeClusterMessage) {
    super(scope, id);
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'Cluster.PendingModifiedValues.MasterUserPassword',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.PendingModifiedValues.NodeType'),
        outputPath: 'Cluster.PendingModifiedValues.NodeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.PendingModifiedValues.NodeType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.PendingModifiedValues.NumberOfNodes'),
        outputPath: 'Cluster.PendingModifiedValues.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.PendingModifiedValues.NumberOfNodes', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NumberOfNodes') as unknown as number;
  }

  public get clusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.PendingModifiedValues.ClusterType'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.PendingModifiedValues.ClusterType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterType') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.PendingModifiedValues.ClusterVersion'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.PendingModifiedValues.ClusterVersion', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterVersion') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.PendingModifiedValues.ClusterIdentifier'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.PendingModifiedValues.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterIdentifier') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.PendingModifiedValues.PubliclyAccessible'),
        outputPath: 'Cluster.PendingModifiedValues.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.PendingModifiedValues.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.PubliclyAccessible') as unknown as boolean;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.PendingModifiedValues.EnhancedVpcRouting'),
        outputPath: 'Cluster.PendingModifiedValues.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.PendingModifiedValues.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.PendingModifiedValues.MaintenanceTrackName'),
        outputPath: 'Cluster.PendingModifiedValues.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.PendingModifiedValues.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MaintenanceTrackName') as unknown as string;
  }

  public get encryptionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.PendingModifiedValues.EncryptionType'),
        outputPath: 'Cluster.PendingModifiedValues.EncryptionType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.PendingModifiedValues.EncryptionType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EncryptionType') as unknown as string;
  }

}

export class RedshiftResizeClusterClusterRestoreStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftResizeClusterMessage) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.RestoreStatus.Status'),
        outputPath: 'Cluster.RestoreStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.RestoreStatus.Status', props);
    return resource.getResponseField('Cluster.RestoreStatus.Status') as unknown as string;
  }

  public get currentRestoreRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond') as unknown as number;
  }

  public get snapshotSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.RestoreStatus.SnapshotSizeInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.SnapshotSizeInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.RestoreStatus.SnapshotSizeInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.SnapshotSizeInMegaBytes') as unknown as number;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.RestoreStatus.ProgressInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.ProgressInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.RestoreStatus.ProgressInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.ProgressInMegaBytes') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.RestoreStatus.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.RestoreStatus.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.RestoreStatus.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.ElapsedTimeInSeconds') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

}

export class RedshiftResizeClusterClusterDataTransferProgress extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftResizeClusterMessage) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.DataTransferProgress.Status'),
        outputPath: 'Cluster.DataTransferProgress.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.DataTransferProgress.Status', props);
    return resource.getResponseField('Cluster.DataTransferProgress.Status') as unknown as string;
  }

  public get currentRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond') as unknown as number;
  }

  public get totalDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.DataTransferProgress.TotalDataInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.TotalDataInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.DataTransferProgress.TotalDataInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.TotalDataInMegaBytes') as unknown as number;
  }

  public get dataTransferredInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.DataTransferProgress.DataTransferredInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.DataTransferredInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.DataTransferProgress.DataTransferredInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.DataTransferredInMegaBytes') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.DataTransferProgress.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.DataTransferProgress.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.ElapsedTimeInSeconds') as unknown as number;
  }

}

export class RedshiftResizeClusterClusterHsmStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftResizeClusterMessage) {
    super(scope, id);
  }

  public get hsmClientCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.HsmStatus.HsmClientCertificateIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmClientCertificateIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.HsmStatus.HsmClientCertificateIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmClientCertificateIdentifier') as unknown as string;
  }

  public get hsmConfigurationIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.HsmStatus.HsmConfigurationIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmConfigurationIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.HsmStatus.HsmConfigurationIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmConfigurationIdentifier') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.HsmStatus.Status'),
        outputPath: 'Cluster.HsmStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.HsmStatus.Status', props);
    return resource.getResponseField('Cluster.HsmStatus.Status') as unknown as string;
  }

}

export class RedshiftResizeClusterClusterClusterSnapshotCopyStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftResizeClusterMessage) {
    super(scope, id);
  }

  public get destinationRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ClusterSnapshotCopyStatus.DestinationRegion'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.DestinationRegion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.ClusterSnapshotCopyStatus.DestinationRegion', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.DestinationRegion') as unknown as string;
  }

  public get retentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.RetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.RetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get snapshotCopyGrantName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName') as unknown as string;
  }

}

export class RedshiftResizeClusterClusterElasticIpStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftResizeClusterMessage) {
    super(scope, id);
  }

  public get elasticIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ElasticIpStatus.ElasticIp'),
        outputPath: 'Cluster.ElasticIpStatus.ElasticIp',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.ElasticIpStatus.ElasticIp', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.ElasticIp') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ElasticIpStatus.Status'),
        outputPath: 'Cluster.ElasticIpStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.ElasticIpStatus.Status', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.Status') as unknown as string;
  }

}

export class RedshiftResizeClusterClusterResizeInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftResizeClusterMessage) {
    super(scope, id);
  }

  public get resizeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ResizeInfo.ResizeType'),
        outputPath: 'Cluster.ResizeInfo.ResizeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.ResizeInfo.ResizeType', props);
    return resource.getResponseField('Cluster.ResizeInfo.ResizeType') as unknown as string;
  }

  public get allowCancelResize(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ResizeInfo.AllowCancelResize'),
        outputPath: 'Cluster.ResizeInfo.AllowCancelResize',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          ClusterType: this.input.clusterType,
          NodeType: this.input.nodeType,
          NumberOfNodes: this.input.numberOfNodes,
          Classic: this.input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResizeCluster.Cluster.ResizeInfo.AllowCancelResize', props);
    return resource.getResponseField('Cluster.ResizeInfo.AllowCancelResize') as unknown as boolean;
  }

}

export class RedshiftRestoreFromClusterSnapshot extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRestoreFromClusterSnapshotMessage) {
    super(scope, id);
  }

  public get cluster(): RedshiftRestoreFromClusterSnapshotCluster {
    return new RedshiftRestoreFromClusterSnapshotCluster(this, 'Cluster', this.__resources, this.input);
  }

}

export class RedshiftRestoreFromClusterSnapshotCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRestoreFromClusterSnapshotMessage) {
    super(scope, id);
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ClusterIdentifier'),
        outputPath: 'Cluster.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.ClusterIdentifier') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.NodeType'),
        outputPath: 'Cluster.NodeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.NodeType', props);
    return resource.getResponseField('Cluster.NodeType') as unknown as string;
  }

  public get clusterStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ClusterStatus'),
        outputPath: 'Cluster.ClusterStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.ClusterStatus', props);
    return resource.getResponseField('Cluster.ClusterStatus') as unknown as string;
  }

  public get clusterAvailabilityStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ClusterAvailabilityStatus'),
        outputPath: 'Cluster.ClusterAvailabilityStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.ClusterAvailabilityStatus', props);
    return resource.getResponseField('Cluster.ClusterAvailabilityStatus') as unknown as string;
  }

  public get modifyStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ModifyStatus'),
        outputPath: 'Cluster.ModifyStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.ModifyStatus', props);
    return resource.getResponseField('Cluster.ModifyStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.MasterUsername'),
        outputPath: 'Cluster.MasterUsername',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.MasterUsername', props);
    return resource.getResponseField('Cluster.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.DBName'),
        outputPath: 'Cluster.DBName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.DBName', props);
    return resource.getResponseField('Cluster.DBName') as unknown as string;
  }

  public get endpoint(): RedshiftRestoreFromClusterSnapshotClusterEndpoint {
    return new RedshiftRestoreFromClusterSnapshotClusterEndpoint(this, 'Endpoint', this.__resources, this.input);
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ClusterCreateTime'),
        outputPath: 'Cluster.ClusterCreateTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.ClusterCreateTime', props);
    return resource.getResponseField('Cluster.ClusterCreateTime') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterSecurityGroups(): shapes.RedshiftClusterSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ClusterSecurityGroups'),
        outputPath: 'Cluster.ClusterSecurityGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.ClusterSecurityGroups', props);
    return resource.getResponseField('Cluster.ClusterSecurityGroups') as unknown as shapes.RedshiftClusterSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RedshiftVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.VpcSecurityGroups'),
        outputPath: 'Cluster.VpcSecurityGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.VpcSecurityGroups', props);
    return resource.getResponseField('Cluster.VpcSecurityGroups') as unknown as shapes.RedshiftVpcSecurityGroupMembership[];
  }

  public get clusterParameterGroups(): shapes.RedshiftClusterParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ClusterParameterGroups'),
        outputPath: 'Cluster.ClusterParameterGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.ClusterParameterGroups', props);
    return resource.getResponseField('Cluster.ClusterParameterGroups') as unknown as shapes.RedshiftClusterParameterGroupStatus[];
  }

  public get clusterSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ClusterSubnetGroupName'),
        outputPath: 'Cluster.ClusterSubnetGroupName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.ClusterSubnetGroupName', props);
    return resource.getResponseField('Cluster.ClusterSubnetGroupName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.VpcId'),
        outputPath: 'Cluster.VpcId',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.VpcId', props);
    return resource.getResponseField('Cluster.VpcId') as unknown as string;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.AvailabilityZone'),
        outputPath: 'Cluster.AvailabilityZone',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.AvailabilityZone', props);
    return resource.getResponseField('Cluster.AvailabilityZone') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.PreferredMaintenanceWindow'),
        outputPath: 'Cluster.PreferredMaintenanceWindow',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('Cluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RedshiftRestoreFromClusterSnapshotClusterPendingModifiedValues {
    return new RedshiftRestoreFromClusterSnapshotClusterPendingModifiedValues(this, 'PendingModifiedValues', this.__resources, this.input);
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ClusterVersion'),
        outputPath: 'Cluster.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.ClusterVersion', props);
    return resource.getResponseField('Cluster.ClusterVersion') as unknown as string;
  }

  public get allowVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.AllowVersionUpgrade'),
        outputPath: 'Cluster.AllowVersionUpgrade',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.AllowVersionUpgrade', props);
    return resource.getResponseField('Cluster.AllowVersionUpgrade') as unknown as boolean;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.NumberOfNodes'),
        outputPath: 'Cluster.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.NumberOfNodes', props);
    return resource.getResponseField('Cluster.NumberOfNodes') as unknown as number;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.PubliclyAccessible'),
        outputPath: 'Cluster.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PubliclyAccessible') as unknown as boolean;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.Encrypted'),
        outputPath: 'Cluster.Encrypted',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.Encrypted', props);
    return resource.getResponseField('Cluster.Encrypted') as unknown as boolean;
  }

  public get restoreStatus(): RedshiftRestoreFromClusterSnapshotClusterRestoreStatus {
    return new RedshiftRestoreFromClusterSnapshotClusterRestoreStatus(this, 'RestoreStatus', this.__resources, this.input);
  }

  public get dataTransferProgress(): RedshiftRestoreFromClusterSnapshotClusterDataTransferProgress {
    return new RedshiftRestoreFromClusterSnapshotClusterDataTransferProgress(this, 'DataTransferProgress', this.__resources, this.input);
  }

  public get hsmStatus(): RedshiftRestoreFromClusterSnapshotClusterHsmStatus {
    return new RedshiftRestoreFromClusterSnapshotClusterHsmStatus(this, 'HsmStatus', this.__resources, this.input);
  }

  public get clusterSnapshotCopyStatus(): RedshiftRestoreFromClusterSnapshotClusterClusterSnapshotCopyStatus {
    return new RedshiftRestoreFromClusterSnapshotClusterClusterSnapshotCopyStatus(this, 'ClusterSnapshotCopyStatus', this.__resources, this.input);
  }

  public get clusterPublicKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ClusterPublicKey'),
        outputPath: 'Cluster.ClusterPublicKey',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.ClusterPublicKey', props);
    return resource.getResponseField('Cluster.ClusterPublicKey') as unknown as string;
  }

  public get clusterNodes(): shapes.RedshiftClusterNode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ClusterNodes'),
        outputPath: 'Cluster.ClusterNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.ClusterNodes', props);
    return resource.getResponseField('Cluster.ClusterNodes') as unknown as shapes.RedshiftClusterNode[];
  }

  public get elasticIpStatus(): RedshiftRestoreFromClusterSnapshotClusterElasticIpStatus {
    return new RedshiftRestoreFromClusterSnapshotClusterElasticIpStatus(this, 'ElasticIpStatus', this.__resources, this.input);
  }

  public get clusterRevisionNumber(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ClusterRevisionNumber'),
        outputPath: 'Cluster.ClusterRevisionNumber',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.ClusterRevisionNumber', props);
    return resource.getResponseField('Cluster.ClusterRevisionNumber') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.Tags'),
        outputPath: 'Cluster.Tags',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.Tags', props);
    return resource.getResponseField('Cluster.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.KmsKeyId'),
        outputPath: 'Cluster.KmsKeyId',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.KmsKeyId', props);
    return resource.getResponseField('Cluster.KmsKeyId') as unknown as string;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.EnhancedVpcRouting'),
        outputPath: 'Cluster.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.EnhancedVpcRouting') as unknown as boolean;
  }

  public get iamRoles(): shapes.RedshiftClusterIamRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.IamRoles'),
        outputPath: 'Cluster.IamRoles',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.IamRoles', props);
    return resource.getResponseField('Cluster.IamRoles') as unknown as shapes.RedshiftClusterIamRole[];
  }

  public get pendingActions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.PendingActions'),
        outputPath: 'Cluster.PendingActions',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.PendingActions', props);
    return resource.getResponseField('Cluster.PendingActions') as unknown as string[];
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.MaintenanceTrackName'),
        outputPath: 'Cluster.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.MaintenanceTrackName') as unknown as string;
  }

  public get elasticResizeNumberOfNodeOptions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ElasticResizeNumberOfNodeOptions'),
        outputPath: 'Cluster.ElasticResizeNumberOfNodeOptions',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.ElasticResizeNumberOfNodeOptions', props);
    return resource.getResponseField('Cluster.ElasticResizeNumberOfNodeOptions') as unknown as string;
  }

  public get deferredMaintenanceWindows(): shapes.RedshiftDeferredMaintenanceWindow[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.DeferredMaintenanceWindows'),
        outputPath: 'Cluster.DeferredMaintenanceWindows',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.DeferredMaintenanceWindows', props);
    return resource.getResponseField('Cluster.DeferredMaintenanceWindows') as unknown as shapes.RedshiftDeferredMaintenanceWindow[];
  }

  public get snapshotScheduleIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.SnapshotScheduleIdentifier'),
        outputPath: 'Cluster.SnapshotScheduleIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.SnapshotScheduleIdentifier', props);
    return resource.getResponseField('Cluster.SnapshotScheduleIdentifier') as unknown as string;
  }

  public get snapshotScheduleState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.SnapshotScheduleState'),
        outputPath: 'Cluster.SnapshotScheduleState',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.SnapshotScheduleState', props);
    return resource.getResponseField('Cluster.SnapshotScheduleState') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ExpectedNextSnapshotScheduleTime'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.ExpectedNextSnapshotScheduleTime', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTime') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTimeStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ExpectedNextSnapshotScheduleTimeStatus'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTimeStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.ExpectedNextSnapshotScheduleTimeStatus', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTimeStatus') as unknown as string;
  }

  public get nextMaintenanceWindowStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.NextMaintenanceWindowStartTime'),
        outputPath: 'Cluster.NextMaintenanceWindowStartTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.NextMaintenanceWindowStartTime', props);
    return resource.getResponseField('Cluster.NextMaintenanceWindowStartTime') as unknown as string;
  }

  public get resizeInfo(): RedshiftRestoreFromClusterSnapshotClusterResizeInfo {
    return new RedshiftRestoreFromClusterSnapshotClusterResizeInfo(this, 'ResizeInfo', this.__resources, this.input);
  }

  public get clusterNamespaceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ClusterNamespaceArn'),
        outputPath: 'Cluster.ClusterNamespaceArn',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.ClusterNamespaceArn', props);
    return resource.getResponseField('Cluster.ClusterNamespaceArn') as unknown as string;
  }

}

export class RedshiftRestoreFromClusterSnapshotClusterEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRestoreFromClusterSnapshotMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.Endpoint.Address'),
        outputPath: 'Cluster.Endpoint.Address',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.Endpoint.Address', props);
    return resource.getResponseField('Cluster.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.Endpoint.Port'),
        outputPath: 'Cluster.Endpoint.Port',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.Endpoint.Port', props);
    return resource.getResponseField('Cluster.Endpoint.Port') as unknown as number;
  }

}

export class RedshiftRestoreFromClusterSnapshotClusterPendingModifiedValues extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRestoreFromClusterSnapshotMessage) {
    super(scope, id);
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'Cluster.PendingModifiedValues.MasterUserPassword',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.NodeType'),
        outputPath: 'Cluster.PendingModifiedValues.NodeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.NodeType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.NumberOfNodes'),
        outputPath: 'Cluster.PendingModifiedValues.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.NumberOfNodes', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NumberOfNodes') as unknown as number;
  }

  public get clusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.ClusterType'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.ClusterType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterType') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.ClusterVersion'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.ClusterVersion', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterVersion') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.ClusterIdentifier'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterIdentifier') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.PubliclyAccessible'),
        outputPath: 'Cluster.PendingModifiedValues.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.PubliclyAccessible') as unknown as boolean;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.EnhancedVpcRouting'),
        outputPath: 'Cluster.PendingModifiedValues.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.MaintenanceTrackName'),
        outputPath: 'Cluster.PendingModifiedValues.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MaintenanceTrackName') as unknown as string;
  }

  public get encryptionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.EncryptionType'),
        outputPath: 'Cluster.PendingModifiedValues.EncryptionType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.EncryptionType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EncryptionType') as unknown as string;
  }

}

export class RedshiftRestoreFromClusterSnapshotClusterRestoreStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRestoreFromClusterSnapshotMessage) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.RestoreStatus.Status'),
        outputPath: 'Cluster.RestoreStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.RestoreStatus.Status', props);
    return resource.getResponseField('Cluster.RestoreStatus.Status') as unknown as string;
  }

  public get currentRestoreRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond') as unknown as number;
  }

  public get snapshotSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.RestoreStatus.SnapshotSizeInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.SnapshotSizeInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.RestoreStatus.SnapshotSizeInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.SnapshotSizeInMegaBytes') as unknown as number;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.RestoreStatus.ProgressInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.ProgressInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.RestoreStatus.ProgressInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.ProgressInMegaBytes') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.RestoreStatus.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.RestoreStatus.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.RestoreStatus.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.ElapsedTimeInSeconds') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

}

export class RedshiftRestoreFromClusterSnapshotClusterDataTransferProgress extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRestoreFromClusterSnapshotMessage) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.DataTransferProgress.Status'),
        outputPath: 'Cluster.DataTransferProgress.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.DataTransferProgress.Status', props);
    return resource.getResponseField('Cluster.DataTransferProgress.Status') as unknown as string;
  }

  public get currentRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond') as unknown as number;
  }

  public get totalDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.DataTransferProgress.TotalDataInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.TotalDataInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.DataTransferProgress.TotalDataInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.TotalDataInMegaBytes') as unknown as number;
  }

  public get dataTransferredInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.DataTransferProgress.DataTransferredInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.DataTransferredInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.DataTransferProgress.DataTransferredInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.DataTransferredInMegaBytes') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.DataTransferProgress.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.DataTransferProgress.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.ElapsedTimeInSeconds') as unknown as number;
  }

}

export class RedshiftRestoreFromClusterSnapshotClusterHsmStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRestoreFromClusterSnapshotMessage) {
    super(scope, id);
  }

  public get hsmClientCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.HsmStatus.HsmClientCertificateIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmClientCertificateIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.HsmStatus.HsmClientCertificateIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmClientCertificateIdentifier') as unknown as string;
  }

  public get hsmConfigurationIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.HsmStatus.HsmConfigurationIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmConfigurationIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.HsmStatus.HsmConfigurationIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmConfigurationIdentifier') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.HsmStatus.Status'),
        outputPath: 'Cluster.HsmStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.HsmStatus.Status', props);
    return resource.getResponseField('Cluster.HsmStatus.Status') as unknown as string;
  }

}

export class RedshiftRestoreFromClusterSnapshotClusterClusterSnapshotCopyStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRestoreFromClusterSnapshotMessage) {
    super(scope, id);
  }

  public get destinationRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ClusterSnapshotCopyStatus.DestinationRegion'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.DestinationRegion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.ClusterSnapshotCopyStatus.DestinationRegion', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.DestinationRegion') as unknown as string;
  }

  public get retentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.RetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.RetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get snapshotCopyGrantName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName') as unknown as string;
  }

}

export class RedshiftRestoreFromClusterSnapshotClusterElasticIpStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRestoreFromClusterSnapshotMessage) {
    super(scope, id);
  }

  public get elasticIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ElasticIpStatus.ElasticIp'),
        outputPath: 'Cluster.ElasticIpStatus.ElasticIp',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.ElasticIpStatus.ElasticIp', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.ElasticIp') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ElasticIpStatus.Status'),
        outputPath: 'Cluster.ElasticIpStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.ElasticIpStatus.Status', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.Status') as unknown as string;
  }

}

export class RedshiftRestoreFromClusterSnapshotClusterResizeInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRestoreFromClusterSnapshotMessage) {
    super(scope, id);
  }

  public get resizeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ResizeInfo.ResizeType'),
        outputPath: 'Cluster.ResizeInfo.ResizeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.ResizeInfo.ResizeType', props);
    return resource.getResponseField('Cluster.ResizeInfo.ResizeType') as unknown as string;
  }

  public get allowCancelResize(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ResizeInfo.AllowCancelResize'),
        outputPath: 'Cluster.ResizeInfo.AllowCancelResize',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          AllowVersionUpgrade: this.input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.input.clusterSubnetGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          OwnerAccount: this.input.ownerAccount,
          HsmClientCertificateIdentifier: this.input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.input.hsmConfigurationIdentifier,
          ElasticIp: this.input.elasticIp,
          ClusterParameterGroupName: this.input.clusterParameterGroupName,
          ClusterSecurityGroups: this.input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.input.kmsKeyId,
          NodeType: this.input.nodeType,
          EnhancedVpcRouting: this.input.enhancedVpcRouting,
          AdditionalInfo: this.input.additionalInfo,
          IamRoles: this.input.iamRoles,
          MaintenanceTrackName: this.input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.input.snapshotScheduleIdentifier,
          NumberOfNodes: this.input.numberOfNodes,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreFromClusterSnapshot.Cluster.ResizeInfo.AllowCancelResize', props);
    return resource.getResponseField('Cluster.ResizeInfo.AllowCancelResize') as unknown as boolean;
  }

}

export class RedshiftRestoreTableFromClusterSnapshot extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRestoreTableFromClusterSnapshotMessage) {
    super(scope, id);
  }

  public get tableRestoreStatus(): RedshiftRestoreTableFromClusterSnapshotTableRestoreStatus {
    return new RedshiftRestoreTableFromClusterSnapshotTableRestoreStatus(this, 'TableRestoreStatus', this.__resources, this.input);
  }

}

export class RedshiftRestoreTableFromClusterSnapshotTableRestoreStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRestoreTableFromClusterSnapshotMessage) {
    super(scope, id);
  }

  public get tableRestoreRequestId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreTableFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreTableFromClusterSnapshot.TableRestoreStatus.TableRestoreRequestId'),
        outputPath: 'TableRestoreStatus.TableRestoreRequestId',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SourceDatabaseName: this.input.sourceDatabaseName,
          SourceSchemaName: this.input.sourceSchemaName,
          SourceTableName: this.input.sourceTableName,
          TargetDatabaseName: this.input.targetDatabaseName,
          TargetSchemaName: this.input.targetSchemaName,
          NewTableName: this.input.newTableName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreTableFromClusterSnapshot.TableRestoreStatus.TableRestoreRequestId', props);
    return resource.getResponseField('TableRestoreStatus.TableRestoreRequestId') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreTableFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreTableFromClusterSnapshot.TableRestoreStatus.Status'),
        outputPath: 'TableRestoreStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SourceDatabaseName: this.input.sourceDatabaseName,
          SourceSchemaName: this.input.sourceSchemaName,
          SourceTableName: this.input.sourceTableName,
          TargetDatabaseName: this.input.targetDatabaseName,
          TargetSchemaName: this.input.targetSchemaName,
          NewTableName: this.input.newTableName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreTableFromClusterSnapshot.TableRestoreStatus.Status', props);
    return resource.getResponseField('TableRestoreStatus.Status') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreTableFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreTableFromClusterSnapshot.TableRestoreStatus.Message'),
        outputPath: 'TableRestoreStatus.Message',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SourceDatabaseName: this.input.sourceDatabaseName,
          SourceSchemaName: this.input.sourceSchemaName,
          SourceTableName: this.input.sourceTableName,
          TargetDatabaseName: this.input.targetDatabaseName,
          TargetSchemaName: this.input.targetSchemaName,
          NewTableName: this.input.newTableName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreTableFromClusterSnapshot.TableRestoreStatus.Message', props);
    return resource.getResponseField('TableRestoreStatus.Message') as unknown as string;
  }

  public get requestTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreTableFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreTableFromClusterSnapshot.TableRestoreStatus.RequestTime'),
        outputPath: 'TableRestoreStatus.RequestTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SourceDatabaseName: this.input.sourceDatabaseName,
          SourceSchemaName: this.input.sourceSchemaName,
          SourceTableName: this.input.sourceTableName,
          TargetDatabaseName: this.input.targetDatabaseName,
          TargetSchemaName: this.input.targetSchemaName,
          NewTableName: this.input.newTableName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreTableFromClusterSnapshot.TableRestoreStatus.RequestTime', props);
    return resource.getResponseField('TableRestoreStatus.RequestTime') as unknown as string;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreTableFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreTableFromClusterSnapshot.TableRestoreStatus.ProgressInMegaBytes'),
        outputPath: 'TableRestoreStatus.ProgressInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SourceDatabaseName: this.input.sourceDatabaseName,
          SourceSchemaName: this.input.sourceSchemaName,
          SourceTableName: this.input.sourceTableName,
          TargetDatabaseName: this.input.targetDatabaseName,
          TargetSchemaName: this.input.targetSchemaName,
          NewTableName: this.input.newTableName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreTableFromClusterSnapshot.TableRestoreStatus.ProgressInMegaBytes', props);
    return resource.getResponseField('TableRestoreStatus.ProgressInMegaBytes') as unknown as number;
  }

  public get totalDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreTableFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreTableFromClusterSnapshot.TableRestoreStatus.TotalDataInMegaBytes'),
        outputPath: 'TableRestoreStatus.TotalDataInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SourceDatabaseName: this.input.sourceDatabaseName,
          SourceSchemaName: this.input.sourceSchemaName,
          SourceTableName: this.input.sourceTableName,
          TargetDatabaseName: this.input.targetDatabaseName,
          TargetSchemaName: this.input.targetSchemaName,
          NewTableName: this.input.newTableName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreTableFromClusterSnapshot.TableRestoreStatus.TotalDataInMegaBytes', props);
    return resource.getResponseField('TableRestoreStatus.TotalDataInMegaBytes') as unknown as number;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreTableFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreTableFromClusterSnapshot.TableRestoreStatus.ClusterIdentifier'),
        outputPath: 'TableRestoreStatus.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SourceDatabaseName: this.input.sourceDatabaseName,
          SourceSchemaName: this.input.sourceSchemaName,
          SourceTableName: this.input.sourceTableName,
          TargetDatabaseName: this.input.targetDatabaseName,
          TargetSchemaName: this.input.targetSchemaName,
          NewTableName: this.input.newTableName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreTableFromClusterSnapshot.TableRestoreStatus.ClusterIdentifier', props);
    return resource.getResponseField('TableRestoreStatus.ClusterIdentifier') as unknown as string;
  }

  public get snapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreTableFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreTableFromClusterSnapshot.TableRestoreStatus.SnapshotIdentifier'),
        outputPath: 'TableRestoreStatus.SnapshotIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SourceDatabaseName: this.input.sourceDatabaseName,
          SourceSchemaName: this.input.sourceSchemaName,
          SourceTableName: this.input.sourceTableName,
          TargetDatabaseName: this.input.targetDatabaseName,
          TargetSchemaName: this.input.targetSchemaName,
          NewTableName: this.input.newTableName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreTableFromClusterSnapshot.TableRestoreStatus.SnapshotIdentifier', props);
    return resource.getResponseField('TableRestoreStatus.SnapshotIdentifier') as unknown as string;
  }

  public get sourceDatabaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreTableFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreTableFromClusterSnapshot.TableRestoreStatus.SourceDatabaseName'),
        outputPath: 'TableRestoreStatus.SourceDatabaseName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SourceDatabaseName: this.input.sourceDatabaseName,
          SourceSchemaName: this.input.sourceSchemaName,
          SourceTableName: this.input.sourceTableName,
          TargetDatabaseName: this.input.targetDatabaseName,
          TargetSchemaName: this.input.targetSchemaName,
          NewTableName: this.input.newTableName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreTableFromClusterSnapshot.TableRestoreStatus.SourceDatabaseName', props);
    return resource.getResponseField('TableRestoreStatus.SourceDatabaseName') as unknown as string;
  }

  public get sourceSchemaName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreTableFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreTableFromClusterSnapshot.TableRestoreStatus.SourceSchemaName'),
        outputPath: 'TableRestoreStatus.SourceSchemaName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SourceDatabaseName: this.input.sourceDatabaseName,
          SourceSchemaName: this.input.sourceSchemaName,
          SourceTableName: this.input.sourceTableName,
          TargetDatabaseName: this.input.targetDatabaseName,
          TargetSchemaName: this.input.targetSchemaName,
          NewTableName: this.input.newTableName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreTableFromClusterSnapshot.TableRestoreStatus.SourceSchemaName', props);
    return resource.getResponseField('TableRestoreStatus.SourceSchemaName') as unknown as string;
  }

  public get sourceTableName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreTableFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreTableFromClusterSnapshot.TableRestoreStatus.SourceTableName'),
        outputPath: 'TableRestoreStatus.SourceTableName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SourceDatabaseName: this.input.sourceDatabaseName,
          SourceSchemaName: this.input.sourceSchemaName,
          SourceTableName: this.input.sourceTableName,
          TargetDatabaseName: this.input.targetDatabaseName,
          TargetSchemaName: this.input.targetSchemaName,
          NewTableName: this.input.newTableName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreTableFromClusterSnapshot.TableRestoreStatus.SourceTableName', props);
    return resource.getResponseField('TableRestoreStatus.SourceTableName') as unknown as string;
  }

  public get targetDatabaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreTableFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreTableFromClusterSnapshot.TableRestoreStatus.TargetDatabaseName'),
        outputPath: 'TableRestoreStatus.TargetDatabaseName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SourceDatabaseName: this.input.sourceDatabaseName,
          SourceSchemaName: this.input.sourceSchemaName,
          SourceTableName: this.input.sourceTableName,
          TargetDatabaseName: this.input.targetDatabaseName,
          TargetSchemaName: this.input.targetSchemaName,
          NewTableName: this.input.newTableName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreTableFromClusterSnapshot.TableRestoreStatus.TargetDatabaseName', props);
    return resource.getResponseField('TableRestoreStatus.TargetDatabaseName') as unknown as string;
  }

  public get targetSchemaName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreTableFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreTableFromClusterSnapshot.TableRestoreStatus.TargetSchemaName'),
        outputPath: 'TableRestoreStatus.TargetSchemaName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SourceDatabaseName: this.input.sourceDatabaseName,
          SourceSchemaName: this.input.sourceSchemaName,
          SourceTableName: this.input.sourceTableName,
          TargetDatabaseName: this.input.targetDatabaseName,
          TargetSchemaName: this.input.targetSchemaName,
          NewTableName: this.input.newTableName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreTableFromClusterSnapshot.TableRestoreStatus.TargetSchemaName', props);
    return resource.getResponseField('TableRestoreStatus.TargetSchemaName') as unknown as string;
  }

  public get newTableName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreTableFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreTableFromClusterSnapshot.TableRestoreStatus.NewTableName'),
        outputPath: 'TableRestoreStatus.NewTableName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SourceDatabaseName: this.input.sourceDatabaseName,
          SourceSchemaName: this.input.sourceSchemaName,
          SourceTableName: this.input.sourceTableName,
          TargetDatabaseName: this.input.targetDatabaseName,
          TargetSchemaName: this.input.targetSchemaName,
          NewTableName: this.input.newTableName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreTableFromClusterSnapshot.TableRestoreStatus.NewTableName', props);
    return resource.getResponseField('TableRestoreStatus.NewTableName') as unknown as string;
  }

}

export class RedshiftResumeCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftResumeClusterMessage) {
    super(scope, id);
  }

  public get cluster(): RedshiftResumeClusterCluster {
    return new RedshiftResumeClusterCluster(this, 'Cluster', this.__resources, this.input);
  }

}

export class RedshiftResumeClusterCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftResumeClusterMessage) {
    super(scope, id);
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ClusterIdentifier'),
        outputPath: 'Cluster.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.ClusterIdentifier') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.NodeType'),
        outputPath: 'Cluster.NodeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.NodeType', props);
    return resource.getResponseField('Cluster.NodeType') as unknown as string;
  }

  public get clusterStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ClusterStatus'),
        outputPath: 'Cluster.ClusterStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.ClusterStatus', props);
    return resource.getResponseField('Cluster.ClusterStatus') as unknown as string;
  }

  public get clusterAvailabilityStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ClusterAvailabilityStatus'),
        outputPath: 'Cluster.ClusterAvailabilityStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.ClusterAvailabilityStatus', props);
    return resource.getResponseField('Cluster.ClusterAvailabilityStatus') as unknown as string;
  }

  public get modifyStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ModifyStatus'),
        outputPath: 'Cluster.ModifyStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.ModifyStatus', props);
    return resource.getResponseField('Cluster.ModifyStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.MasterUsername'),
        outputPath: 'Cluster.MasterUsername',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.MasterUsername', props);
    return resource.getResponseField('Cluster.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.DBName'),
        outputPath: 'Cluster.DBName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.DBName', props);
    return resource.getResponseField('Cluster.DBName') as unknown as string;
  }

  public get endpoint(): RedshiftResumeClusterClusterEndpoint {
    return new RedshiftResumeClusterClusterEndpoint(this, 'Endpoint', this.__resources, this.input);
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ClusterCreateTime'),
        outputPath: 'Cluster.ClusterCreateTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.ClusterCreateTime', props);
    return resource.getResponseField('Cluster.ClusterCreateTime') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterSecurityGroups(): shapes.RedshiftClusterSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ClusterSecurityGroups'),
        outputPath: 'Cluster.ClusterSecurityGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.ClusterSecurityGroups', props);
    return resource.getResponseField('Cluster.ClusterSecurityGroups') as unknown as shapes.RedshiftClusterSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RedshiftVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.VpcSecurityGroups'),
        outputPath: 'Cluster.VpcSecurityGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.VpcSecurityGroups', props);
    return resource.getResponseField('Cluster.VpcSecurityGroups') as unknown as shapes.RedshiftVpcSecurityGroupMembership[];
  }

  public get clusterParameterGroups(): shapes.RedshiftClusterParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ClusterParameterGroups'),
        outputPath: 'Cluster.ClusterParameterGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.ClusterParameterGroups', props);
    return resource.getResponseField('Cluster.ClusterParameterGroups') as unknown as shapes.RedshiftClusterParameterGroupStatus[];
  }

  public get clusterSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ClusterSubnetGroupName'),
        outputPath: 'Cluster.ClusterSubnetGroupName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.ClusterSubnetGroupName', props);
    return resource.getResponseField('Cluster.ClusterSubnetGroupName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.VpcId'),
        outputPath: 'Cluster.VpcId',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.VpcId', props);
    return resource.getResponseField('Cluster.VpcId') as unknown as string;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.AvailabilityZone'),
        outputPath: 'Cluster.AvailabilityZone',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.AvailabilityZone', props);
    return resource.getResponseField('Cluster.AvailabilityZone') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.PreferredMaintenanceWindow'),
        outputPath: 'Cluster.PreferredMaintenanceWindow',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('Cluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RedshiftResumeClusterClusterPendingModifiedValues {
    return new RedshiftResumeClusterClusterPendingModifiedValues(this, 'PendingModifiedValues', this.__resources, this.input);
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ClusterVersion'),
        outputPath: 'Cluster.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.ClusterVersion', props);
    return resource.getResponseField('Cluster.ClusterVersion') as unknown as string;
  }

  public get allowVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.AllowVersionUpgrade'),
        outputPath: 'Cluster.AllowVersionUpgrade',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.AllowVersionUpgrade', props);
    return resource.getResponseField('Cluster.AllowVersionUpgrade') as unknown as boolean;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.NumberOfNodes'),
        outputPath: 'Cluster.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.NumberOfNodes', props);
    return resource.getResponseField('Cluster.NumberOfNodes') as unknown as number;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.PubliclyAccessible'),
        outputPath: 'Cluster.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PubliclyAccessible') as unknown as boolean;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.Encrypted'),
        outputPath: 'Cluster.Encrypted',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.Encrypted', props);
    return resource.getResponseField('Cluster.Encrypted') as unknown as boolean;
  }

  public get restoreStatus(): RedshiftResumeClusterClusterRestoreStatus {
    return new RedshiftResumeClusterClusterRestoreStatus(this, 'RestoreStatus', this.__resources, this.input);
  }

  public get dataTransferProgress(): RedshiftResumeClusterClusterDataTransferProgress {
    return new RedshiftResumeClusterClusterDataTransferProgress(this, 'DataTransferProgress', this.__resources, this.input);
  }

  public get hsmStatus(): RedshiftResumeClusterClusterHsmStatus {
    return new RedshiftResumeClusterClusterHsmStatus(this, 'HsmStatus', this.__resources, this.input);
  }

  public get clusterSnapshotCopyStatus(): RedshiftResumeClusterClusterClusterSnapshotCopyStatus {
    return new RedshiftResumeClusterClusterClusterSnapshotCopyStatus(this, 'ClusterSnapshotCopyStatus', this.__resources, this.input);
  }

  public get clusterPublicKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ClusterPublicKey'),
        outputPath: 'Cluster.ClusterPublicKey',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.ClusterPublicKey', props);
    return resource.getResponseField('Cluster.ClusterPublicKey') as unknown as string;
  }

  public get clusterNodes(): shapes.RedshiftClusterNode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ClusterNodes'),
        outputPath: 'Cluster.ClusterNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.ClusterNodes', props);
    return resource.getResponseField('Cluster.ClusterNodes') as unknown as shapes.RedshiftClusterNode[];
  }

  public get elasticIpStatus(): RedshiftResumeClusterClusterElasticIpStatus {
    return new RedshiftResumeClusterClusterElasticIpStatus(this, 'ElasticIpStatus', this.__resources, this.input);
  }

  public get clusterRevisionNumber(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ClusterRevisionNumber'),
        outputPath: 'Cluster.ClusterRevisionNumber',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.ClusterRevisionNumber', props);
    return resource.getResponseField('Cluster.ClusterRevisionNumber') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.Tags'),
        outputPath: 'Cluster.Tags',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.Tags', props);
    return resource.getResponseField('Cluster.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.KmsKeyId'),
        outputPath: 'Cluster.KmsKeyId',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.KmsKeyId', props);
    return resource.getResponseField('Cluster.KmsKeyId') as unknown as string;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.EnhancedVpcRouting'),
        outputPath: 'Cluster.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.EnhancedVpcRouting') as unknown as boolean;
  }

  public get iamRoles(): shapes.RedshiftClusterIamRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.IamRoles'),
        outputPath: 'Cluster.IamRoles',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.IamRoles', props);
    return resource.getResponseField('Cluster.IamRoles') as unknown as shapes.RedshiftClusterIamRole[];
  }

  public get pendingActions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.PendingActions'),
        outputPath: 'Cluster.PendingActions',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.PendingActions', props);
    return resource.getResponseField('Cluster.PendingActions') as unknown as string[];
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.MaintenanceTrackName'),
        outputPath: 'Cluster.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.MaintenanceTrackName') as unknown as string;
  }

  public get elasticResizeNumberOfNodeOptions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ElasticResizeNumberOfNodeOptions'),
        outputPath: 'Cluster.ElasticResizeNumberOfNodeOptions',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.ElasticResizeNumberOfNodeOptions', props);
    return resource.getResponseField('Cluster.ElasticResizeNumberOfNodeOptions') as unknown as string;
  }

  public get deferredMaintenanceWindows(): shapes.RedshiftDeferredMaintenanceWindow[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.DeferredMaintenanceWindows'),
        outputPath: 'Cluster.DeferredMaintenanceWindows',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.DeferredMaintenanceWindows', props);
    return resource.getResponseField('Cluster.DeferredMaintenanceWindows') as unknown as shapes.RedshiftDeferredMaintenanceWindow[];
  }

  public get snapshotScheduleIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.SnapshotScheduleIdentifier'),
        outputPath: 'Cluster.SnapshotScheduleIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.SnapshotScheduleIdentifier', props);
    return resource.getResponseField('Cluster.SnapshotScheduleIdentifier') as unknown as string;
  }

  public get snapshotScheduleState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.SnapshotScheduleState'),
        outputPath: 'Cluster.SnapshotScheduleState',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.SnapshotScheduleState', props);
    return resource.getResponseField('Cluster.SnapshotScheduleState') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ExpectedNextSnapshotScheduleTime'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.ExpectedNextSnapshotScheduleTime', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTime') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTimeStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ExpectedNextSnapshotScheduleTimeStatus'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTimeStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.ExpectedNextSnapshotScheduleTimeStatus', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTimeStatus') as unknown as string;
  }

  public get nextMaintenanceWindowStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.NextMaintenanceWindowStartTime'),
        outputPath: 'Cluster.NextMaintenanceWindowStartTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.NextMaintenanceWindowStartTime', props);
    return resource.getResponseField('Cluster.NextMaintenanceWindowStartTime') as unknown as string;
  }

  public get resizeInfo(): RedshiftResumeClusterClusterResizeInfo {
    return new RedshiftResumeClusterClusterResizeInfo(this, 'ResizeInfo', this.__resources, this.input);
  }

  public get clusterNamespaceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ClusterNamespaceArn'),
        outputPath: 'Cluster.ClusterNamespaceArn',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.ClusterNamespaceArn', props);
    return resource.getResponseField('Cluster.ClusterNamespaceArn') as unknown as string;
  }

}

export class RedshiftResumeClusterClusterEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftResumeClusterMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.Endpoint.Address'),
        outputPath: 'Cluster.Endpoint.Address',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.Endpoint.Address', props);
    return resource.getResponseField('Cluster.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.Endpoint.Port'),
        outputPath: 'Cluster.Endpoint.Port',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.Endpoint.Port', props);
    return resource.getResponseField('Cluster.Endpoint.Port') as unknown as number;
  }

}

export class RedshiftResumeClusterClusterPendingModifiedValues extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftResumeClusterMessage) {
    super(scope, id);
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'Cluster.PendingModifiedValues.MasterUserPassword',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.PendingModifiedValues.NodeType'),
        outputPath: 'Cluster.PendingModifiedValues.NodeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.PendingModifiedValues.NodeType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.PendingModifiedValues.NumberOfNodes'),
        outputPath: 'Cluster.PendingModifiedValues.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.PendingModifiedValues.NumberOfNodes', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NumberOfNodes') as unknown as number;
  }

  public get clusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.PendingModifiedValues.ClusterType'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.PendingModifiedValues.ClusterType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterType') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.PendingModifiedValues.ClusterVersion'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.PendingModifiedValues.ClusterVersion', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterVersion') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.PendingModifiedValues.ClusterIdentifier'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.PendingModifiedValues.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterIdentifier') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.PendingModifiedValues.PubliclyAccessible'),
        outputPath: 'Cluster.PendingModifiedValues.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.PendingModifiedValues.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.PubliclyAccessible') as unknown as boolean;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.PendingModifiedValues.EnhancedVpcRouting'),
        outputPath: 'Cluster.PendingModifiedValues.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.PendingModifiedValues.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.PendingModifiedValues.MaintenanceTrackName'),
        outputPath: 'Cluster.PendingModifiedValues.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.PendingModifiedValues.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MaintenanceTrackName') as unknown as string;
  }

  public get encryptionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.PendingModifiedValues.EncryptionType'),
        outputPath: 'Cluster.PendingModifiedValues.EncryptionType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.PendingModifiedValues.EncryptionType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EncryptionType') as unknown as string;
  }

}

export class RedshiftResumeClusterClusterRestoreStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftResumeClusterMessage) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.RestoreStatus.Status'),
        outputPath: 'Cluster.RestoreStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.RestoreStatus.Status', props);
    return resource.getResponseField('Cluster.RestoreStatus.Status') as unknown as string;
  }

  public get currentRestoreRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond') as unknown as number;
  }

  public get snapshotSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.RestoreStatus.SnapshotSizeInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.SnapshotSizeInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.RestoreStatus.SnapshotSizeInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.SnapshotSizeInMegaBytes') as unknown as number;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.RestoreStatus.ProgressInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.ProgressInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.RestoreStatus.ProgressInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.ProgressInMegaBytes') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.RestoreStatus.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.RestoreStatus.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.RestoreStatus.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.ElapsedTimeInSeconds') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

}

export class RedshiftResumeClusterClusterDataTransferProgress extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftResumeClusterMessage) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.DataTransferProgress.Status'),
        outputPath: 'Cluster.DataTransferProgress.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.DataTransferProgress.Status', props);
    return resource.getResponseField('Cluster.DataTransferProgress.Status') as unknown as string;
  }

  public get currentRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond') as unknown as number;
  }

  public get totalDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.DataTransferProgress.TotalDataInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.TotalDataInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.DataTransferProgress.TotalDataInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.TotalDataInMegaBytes') as unknown as number;
  }

  public get dataTransferredInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.DataTransferProgress.DataTransferredInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.DataTransferredInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.DataTransferProgress.DataTransferredInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.DataTransferredInMegaBytes') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.DataTransferProgress.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.DataTransferProgress.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.ElapsedTimeInSeconds') as unknown as number;
  }

}

export class RedshiftResumeClusterClusterHsmStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftResumeClusterMessage) {
    super(scope, id);
  }

  public get hsmClientCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.HsmStatus.HsmClientCertificateIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmClientCertificateIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.HsmStatus.HsmClientCertificateIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmClientCertificateIdentifier') as unknown as string;
  }

  public get hsmConfigurationIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.HsmStatus.HsmConfigurationIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmConfigurationIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.HsmStatus.HsmConfigurationIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmConfigurationIdentifier') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.HsmStatus.Status'),
        outputPath: 'Cluster.HsmStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.HsmStatus.Status', props);
    return resource.getResponseField('Cluster.HsmStatus.Status') as unknown as string;
  }

}

export class RedshiftResumeClusterClusterClusterSnapshotCopyStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftResumeClusterMessage) {
    super(scope, id);
  }

  public get destinationRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ClusterSnapshotCopyStatus.DestinationRegion'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.DestinationRegion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.ClusterSnapshotCopyStatus.DestinationRegion', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.DestinationRegion') as unknown as string;
  }

  public get retentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.RetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.RetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get snapshotCopyGrantName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName') as unknown as string;
  }

}

export class RedshiftResumeClusterClusterElasticIpStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftResumeClusterMessage) {
    super(scope, id);
  }

  public get elasticIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ElasticIpStatus.ElasticIp'),
        outputPath: 'Cluster.ElasticIpStatus.ElasticIp',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.ElasticIpStatus.ElasticIp', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.ElasticIp') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ElasticIpStatus.Status'),
        outputPath: 'Cluster.ElasticIpStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.ElasticIpStatus.Status', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.Status') as unknown as string;
  }

}

export class RedshiftResumeClusterClusterResizeInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftResumeClusterMessage) {
    super(scope, id);
  }

  public get resizeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ResizeInfo.ResizeType'),
        outputPath: 'Cluster.ResizeInfo.ResizeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.ResizeInfo.ResizeType', props);
    return resource.getResponseField('Cluster.ResizeInfo.ResizeType') as unknown as string;
  }

  public get allowCancelResize(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ResizeInfo.AllowCancelResize'),
        outputPath: 'Cluster.ResizeInfo.AllowCancelResize',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResumeCluster.Cluster.ResizeInfo.AllowCancelResize', props);
    return resource.getResponseField('Cluster.ResizeInfo.AllowCancelResize') as unknown as boolean;
  }

}

export class RedshiftRevokeClusterSecurityGroupIngress extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRevokeClusterSecurityGroupIngressMessage) {
    super(scope, id);
  }

  public get clusterSecurityGroup(): RedshiftRevokeClusterSecurityGroupIngressClusterSecurityGroup {
    return new RedshiftRevokeClusterSecurityGroupIngressClusterSecurityGroup(this, 'ClusterSecurityGroup', this.__resources, this.input);
  }

}

export class RedshiftRevokeClusterSecurityGroupIngressClusterSecurityGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRevokeClusterSecurityGroupIngressMessage) {
    super(scope, id);
  }

  public get clusterSecurityGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeClusterSecurityGroupIngress',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeClusterSecurityGroupIngress.ClusterSecurityGroup.ClusterSecurityGroupName'),
        outputPath: 'ClusterSecurityGroup.ClusterSecurityGroupName',
        parameters: {
          ClusterSecurityGroupName: this.input.clusterSecurityGroupName,
          CIDRIP: this.input.cidrip,
          EC2SecurityGroupName: this.input.ec2SecurityGroupName,
          EC2SecurityGroupOwnerId: this.input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeClusterSecurityGroupIngress.ClusterSecurityGroup.ClusterSecurityGroupName', props);
    return resource.getResponseField('ClusterSecurityGroup.ClusterSecurityGroupName') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeClusterSecurityGroupIngress',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeClusterSecurityGroupIngress.ClusterSecurityGroup.Description'),
        outputPath: 'ClusterSecurityGroup.Description',
        parameters: {
          ClusterSecurityGroupName: this.input.clusterSecurityGroupName,
          CIDRIP: this.input.cidrip,
          EC2SecurityGroupName: this.input.ec2SecurityGroupName,
          EC2SecurityGroupOwnerId: this.input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeClusterSecurityGroupIngress.ClusterSecurityGroup.Description', props);
    return resource.getResponseField('ClusterSecurityGroup.Description') as unknown as string;
  }

  public get ec2SecurityGroups(): shapes.RedshiftEc2SecurityGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeClusterSecurityGroupIngress',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeClusterSecurityGroupIngress.ClusterSecurityGroup.EC2SecurityGroups'),
        outputPath: 'ClusterSecurityGroup.EC2SecurityGroups',
        parameters: {
          ClusterSecurityGroupName: this.input.clusterSecurityGroupName,
          CIDRIP: this.input.cidrip,
          EC2SecurityGroupName: this.input.ec2SecurityGroupName,
          EC2SecurityGroupOwnerId: this.input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeClusterSecurityGroupIngress.ClusterSecurityGroup.EC2SecurityGroups', props);
    return resource.getResponseField('ClusterSecurityGroup.EC2SecurityGroups') as unknown as shapes.RedshiftEc2SecurityGroup[];
  }

  public get ipRanges(): shapes.RedshiftIpRange[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeClusterSecurityGroupIngress',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeClusterSecurityGroupIngress.ClusterSecurityGroup.IPRanges'),
        outputPath: 'ClusterSecurityGroup.IPRanges',
        parameters: {
          ClusterSecurityGroupName: this.input.clusterSecurityGroupName,
          CIDRIP: this.input.cidrip,
          EC2SecurityGroupName: this.input.ec2SecurityGroupName,
          EC2SecurityGroupOwnerId: this.input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeClusterSecurityGroupIngress.ClusterSecurityGroup.IPRanges', props);
    return resource.getResponseField('ClusterSecurityGroup.IPRanges') as unknown as shapes.RedshiftIpRange[];
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeClusterSecurityGroupIngress',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeClusterSecurityGroupIngress.ClusterSecurityGroup.Tags'),
        outputPath: 'ClusterSecurityGroup.Tags',
        parameters: {
          ClusterSecurityGroupName: this.input.clusterSecurityGroupName,
          CIDRIP: this.input.cidrip,
          EC2SecurityGroupName: this.input.ec2SecurityGroupName,
          EC2SecurityGroupOwnerId: this.input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeClusterSecurityGroupIngress.ClusterSecurityGroup.Tags', props);
    return resource.getResponseField('ClusterSecurityGroup.Tags') as unknown as shapes.RedshiftTag[];
  }

}

export class RedshiftRevokeSnapshotAccess extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRevokeSnapshotAccessMessage) {
    super(scope, id);
  }

  public get snapshot(): RedshiftRevokeSnapshotAccessSnapshot {
    return new RedshiftRevokeSnapshotAccessSnapshot(this, 'Snapshot', this.__resources, this.input);
  }

}

export class RedshiftRevokeSnapshotAccessSnapshot extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRevokeSnapshotAccessMessage) {
    super(scope, id);
  }

  public get snapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.SnapshotIdentifier'),
        outputPath: 'Snapshot.SnapshotIdentifier',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSnapshotAccess.Snapshot.SnapshotIdentifier', props);
    return resource.getResponseField('Snapshot.SnapshotIdentifier') as unknown as string;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.ClusterIdentifier'),
        outputPath: 'Snapshot.ClusterIdentifier',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSnapshotAccess.Snapshot.ClusterIdentifier', props);
    return resource.getResponseField('Snapshot.ClusterIdentifier') as unknown as string;
  }

  public get snapshotCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.SnapshotCreateTime'),
        outputPath: 'Snapshot.SnapshotCreateTime',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSnapshotAccess.Snapshot.SnapshotCreateTime', props);
    return resource.getResponseField('Snapshot.SnapshotCreateTime') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.Status'),
        outputPath: 'Snapshot.Status',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSnapshotAccess.Snapshot.Status', props);
    return resource.getResponseField('Snapshot.Status') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.Port'),
        outputPath: 'Snapshot.Port',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSnapshotAccess.Snapshot.Port', props);
    return resource.getResponseField('Snapshot.Port') as unknown as number;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.AvailabilityZone'),
        outputPath: 'Snapshot.AvailabilityZone',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSnapshotAccess.Snapshot.AvailabilityZone', props);
    return resource.getResponseField('Snapshot.AvailabilityZone') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.ClusterCreateTime'),
        outputPath: 'Snapshot.ClusterCreateTime',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSnapshotAccess.Snapshot.ClusterCreateTime', props);
    return resource.getResponseField('Snapshot.ClusterCreateTime') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.MasterUsername'),
        outputPath: 'Snapshot.MasterUsername',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSnapshotAccess.Snapshot.MasterUsername', props);
    return resource.getResponseField('Snapshot.MasterUsername') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.ClusterVersion'),
        outputPath: 'Snapshot.ClusterVersion',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSnapshotAccess.Snapshot.ClusterVersion', props);
    return resource.getResponseField('Snapshot.ClusterVersion') as unknown as string;
  }

  public get snapshotType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.SnapshotType'),
        outputPath: 'Snapshot.SnapshotType',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSnapshotAccess.Snapshot.SnapshotType', props);
    return resource.getResponseField('Snapshot.SnapshotType') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.NodeType'),
        outputPath: 'Snapshot.NodeType',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSnapshotAccess.Snapshot.NodeType', props);
    return resource.getResponseField('Snapshot.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.NumberOfNodes'),
        outputPath: 'Snapshot.NumberOfNodes',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSnapshotAccess.Snapshot.NumberOfNodes', props);
    return resource.getResponseField('Snapshot.NumberOfNodes') as unknown as number;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.DBName'),
        outputPath: 'Snapshot.DBName',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSnapshotAccess.Snapshot.DBName', props);
    return resource.getResponseField('Snapshot.DBName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.VpcId'),
        outputPath: 'Snapshot.VpcId',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSnapshotAccess.Snapshot.VpcId', props);
    return resource.getResponseField('Snapshot.VpcId') as unknown as string;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.Encrypted'),
        outputPath: 'Snapshot.Encrypted',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSnapshotAccess.Snapshot.Encrypted', props);
    return resource.getResponseField('Snapshot.Encrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.KmsKeyId'),
        outputPath: 'Snapshot.KmsKeyId',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSnapshotAccess.Snapshot.KmsKeyId', props);
    return resource.getResponseField('Snapshot.KmsKeyId') as unknown as string;
  }

  public get encryptedWithHsm(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.EncryptedWithHSM'),
        outputPath: 'Snapshot.EncryptedWithHSM',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSnapshotAccess.Snapshot.EncryptedWithHSM', props);
    return resource.getResponseField('Snapshot.EncryptedWithHSM') as unknown as boolean;
  }

  public get accountsWithRestoreAccess(): shapes.RedshiftAccountWithRestoreAccess[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.AccountsWithRestoreAccess'),
        outputPath: 'Snapshot.AccountsWithRestoreAccess',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSnapshotAccess.Snapshot.AccountsWithRestoreAccess', props);
    return resource.getResponseField('Snapshot.AccountsWithRestoreAccess') as unknown as shapes.RedshiftAccountWithRestoreAccess[];
  }

  public get ownerAccount(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.OwnerAccount'),
        outputPath: 'Snapshot.OwnerAccount',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSnapshotAccess.Snapshot.OwnerAccount', props);
    return resource.getResponseField('Snapshot.OwnerAccount') as unknown as string;
  }

  public get totalBackupSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.TotalBackupSizeInMegaBytes'),
        outputPath: 'Snapshot.TotalBackupSizeInMegaBytes',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSnapshotAccess.Snapshot.TotalBackupSizeInMegaBytes', props);
    return resource.getResponseField('Snapshot.TotalBackupSizeInMegaBytes') as unknown as number;
  }

  public get actualIncrementalBackupSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.ActualIncrementalBackupSizeInMegaBytes'),
        outputPath: 'Snapshot.ActualIncrementalBackupSizeInMegaBytes',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSnapshotAccess.Snapshot.ActualIncrementalBackupSizeInMegaBytes', props);
    return resource.getResponseField('Snapshot.ActualIncrementalBackupSizeInMegaBytes') as unknown as number;
  }

  public get backupProgressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.BackupProgressInMegaBytes'),
        outputPath: 'Snapshot.BackupProgressInMegaBytes',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSnapshotAccess.Snapshot.BackupProgressInMegaBytes', props);
    return resource.getResponseField('Snapshot.BackupProgressInMegaBytes') as unknown as number;
  }

  public get currentBackupRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.CurrentBackupRateInMegaBytesPerSecond'),
        outputPath: 'Snapshot.CurrentBackupRateInMegaBytesPerSecond',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSnapshotAccess.Snapshot.CurrentBackupRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Snapshot.CurrentBackupRateInMegaBytesPerSecond') as unknown as number;
  }

  public get estimatedSecondsToCompletion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.EstimatedSecondsToCompletion'),
        outputPath: 'Snapshot.EstimatedSecondsToCompletion',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSnapshotAccess.Snapshot.EstimatedSecondsToCompletion', props);
    return resource.getResponseField('Snapshot.EstimatedSecondsToCompletion') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.ElapsedTimeInSeconds'),
        outputPath: 'Snapshot.ElapsedTimeInSeconds',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSnapshotAccess.Snapshot.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Snapshot.ElapsedTimeInSeconds') as unknown as number;
  }

  public get sourceRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.SourceRegion'),
        outputPath: 'Snapshot.SourceRegion',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSnapshotAccess.Snapshot.SourceRegion', props);
    return resource.getResponseField('Snapshot.SourceRegion') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.Tags'),
        outputPath: 'Snapshot.Tags',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSnapshotAccess.Snapshot.Tags', props);
    return resource.getResponseField('Snapshot.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get restorableNodeTypes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.RestorableNodeTypes'),
        outputPath: 'Snapshot.RestorableNodeTypes',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSnapshotAccess.Snapshot.RestorableNodeTypes', props);
    return resource.getResponseField('Snapshot.RestorableNodeTypes') as unknown as string[];
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.EnhancedVpcRouting'),
        outputPath: 'Snapshot.EnhancedVpcRouting',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSnapshotAccess.Snapshot.EnhancedVpcRouting', props);
    return resource.getResponseField('Snapshot.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.MaintenanceTrackName'),
        outputPath: 'Snapshot.MaintenanceTrackName',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSnapshotAccess.Snapshot.MaintenanceTrackName', props);
    return resource.getResponseField('Snapshot.MaintenanceTrackName') as unknown as string;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.ManualSnapshotRetentionPeriod'),
        outputPath: 'Snapshot.ManualSnapshotRetentionPeriod',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSnapshotAccess.Snapshot.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Snapshot.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRemainingDays(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.ManualSnapshotRemainingDays'),
        outputPath: 'Snapshot.ManualSnapshotRemainingDays',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSnapshotAccess.Snapshot.ManualSnapshotRemainingDays', props);
    return resource.getResponseField('Snapshot.ManualSnapshotRemainingDays') as unknown as number;
  }

  public get snapshotRetentionStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.SnapshotRetentionStartTime'),
        outputPath: 'Snapshot.SnapshotRetentionStartTime',
        parameters: {
          SnapshotIdentifier: this.input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSnapshotAccess.Snapshot.SnapshotRetentionStartTime', props);
    return resource.getResponseField('Snapshot.SnapshotRetentionStartTime') as unknown as string;
  }

}

export class RedshiftRotateEncryptionKey extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRotateEncryptionKeyMessage) {
    super(scope, id);
  }

  public get cluster(): RedshiftRotateEncryptionKeyCluster {
    return new RedshiftRotateEncryptionKeyCluster(this, 'Cluster', this.__resources, this.input);
  }

}

export class RedshiftRotateEncryptionKeyCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRotateEncryptionKeyMessage) {
    super(scope, id);
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ClusterIdentifier'),
        outputPath: 'Cluster.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.ClusterIdentifier') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.NodeType'),
        outputPath: 'Cluster.NodeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.NodeType', props);
    return resource.getResponseField('Cluster.NodeType') as unknown as string;
  }

  public get clusterStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ClusterStatus'),
        outputPath: 'Cluster.ClusterStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.ClusterStatus', props);
    return resource.getResponseField('Cluster.ClusterStatus') as unknown as string;
  }

  public get clusterAvailabilityStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ClusterAvailabilityStatus'),
        outputPath: 'Cluster.ClusterAvailabilityStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.ClusterAvailabilityStatus', props);
    return resource.getResponseField('Cluster.ClusterAvailabilityStatus') as unknown as string;
  }

  public get modifyStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ModifyStatus'),
        outputPath: 'Cluster.ModifyStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.ModifyStatus', props);
    return resource.getResponseField('Cluster.ModifyStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.MasterUsername'),
        outputPath: 'Cluster.MasterUsername',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.MasterUsername', props);
    return resource.getResponseField('Cluster.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.DBName'),
        outputPath: 'Cluster.DBName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.DBName', props);
    return resource.getResponseField('Cluster.DBName') as unknown as string;
  }

  public get endpoint(): RedshiftRotateEncryptionKeyClusterEndpoint {
    return new RedshiftRotateEncryptionKeyClusterEndpoint(this, 'Endpoint', this.__resources, this.input);
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ClusterCreateTime'),
        outputPath: 'Cluster.ClusterCreateTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.ClusterCreateTime', props);
    return resource.getResponseField('Cluster.ClusterCreateTime') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterSecurityGroups(): shapes.RedshiftClusterSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ClusterSecurityGroups'),
        outputPath: 'Cluster.ClusterSecurityGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.ClusterSecurityGroups', props);
    return resource.getResponseField('Cluster.ClusterSecurityGroups') as unknown as shapes.RedshiftClusterSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RedshiftVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.VpcSecurityGroups'),
        outputPath: 'Cluster.VpcSecurityGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.VpcSecurityGroups', props);
    return resource.getResponseField('Cluster.VpcSecurityGroups') as unknown as shapes.RedshiftVpcSecurityGroupMembership[];
  }

  public get clusterParameterGroups(): shapes.RedshiftClusterParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ClusterParameterGroups'),
        outputPath: 'Cluster.ClusterParameterGroups',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.ClusterParameterGroups', props);
    return resource.getResponseField('Cluster.ClusterParameterGroups') as unknown as shapes.RedshiftClusterParameterGroupStatus[];
  }

  public get clusterSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ClusterSubnetGroupName'),
        outputPath: 'Cluster.ClusterSubnetGroupName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.ClusterSubnetGroupName', props);
    return resource.getResponseField('Cluster.ClusterSubnetGroupName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.VpcId'),
        outputPath: 'Cluster.VpcId',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.VpcId', props);
    return resource.getResponseField('Cluster.VpcId') as unknown as string;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.AvailabilityZone'),
        outputPath: 'Cluster.AvailabilityZone',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.AvailabilityZone', props);
    return resource.getResponseField('Cluster.AvailabilityZone') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.PreferredMaintenanceWindow'),
        outputPath: 'Cluster.PreferredMaintenanceWindow',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('Cluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RedshiftRotateEncryptionKeyClusterPendingModifiedValues {
    return new RedshiftRotateEncryptionKeyClusterPendingModifiedValues(this, 'PendingModifiedValues', this.__resources, this.input);
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ClusterVersion'),
        outputPath: 'Cluster.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.ClusterVersion', props);
    return resource.getResponseField('Cluster.ClusterVersion') as unknown as string;
  }

  public get allowVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.AllowVersionUpgrade'),
        outputPath: 'Cluster.AllowVersionUpgrade',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.AllowVersionUpgrade', props);
    return resource.getResponseField('Cluster.AllowVersionUpgrade') as unknown as boolean;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.NumberOfNodes'),
        outputPath: 'Cluster.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.NumberOfNodes', props);
    return resource.getResponseField('Cluster.NumberOfNodes') as unknown as number;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.PubliclyAccessible'),
        outputPath: 'Cluster.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PubliclyAccessible') as unknown as boolean;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.Encrypted'),
        outputPath: 'Cluster.Encrypted',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.Encrypted', props);
    return resource.getResponseField('Cluster.Encrypted') as unknown as boolean;
  }

  public get restoreStatus(): RedshiftRotateEncryptionKeyClusterRestoreStatus {
    return new RedshiftRotateEncryptionKeyClusterRestoreStatus(this, 'RestoreStatus', this.__resources, this.input);
  }

  public get dataTransferProgress(): RedshiftRotateEncryptionKeyClusterDataTransferProgress {
    return new RedshiftRotateEncryptionKeyClusterDataTransferProgress(this, 'DataTransferProgress', this.__resources, this.input);
  }

  public get hsmStatus(): RedshiftRotateEncryptionKeyClusterHsmStatus {
    return new RedshiftRotateEncryptionKeyClusterHsmStatus(this, 'HsmStatus', this.__resources, this.input);
  }

  public get clusterSnapshotCopyStatus(): RedshiftRotateEncryptionKeyClusterClusterSnapshotCopyStatus {
    return new RedshiftRotateEncryptionKeyClusterClusterSnapshotCopyStatus(this, 'ClusterSnapshotCopyStatus', this.__resources, this.input);
  }

  public get clusterPublicKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ClusterPublicKey'),
        outputPath: 'Cluster.ClusterPublicKey',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.ClusterPublicKey', props);
    return resource.getResponseField('Cluster.ClusterPublicKey') as unknown as string;
  }

  public get clusterNodes(): shapes.RedshiftClusterNode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ClusterNodes'),
        outputPath: 'Cluster.ClusterNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.ClusterNodes', props);
    return resource.getResponseField('Cluster.ClusterNodes') as unknown as shapes.RedshiftClusterNode[];
  }

  public get elasticIpStatus(): RedshiftRotateEncryptionKeyClusterElasticIpStatus {
    return new RedshiftRotateEncryptionKeyClusterElasticIpStatus(this, 'ElasticIpStatus', this.__resources, this.input);
  }

  public get clusterRevisionNumber(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ClusterRevisionNumber'),
        outputPath: 'Cluster.ClusterRevisionNumber',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.ClusterRevisionNumber', props);
    return resource.getResponseField('Cluster.ClusterRevisionNumber') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.Tags'),
        outputPath: 'Cluster.Tags',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.Tags', props);
    return resource.getResponseField('Cluster.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.KmsKeyId'),
        outputPath: 'Cluster.KmsKeyId',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.KmsKeyId', props);
    return resource.getResponseField('Cluster.KmsKeyId') as unknown as string;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.EnhancedVpcRouting'),
        outputPath: 'Cluster.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.EnhancedVpcRouting') as unknown as boolean;
  }

  public get iamRoles(): shapes.RedshiftClusterIamRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.IamRoles'),
        outputPath: 'Cluster.IamRoles',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.IamRoles', props);
    return resource.getResponseField('Cluster.IamRoles') as unknown as shapes.RedshiftClusterIamRole[];
  }

  public get pendingActions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.PendingActions'),
        outputPath: 'Cluster.PendingActions',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.PendingActions', props);
    return resource.getResponseField('Cluster.PendingActions') as unknown as string[];
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.MaintenanceTrackName'),
        outputPath: 'Cluster.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.MaintenanceTrackName') as unknown as string;
  }

  public get elasticResizeNumberOfNodeOptions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ElasticResizeNumberOfNodeOptions'),
        outputPath: 'Cluster.ElasticResizeNumberOfNodeOptions',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.ElasticResizeNumberOfNodeOptions', props);
    return resource.getResponseField('Cluster.ElasticResizeNumberOfNodeOptions') as unknown as string;
  }

  public get deferredMaintenanceWindows(): shapes.RedshiftDeferredMaintenanceWindow[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.DeferredMaintenanceWindows'),
        outputPath: 'Cluster.DeferredMaintenanceWindows',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.DeferredMaintenanceWindows', props);
    return resource.getResponseField('Cluster.DeferredMaintenanceWindows') as unknown as shapes.RedshiftDeferredMaintenanceWindow[];
  }

  public get snapshotScheduleIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.SnapshotScheduleIdentifier'),
        outputPath: 'Cluster.SnapshotScheduleIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.SnapshotScheduleIdentifier', props);
    return resource.getResponseField('Cluster.SnapshotScheduleIdentifier') as unknown as string;
  }

  public get snapshotScheduleState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.SnapshotScheduleState'),
        outputPath: 'Cluster.SnapshotScheduleState',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.SnapshotScheduleState', props);
    return resource.getResponseField('Cluster.SnapshotScheduleState') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ExpectedNextSnapshotScheduleTime'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.ExpectedNextSnapshotScheduleTime', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTime') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTimeStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ExpectedNextSnapshotScheduleTimeStatus'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTimeStatus',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.ExpectedNextSnapshotScheduleTimeStatus', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTimeStatus') as unknown as string;
  }

  public get nextMaintenanceWindowStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.NextMaintenanceWindowStartTime'),
        outputPath: 'Cluster.NextMaintenanceWindowStartTime',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.NextMaintenanceWindowStartTime', props);
    return resource.getResponseField('Cluster.NextMaintenanceWindowStartTime') as unknown as string;
  }

  public get resizeInfo(): RedshiftRotateEncryptionKeyClusterResizeInfo {
    return new RedshiftRotateEncryptionKeyClusterResizeInfo(this, 'ResizeInfo', this.__resources, this.input);
  }

  public get clusterNamespaceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ClusterNamespaceArn'),
        outputPath: 'Cluster.ClusterNamespaceArn',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.ClusterNamespaceArn', props);
    return resource.getResponseField('Cluster.ClusterNamespaceArn') as unknown as string;
  }

}

export class RedshiftRotateEncryptionKeyClusterEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRotateEncryptionKeyMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.Endpoint.Address'),
        outputPath: 'Cluster.Endpoint.Address',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.Endpoint.Address', props);
    return resource.getResponseField('Cluster.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.Endpoint.Port'),
        outputPath: 'Cluster.Endpoint.Port',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.Endpoint.Port', props);
    return resource.getResponseField('Cluster.Endpoint.Port') as unknown as number;
  }

}

export class RedshiftRotateEncryptionKeyClusterPendingModifiedValues extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRotateEncryptionKeyMessage) {
    super(scope, id);
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'Cluster.PendingModifiedValues.MasterUserPassword',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.PendingModifiedValues.NodeType'),
        outputPath: 'Cluster.PendingModifiedValues.NodeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.PendingModifiedValues.NodeType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.PendingModifiedValues.NumberOfNodes'),
        outputPath: 'Cluster.PendingModifiedValues.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.PendingModifiedValues.NumberOfNodes', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NumberOfNodes') as unknown as number;
  }

  public get clusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.PendingModifiedValues.ClusterType'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.PendingModifiedValues.ClusterType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterType') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.PendingModifiedValues.ClusterVersion'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.PendingModifiedValues.ClusterVersion', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterVersion') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.PendingModifiedValues.ClusterIdentifier'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.PendingModifiedValues.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterIdentifier') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.PendingModifiedValues.PubliclyAccessible'),
        outputPath: 'Cluster.PendingModifiedValues.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.PendingModifiedValues.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.PubliclyAccessible') as unknown as boolean;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.PendingModifiedValues.EnhancedVpcRouting'),
        outputPath: 'Cluster.PendingModifiedValues.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.PendingModifiedValues.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.PendingModifiedValues.MaintenanceTrackName'),
        outputPath: 'Cluster.PendingModifiedValues.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.PendingModifiedValues.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MaintenanceTrackName') as unknown as string;
  }

  public get encryptionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.PendingModifiedValues.EncryptionType'),
        outputPath: 'Cluster.PendingModifiedValues.EncryptionType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.PendingModifiedValues.EncryptionType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EncryptionType') as unknown as string;
  }

}

export class RedshiftRotateEncryptionKeyClusterRestoreStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRotateEncryptionKeyMessage) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.RestoreStatus.Status'),
        outputPath: 'Cluster.RestoreStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.RestoreStatus.Status', props);
    return resource.getResponseField('Cluster.RestoreStatus.Status') as unknown as string;
  }

  public get currentRestoreRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond') as unknown as number;
  }

  public get snapshotSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.RestoreStatus.SnapshotSizeInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.SnapshotSizeInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.RestoreStatus.SnapshotSizeInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.SnapshotSizeInMegaBytes') as unknown as number;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.RestoreStatus.ProgressInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.ProgressInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.RestoreStatus.ProgressInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.ProgressInMegaBytes') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.RestoreStatus.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.RestoreStatus.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.RestoreStatus.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.ElapsedTimeInSeconds') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

}

export class RedshiftRotateEncryptionKeyClusterDataTransferProgress extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRotateEncryptionKeyMessage) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.DataTransferProgress.Status'),
        outputPath: 'Cluster.DataTransferProgress.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.DataTransferProgress.Status', props);
    return resource.getResponseField('Cluster.DataTransferProgress.Status') as unknown as string;
  }

  public get currentRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond') as unknown as number;
  }

  public get totalDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.DataTransferProgress.TotalDataInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.TotalDataInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.DataTransferProgress.TotalDataInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.TotalDataInMegaBytes') as unknown as number;
  }

  public get dataTransferredInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.DataTransferProgress.DataTransferredInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.DataTransferredInMegaBytes',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.DataTransferProgress.DataTransferredInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.DataTransferredInMegaBytes') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.DataTransferProgress.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.DataTransferProgress.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.ElapsedTimeInSeconds') as unknown as number;
  }

}

export class RedshiftRotateEncryptionKeyClusterHsmStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRotateEncryptionKeyMessage) {
    super(scope, id);
  }

  public get hsmClientCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.HsmStatus.HsmClientCertificateIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmClientCertificateIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.HsmStatus.HsmClientCertificateIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmClientCertificateIdentifier') as unknown as string;
  }

  public get hsmConfigurationIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.HsmStatus.HsmConfigurationIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmConfigurationIdentifier',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.HsmStatus.HsmConfigurationIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmConfigurationIdentifier') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.HsmStatus.Status'),
        outputPath: 'Cluster.HsmStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.HsmStatus.Status', props);
    return resource.getResponseField('Cluster.HsmStatus.Status') as unknown as string;
  }

}

export class RedshiftRotateEncryptionKeyClusterClusterSnapshotCopyStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRotateEncryptionKeyMessage) {
    super(scope, id);
  }

  public get destinationRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ClusterSnapshotCopyStatus.DestinationRegion'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.DestinationRegion',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.ClusterSnapshotCopyStatus.DestinationRegion', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.DestinationRegion') as unknown as string;
  }

  public get retentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.RetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.RetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get snapshotCopyGrantName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName') as unknown as string;
  }

}

export class RedshiftRotateEncryptionKeyClusterElasticIpStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRotateEncryptionKeyMessage) {
    super(scope, id);
  }

  public get elasticIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ElasticIpStatus.ElasticIp'),
        outputPath: 'Cluster.ElasticIpStatus.ElasticIp',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.ElasticIpStatus.ElasticIp', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.ElasticIp') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ElasticIpStatus.Status'),
        outputPath: 'Cluster.ElasticIpStatus.Status',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.ElasticIpStatus.Status', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.Status') as unknown as string;
  }

}

export class RedshiftRotateEncryptionKeyClusterResizeInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RedshiftRotateEncryptionKeyMessage) {
    super(scope, id);
  }

  public get resizeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ResizeInfo.ResizeType'),
        outputPath: 'Cluster.ResizeInfo.ResizeType',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.ResizeInfo.ResizeType', props);
    return resource.getResponseField('Cluster.ResizeInfo.ResizeType') as unknown as string;
  }

  public get allowCancelResize(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ResizeInfo.AllowCancelResize'),
        outputPath: 'Cluster.ResizeInfo.AllowCancelResize',
        parameters: {
          ClusterIdentifier: this.input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateEncryptionKey.Cluster.ResizeInfo.AllowCancelResize', props);
    return resource.getResponseField('Cluster.ResizeInfo.AllowCancelResize') as unknown as boolean;
  }

}

