import * as cdk from '@aws-cdk/core';
import * as cr from '@aws-cdk/custom-resources';
import * as shapes from './shapes';

export class RedshiftClient extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[]) {
    super(scope, id);
  }

  public acceptReservedNodeExchange(input: shapes.RedshiftAcceptReservedNodeExchangeInputMessage): RedshiftResponsesAcceptReservedNodeExchange {
    return new RedshiftResponsesAcceptReservedNodeExchange(this, this.__resources, input);
  }

  public addPartner(input: shapes.RedshiftPartnerIntegrationInputMessage): RedshiftResponsesAddPartner {
    return new RedshiftResponsesAddPartner(this, this.__resources, input);
  }

  public associateDataShareConsumer(input: shapes.RedshiftAssociateDataShareConsumerMessage): RedshiftResponsesAssociateDataShareConsumer {
    return new RedshiftResponsesAssociateDataShareConsumer(this, this.__resources, input);
  }

  public authorizeClusterSecurityGroupIngress(input: shapes.RedshiftAuthorizeClusterSecurityGroupIngressMessage): RedshiftResponsesAuthorizeClusterSecurityGroupIngress {
    return new RedshiftResponsesAuthorizeClusterSecurityGroupIngress(this, this.__resources, input);
  }

  public authorizeDataShare(input: shapes.RedshiftAuthorizeDataShareMessage): RedshiftResponsesAuthorizeDataShare {
    return new RedshiftResponsesAuthorizeDataShare(this, this.__resources, input);
  }

  public authorizeEndpointAccess(input: shapes.RedshiftAuthorizeEndpointAccessMessage): RedshiftResponsesAuthorizeEndpointAccess {
    return new RedshiftResponsesAuthorizeEndpointAccess(this, this.__resources, input);
  }

  public authorizeSnapshotAccess(input: shapes.RedshiftAuthorizeSnapshotAccessMessage): RedshiftResponsesAuthorizeSnapshotAccess {
    return new RedshiftResponsesAuthorizeSnapshotAccess(this, this.__resources, input);
  }

  public batchDeleteClusterSnapshots(input: shapes.RedshiftBatchDeleteClusterSnapshotsRequest): RedshiftResponsesBatchDeleteClusterSnapshots {
    return new RedshiftResponsesBatchDeleteClusterSnapshots(this, this.__resources, input);
  }

  public batchModifyClusterSnapshots(input: shapes.RedshiftBatchModifyClusterSnapshotsMessage): RedshiftResponsesBatchModifyClusterSnapshots {
    return new RedshiftResponsesBatchModifyClusterSnapshots(this, this.__resources, input);
  }

  public cancelResize(input: shapes.RedshiftCancelResizeMessage): RedshiftResponsesCancelResize {
    return new RedshiftResponsesCancelResize(this, this.__resources, input);
  }

  public copyClusterSnapshot(input: shapes.RedshiftCopyClusterSnapshotMessage): RedshiftResponsesCopyClusterSnapshot {
    return new RedshiftResponsesCopyClusterSnapshot(this, this.__resources, input);
  }

  public createAuthenticationProfile(input: shapes.RedshiftCreateAuthenticationProfileMessage): RedshiftResponsesCreateAuthenticationProfile {
    return new RedshiftResponsesCreateAuthenticationProfile(this, this.__resources, input);
  }

  public createCluster(input: shapes.RedshiftCreateClusterMessage): RedshiftResponsesCreateCluster {
    return new RedshiftResponsesCreateCluster(this, this.__resources, input);
  }

  public createClusterParameterGroup(input: shapes.RedshiftCreateClusterParameterGroupMessage): RedshiftResponsesCreateClusterParameterGroup {
    return new RedshiftResponsesCreateClusterParameterGroup(this, this.__resources, input);
  }

  public createClusterSecurityGroup(input: shapes.RedshiftCreateClusterSecurityGroupMessage): RedshiftResponsesCreateClusterSecurityGroup {
    return new RedshiftResponsesCreateClusterSecurityGroup(this, this.__resources, input);
  }

  public createClusterSnapshot(input: shapes.RedshiftCreateClusterSnapshotMessage): RedshiftResponsesCreateClusterSnapshot {
    return new RedshiftResponsesCreateClusterSnapshot(this, this.__resources, input);
  }

  public createClusterSubnetGroup(input: shapes.RedshiftCreateClusterSubnetGroupMessage): RedshiftResponsesCreateClusterSubnetGroup {
    return new RedshiftResponsesCreateClusterSubnetGroup(this, this.__resources, input);
  }

  public createEndpointAccess(input: shapes.RedshiftCreateEndpointAccessMessage): RedshiftResponsesCreateEndpointAccess {
    return new RedshiftResponsesCreateEndpointAccess(this, this.__resources, input);
  }

  public createEventSubscription(input: shapes.RedshiftCreateEventSubscriptionMessage): RedshiftResponsesCreateEventSubscription {
    return new RedshiftResponsesCreateEventSubscription(this, this.__resources, input);
  }

  public createHsmClientCertificate(input: shapes.RedshiftCreateHsmClientCertificateMessage): RedshiftResponsesCreateHsmClientCertificate {
    return new RedshiftResponsesCreateHsmClientCertificate(this, this.__resources, input);
  }

  public createHsmConfiguration(input: shapes.RedshiftCreateHsmConfigurationMessage): RedshiftResponsesCreateHsmConfiguration {
    return new RedshiftResponsesCreateHsmConfiguration(this, this.__resources, input);
  }

  public createScheduledAction(input: shapes.RedshiftCreateScheduledActionMessage): RedshiftResponsesCreateScheduledAction {
    return new RedshiftResponsesCreateScheduledAction(this, this.__resources, input);
  }

  public createSnapshotCopyGrant(input: shapes.RedshiftCreateSnapshotCopyGrantMessage): RedshiftResponsesCreateSnapshotCopyGrant {
    return new RedshiftResponsesCreateSnapshotCopyGrant(this, this.__resources, input);
  }

  public createSnapshotSchedule(input: shapes.RedshiftCreateSnapshotScheduleMessage): RedshiftResponsesCreateSnapshotSchedule {
    return new RedshiftResponsesCreateSnapshotSchedule(this, this.__resources, input);
  }

  public createTags(input: shapes.RedshiftCreateTagsMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTags',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateTags'),
        parameters: {
          ResourceName: input.resourceName,
          Tags: input.tags,
        },
      },
    };
    new cr.AwsCustomResource(this, 'CreateTags', props);
  }

  public createUsageLimit(input: shapes.RedshiftCreateUsageLimitMessage): RedshiftResponsesCreateUsageLimit {
    return new RedshiftResponsesCreateUsageLimit(this, this.__resources, input);
  }

  public deauthorizeDataShare(input: shapes.RedshiftDeauthorizeDataShareMessage): RedshiftResponsesDeauthorizeDataShare {
    return new RedshiftResponsesDeauthorizeDataShare(this, this.__resources, input);
  }

  public deleteAuthenticationProfile(input: shapes.RedshiftDeleteAuthenticationProfileMessage): RedshiftResponsesDeleteAuthenticationProfile {
    return new RedshiftResponsesDeleteAuthenticationProfile(this, this.__resources, input);
  }

  public deleteCluster(input: shapes.RedshiftDeleteClusterMessage): RedshiftResponsesDeleteCluster {
    return new RedshiftResponsesDeleteCluster(this, this.__resources, input);
  }

  public deleteClusterParameterGroup(input: shapes.RedshiftDeleteClusterParameterGroupMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterParameterGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterParameterGroup'),
        parameters: {
          ParameterGroupName: input.parameterGroupName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteClusterParameterGroup', props);
  }

  public deleteClusterSecurityGroup(input: shapes.RedshiftDeleteClusterSecurityGroupMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSecurityGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSecurityGroup'),
        parameters: {
          ClusterSecurityGroupName: input.clusterSecurityGroupName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteClusterSecurityGroup', props);
  }

  public deleteClusterSnapshot(input: shapes.RedshiftDeleteClusterSnapshotMessage): RedshiftResponsesDeleteClusterSnapshot {
    return new RedshiftResponsesDeleteClusterSnapshot(this, this.__resources, input);
  }

  public deleteClusterSubnetGroup(input: shapes.RedshiftDeleteClusterSubnetGroupMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSubnetGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSubnetGroup'),
        parameters: {
          ClusterSubnetGroupName: input.clusterSubnetGroupName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteClusterSubnetGroup', props);
  }

  public deleteEndpointAccess(input: shapes.RedshiftDeleteEndpointAccessMessage): RedshiftResponsesDeleteEndpointAccess {
    return new RedshiftResponsesDeleteEndpointAccess(this, this.__resources, input);
  }

  public deleteEventSubscription(input: shapes.RedshiftDeleteEventSubscriptionMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteEventSubscription'),
        parameters: {
          SubscriptionName: input.subscriptionName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteEventSubscription', props);
  }

  public deleteHsmClientCertificate(input: shapes.RedshiftDeleteHsmClientCertificateMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteHsmClientCertificate',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteHsmClientCertificate'),
        parameters: {
          HsmClientCertificateIdentifier: input.hsmClientCertificateIdentifier,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteHsmClientCertificate', props);
  }

  public deleteHsmConfiguration(input: shapes.RedshiftDeleteHsmConfigurationMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteHsmConfiguration',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteHsmConfiguration'),
        parameters: {
          HsmConfigurationIdentifier: input.hsmConfigurationIdentifier,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteHsmConfiguration', props);
  }

  public deletePartner(input: shapes.RedshiftPartnerIntegrationInputMessage): RedshiftResponsesDeletePartner {
    return new RedshiftResponsesDeletePartner(this, this.__resources, input);
  }

  public deleteScheduledAction(input: shapes.RedshiftDeleteScheduledActionMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteScheduledAction'),
        parameters: {
          ScheduledActionName: input.scheduledActionName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteScheduledAction', props);
  }

  public deleteSnapshotCopyGrant(input: shapes.RedshiftDeleteSnapshotCopyGrantMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteSnapshotCopyGrant',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteSnapshotCopyGrant'),
        parameters: {
          SnapshotCopyGrantName: input.snapshotCopyGrantName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteSnapshotCopyGrant', props);
  }

  public deleteSnapshotSchedule(input: shapes.RedshiftDeleteSnapshotScheduleMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteSnapshotSchedule',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteSnapshotSchedule'),
        parameters: {
          ScheduleIdentifier: input.scheduleIdentifier,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteSnapshotSchedule', props);
  }

  public deleteTags(input: shapes.RedshiftDeleteTagsMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTags',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteTags'),
        parameters: {
          ResourceName: input.resourceName,
          TagKeys: input.tagKeys,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteTags', props);
  }

  public deleteUsageLimit(input: shapes.RedshiftDeleteUsageLimitMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteUsageLimit',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteUsageLimit'),
        parameters: {
          UsageLimitId: input.usageLimitId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteUsageLimit', props);
  }

  public describeAccountAttributes(input: shapes.RedshiftDescribeAccountAttributesMessage): RedshiftResponsesDescribeAccountAttributes {
    return new RedshiftResponsesDescribeAccountAttributes(this, this.__resources, input);
  }

  public describeAuthenticationProfiles(input: shapes.RedshiftDescribeAuthenticationProfilesMessage): RedshiftResponsesDescribeAuthenticationProfiles {
    return new RedshiftResponsesDescribeAuthenticationProfiles(this, this.__resources, input);
  }

  public describeClusterDbRevisions(input: shapes.RedshiftDescribeClusterDbRevisionsMessage): RedshiftResponsesDescribeClusterDbRevisions {
    return new RedshiftResponsesDescribeClusterDbRevisions(this, this.__resources, input);
  }

  public describeClusterParameterGroups(input: shapes.RedshiftDescribeClusterParameterGroupsMessage): RedshiftResponsesDescribeClusterParameterGroups {
    return new RedshiftResponsesDescribeClusterParameterGroups(this, this.__resources, input);
  }

  public describeClusterParameters(input: shapes.RedshiftDescribeClusterParametersMessage): RedshiftResponsesDescribeClusterParameters {
    return new RedshiftResponsesDescribeClusterParameters(this, this.__resources, input);
  }

  public describeClusterSecurityGroups(input: shapes.RedshiftDescribeClusterSecurityGroupsMessage): RedshiftResponsesDescribeClusterSecurityGroups {
    return new RedshiftResponsesDescribeClusterSecurityGroups(this, this.__resources, input);
  }

  public describeClusterSnapshots(input: shapes.RedshiftDescribeClusterSnapshotsMessage): RedshiftResponsesDescribeClusterSnapshots {
    return new RedshiftResponsesDescribeClusterSnapshots(this, this.__resources, input);
  }

  public describeClusterSubnetGroups(input: shapes.RedshiftDescribeClusterSubnetGroupsMessage): RedshiftResponsesDescribeClusterSubnetGroups {
    return new RedshiftResponsesDescribeClusterSubnetGroups(this, this.__resources, input);
  }

  public describeClusterTracks(input: shapes.RedshiftDescribeClusterTracksMessage): RedshiftResponsesDescribeClusterTracks {
    return new RedshiftResponsesDescribeClusterTracks(this, this.__resources, input);
  }

  public describeClusterVersions(input: shapes.RedshiftDescribeClusterVersionsMessage): RedshiftResponsesDescribeClusterVersions {
    return new RedshiftResponsesDescribeClusterVersions(this, this.__resources, input);
  }

  public describeClusters(input: shapes.RedshiftDescribeClustersMessage): RedshiftResponsesDescribeClusters {
    return new RedshiftResponsesDescribeClusters(this, this.__resources, input);
  }

  public describeDataShares(input: shapes.RedshiftDescribeDataSharesMessage): RedshiftResponsesDescribeDataShares {
    return new RedshiftResponsesDescribeDataShares(this, this.__resources, input);
  }

  public describeDataSharesForConsumer(input: shapes.RedshiftDescribeDataSharesForConsumerMessage): RedshiftResponsesDescribeDataSharesForConsumer {
    return new RedshiftResponsesDescribeDataSharesForConsumer(this, this.__resources, input);
  }

  public describeDataSharesForProducer(input: shapes.RedshiftDescribeDataSharesForProducerMessage): RedshiftResponsesDescribeDataSharesForProducer {
    return new RedshiftResponsesDescribeDataSharesForProducer(this, this.__resources, input);
  }

  public describeDefaultClusterParameters(input: shapes.RedshiftDescribeDefaultClusterParametersMessage): RedshiftResponsesDescribeDefaultClusterParameters {
    return new RedshiftResponsesDescribeDefaultClusterParameters(this, this.__resources, input);
  }

  public describeEndpointAccess(input: shapes.RedshiftDescribeEndpointAccessMessage): RedshiftResponsesDescribeEndpointAccess {
    return new RedshiftResponsesDescribeEndpointAccess(this, this.__resources, input);
  }

  public describeEndpointAuthorization(input: shapes.RedshiftDescribeEndpointAuthorizationMessage): RedshiftResponsesDescribeEndpointAuthorization {
    return new RedshiftResponsesDescribeEndpointAuthorization(this, this.__resources, input);
  }

  public describeEventCategories(input: shapes.RedshiftDescribeEventCategoriesMessage): RedshiftResponsesDescribeEventCategories {
    return new RedshiftResponsesDescribeEventCategories(this, this.__resources, input);
  }

  public describeEventSubscriptions(input: shapes.RedshiftDescribeEventSubscriptionsMessage): RedshiftResponsesDescribeEventSubscriptions {
    return new RedshiftResponsesDescribeEventSubscriptions(this, this.__resources, input);
  }

  public describeEvents(input: shapes.RedshiftDescribeEventsMessage): RedshiftResponsesDescribeEvents {
    return new RedshiftResponsesDescribeEvents(this, this.__resources, input);
  }

  public describeHsmClientCertificates(input: shapes.RedshiftDescribeHsmClientCertificatesMessage): RedshiftResponsesDescribeHsmClientCertificates {
    return new RedshiftResponsesDescribeHsmClientCertificates(this, this.__resources, input);
  }

  public describeHsmConfigurations(input: shapes.RedshiftDescribeHsmConfigurationsMessage): RedshiftResponsesDescribeHsmConfigurations {
    return new RedshiftResponsesDescribeHsmConfigurations(this, this.__resources, input);
  }

  public describeLoggingStatus(input: shapes.RedshiftDescribeLoggingStatusMessage): RedshiftResponsesDescribeLoggingStatus {
    return new RedshiftResponsesDescribeLoggingStatus(this, this.__resources, input);
  }

  public describeNodeConfigurationOptions(input: shapes.RedshiftDescribeNodeConfigurationOptionsMessage): RedshiftResponsesDescribeNodeConfigurationOptions {
    return new RedshiftResponsesDescribeNodeConfigurationOptions(this, this.__resources, input);
  }

  public describeOrderableClusterOptions(input: shapes.RedshiftDescribeOrderableClusterOptionsMessage): RedshiftResponsesDescribeOrderableClusterOptions {
    return new RedshiftResponsesDescribeOrderableClusterOptions(this, this.__resources, input);
  }

  public describePartners(input: shapes.RedshiftDescribePartnersInputMessage): RedshiftResponsesDescribePartners {
    return new RedshiftResponsesDescribePartners(this, this.__resources, input);
  }

  public describeReservedNodeOfferings(input: shapes.RedshiftDescribeReservedNodeOfferingsMessage): RedshiftResponsesDescribeReservedNodeOfferings {
    return new RedshiftResponsesDescribeReservedNodeOfferings(this, this.__resources, input);
  }

  public describeReservedNodes(input: shapes.RedshiftDescribeReservedNodesMessage): RedshiftResponsesDescribeReservedNodes {
    return new RedshiftResponsesDescribeReservedNodes(this, this.__resources, input);
  }

  public describeResize(input: shapes.RedshiftDescribeResizeMessage): RedshiftResponsesDescribeResize {
    return new RedshiftResponsesDescribeResize(this, this.__resources, input);
  }

  public describeScheduledActions(input: shapes.RedshiftDescribeScheduledActionsMessage): RedshiftResponsesDescribeScheduledActions {
    return new RedshiftResponsesDescribeScheduledActions(this, this.__resources, input);
  }

  public describeSnapshotCopyGrants(input: shapes.RedshiftDescribeSnapshotCopyGrantsMessage): RedshiftResponsesDescribeSnapshotCopyGrants {
    return new RedshiftResponsesDescribeSnapshotCopyGrants(this, this.__resources, input);
  }

  public describeSnapshotSchedules(input: shapes.RedshiftDescribeSnapshotSchedulesMessage): RedshiftResponsesDescribeSnapshotSchedules {
    return new RedshiftResponsesDescribeSnapshotSchedules(this, this.__resources, input);
  }

  public describeStorage(): RedshiftResponsesDescribeStorage {
    return new RedshiftResponsesDescribeStorage(this, this.__resources);
  }

  public describeTableRestoreStatus(input: shapes.RedshiftDescribeTableRestoreStatusMessage): RedshiftResponsesDescribeTableRestoreStatus {
    return new RedshiftResponsesDescribeTableRestoreStatus(this, this.__resources, input);
  }

  public describeTags(input: shapes.RedshiftDescribeTagsMessage): RedshiftResponsesDescribeTags {
    return new RedshiftResponsesDescribeTags(this, this.__resources, input);
  }

  public describeUsageLimits(input: shapes.RedshiftDescribeUsageLimitsMessage): RedshiftResponsesDescribeUsageLimits {
    return new RedshiftResponsesDescribeUsageLimits(this, this.__resources, input);
  }

  public disableLogging(input: shapes.RedshiftDisableLoggingMessage): RedshiftResponsesDisableLogging {
    return new RedshiftResponsesDisableLogging(this, this.__resources, input);
  }

  public disableSnapshotCopy(input: shapes.RedshiftDisableSnapshotCopyMessage): RedshiftResponsesDisableSnapshotCopy {
    return new RedshiftResponsesDisableSnapshotCopy(this, this.__resources, input);
  }

  public disassociateDataShareConsumer(input: shapes.RedshiftDisassociateDataShareConsumerMessage): RedshiftResponsesDisassociateDataShareConsumer {
    return new RedshiftResponsesDisassociateDataShareConsumer(this, this.__resources, input);
  }

  public enableLogging(input: shapes.RedshiftEnableLoggingMessage): RedshiftResponsesEnableLogging {
    return new RedshiftResponsesEnableLogging(this, this.__resources, input);
  }

  public enableSnapshotCopy(input: shapes.RedshiftEnableSnapshotCopyMessage): RedshiftResponsesEnableSnapshotCopy {
    return new RedshiftResponsesEnableSnapshotCopy(this, this.__resources, input);
  }

  public fetchClusterCredentials(input: shapes.RedshiftGetClusterCredentialsMessage): RedshiftResponsesFetchClusterCredentials {
    return new RedshiftResponsesFetchClusterCredentials(this, this.__resources, input);
  }

  public fetchReservedNodeExchangeOfferings(input: shapes.RedshiftGetReservedNodeExchangeOfferingsInputMessage): RedshiftResponsesFetchReservedNodeExchangeOfferings {
    return new RedshiftResponsesFetchReservedNodeExchangeOfferings(this, this.__resources, input);
  }

  public modifyAquaConfiguration(input: shapes.RedshiftModifyAquaInputMessage): RedshiftResponsesModifyAquaConfiguration {
    return new RedshiftResponsesModifyAquaConfiguration(this, this.__resources, input);
  }

  public modifyAuthenticationProfile(input: shapes.RedshiftModifyAuthenticationProfileMessage): RedshiftResponsesModifyAuthenticationProfile {
    return new RedshiftResponsesModifyAuthenticationProfile(this, this.__resources, input);
  }

  public modifyCluster(input: shapes.RedshiftModifyClusterMessage): RedshiftResponsesModifyCluster {
    return new RedshiftResponsesModifyCluster(this, this.__resources, input);
  }

  public modifyClusterDbRevision(input: shapes.RedshiftModifyClusterDbRevisionMessage): RedshiftResponsesModifyClusterDbRevision {
    return new RedshiftResponsesModifyClusterDbRevision(this, this.__resources, input);
  }

  public modifyClusterIamRoles(input: shapes.RedshiftModifyClusterIamRolesMessage): RedshiftResponsesModifyClusterIamRoles {
    return new RedshiftResponsesModifyClusterIamRoles(this, this.__resources, input);
  }

  public modifyClusterMaintenance(input: shapes.RedshiftModifyClusterMaintenanceMessage): RedshiftResponsesModifyClusterMaintenance {
    return new RedshiftResponsesModifyClusterMaintenance(this, this.__resources, input);
  }

  public modifyClusterParameterGroup(input: shapes.RedshiftModifyClusterParameterGroupMessage): RedshiftResponsesModifyClusterParameterGroup {
    return new RedshiftResponsesModifyClusterParameterGroup(this, this.__resources, input);
  }

  public modifyClusterSnapshot(input: shapes.RedshiftModifyClusterSnapshotMessage): RedshiftResponsesModifyClusterSnapshot {
    return new RedshiftResponsesModifyClusterSnapshot(this, this.__resources, input);
  }

  public modifyClusterSnapshotSchedule(input: shapes.RedshiftModifyClusterSnapshotScheduleMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshotSchedule',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshotSchedule'),
        parameters: {
          ClusterIdentifier: input.clusterIdentifier,
          ScheduleIdentifier: input.scheduleIdentifier,
          DisassociateSchedule: input.disassociateSchedule,
        },
      },
    };
    new cr.AwsCustomResource(this, 'ModifyClusterSnapshotSchedule', props);
  }

  public modifyClusterSubnetGroup(input: shapes.RedshiftModifyClusterSubnetGroupMessage): RedshiftResponsesModifyClusterSubnetGroup {
    return new RedshiftResponsesModifyClusterSubnetGroup(this, this.__resources, input);
  }

  public modifyEndpointAccess(input: shapes.RedshiftModifyEndpointAccessMessage): RedshiftResponsesModifyEndpointAccess {
    return new RedshiftResponsesModifyEndpointAccess(this, this.__resources, input);
  }

  public modifyEventSubscription(input: shapes.RedshiftModifyEventSubscriptionMessage): RedshiftResponsesModifyEventSubscription {
    return new RedshiftResponsesModifyEventSubscription(this, this.__resources, input);
  }

  public modifyScheduledAction(input: shapes.RedshiftModifyScheduledActionMessage): RedshiftResponsesModifyScheduledAction {
    return new RedshiftResponsesModifyScheduledAction(this, this.__resources, input);
  }

  public modifySnapshotCopyRetentionPeriod(input: shapes.RedshiftModifySnapshotCopyRetentionPeriodMessage): RedshiftResponsesModifySnapshotCopyRetentionPeriod {
    return new RedshiftResponsesModifySnapshotCopyRetentionPeriod(this, this.__resources, input);
  }

  public modifySnapshotSchedule(input: shapes.RedshiftModifySnapshotScheduleMessage): RedshiftResponsesModifySnapshotSchedule {
    return new RedshiftResponsesModifySnapshotSchedule(this, this.__resources, input);
  }

  public modifyUsageLimit(input: shapes.RedshiftModifyUsageLimitMessage): RedshiftResponsesModifyUsageLimit {
    return new RedshiftResponsesModifyUsageLimit(this, this.__resources, input);
  }

  public pauseCluster(input: shapes.RedshiftPauseClusterMessage): RedshiftResponsesPauseCluster {
    return new RedshiftResponsesPauseCluster(this, this.__resources, input);
  }

  public purchaseReservedNodeOffering(input: shapes.RedshiftPurchaseReservedNodeOfferingMessage): RedshiftResponsesPurchaseReservedNodeOffering {
    return new RedshiftResponsesPurchaseReservedNodeOffering(this, this.__resources, input);
  }

  public rebootCluster(input: shapes.RedshiftRebootClusterMessage): RedshiftResponsesRebootCluster {
    return new RedshiftResponsesRebootCluster(this, this.__resources, input);
  }

  public rejectDataShare(input: shapes.RedshiftRejectDataShareMessage): RedshiftResponsesRejectDataShare {
    return new RedshiftResponsesRejectDataShare(this, this.__resources, input);
  }

  public resetClusterParameterGroup(input: shapes.RedshiftResetClusterParameterGroupMessage): RedshiftResponsesResetClusterParameterGroup {
    return new RedshiftResponsesResetClusterParameterGroup(this, this.__resources, input);
  }

  public resizeCluster(input: shapes.RedshiftResizeClusterMessage): RedshiftResponsesResizeCluster {
    return new RedshiftResponsesResizeCluster(this, this.__resources, input);
  }

  public restoreFromClusterSnapshot(input: shapes.RedshiftRestoreFromClusterSnapshotMessage): RedshiftResponsesRestoreFromClusterSnapshot {
    return new RedshiftResponsesRestoreFromClusterSnapshot(this, this.__resources, input);
  }

  public restoreTableFromClusterSnapshot(input: shapes.RedshiftRestoreTableFromClusterSnapshotMessage): RedshiftResponsesRestoreTableFromClusterSnapshot {
    return new RedshiftResponsesRestoreTableFromClusterSnapshot(this, this.__resources, input);
  }

  public resumeCluster(input: shapes.RedshiftResumeClusterMessage): RedshiftResponsesResumeCluster {
    return new RedshiftResponsesResumeCluster(this, this.__resources, input);
  }

  public revokeClusterSecurityGroupIngress(input: shapes.RedshiftRevokeClusterSecurityGroupIngressMessage): RedshiftResponsesRevokeClusterSecurityGroupIngress {
    return new RedshiftResponsesRevokeClusterSecurityGroupIngress(this, this.__resources, input);
  }

  public revokeEndpointAccess(input: shapes.RedshiftRevokeEndpointAccessMessage): RedshiftResponsesRevokeEndpointAccess {
    return new RedshiftResponsesRevokeEndpointAccess(this, this.__resources, input);
  }

  public revokeSnapshotAccess(input: shapes.RedshiftRevokeSnapshotAccessMessage): RedshiftResponsesRevokeSnapshotAccess {
    return new RedshiftResponsesRevokeSnapshotAccess(this, this.__resources, input);
  }

  public rotateEncryptionKey(input: shapes.RedshiftRotateEncryptionKeyMessage): RedshiftResponsesRotateEncryptionKey {
    return new RedshiftResponsesRotateEncryptionKey(this, this.__resources, input);
  }

  public updatePartnerStatus(input: shapes.RedshiftUpdatePartnerStatusInputMessage): RedshiftResponsesUpdatePartnerStatus {
    return new RedshiftResponsesUpdatePartnerStatus(this, this.__resources, input);
  }

}

export class RedshiftResponsesAcceptReservedNodeExchange {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftAcceptReservedNodeExchangeInputMessage) {
  }

  public get exchangedReservedNode(): RedshiftResponsesAcceptReservedNodeExchangeExchangedReservedNode {
    return new RedshiftResponsesAcceptReservedNodeExchangeExchangedReservedNode(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesAcceptReservedNodeExchangeExchangedReservedNode {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftAcceptReservedNodeExchangeInputMessage) {
  }

  public get reservedNodeId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptReservedNodeExchange',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AcceptReservedNodeExchange.ExchangedReservedNode.ReservedNodeId'),
        outputPath: 'ExchangedReservedNode.ReservedNodeId',
        parameters: {
          ReservedNodeId: this.__input.reservedNodeId,
          TargetReservedNodeOfferingId: this.__input.targetReservedNodeOfferingId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptReservedNodeExchange.ExchangedReservedNode.ReservedNodeId', props);
    return resource.getResponseField('ExchangedReservedNode.ReservedNodeId') as unknown as string;
  }

  public get reservedNodeOfferingId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptReservedNodeExchange',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AcceptReservedNodeExchange.ExchangedReservedNode.ReservedNodeOfferingId'),
        outputPath: 'ExchangedReservedNode.ReservedNodeOfferingId',
        parameters: {
          ReservedNodeId: this.__input.reservedNodeId,
          TargetReservedNodeOfferingId: this.__input.targetReservedNodeOfferingId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptReservedNodeExchange.ExchangedReservedNode.ReservedNodeOfferingId', props);
    return resource.getResponseField('ExchangedReservedNode.ReservedNodeOfferingId') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptReservedNodeExchange',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AcceptReservedNodeExchange.ExchangedReservedNode.NodeType'),
        outputPath: 'ExchangedReservedNode.NodeType',
        parameters: {
          ReservedNodeId: this.__input.reservedNodeId,
          TargetReservedNodeOfferingId: this.__input.targetReservedNodeOfferingId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptReservedNodeExchange.ExchangedReservedNode.NodeType', props);
    return resource.getResponseField('ExchangedReservedNode.NodeType') as unknown as string;
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptReservedNodeExchange',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AcceptReservedNodeExchange.ExchangedReservedNode.StartTime'),
        outputPath: 'ExchangedReservedNode.StartTime',
        parameters: {
          ReservedNodeId: this.__input.reservedNodeId,
          TargetReservedNodeOfferingId: this.__input.targetReservedNodeOfferingId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptReservedNodeExchange.ExchangedReservedNode.StartTime', props);
    return resource.getResponseField('ExchangedReservedNode.StartTime') as unknown as string;
  }

  public get duration(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptReservedNodeExchange',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AcceptReservedNodeExchange.ExchangedReservedNode.Duration'),
        outputPath: 'ExchangedReservedNode.Duration',
        parameters: {
          ReservedNodeId: this.__input.reservedNodeId,
          TargetReservedNodeOfferingId: this.__input.targetReservedNodeOfferingId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptReservedNodeExchange.ExchangedReservedNode.Duration', props);
    return resource.getResponseField('ExchangedReservedNode.Duration') as unknown as number;
  }

  public get fixedPrice(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptReservedNodeExchange',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AcceptReservedNodeExchange.ExchangedReservedNode.FixedPrice'),
        outputPath: 'ExchangedReservedNode.FixedPrice',
        parameters: {
          ReservedNodeId: this.__input.reservedNodeId,
          TargetReservedNodeOfferingId: this.__input.targetReservedNodeOfferingId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptReservedNodeExchange.ExchangedReservedNode.FixedPrice', props);
    return resource.getResponseField('ExchangedReservedNode.FixedPrice') as unknown as number;
  }

  public get usagePrice(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptReservedNodeExchange',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AcceptReservedNodeExchange.ExchangedReservedNode.UsagePrice'),
        outputPath: 'ExchangedReservedNode.UsagePrice',
        parameters: {
          ReservedNodeId: this.__input.reservedNodeId,
          TargetReservedNodeOfferingId: this.__input.targetReservedNodeOfferingId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptReservedNodeExchange.ExchangedReservedNode.UsagePrice', props);
    return resource.getResponseField('ExchangedReservedNode.UsagePrice') as unknown as number;
  }

  public get currencyCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptReservedNodeExchange',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AcceptReservedNodeExchange.ExchangedReservedNode.CurrencyCode'),
        outputPath: 'ExchangedReservedNode.CurrencyCode',
        parameters: {
          ReservedNodeId: this.__input.reservedNodeId,
          TargetReservedNodeOfferingId: this.__input.targetReservedNodeOfferingId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptReservedNodeExchange.ExchangedReservedNode.CurrencyCode', props);
    return resource.getResponseField('ExchangedReservedNode.CurrencyCode') as unknown as string;
  }

  public get nodeCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptReservedNodeExchange',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AcceptReservedNodeExchange.ExchangedReservedNode.NodeCount'),
        outputPath: 'ExchangedReservedNode.NodeCount',
        parameters: {
          ReservedNodeId: this.__input.reservedNodeId,
          TargetReservedNodeOfferingId: this.__input.targetReservedNodeOfferingId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptReservedNodeExchange.ExchangedReservedNode.NodeCount', props);
    return resource.getResponseField('ExchangedReservedNode.NodeCount') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptReservedNodeExchange',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AcceptReservedNodeExchange.ExchangedReservedNode.State'),
        outputPath: 'ExchangedReservedNode.State',
        parameters: {
          ReservedNodeId: this.__input.reservedNodeId,
          TargetReservedNodeOfferingId: this.__input.targetReservedNodeOfferingId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptReservedNodeExchange.ExchangedReservedNode.State', props);
    return resource.getResponseField('ExchangedReservedNode.State') as unknown as string;
  }

  public get offeringType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptReservedNodeExchange',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AcceptReservedNodeExchange.ExchangedReservedNode.OfferingType'),
        outputPath: 'ExchangedReservedNode.OfferingType',
        parameters: {
          ReservedNodeId: this.__input.reservedNodeId,
          TargetReservedNodeOfferingId: this.__input.targetReservedNodeOfferingId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptReservedNodeExchange.ExchangedReservedNode.OfferingType', props);
    return resource.getResponseField('ExchangedReservedNode.OfferingType') as unknown as string;
  }

  public get recurringCharges(): shapes.RedshiftRecurringCharge[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptReservedNodeExchange',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AcceptReservedNodeExchange.ExchangedReservedNode.RecurringCharges'),
        outputPath: 'ExchangedReservedNode.RecurringCharges',
        parameters: {
          ReservedNodeId: this.__input.reservedNodeId,
          TargetReservedNodeOfferingId: this.__input.targetReservedNodeOfferingId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptReservedNodeExchange.ExchangedReservedNode.RecurringCharges', props);
    return resource.getResponseField('ExchangedReservedNode.RecurringCharges') as unknown as shapes.RedshiftRecurringCharge[];
  }

  public get reservedNodeOfferingType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptReservedNodeExchange',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AcceptReservedNodeExchange.ExchangedReservedNode.ReservedNodeOfferingType'),
        outputPath: 'ExchangedReservedNode.ReservedNodeOfferingType',
        parameters: {
          ReservedNodeId: this.__input.reservedNodeId,
          TargetReservedNodeOfferingId: this.__input.targetReservedNodeOfferingId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptReservedNodeExchange.ExchangedReservedNode.ReservedNodeOfferingType', props);
    return resource.getResponseField('ExchangedReservedNode.ReservedNodeOfferingType') as unknown as string;
  }

}

export class RedshiftResponsesAddPartner {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftPartnerIntegrationInputMessage) {
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addPartner',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AddPartner.DatabaseName'),
        outputPath: 'DatabaseName',
        parameters: {
          AccountId: this.__input.accountId,
          ClusterIdentifier: this.__input.clusterIdentifier,
          DatabaseName: this.__input.databaseName,
          PartnerName: this.__input.partnerName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AddPartner.DatabaseName', props);
    return resource.getResponseField('DatabaseName') as unknown as string;
  }

  public get partnerName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addPartner',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AddPartner.PartnerName'),
        outputPath: 'PartnerName',
        parameters: {
          AccountId: this.__input.accountId,
          ClusterIdentifier: this.__input.clusterIdentifier,
          DatabaseName: this.__input.databaseName,
          PartnerName: this.__input.partnerName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AddPartner.PartnerName', props);
    return resource.getResponseField('PartnerName') as unknown as string;
  }

}

export class RedshiftResponsesAssociateDataShareConsumer {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftAssociateDataShareConsumerMessage) {
  }

  public get dataShareArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateDataShareConsumer',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AssociateDataShareConsumer.DataShareArn'),
        outputPath: 'DataShareArn',
        parameters: {
          DataShareArn: this.__input.dataShareArn,
          AssociateEntireAccount: this.__input.associateEntireAccount,
          ConsumerArn: this.__input.consumerArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateDataShareConsumer.DataShareArn', props);
    return resource.getResponseField('DataShareArn') as unknown as string;
  }

  public get producerArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateDataShareConsumer',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AssociateDataShareConsumer.ProducerArn'),
        outputPath: 'ProducerArn',
        parameters: {
          DataShareArn: this.__input.dataShareArn,
          AssociateEntireAccount: this.__input.associateEntireAccount,
          ConsumerArn: this.__input.consumerArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateDataShareConsumer.ProducerArn', props);
    return resource.getResponseField('ProducerArn') as unknown as string;
  }

  public get allowPubliclyAccessibleConsumers(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateDataShareConsumer',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AssociateDataShareConsumer.AllowPubliclyAccessibleConsumers'),
        outputPath: 'AllowPubliclyAccessibleConsumers',
        parameters: {
          DataShareArn: this.__input.dataShareArn,
          AssociateEntireAccount: this.__input.associateEntireAccount,
          ConsumerArn: this.__input.consumerArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateDataShareConsumer.AllowPubliclyAccessibleConsumers', props);
    return resource.getResponseField('AllowPubliclyAccessibleConsumers') as unknown as boolean;
  }

  public get dataShareAssociations(): shapes.RedshiftDataShareAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateDataShareConsumer',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AssociateDataShareConsumer.DataShareAssociations'),
        outputPath: 'DataShareAssociations',
        parameters: {
          DataShareArn: this.__input.dataShareArn,
          AssociateEntireAccount: this.__input.associateEntireAccount,
          ConsumerArn: this.__input.consumerArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateDataShareConsumer.DataShareAssociations', props);
    return resource.getResponseField('DataShareAssociations') as unknown as shapes.RedshiftDataShareAssociation[];
  }

}

export class RedshiftResponsesAuthorizeClusterSecurityGroupIngress {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftAuthorizeClusterSecurityGroupIngressMessage) {
  }

  public get clusterSecurityGroup(): RedshiftResponsesAuthorizeClusterSecurityGroupIngressClusterSecurityGroup {
    return new RedshiftResponsesAuthorizeClusterSecurityGroupIngressClusterSecurityGroup(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesAuthorizeClusterSecurityGroupIngressClusterSecurityGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftAuthorizeClusterSecurityGroupIngressMessage) {
  }

  public get clusterSecurityGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeClusterSecurityGroupIngress',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeClusterSecurityGroupIngress.ClusterSecurityGroup.ClusterSecurityGroupName'),
        outputPath: 'ClusterSecurityGroup.ClusterSecurityGroupName',
        parameters: {
          ClusterSecurityGroupName: this.__input.clusterSecurityGroupName,
          CIDRIP: this.__input.cidrip,
          EC2SecurityGroupName: this.__input.ec2SecurityGroupName,
          EC2SecurityGroupOwnerId: this.__input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeClusterSecurityGroupIngress.ClusterSecurityGroup.ClusterSecurityGroupName', props);
    return resource.getResponseField('ClusterSecurityGroup.ClusterSecurityGroupName') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeClusterSecurityGroupIngress',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeClusterSecurityGroupIngress.ClusterSecurityGroup.Description'),
        outputPath: 'ClusterSecurityGroup.Description',
        parameters: {
          ClusterSecurityGroupName: this.__input.clusterSecurityGroupName,
          CIDRIP: this.__input.cidrip,
          EC2SecurityGroupName: this.__input.ec2SecurityGroupName,
          EC2SecurityGroupOwnerId: this.__input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeClusterSecurityGroupIngress.ClusterSecurityGroup.Description', props);
    return resource.getResponseField('ClusterSecurityGroup.Description') as unknown as string;
  }

  public get ec2SecurityGroups(): shapes.RedshiftEc2SecurityGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeClusterSecurityGroupIngress',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeClusterSecurityGroupIngress.ClusterSecurityGroup.EC2SecurityGroups'),
        outputPath: 'ClusterSecurityGroup.EC2SecurityGroups',
        parameters: {
          ClusterSecurityGroupName: this.__input.clusterSecurityGroupName,
          CIDRIP: this.__input.cidrip,
          EC2SecurityGroupName: this.__input.ec2SecurityGroupName,
          EC2SecurityGroupOwnerId: this.__input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeClusterSecurityGroupIngress.ClusterSecurityGroup.EC2SecurityGroups', props);
    return resource.getResponseField('ClusterSecurityGroup.EC2SecurityGroups') as unknown as shapes.RedshiftEc2SecurityGroup[];
  }

  public get ipRanges(): shapes.RedshiftIpRange[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeClusterSecurityGroupIngress',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeClusterSecurityGroupIngress.ClusterSecurityGroup.IPRanges'),
        outputPath: 'ClusterSecurityGroup.IPRanges',
        parameters: {
          ClusterSecurityGroupName: this.__input.clusterSecurityGroupName,
          CIDRIP: this.__input.cidrip,
          EC2SecurityGroupName: this.__input.ec2SecurityGroupName,
          EC2SecurityGroupOwnerId: this.__input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeClusterSecurityGroupIngress.ClusterSecurityGroup.IPRanges', props);
    return resource.getResponseField('ClusterSecurityGroup.IPRanges') as unknown as shapes.RedshiftIpRange[];
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeClusterSecurityGroupIngress',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeClusterSecurityGroupIngress.ClusterSecurityGroup.Tags'),
        outputPath: 'ClusterSecurityGroup.Tags',
        parameters: {
          ClusterSecurityGroupName: this.__input.clusterSecurityGroupName,
          CIDRIP: this.__input.cidrip,
          EC2SecurityGroupName: this.__input.ec2SecurityGroupName,
          EC2SecurityGroupOwnerId: this.__input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeClusterSecurityGroupIngress.ClusterSecurityGroup.Tags', props);
    return resource.getResponseField('ClusterSecurityGroup.Tags') as unknown as shapes.RedshiftTag[];
  }

}

export class RedshiftResponsesAuthorizeDataShare {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftAuthorizeDataShareMessage) {
  }

  public get dataShareArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeDataShare',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeDataShare.DataShareArn'),
        outputPath: 'DataShareArn',
        parameters: {
          DataShareArn: this.__input.dataShareArn,
          ConsumerIdentifier: this.__input.consumerIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeDataShare.DataShareArn', props);
    return resource.getResponseField('DataShareArn') as unknown as string;
  }

  public get producerArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeDataShare',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeDataShare.ProducerArn'),
        outputPath: 'ProducerArn',
        parameters: {
          DataShareArn: this.__input.dataShareArn,
          ConsumerIdentifier: this.__input.consumerIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeDataShare.ProducerArn', props);
    return resource.getResponseField('ProducerArn') as unknown as string;
  }

  public get allowPubliclyAccessibleConsumers(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeDataShare',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeDataShare.AllowPubliclyAccessibleConsumers'),
        outputPath: 'AllowPubliclyAccessibleConsumers',
        parameters: {
          DataShareArn: this.__input.dataShareArn,
          ConsumerIdentifier: this.__input.consumerIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeDataShare.AllowPubliclyAccessibleConsumers', props);
    return resource.getResponseField('AllowPubliclyAccessibleConsumers') as unknown as boolean;
  }

  public get dataShareAssociations(): shapes.RedshiftDataShareAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeDataShare',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeDataShare.DataShareAssociations'),
        outputPath: 'DataShareAssociations',
        parameters: {
          DataShareArn: this.__input.dataShareArn,
          ConsumerIdentifier: this.__input.consumerIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeDataShare.DataShareAssociations', props);
    return resource.getResponseField('DataShareAssociations') as unknown as shapes.RedshiftDataShareAssociation[];
  }

}

export class RedshiftResponsesAuthorizeEndpointAccess {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftAuthorizeEndpointAccessMessage) {
  }

  public get grantor(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeEndpointAccess.Grantor'),
        outputPath: 'Grantor',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          Account: this.__input.account,
          VpcIds: this.__input.vpcIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeEndpointAccess.Grantor', props);
    return resource.getResponseField('Grantor') as unknown as string;
  }

  public get grantee(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeEndpointAccess.Grantee'),
        outputPath: 'Grantee',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          Account: this.__input.account,
          VpcIds: this.__input.vpcIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeEndpointAccess.Grantee', props);
    return resource.getResponseField('Grantee') as unknown as string;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeEndpointAccess.ClusterIdentifier'),
        outputPath: 'ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          Account: this.__input.account,
          VpcIds: this.__input.vpcIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeEndpointAccess.ClusterIdentifier', props);
    return resource.getResponseField('ClusterIdentifier') as unknown as string;
  }

  public get authorizeTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeEndpointAccess.AuthorizeTime'),
        outputPath: 'AuthorizeTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          Account: this.__input.account,
          VpcIds: this.__input.vpcIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeEndpointAccess.AuthorizeTime', props);
    return resource.getResponseField('AuthorizeTime') as unknown as string;
  }

  public get clusterStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeEndpointAccess.ClusterStatus'),
        outputPath: 'ClusterStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          Account: this.__input.account,
          VpcIds: this.__input.vpcIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeEndpointAccess.ClusterStatus', props);
    return resource.getResponseField('ClusterStatus') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeEndpointAccess.Status'),
        outputPath: 'Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          Account: this.__input.account,
          VpcIds: this.__input.vpcIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeEndpointAccess.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

  public get allowedAllVpCs(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeEndpointAccess.AllowedAllVPCs'),
        outputPath: 'AllowedAllVPCs',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          Account: this.__input.account,
          VpcIds: this.__input.vpcIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeEndpointAccess.AllowedAllVPCs', props);
    return resource.getResponseField('AllowedAllVPCs') as unknown as boolean;
  }

  public get allowedVpCs(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeEndpointAccess.AllowedVPCs'),
        outputPath: 'AllowedVPCs',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          Account: this.__input.account,
          VpcIds: this.__input.vpcIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeEndpointAccess.AllowedVPCs', props);
    return resource.getResponseField('AllowedVPCs') as unknown as string[];
  }

  public get endpointCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeEndpointAccess.EndpointCount'),
        outputPath: 'EndpointCount',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          Account: this.__input.account,
          VpcIds: this.__input.vpcIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeEndpointAccess.EndpointCount', props);
    return resource.getResponseField('EndpointCount') as unknown as number;
  }

}

export class RedshiftResponsesAuthorizeSnapshotAccess {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftAuthorizeSnapshotAccessMessage) {
  }

  public get snapshot(): RedshiftResponsesAuthorizeSnapshotAccessSnapshot {
    return new RedshiftResponsesAuthorizeSnapshotAccessSnapshot(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesAuthorizeSnapshotAccessSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftAuthorizeSnapshotAccessMessage) {
  }

  public get snapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.SnapshotIdentifier'),
        outputPath: 'Snapshot.SnapshotIdentifier',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSnapshotAccess.Snapshot.SnapshotIdentifier', props);
    return resource.getResponseField('Snapshot.SnapshotIdentifier') as unknown as string;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.ClusterIdentifier'),
        outputPath: 'Snapshot.ClusterIdentifier',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSnapshotAccess.Snapshot.ClusterIdentifier', props);
    return resource.getResponseField('Snapshot.ClusterIdentifier') as unknown as string;
  }

  public get snapshotCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.SnapshotCreateTime'),
        outputPath: 'Snapshot.SnapshotCreateTime',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSnapshotAccess.Snapshot.SnapshotCreateTime', props);
    return resource.getResponseField('Snapshot.SnapshotCreateTime') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.Status'),
        outputPath: 'Snapshot.Status',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSnapshotAccess.Snapshot.Status', props);
    return resource.getResponseField('Snapshot.Status') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.Port'),
        outputPath: 'Snapshot.Port',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSnapshotAccess.Snapshot.Port', props);
    return resource.getResponseField('Snapshot.Port') as unknown as number;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.AvailabilityZone'),
        outputPath: 'Snapshot.AvailabilityZone',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSnapshotAccess.Snapshot.AvailabilityZone', props);
    return resource.getResponseField('Snapshot.AvailabilityZone') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.ClusterCreateTime'),
        outputPath: 'Snapshot.ClusterCreateTime',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSnapshotAccess.Snapshot.ClusterCreateTime', props);
    return resource.getResponseField('Snapshot.ClusterCreateTime') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.MasterUsername'),
        outputPath: 'Snapshot.MasterUsername',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSnapshotAccess.Snapshot.MasterUsername', props);
    return resource.getResponseField('Snapshot.MasterUsername') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.ClusterVersion'),
        outputPath: 'Snapshot.ClusterVersion',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSnapshotAccess.Snapshot.ClusterVersion', props);
    return resource.getResponseField('Snapshot.ClusterVersion') as unknown as string;
  }

  public get engineFullVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.EngineFullVersion'),
        outputPath: 'Snapshot.EngineFullVersion',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSnapshotAccess.Snapshot.EngineFullVersion', props);
    return resource.getResponseField('Snapshot.EngineFullVersion') as unknown as string;
  }

  public get snapshotType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.SnapshotType'),
        outputPath: 'Snapshot.SnapshotType',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSnapshotAccess.Snapshot.SnapshotType', props);
    return resource.getResponseField('Snapshot.SnapshotType') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.NodeType'),
        outputPath: 'Snapshot.NodeType',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSnapshotAccess.Snapshot.NodeType', props);
    return resource.getResponseField('Snapshot.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.NumberOfNodes'),
        outputPath: 'Snapshot.NumberOfNodes',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSnapshotAccess.Snapshot.NumberOfNodes', props);
    return resource.getResponseField('Snapshot.NumberOfNodes') as unknown as number;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.DBName'),
        outputPath: 'Snapshot.DBName',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSnapshotAccess.Snapshot.DBName', props);
    return resource.getResponseField('Snapshot.DBName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.VpcId'),
        outputPath: 'Snapshot.VpcId',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSnapshotAccess.Snapshot.VpcId', props);
    return resource.getResponseField('Snapshot.VpcId') as unknown as string;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.Encrypted'),
        outputPath: 'Snapshot.Encrypted',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSnapshotAccess.Snapshot.Encrypted', props);
    return resource.getResponseField('Snapshot.Encrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.KmsKeyId'),
        outputPath: 'Snapshot.KmsKeyId',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSnapshotAccess.Snapshot.KmsKeyId', props);
    return resource.getResponseField('Snapshot.KmsKeyId') as unknown as string;
  }

  public get encryptedWithHsm(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.EncryptedWithHSM'),
        outputPath: 'Snapshot.EncryptedWithHSM',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSnapshotAccess.Snapshot.EncryptedWithHSM', props);
    return resource.getResponseField('Snapshot.EncryptedWithHSM') as unknown as boolean;
  }

  public get accountsWithRestoreAccess(): shapes.RedshiftAccountWithRestoreAccess[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.AccountsWithRestoreAccess'),
        outputPath: 'Snapshot.AccountsWithRestoreAccess',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSnapshotAccess.Snapshot.AccountsWithRestoreAccess', props);
    return resource.getResponseField('Snapshot.AccountsWithRestoreAccess') as unknown as shapes.RedshiftAccountWithRestoreAccess[];
  }

  public get ownerAccount(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.OwnerAccount'),
        outputPath: 'Snapshot.OwnerAccount',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSnapshotAccess.Snapshot.OwnerAccount', props);
    return resource.getResponseField('Snapshot.OwnerAccount') as unknown as string;
  }

  public get totalBackupSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.TotalBackupSizeInMegaBytes'),
        outputPath: 'Snapshot.TotalBackupSizeInMegaBytes',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSnapshotAccess.Snapshot.TotalBackupSizeInMegaBytes', props);
    return resource.getResponseField('Snapshot.TotalBackupSizeInMegaBytes') as unknown as number;
  }

  public get actualIncrementalBackupSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.ActualIncrementalBackupSizeInMegaBytes'),
        outputPath: 'Snapshot.ActualIncrementalBackupSizeInMegaBytes',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSnapshotAccess.Snapshot.ActualIncrementalBackupSizeInMegaBytes', props);
    return resource.getResponseField('Snapshot.ActualIncrementalBackupSizeInMegaBytes') as unknown as number;
  }

  public get backupProgressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.BackupProgressInMegaBytes'),
        outputPath: 'Snapshot.BackupProgressInMegaBytes',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSnapshotAccess.Snapshot.BackupProgressInMegaBytes', props);
    return resource.getResponseField('Snapshot.BackupProgressInMegaBytes') as unknown as number;
  }

  public get currentBackupRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.CurrentBackupRateInMegaBytesPerSecond'),
        outputPath: 'Snapshot.CurrentBackupRateInMegaBytesPerSecond',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSnapshotAccess.Snapshot.CurrentBackupRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Snapshot.CurrentBackupRateInMegaBytesPerSecond') as unknown as number;
  }

  public get estimatedSecondsToCompletion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.EstimatedSecondsToCompletion'),
        outputPath: 'Snapshot.EstimatedSecondsToCompletion',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSnapshotAccess.Snapshot.EstimatedSecondsToCompletion', props);
    return resource.getResponseField('Snapshot.EstimatedSecondsToCompletion') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.ElapsedTimeInSeconds'),
        outputPath: 'Snapshot.ElapsedTimeInSeconds',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSnapshotAccess.Snapshot.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Snapshot.ElapsedTimeInSeconds') as unknown as number;
  }

  public get sourceRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.SourceRegion'),
        outputPath: 'Snapshot.SourceRegion',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSnapshotAccess.Snapshot.SourceRegion', props);
    return resource.getResponseField('Snapshot.SourceRegion') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.Tags'),
        outputPath: 'Snapshot.Tags',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSnapshotAccess.Snapshot.Tags', props);
    return resource.getResponseField('Snapshot.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get restorableNodeTypes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.RestorableNodeTypes'),
        outputPath: 'Snapshot.RestorableNodeTypes',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSnapshotAccess.Snapshot.RestorableNodeTypes', props);
    return resource.getResponseField('Snapshot.RestorableNodeTypes') as unknown as string[];
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.EnhancedVpcRouting'),
        outputPath: 'Snapshot.EnhancedVpcRouting',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSnapshotAccess.Snapshot.EnhancedVpcRouting', props);
    return resource.getResponseField('Snapshot.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.MaintenanceTrackName'),
        outputPath: 'Snapshot.MaintenanceTrackName',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSnapshotAccess.Snapshot.MaintenanceTrackName', props);
    return resource.getResponseField('Snapshot.MaintenanceTrackName') as unknown as string;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.ManualSnapshotRetentionPeriod'),
        outputPath: 'Snapshot.ManualSnapshotRetentionPeriod',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSnapshotAccess.Snapshot.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Snapshot.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRemainingDays(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.ManualSnapshotRemainingDays'),
        outputPath: 'Snapshot.ManualSnapshotRemainingDays',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSnapshotAccess.Snapshot.ManualSnapshotRemainingDays', props);
    return resource.getResponseField('Snapshot.ManualSnapshotRemainingDays') as unknown as number;
  }

  public get snapshotRetentionStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.AuthorizeSnapshotAccess.Snapshot.SnapshotRetentionStartTime'),
        outputPath: 'Snapshot.SnapshotRetentionStartTime',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSnapshotAccess.Snapshot.SnapshotRetentionStartTime', props);
    return resource.getResponseField('Snapshot.SnapshotRetentionStartTime') as unknown as string;
  }

}

export class RedshiftResponsesBatchDeleteClusterSnapshots {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftBatchDeleteClusterSnapshotsRequest) {
  }

  public get resources(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchDeleteClusterSnapshots',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.BatchDeleteClusterSnapshots.Resources'),
        outputPath: 'Resources',
        parameters: {
          Identifiers: this.__input.identifiers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BatchDeleteClusterSnapshots.Resources', props);
    return resource.getResponseField('Resources') as unknown as string[];
  }

  public get errors(): shapes.RedshiftSnapshotErrorMessage[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchDeleteClusterSnapshots',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.BatchDeleteClusterSnapshots.Errors'),
        outputPath: 'Errors',
        parameters: {
          Identifiers: this.__input.identifiers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BatchDeleteClusterSnapshots.Errors', props);
    return resource.getResponseField('Errors') as unknown as shapes.RedshiftSnapshotErrorMessage[];
  }

}

export class RedshiftResponsesBatchModifyClusterSnapshots {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftBatchModifyClusterSnapshotsMessage) {
  }

  public get resources(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchModifyClusterSnapshots',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.BatchModifyClusterSnapshots.Resources'),
        outputPath: 'Resources',
        parameters: {
          SnapshotIdentifierList: this.__input.snapshotIdentifierList,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BatchModifyClusterSnapshots.Resources', props);
    return resource.getResponseField('Resources') as unknown as string[];
  }

  public get errors(): shapes.RedshiftSnapshotErrorMessage[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchModifyClusterSnapshots',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.BatchModifyClusterSnapshots.Errors'),
        outputPath: 'Errors',
        parameters: {
          SnapshotIdentifierList: this.__input.snapshotIdentifierList,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BatchModifyClusterSnapshots.Errors', props);
    return resource.getResponseField('Errors') as unknown as shapes.RedshiftSnapshotErrorMessage[];
  }

}

export class RedshiftResponsesCancelResize {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCancelResizeMessage) {
  }

  public get targetNodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CancelResize.TargetNodeType'),
        outputPath: 'TargetNodeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelResize.TargetNodeType', props);
    return resource.getResponseField('TargetNodeType') as unknown as string;
  }

  public get targetNumberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CancelResize.TargetNumberOfNodes'),
        outputPath: 'TargetNumberOfNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelResize.TargetNumberOfNodes', props);
    return resource.getResponseField('TargetNumberOfNodes') as unknown as number;
  }

  public get targetClusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CancelResize.TargetClusterType'),
        outputPath: 'TargetClusterType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelResize.TargetClusterType', props);
    return resource.getResponseField('TargetClusterType') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CancelResize.Status'),
        outputPath: 'Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelResize.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

  public get importTablesCompleted(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CancelResize.ImportTablesCompleted'),
        outputPath: 'ImportTablesCompleted',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelResize.ImportTablesCompleted', props);
    return resource.getResponseField('ImportTablesCompleted') as unknown as string[];
  }

  public get importTablesInProgress(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CancelResize.ImportTablesInProgress'),
        outputPath: 'ImportTablesInProgress',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelResize.ImportTablesInProgress', props);
    return resource.getResponseField('ImportTablesInProgress') as unknown as string[];
  }

  public get importTablesNotStarted(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CancelResize.ImportTablesNotStarted'),
        outputPath: 'ImportTablesNotStarted',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelResize.ImportTablesNotStarted', props);
    return resource.getResponseField('ImportTablesNotStarted') as unknown as string[];
  }

  public get avgResizeRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CancelResize.AvgResizeRateInMegaBytesPerSecond'),
        outputPath: 'AvgResizeRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelResize.AvgResizeRateInMegaBytesPerSecond', props);
    return resource.getResponseField('AvgResizeRateInMegaBytesPerSecond') as unknown as number;
  }

  public get totalResizeDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CancelResize.TotalResizeDataInMegaBytes'),
        outputPath: 'TotalResizeDataInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelResize.TotalResizeDataInMegaBytes', props);
    return resource.getResponseField('TotalResizeDataInMegaBytes') as unknown as number;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CancelResize.ProgressInMegaBytes'),
        outputPath: 'ProgressInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelResize.ProgressInMegaBytes', props);
    return resource.getResponseField('ProgressInMegaBytes') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CancelResize.ElapsedTimeInSeconds'),
        outputPath: 'ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelResize.ElapsedTimeInSeconds', props);
    return resource.getResponseField('ElapsedTimeInSeconds') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CancelResize.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelResize.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

  public get resizeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CancelResize.ResizeType'),
        outputPath: 'ResizeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelResize.ResizeType', props);
    return resource.getResponseField('ResizeType') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CancelResize.Message'),
        outputPath: 'Message',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelResize.Message', props);
    return resource.getResponseField('Message') as unknown as string;
  }

  public get targetEncryptionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CancelResize.TargetEncryptionType'),
        outputPath: 'TargetEncryptionType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelResize.TargetEncryptionType', props);
    return resource.getResponseField('TargetEncryptionType') as unknown as string;
  }

  public get dataTransferProgressPercent(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CancelResize.DataTransferProgressPercent'),
        outputPath: 'DataTransferProgressPercent',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelResize.DataTransferProgressPercent', props);
    return resource.getResponseField('DataTransferProgressPercent') as unknown as number;
  }

}

export class RedshiftResponsesCopyClusterSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCopyClusterSnapshotMessage) {
  }

  public get snapshot(): RedshiftResponsesCopyClusterSnapshotSnapshot {
    return new RedshiftResponsesCopyClusterSnapshotSnapshot(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesCopyClusterSnapshotSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCopyClusterSnapshotMessage) {
  }

  public get snapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.SnapshotIdentifier'),
        outputPath: 'Snapshot.SnapshotIdentifier',
        parameters: {
          SourceSnapshotIdentifier: this.__input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.__input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.__input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyClusterSnapshot.Snapshot.SnapshotIdentifier', props);
    return resource.getResponseField('Snapshot.SnapshotIdentifier') as unknown as string;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.ClusterIdentifier'),
        outputPath: 'Snapshot.ClusterIdentifier',
        parameters: {
          SourceSnapshotIdentifier: this.__input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.__input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.__input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyClusterSnapshot.Snapshot.ClusterIdentifier', props);
    return resource.getResponseField('Snapshot.ClusterIdentifier') as unknown as string;
  }

  public get snapshotCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.SnapshotCreateTime'),
        outputPath: 'Snapshot.SnapshotCreateTime',
        parameters: {
          SourceSnapshotIdentifier: this.__input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.__input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.__input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyClusterSnapshot.Snapshot.SnapshotCreateTime', props);
    return resource.getResponseField('Snapshot.SnapshotCreateTime') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.Status'),
        outputPath: 'Snapshot.Status',
        parameters: {
          SourceSnapshotIdentifier: this.__input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.__input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.__input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyClusterSnapshot.Snapshot.Status', props);
    return resource.getResponseField('Snapshot.Status') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.Port'),
        outputPath: 'Snapshot.Port',
        parameters: {
          SourceSnapshotIdentifier: this.__input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.__input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.__input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyClusterSnapshot.Snapshot.Port', props);
    return resource.getResponseField('Snapshot.Port') as unknown as number;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.AvailabilityZone'),
        outputPath: 'Snapshot.AvailabilityZone',
        parameters: {
          SourceSnapshotIdentifier: this.__input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.__input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.__input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyClusterSnapshot.Snapshot.AvailabilityZone', props);
    return resource.getResponseField('Snapshot.AvailabilityZone') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.ClusterCreateTime'),
        outputPath: 'Snapshot.ClusterCreateTime',
        parameters: {
          SourceSnapshotIdentifier: this.__input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.__input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.__input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyClusterSnapshot.Snapshot.ClusterCreateTime', props);
    return resource.getResponseField('Snapshot.ClusterCreateTime') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.MasterUsername'),
        outputPath: 'Snapshot.MasterUsername',
        parameters: {
          SourceSnapshotIdentifier: this.__input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.__input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.__input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyClusterSnapshot.Snapshot.MasterUsername', props);
    return resource.getResponseField('Snapshot.MasterUsername') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.ClusterVersion'),
        outputPath: 'Snapshot.ClusterVersion',
        parameters: {
          SourceSnapshotIdentifier: this.__input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.__input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.__input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyClusterSnapshot.Snapshot.ClusterVersion', props);
    return resource.getResponseField('Snapshot.ClusterVersion') as unknown as string;
  }

  public get engineFullVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.EngineFullVersion'),
        outputPath: 'Snapshot.EngineFullVersion',
        parameters: {
          SourceSnapshotIdentifier: this.__input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.__input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.__input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyClusterSnapshot.Snapshot.EngineFullVersion', props);
    return resource.getResponseField('Snapshot.EngineFullVersion') as unknown as string;
  }

  public get snapshotType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.SnapshotType'),
        outputPath: 'Snapshot.SnapshotType',
        parameters: {
          SourceSnapshotIdentifier: this.__input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.__input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.__input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyClusterSnapshot.Snapshot.SnapshotType', props);
    return resource.getResponseField('Snapshot.SnapshotType') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.NodeType'),
        outputPath: 'Snapshot.NodeType',
        parameters: {
          SourceSnapshotIdentifier: this.__input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.__input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.__input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyClusterSnapshot.Snapshot.NodeType', props);
    return resource.getResponseField('Snapshot.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.NumberOfNodes'),
        outputPath: 'Snapshot.NumberOfNodes',
        parameters: {
          SourceSnapshotIdentifier: this.__input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.__input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.__input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyClusterSnapshot.Snapshot.NumberOfNodes', props);
    return resource.getResponseField('Snapshot.NumberOfNodes') as unknown as number;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.DBName'),
        outputPath: 'Snapshot.DBName',
        parameters: {
          SourceSnapshotIdentifier: this.__input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.__input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.__input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyClusterSnapshot.Snapshot.DBName', props);
    return resource.getResponseField('Snapshot.DBName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.VpcId'),
        outputPath: 'Snapshot.VpcId',
        parameters: {
          SourceSnapshotIdentifier: this.__input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.__input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.__input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyClusterSnapshot.Snapshot.VpcId', props);
    return resource.getResponseField('Snapshot.VpcId') as unknown as string;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.Encrypted'),
        outputPath: 'Snapshot.Encrypted',
        parameters: {
          SourceSnapshotIdentifier: this.__input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.__input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.__input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyClusterSnapshot.Snapshot.Encrypted', props);
    return resource.getResponseField('Snapshot.Encrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.KmsKeyId'),
        outputPath: 'Snapshot.KmsKeyId',
        parameters: {
          SourceSnapshotIdentifier: this.__input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.__input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.__input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyClusterSnapshot.Snapshot.KmsKeyId', props);
    return resource.getResponseField('Snapshot.KmsKeyId') as unknown as string;
  }

  public get encryptedWithHsm(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.EncryptedWithHSM'),
        outputPath: 'Snapshot.EncryptedWithHSM',
        parameters: {
          SourceSnapshotIdentifier: this.__input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.__input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.__input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyClusterSnapshot.Snapshot.EncryptedWithHSM', props);
    return resource.getResponseField('Snapshot.EncryptedWithHSM') as unknown as boolean;
  }

  public get accountsWithRestoreAccess(): shapes.RedshiftAccountWithRestoreAccess[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.AccountsWithRestoreAccess'),
        outputPath: 'Snapshot.AccountsWithRestoreAccess',
        parameters: {
          SourceSnapshotIdentifier: this.__input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.__input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.__input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyClusterSnapshot.Snapshot.AccountsWithRestoreAccess', props);
    return resource.getResponseField('Snapshot.AccountsWithRestoreAccess') as unknown as shapes.RedshiftAccountWithRestoreAccess[];
  }

  public get ownerAccount(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.OwnerAccount'),
        outputPath: 'Snapshot.OwnerAccount',
        parameters: {
          SourceSnapshotIdentifier: this.__input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.__input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.__input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyClusterSnapshot.Snapshot.OwnerAccount', props);
    return resource.getResponseField('Snapshot.OwnerAccount') as unknown as string;
  }

  public get totalBackupSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.TotalBackupSizeInMegaBytes'),
        outputPath: 'Snapshot.TotalBackupSizeInMegaBytes',
        parameters: {
          SourceSnapshotIdentifier: this.__input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.__input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.__input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyClusterSnapshot.Snapshot.TotalBackupSizeInMegaBytes', props);
    return resource.getResponseField('Snapshot.TotalBackupSizeInMegaBytes') as unknown as number;
  }

  public get actualIncrementalBackupSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.ActualIncrementalBackupSizeInMegaBytes'),
        outputPath: 'Snapshot.ActualIncrementalBackupSizeInMegaBytes',
        parameters: {
          SourceSnapshotIdentifier: this.__input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.__input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.__input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyClusterSnapshot.Snapshot.ActualIncrementalBackupSizeInMegaBytes', props);
    return resource.getResponseField('Snapshot.ActualIncrementalBackupSizeInMegaBytes') as unknown as number;
  }

  public get backupProgressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.BackupProgressInMegaBytes'),
        outputPath: 'Snapshot.BackupProgressInMegaBytes',
        parameters: {
          SourceSnapshotIdentifier: this.__input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.__input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.__input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyClusterSnapshot.Snapshot.BackupProgressInMegaBytes', props);
    return resource.getResponseField('Snapshot.BackupProgressInMegaBytes') as unknown as number;
  }

  public get currentBackupRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.CurrentBackupRateInMegaBytesPerSecond'),
        outputPath: 'Snapshot.CurrentBackupRateInMegaBytesPerSecond',
        parameters: {
          SourceSnapshotIdentifier: this.__input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.__input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.__input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyClusterSnapshot.Snapshot.CurrentBackupRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Snapshot.CurrentBackupRateInMegaBytesPerSecond') as unknown as number;
  }

  public get estimatedSecondsToCompletion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.EstimatedSecondsToCompletion'),
        outputPath: 'Snapshot.EstimatedSecondsToCompletion',
        parameters: {
          SourceSnapshotIdentifier: this.__input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.__input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.__input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyClusterSnapshot.Snapshot.EstimatedSecondsToCompletion', props);
    return resource.getResponseField('Snapshot.EstimatedSecondsToCompletion') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.ElapsedTimeInSeconds'),
        outputPath: 'Snapshot.ElapsedTimeInSeconds',
        parameters: {
          SourceSnapshotIdentifier: this.__input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.__input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.__input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyClusterSnapshot.Snapshot.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Snapshot.ElapsedTimeInSeconds') as unknown as number;
  }

  public get sourceRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.SourceRegion'),
        outputPath: 'Snapshot.SourceRegion',
        parameters: {
          SourceSnapshotIdentifier: this.__input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.__input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.__input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyClusterSnapshot.Snapshot.SourceRegion', props);
    return resource.getResponseField('Snapshot.SourceRegion') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.Tags'),
        outputPath: 'Snapshot.Tags',
        parameters: {
          SourceSnapshotIdentifier: this.__input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.__input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.__input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyClusterSnapshot.Snapshot.Tags', props);
    return resource.getResponseField('Snapshot.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get restorableNodeTypes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.RestorableNodeTypes'),
        outputPath: 'Snapshot.RestorableNodeTypes',
        parameters: {
          SourceSnapshotIdentifier: this.__input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.__input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.__input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyClusterSnapshot.Snapshot.RestorableNodeTypes', props);
    return resource.getResponseField('Snapshot.RestorableNodeTypes') as unknown as string[];
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.EnhancedVpcRouting'),
        outputPath: 'Snapshot.EnhancedVpcRouting',
        parameters: {
          SourceSnapshotIdentifier: this.__input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.__input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.__input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyClusterSnapshot.Snapshot.EnhancedVpcRouting', props);
    return resource.getResponseField('Snapshot.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.MaintenanceTrackName'),
        outputPath: 'Snapshot.MaintenanceTrackName',
        parameters: {
          SourceSnapshotIdentifier: this.__input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.__input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.__input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyClusterSnapshot.Snapshot.MaintenanceTrackName', props);
    return resource.getResponseField('Snapshot.MaintenanceTrackName') as unknown as string;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.ManualSnapshotRetentionPeriod'),
        outputPath: 'Snapshot.ManualSnapshotRetentionPeriod',
        parameters: {
          SourceSnapshotIdentifier: this.__input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.__input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.__input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyClusterSnapshot.Snapshot.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Snapshot.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRemainingDays(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.ManualSnapshotRemainingDays'),
        outputPath: 'Snapshot.ManualSnapshotRemainingDays',
        parameters: {
          SourceSnapshotIdentifier: this.__input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.__input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.__input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyClusterSnapshot.Snapshot.ManualSnapshotRemainingDays', props);
    return resource.getResponseField('Snapshot.ManualSnapshotRemainingDays') as unknown as number;
  }

  public get snapshotRetentionStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CopyClusterSnapshot.Snapshot.SnapshotRetentionStartTime'),
        outputPath: 'Snapshot.SnapshotRetentionStartTime',
        parameters: {
          SourceSnapshotIdentifier: this.__input.sourceSnapshotIdentifier,
          SourceSnapshotClusterIdentifier: this.__input.sourceSnapshotClusterIdentifier,
          TargetSnapshotIdentifier: this.__input.targetSnapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyClusterSnapshot.Snapshot.SnapshotRetentionStartTime', props);
    return resource.getResponseField('Snapshot.SnapshotRetentionStartTime') as unknown as string;
  }

}

export class RedshiftResponsesCreateAuthenticationProfile {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateAuthenticationProfileMessage) {
  }

  public get authenticationProfileName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createAuthenticationProfile',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateAuthenticationProfile.AuthenticationProfileName'),
        outputPath: 'AuthenticationProfileName',
        parameters: {
          AuthenticationProfileName: this.__input.authenticationProfileName,
          AuthenticationProfileContent: this.__input.authenticationProfileContent,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateAuthenticationProfile.AuthenticationProfileName', props);
    return resource.getResponseField('AuthenticationProfileName') as unknown as string;
  }

  public get authenticationProfileContent(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createAuthenticationProfile',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateAuthenticationProfile.AuthenticationProfileContent'),
        outputPath: 'AuthenticationProfileContent',
        parameters: {
          AuthenticationProfileName: this.__input.authenticationProfileName,
          AuthenticationProfileContent: this.__input.authenticationProfileContent,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateAuthenticationProfile.AuthenticationProfileContent', props);
    return resource.getResponseField('AuthenticationProfileContent') as unknown as string;
  }

}

export class RedshiftResponsesCreateCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateClusterMessage) {
  }

  public get cluster(): RedshiftResponsesCreateClusterCluster {
    return new RedshiftResponsesCreateClusterCluster(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesCreateClusterCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateClusterMessage) {
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ClusterIdentifier'),
        outputPath: 'Cluster.ClusterIdentifier',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.ClusterIdentifier') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.NodeType'),
        outputPath: 'Cluster.NodeType',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.NodeType', props);
    return resource.getResponseField('Cluster.NodeType') as unknown as string;
  }

  public get clusterStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ClusterStatus'),
        outputPath: 'Cluster.ClusterStatus',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.ClusterStatus', props);
    return resource.getResponseField('Cluster.ClusterStatus') as unknown as string;
  }

  public get clusterAvailabilityStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ClusterAvailabilityStatus'),
        outputPath: 'Cluster.ClusterAvailabilityStatus',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.ClusterAvailabilityStatus', props);
    return resource.getResponseField('Cluster.ClusterAvailabilityStatus') as unknown as string;
  }

  public get modifyStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ModifyStatus'),
        outputPath: 'Cluster.ModifyStatus',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.ModifyStatus', props);
    return resource.getResponseField('Cluster.ModifyStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.MasterUsername'),
        outputPath: 'Cluster.MasterUsername',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.MasterUsername', props);
    return resource.getResponseField('Cluster.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.DBName'),
        outputPath: 'Cluster.DBName',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.DBName', props);
    return resource.getResponseField('Cluster.DBName') as unknown as string;
  }

  public get endpoint(): RedshiftResponsesCreateClusterClusterEndpoint {
    return new RedshiftResponsesCreateClusterClusterEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ClusterCreateTime'),
        outputPath: 'Cluster.ClusterCreateTime',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.ClusterCreateTime', props);
    return resource.getResponseField('Cluster.ClusterCreateTime') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.AutomatedSnapshotRetentionPeriod',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ManualSnapshotRetentionPeriod',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterSecurityGroups(): shapes.RedshiftClusterSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ClusterSecurityGroups'),
        outputPath: 'Cluster.ClusterSecurityGroups',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.ClusterSecurityGroups', props);
    return resource.getResponseField('Cluster.ClusterSecurityGroups') as unknown as shapes.RedshiftClusterSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RedshiftVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.VpcSecurityGroups'),
        outputPath: 'Cluster.VpcSecurityGroups',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.VpcSecurityGroups', props);
    return resource.getResponseField('Cluster.VpcSecurityGroups') as unknown as shapes.RedshiftVpcSecurityGroupMembership[];
  }

  public get clusterParameterGroups(): shapes.RedshiftClusterParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ClusterParameterGroups'),
        outputPath: 'Cluster.ClusterParameterGroups',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.ClusterParameterGroups', props);
    return resource.getResponseField('Cluster.ClusterParameterGroups') as unknown as shapes.RedshiftClusterParameterGroupStatus[];
  }

  public get clusterSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ClusterSubnetGroupName'),
        outputPath: 'Cluster.ClusterSubnetGroupName',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.ClusterSubnetGroupName', props);
    return resource.getResponseField('Cluster.ClusterSubnetGroupName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.VpcId'),
        outputPath: 'Cluster.VpcId',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.VpcId', props);
    return resource.getResponseField('Cluster.VpcId') as unknown as string;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.AvailabilityZone'),
        outputPath: 'Cluster.AvailabilityZone',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.AvailabilityZone', props);
    return resource.getResponseField('Cluster.AvailabilityZone') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.PreferredMaintenanceWindow'),
        outputPath: 'Cluster.PreferredMaintenanceWindow',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('Cluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RedshiftResponsesCreateClusterClusterPendingModifiedValues {
    return new RedshiftResponsesCreateClusterClusterPendingModifiedValues(this.__scope, this.__resources, this.__input);
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ClusterVersion'),
        outputPath: 'Cluster.ClusterVersion',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.ClusterVersion', props);
    return resource.getResponseField('Cluster.ClusterVersion') as unknown as string;
  }

  public get allowVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.AllowVersionUpgrade'),
        outputPath: 'Cluster.AllowVersionUpgrade',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.AllowVersionUpgrade', props);
    return resource.getResponseField('Cluster.AllowVersionUpgrade') as unknown as boolean;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.NumberOfNodes'),
        outputPath: 'Cluster.NumberOfNodes',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.NumberOfNodes', props);
    return resource.getResponseField('Cluster.NumberOfNodes') as unknown as number;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.PubliclyAccessible'),
        outputPath: 'Cluster.PubliclyAccessible',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PubliclyAccessible') as unknown as boolean;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.Encrypted'),
        outputPath: 'Cluster.Encrypted',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.Encrypted', props);
    return resource.getResponseField('Cluster.Encrypted') as unknown as boolean;
  }

  public get restoreStatus(): RedshiftResponsesCreateClusterClusterRestoreStatus {
    return new RedshiftResponsesCreateClusterClusterRestoreStatus(this.__scope, this.__resources, this.__input);
  }

  public get dataTransferProgress(): RedshiftResponsesCreateClusterClusterDataTransferProgress {
    return new RedshiftResponsesCreateClusterClusterDataTransferProgress(this.__scope, this.__resources, this.__input);
  }

  public get hsmStatus(): RedshiftResponsesCreateClusterClusterHsmStatus {
    return new RedshiftResponsesCreateClusterClusterHsmStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterSnapshotCopyStatus(): RedshiftResponsesCreateClusterClusterClusterSnapshotCopyStatus {
    return new RedshiftResponsesCreateClusterClusterClusterSnapshotCopyStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterPublicKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ClusterPublicKey'),
        outputPath: 'Cluster.ClusterPublicKey',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.ClusterPublicKey', props);
    return resource.getResponseField('Cluster.ClusterPublicKey') as unknown as string;
  }

  public get clusterNodes(): shapes.RedshiftClusterNode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ClusterNodes'),
        outputPath: 'Cluster.ClusterNodes',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.ClusterNodes', props);
    return resource.getResponseField('Cluster.ClusterNodes') as unknown as shapes.RedshiftClusterNode[];
  }

  public get elasticIpStatus(): RedshiftResponsesCreateClusterClusterElasticIpStatus {
    return new RedshiftResponsesCreateClusterClusterElasticIpStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterRevisionNumber(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ClusterRevisionNumber'),
        outputPath: 'Cluster.ClusterRevisionNumber',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.ClusterRevisionNumber', props);
    return resource.getResponseField('Cluster.ClusterRevisionNumber') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.Tags'),
        outputPath: 'Cluster.Tags',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.Tags', props);
    return resource.getResponseField('Cluster.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.KmsKeyId'),
        outputPath: 'Cluster.KmsKeyId',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.KmsKeyId', props);
    return resource.getResponseField('Cluster.KmsKeyId') as unknown as string;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.EnhancedVpcRouting'),
        outputPath: 'Cluster.EnhancedVpcRouting',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.EnhancedVpcRouting') as unknown as boolean;
  }

  public get iamRoles(): shapes.RedshiftClusterIamRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.IamRoles'),
        outputPath: 'Cluster.IamRoles',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.IamRoles', props);
    return resource.getResponseField('Cluster.IamRoles') as unknown as shapes.RedshiftClusterIamRole[];
  }

  public get pendingActions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.PendingActions'),
        outputPath: 'Cluster.PendingActions',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.PendingActions', props);
    return resource.getResponseField('Cluster.PendingActions') as unknown as string[];
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.MaintenanceTrackName'),
        outputPath: 'Cluster.MaintenanceTrackName',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.MaintenanceTrackName') as unknown as string;
  }

  public get elasticResizeNumberOfNodeOptions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ElasticResizeNumberOfNodeOptions'),
        outputPath: 'Cluster.ElasticResizeNumberOfNodeOptions',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.ElasticResizeNumberOfNodeOptions', props);
    return resource.getResponseField('Cluster.ElasticResizeNumberOfNodeOptions') as unknown as string;
  }

  public get deferredMaintenanceWindows(): shapes.RedshiftDeferredMaintenanceWindow[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.DeferredMaintenanceWindows'),
        outputPath: 'Cluster.DeferredMaintenanceWindows',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.DeferredMaintenanceWindows', props);
    return resource.getResponseField('Cluster.DeferredMaintenanceWindows') as unknown as shapes.RedshiftDeferredMaintenanceWindow[];
  }

  public get snapshotScheduleIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.SnapshotScheduleIdentifier'),
        outputPath: 'Cluster.SnapshotScheduleIdentifier',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.SnapshotScheduleIdentifier', props);
    return resource.getResponseField('Cluster.SnapshotScheduleIdentifier') as unknown as string;
  }

  public get snapshotScheduleState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.SnapshotScheduleState'),
        outputPath: 'Cluster.SnapshotScheduleState',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.SnapshotScheduleState', props);
    return resource.getResponseField('Cluster.SnapshotScheduleState') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ExpectedNextSnapshotScheduleTime'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTime',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.ExpectedNextSnapshotScheduleTime', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTime') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTimeStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ExpectedNextSnapshotScheduleTimeStatus'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTimeStatus',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.ExpectedNextSnapshotScheduleTimeStatus', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTimeStatus') as unknown as string;
  }

  public get nextMaintenanceWindowStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.NextMaintenanceWindowStartTime'),
        outputPath: 'Cluster.NextMaintenanceWindowStartTime',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.NextMaintenanceWindowStartTime', props);
    return resource.getResponseField('Cluster.NextMaintenanceWindowStartTime') as unknown as string;
  }

  public get resizeInfo(): RedshiftResponsesCreateClusterClusterResizeInfo {
    return new RedshiftResponsesCreateClusterClusterResizeInfo(this.__scope, this.__resources, this.__input);
  }

  public get availabilityZoneRelocationStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.AvailabilityZoneRelocationStatus'),
        outputPath: 'Cluster.AvailabilityZoneRelocationStatus',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.AvailabilityZoneRelocationStatus', props);
    return resource.getResponseField('Cluster.AvailabilityZoneRelocationStatus') as unknown as string;
  }

  public get clusterNamespaceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ClusterNamespaceArn'),
        outputPath: 'Cluster.ClusterNamespaceArn',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.ClusterNamespaceArn', props);
    return resource.getResponseField('Cluster.ClusterNamespaceArn') as unknown as string;
  }

  public get totalStorageCapacityInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.TotalStorageCapacityInMegaBytes'),
        outputPath: 'Cluster.TotalStorageCapacityInMegaBytes',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.TotalStorageCapacityInMegaBytes', props);
    return resource.getResponseField('Cluster.TotalStorageCapacityInMegaBytes') as unknown as number;
  }

  public get aquaConfiguration(): RedshiftResponsesCreateClusterClusterAquaConfiguration {
    return new RedshiftResponsesCreateClusterClusterAquaConfiguration(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesCreateClusterClusterEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateClusterMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.Endpoint.Address'),
        outputPath: 'Cluster.Endpoint.Address',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.Endpoint.Address', props);
    return resource.getResponseField('Cluster.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.Endpoint.Port'),
        outputPath: 'Cluster.Endpoint.Port',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.Endpoint.Port', props);
    return resource.getResponseField('Cluster.Endpoint.Port') as unknown as number;
  }

  public get vpcEndpoints(): shapes.RedshiftVpcEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.Endpoint.VpcEndpoints'),
        outputPath: 'Cluster.Endpoint.VpcEndpoints',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.Endpoint.VpcEndpoints', props);
    return resource.getResponseField('Cluster.Endpoint.VpcEndpoints') as unknown as shapes.RedshiftVpcEndpoint[];
  }

}

export class RedshiftResponsesCreateClusterClusterPendingModifiedValues {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateClusterMessage) {
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'Cluster.PendingModifiedValues.MasterUserPassword',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.PendingModifiedValues.NodeType'),
        outputPath: 'Cluster.PendingModifiedValues.NodeType',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.PendingModifiedValues.NodeType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.PendingModifiedValues.NumberOfNodes'),
        outputPath: 'Cluster.PendingModifiedValues.NumberOfNodes',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.PendingModifiedValues.NumberOfNodes', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NumberOfNodes') as unknown as number;
  }

  public get clusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.PendingModifiedValues.ClusterType'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterType',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.PendingModifiedValues.ClusterType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterType') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.PendingModifiedValues.ClusterVersion'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterVersion',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.PendingModifiedValues.ClusterVersion', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterVersion') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.PendingModifiedValues.ClusterIdentifier'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterIdentifier',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.PendingModifiedValues.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterIdentifier') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.PendingModifiedValues.PubliclyAccessible'),
        outputPath: 'Cluster.PendingModifiedValues.PubliclyAccessible',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.PendingModifiedValues.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.PubliclyAccessible') as unknown as boolean;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.PendingModifiedValues.EnhancedVpcRouting'),
        outputPath: 'Cluster.PendingModifiedValues.EnhancedVpcRouting',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.PendingModifiedValues.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.PendingModifiedValues.MaintenanceTrackName'),
        outputPath: 'Cluster.PendingModifiedValues.MaintenanceTrackName',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.PendingModifiedValues.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MaintenanceTrackName') as unknown as string;
  }

  public get encryptionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.PendingModifiedValues.EncryptionType'),
        outputPath: 'Cluster.PendingModifiedValues.EncryptionType',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.PendingModifiedValues.EncryptionType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EncryptionType') as unknown as string;
  }

}

export class RedshiftResponsesCreateClusterClusterRestoreStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateClusterMessage) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.RestoreStatus.Status'),
        outputPath: 'Cluster.RestoreStatus.Status',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.RestoreStatus.Status', props);
    return resource.getResponseField('Cluster.RestoreStatus.Status') as unknown as string;
  }

  public get currentRestoreRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond') as unknown as number;
  }

  public get snapshotSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.RestoreStatus.SnapshotSizeInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.SnapshotSizeInMegaBytes',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.RestoreStatus.SnapshotSizeInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.SnapshotSizeInMegaBytes') as unknown as number;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.RestoreStatus.ProgressInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.ProgressInMegaBytes',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.RestoreStatus.ProgressInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.ProgressInMegaBytes') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.RestoreStatus.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.RestoreStatus.ElapsedTimeInSeconds',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.RestoreStatus.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.ElapsedTimeInSeconds') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

}

export class RedshiftResponsesCreateClusterClusterDataTransferProgress {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateClusterMessage) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.DataTransferProgress.Status'),
        outputPath: 'Cluster.DataTransferProgress.Status',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.DataTransferProgress.Status', props);
    return resource.getResponseField('Cluster.DataTransferProgress.Status') as unknown as string;
  }

  public get currentRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond') as unknown as number;
  }

  public get totalDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.DataTransferProgress.TotalDataInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.TotalDataInMegaBytes',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.DataTransferProgress.TotalDataInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.TotalDataInMegaBytes') as unknown as number;
  }

  public get dataTransferredInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.DataTransferProgress.DataTransferredInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.DataTransferredInMegaBytes',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.DataTransferProgress.DataTransferredInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.DataTransferredInMegaBytes') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.DataTransferProgress.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.ElapsedTimeInSeconds',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.DataTransferProgress.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.ElapsedTimeInSeconds') as unknown as number;
  }

}

export class RedshiftResponsesCreateClusterClusterHsmStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateClusterMessage) {
  }

  public get hsmClientCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.HsmStatus.HsmClientCertificateIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmClientCertificateIdentifier',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.HsmStatus.HsmClientCertificateIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmClientCertificateIdentifier') as unknown as string;
  }

  public get hsmConfigurationIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.HsmStatus.HsmConfigurationIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmConfigurationIdentifier',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.HsmStatus.HsmConfigurationIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmConfigurationIdentifier') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.HsmStatus.Status'),
        outputPath: 'Cluster.HsmStatus.Status',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.HsmStatus.Status', props);
    return resource.getResponseField('Cluster.HsmStatus.Status') as unknown as string;
  }

}

export class RedshiftResponsesCreateClusterClusterClusterSnapshotCopyStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateClusterMessage) {
  }

  public get destinationRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ClusterSnapshotCopyStatus.DestinationRegion'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.DestinationRegion',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.ClusterSnapshotCopyStatus.DestinationRegion', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.DestinationRegion') as unknown as string;
  }

  public get retentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.RetentionPeriod',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.RetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get snapshotCopyGrantName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName') as unknown as string;
  }

}

export class RedshiftResponsesCreateClusterClusterElasticIpStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateClusterMessage) {
  }

  public get elasticIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ElasticIpStatus.ElasticIp'),
        outputPath: 'Cluster.ElasticIpStatus.ElasticIp',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.ElasticIpStatus.ElasticIp', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.ElasticIp') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ElasticIpStatus.Status'),
        outputPath: 'Cluster.ElasticIpStatus.Status',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.ElasticIpStatus.Status', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.Status') as unknown as string;
  }

}

export class RedshiftResponsesCreateClusterClusterResizeInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateClusterMessage) {
  }

  public get resizeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ResizeInfo.ResizeType'),
        outputPath: 'Cluster.ResizeInfo.ResizeType',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.ResizeInfo.ResizeType', props);
    return resource.getResponseField('Cluster.ResizeInfo.ResizeType') as unknown as string;
  }

  public get allowCancelResize(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.ResizeInfo.AllowCancelResize'),
        outputPath: 'Cluster.ResizeInfo.AllowCancelResize',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.ResizeInfo.AllowCancelResize', props);
    return resource.getResponseField('Cluster.ResizeInfo.AllowCancelResize') as unknown as boolean;
  }

}

export class RedshiftResponsesCreateClusterClusterAquaConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateClusterMessage) {
  }

  public get aquaStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.AquaConfiguration.AquaStatus'),
        outputPath: 'Cluster.AquaConfiguration.AquaStatus',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.AquaConfiguration.AquaStatus', props);
    return resource.getResponseField('Cluster.AquaConfiguration.AquaStatus') as unknown as string;
  }

  public get aquaConfigurationStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateCluster.Cluster.AquaConfiguration.AquaConfigurationStatus'),
        outputPath: 'Cluster.AquaConfiguration.AquaConfigurationStatus',
        parameters: {
          DBName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          AvailabilityZone: this.__input.availabilityZone,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Port: this.__input.port,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          NumberOfNodes: this.__input.numberOfNodes,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Encrypted: this.__input.encrypted,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCluster.Cluster.AquaConfiguration.AquaConfigurationStatus', props);
    return resource.getResponseField('Cluster.AquaConfiguration.AquaConfigurationStatus') as unknown as string;
  }

}

export class RedshiftResponsesCreateClusterParameterGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateClusterParameterGroupMessage) {
  }

  public get clusterParameterGroup(): RedshiftResponsesCreateClusterParameterGroupClusterParameterGroup {
    return new RedshiftResponsesCreateClusterParameterGroupClusterParameterGroup(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesCreateClusterParameterGroupClusterParameterGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateClusterParameterGroupMessage) {
  }

  public get parameterGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterParameterGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterParameterGroup.ClusterParameterGroup.ParameterGroupName'),
        outputPath: 'ClusterParameterGroup.ParameterGroupName',
        parameters: {
          ParameterGroupName: this.__input.parameterGroupName,
          ParameterGroupFamily: this.__input.parameterGroupFamily,
          Description: this.__input.description,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterParameterGroup.ClusterParameterGroup.ParameterGroupName', props);
    return resource.getResponseField('ClusterParameterGroup.ParameterGroupName') as unknown as string;
  }

  public get parameterGroupFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterParameterGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterParameterGroup.ClusterParameterGroup.ParameterGroupFamily'),
        outputPath: 'ClusterParameterGroup.ParameterGroupFamily',
        parameters: {
          ParameterGroupName: this.__input.parameterGroupName,
          ParameterGroupFamily: this.__input.parameterGroupFamily,
          Description: this.__input.description,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterParameterGroup.ClusterParameterGroup.ParameterGroupFamily', props);
    return resource.getResponseField('ClusterParameterGroup.ParameterGroupFamily') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterParameterGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterParameterGroup.ClusterParameterGroup.Description'),
        outputPath: 'ClusterParameterGroup.Description',
        parameters: {
          ParameterGroupName: this.__input.parameterGroupName,
          ParameterGroupFamily: this.__input.parameterGroupFamily,
          Description: this.__input.description,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterParameterGroup.ClusterParameterGroup.Description', props);
    return resource.getResponseField('ClusterParameterGroup.Description') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterParameterGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterParameterGroup.ClusterParameterGroup.Tags'),
        outputPath: 'ClusterParameterGroup.Tags',
        parameters: {
          ParameterGroupName: this.__input.parameterGroupName,
          ParameterGroupFamily: this.__input.parameterGroupFamily,
          Description: this.__input.description,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterParameterGroup.ClusterParameterGroup.Tags', props);
    return resource.getResponseField('ClusterParameterGroup.Tags') as unknown as shapes.RedshiftTag[];
  }

}

export class RedshiftResponsesCreateClusterSecurityGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateClusterSecurityGroupMessage) {
  }

  public get clusterSecurityGroup(): RedshiftResponsesCreateClusterSecurityGroupClusterSecurityGroup {
    return new RedshiftResponsesCreateClusterSecurityGroupClusterSecurityGroup(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesCreateClusterSecurityGroupClusterSecurityGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateClusterSecurityGroupMessage) {
  }

  public get clusterSecurityGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSecurityGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSecurityGroup.ClusterSecurityGroup.ClusterSecurityGroupName'),
        outputPath: 'ClusterSecurityGroup.ClusterSecurityGroupName',
        parameters: {
          ClusterSecurityGroupName: this.__input.clusterSecurityGroupName,
          Description: this.__input.description,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSecurityGroup.ClusterSecurityGroup.ClusterSecurityGroupName', props);
    return resource.getResponseField('ClusterSecurityGroup.ClusterSecurityGroupName') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSecurityGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSecurityGroup.ClusterSecurityGroup.Description'),
        outputPath: 'ClusterSecurityGroup.Description',
        parameters: {
          ClusterSecurityGroupName: this.__input.clusterSecurityGroupName,
          Description: this.__input.description,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSecurityGroup.ClusterSecurityGroup.Description', props);
    return resource.getResponseField('ClusterSecurityGroup.Description') as unknown as string;
  }

  public get ec2SecurityGroups(): shapes.RedshiftEc2SecurityGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSecurityGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSecurityGroup.ClusterSecurityGroup.EC2SecurityGroups'),
        outputPath: 'ClusterSecurityGroup.EC2SecurityGroups',
        parameters: {
          ClusterSecurityGroupName: this.__input.clusterSecurityGroupName,
          Description: this.__input.description,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSecurityGroup.ClusterSecurityGroup.EC2SecurityGroups', props);
    return resource.getResponseField('ClusterSecurityGroup.EC2SecurityGroups') as unknown as shapes.RedshiftEc2SecurityGroup[];
  }

  public get ipRanges(): shapes.RedshiftIpRange[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSecurityGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSecurityGroup.ClusterSecurityGroup.IPRanges'),
        outputPath: 'ClusterSecurityGroup.IPRanges',
        parameters: {
          ClusterSecurityGroupName: this.__input.clusterSecurityGroupName,
          Description: this.__input.description,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSecurityGroup.ClusterSecurityGroup.IPRanges', props);
    return resource.getResponseField('ClusterSecurityGroup.IPRanges') as unknown as shapes.RedshiftIpRange[];
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSecurityGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSecurityGroup.ClusterSecurityGroup.Tags'),
        outputPath: 'ClusterSecurityGroup.Tags',
        parameters: {
          ClusterSecurityGroupName: this.__input.clusterSecurityGroupName,
          Description: this.__input.description,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSecurityGroup.ClusterSecurityGroup.Tags', props);
    return resource.getResponseField('ClusterSecurityGroup.Tags') as unknown as shapes.RedshiftTag[];
  }

}

export class RedshiftResponsesCreateClusterSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateClusterSnapshotMessage) {
  }

  public get snapshot(): RedshiftResponsesCreateClusterSnapshotSnapshot {
    return new RedshiftResponsesCreateClusterSnapshotSnapshot(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesCreateClusterSnapshotSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateClusterSnapshotMessage) {
  }

  public get snapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.SnapshotIdentifier'),
        outputPath: 'Snapshot.SnapshotIdentifier',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSnapshot.Snapshot.SnapshotIdentifier', props);
    return resource.getResponseField('Snapshot.SnapshotIdentifier') as unknown as string;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.ClusterIdentifier'),
        outputPath: 'Snapshot.ClusterIdentifier',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSnapshot.Snapshot.ClusterIdentifier', props);
    return resource.getResponseField('Snapshot.ClusterIdentifier') as unknown as string;
  }

  public get snapshotCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.SnapshotCreateTime'),
        outputPath: 'Snapshot.SnapshotCreateTime',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSnapshot.Snapshot.SnapshotCreateTime', props);
    return resource.getResponseField('Snapshot.SnapshotCreateTime') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.Status'),
        outputPath: 'Snapshot.Status',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSnapshot.Snapshot.Status', props);
    return resource.getResponseField('Snapshot.Status') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.Port'),
        outputPath: 'Snapshot.Port',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSnapshot.Snapshot.Port', props);
    return resource.getResponseField('Snapshot.Port') as unknown as number;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.AvailabilityZone'),
        outputPath: 'Snapshot.AvailabilityZone',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSnapshot.Snapshot.AvailabilityZone', props);
    return resource.getResponseField('Snapshot.AvailabilityZone') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.ClusterCreateTime'),
        outputPath: 'Snapshot.ClusterCreateTime',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSnapshot.Snapshot.ClusterCreateTime', props);
    return resource.getResponseField('Snapshot.ClusterCreateTime') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.MasterUsername'),
        outputPath: 'Snapshot.MasterUsername',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSnapshot.Snapshot.MasterUsername', props);
    return resource.getResponseField('Snapshot.MasterUsername') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.ClusterVersion'),
        outputPath: 'Snapshot.ClusterVersion',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSnapshot.Snapshot.ClusterVersion', props);
    return resource.getResponseField('Snapshot.ClusterVersion') as unknown as string;
  }

  public get engineFullVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.EngineFullVersion'),
        outputPath: 'Snapshot.EngineFullVersion',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSnapshot.Snapshot.EngineFullVersion', props);
    return resource.getResponseField('Snapshot.EngineFullVersion') as unknown as string;
  }

  public get snapshotType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.SnapshotType'),
        outputPath: 'Snapshot.SnapshotType',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSnapshot.Snapshot.SnapshotType', props);
    return resource.getResponseField('Snapshot.SnapshotType') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.NodeType'),
        outputPath: 'Snapshot.NodeType',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSnapshot.Snapshot.NodeType', props);
    return resource.getResponseField('Snapshot.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.NumberOfNodes'),
        outputPath: 'Snapshot.NumberOfNodes',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSnapshot.Snapshot.NumberOfNodes', props);
    return resource.getResponseField('Snapshot.NumberOfNodes') as unknown as number;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.DBName'),
        outputPath: 'Snapshot.DBName',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSnapshot.Snapshot.DBName', props);
    return resource.getResponseField('Snapshot.DBName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.VpcId'),
        outputPath: 'Snapshot.VpcId',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSnapshot.Snapshot.VpcId', props);
    return resource.getResponseField('Snapshot.VpcId') as unknown as string;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.Encrypted'),
        outputPath: 'Snapshot.Encrypted',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSnapshot.Snapshot.Encrypted', props);
    return resource.getResponseField('Snapshot.Encrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.KmsKeyId'),
        outputPath: 'Snapshot.KmsKeyId',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSnapshot.Snapshot.KmsKeyId', props);
    return resource.getResponseField('Snapshot.KmsKeyId') as unknown as string;
  }

  public get encryptedWithHsm(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.EncryptedWithHSM'),
        outputPath: 'Snapshot.EncryptedWithHSM',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSnapshot.Snapshot.EncryptedWithHSM', props);
    return resource.getResponseField('Snapshot.EncryptedWithHSM') as unknown as boolean;
  }

  public get accountsWithRestoreAccess(): shapes.RedshiftAccountWithRestoreAccess[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.AccountsWithRestoreAccess'),
        outputPath: 'Snapshot.AccountsWithRestoreAccess',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSnapshot.Snapshot.AccountsWithRestoreAccess', props);
    return resource.getResponseField('Snapshot.AccountsWithRestoreAccess') as unknown as shapes.RedshiftAccountWithRestoreAccess[];
  }

  public get ownerAccount(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.OwnerAccount'),
        outputPath: 'Snapshot.OwnerAccount',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSnapshot.Snapshot.OwnerAccount', props);
    return resource.getResponseField('Snapshot.OwnerAccount') as unknown as string;
  }

  public get totalBackupSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.TotalBackupSizeInMegaBytes'),
        outputPath: 'Snapshot.TotalBackupSizeInMegaBytes',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSnapshot.Snapshot.TotalBackupSizeInMegaBytes', props);
    return resource.getResponseField('Snapshot.TotalBackupSizeInMegaBytes') as unknown as number;
  }

  public get actualIncrementalBackupSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.ActualIncrementalBackupSizeInMegaBytes'),
        outputPath: 'Snapshot.ActualIncrementalBackupSizeInMegaBytes',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSnapshot.Snapshot.ActualIncrementalBackupSizeInMegaBytes', props);
    return resource.getResponseField('Snapshot.ActualIncrementalBackupSizeInMegaBytes') as unknown as number;
  }

  public get backupProgressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.BackupProgressInMegaBytes'),
        outputPath: 'Snapshot.BackupProgressInMegaBytes',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSnapshot.Snapshot.BackupProgressInMegaBytes', props);
    return resource.getResponseField('Snapshot.BackupProgressInMegaBytes') as unknown as number;
  }

  public get currentBackupRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.CurrentBackupRateInMegaBytesPerSecond'),
        outputPath: 'Snapshot.CurrentBackupRateInMegaBytesPerSecond',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSnapshot.Snapshot.CurrentBackupRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Snapshot.CurrentBackupRateInMegaBytesPerSecond') as unknown as number;
  }

  public get estimatedSecondsToCompletion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.EstimatedSecondsToCompletion'),
        outputPath: 'Snapshot.EstimatedSecondsToCompletion',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSnapshot.Snapshot.EstimatedSecondsToCompletion', props);
    return resource.getResponseField('Snapshot.EstimatedSecondsToCompletion') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.ElapsedTimeInSeconds'),
        outputPath: 'Snapshot.ElapsedTimeInSeconds',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSnapshot.Snapshot.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Snapshot.ElapsedTimeInSeconds') as unknown as number;
  }

  public get sourceRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.SourceRegion'),
        outputPath: 'Snapshot.SourceRegion',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSnapshot.Snapshot.SourceRegion', props);
    return resource.getResponseField('Snapshot.SourceRegion') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.Tags'),
        outputPath: 'Snapshot.Tags',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSnapshot.Snapshot.Tags', props);
    return resource.getResponseField('Snapshot.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get restorableNodeTypes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.RestorableNodeTypes'),
        outputPath: 'Snapshot.RestorableNodeTypes',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSnapshot.Snapshot.RestorableNodeTypes', props);
    return resource.getResponseField('Snapshot.RestorableNodeTypes') as unknown as string[];
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.EnhancedVpcRouting'),
        outputPath: 'Snapshot.EnhancedVpcRouting',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSnapshot.Snapshot.EnhancedVpcRouting', props);
    return resource.getResponseField('Snapshot.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.MaintenanceTrackName'),
        outputPath: 'Snapshot.MaintenanceTrackName',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSnapshot.Snapshot.MaintenanceTrackName', props);
    return resource.getResponseField('Snapshot.MaintenanceTrackName') as unknown as string;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.ManualSnapshotRetentionPeriod'),
        outputPath: 'Snapshot.ManualSnapshotRetentionPeriod',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSnapshot.Snapshot.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Snapshot.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRemainingDays(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.ManualSnapshotRemainingDays'),
        outputPath: 'Snapshot.ManualSnapshotRemainingDays',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSnapshot.Snapshot.ManualSnapshotRemainingDays', props);
    return resource.getResponseField('Snapshot.ManualSnapshotRemainingDays') as unknown as number;
  }

  public get snapshotRetentionStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSnapshot.Snapshot.SnapshotRetentionStartTime'),
        outputPath: 'Snapshot.SnapshotRetentionStartTime',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ClusterIdentifier: this.__input.clusterIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSnapshot.Snapshot.SnapshotRetentionStartTime', props);
    return resource.getResponseField('Snapshot.SnapshotRetentionStartTime') as unknown as string;
  }

}

export class RedshiftResponsesCreateClusterSubnetGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateClusterSubnetGroupMessage) {
  }

  public get clusterSubnetGroup(): RedshiftResponsesCreateClusterSubnetGroupClusterSubnetGroup {
    return new RedshiftResponsesCreateClusterSubnetGroupClusterSubnetGroup(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesCreateClusterSubnetGroupClusterSubnetGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateClusterSubnetGroupMessage) {
  }

  public get clusterSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSubnetGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSubnetGroup.ClusterSubnetGroup.ClusterSubnetGroupName'),
        outputPath: 'ClusterSubnetGroup.ClusterSubnetGroupName',
        parameters: {
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          Description: this.__input.description,
          SubnetIds: this.__input.subnetIds,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSubnetGroup.ClusterSubnetGroup.ClusterSubnetGroupName', props);
    return resource.getResponseField('ClusterSubnetGroup.ClusterSubnetGroupName') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSubnetGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSubnetGroup.ClusterSubnetGroup.Description'),
        outputPath: 'ClusterSubnetGroup.Description',
        parameters: {
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          Description: this.__input.description,
          SubnetIds: this.__input.subnetIds,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSubnetGroup.ClusterSubnetGroup.Description', props);
    return resource.getResponseField('ClusterSubnetGroup.Description') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSubnetGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSubnetGroup.ClusterSubnetGroup.VpcId'),
        outputPath: 'ClusterSubnetGroup.VpcId',
        parameters: {
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          Description: this.__input.description,
          SubnetIds: this.__input.subnetIds,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSubnetGroup.ClusterSubnetGroup.VpcId', props);
    return resource.getResponseField('ClusterSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSubnetGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSubnetGroup.ClusterSubnetGroup.SubnetGroupStatus'),
        outputPath: 'ClusterSubnetGroup.SubnetGroupStatus',
        parameters: {
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          Description: this.__input.description,
          SubnetIds: this.__input.subnetIds,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSubnetGroup.ClusterSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('ClusterSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.RedshiftSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSubnetGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSubnetGroup.ClusterSubnetGroup.Subnets'),
        outputPath: 'ClusterSubnetGroup.Subnets',
        parameters: {
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          Description: this.__input.description,
          SubnetIds: this.__input.subnetIds,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSubnetGroup.ClusterSubnetGroup.Subnets', props);
    return resource.getResponseField('ClusterSubnetGroup.Subnets') as unknown as shapes.RedshiftSubnet[];
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClusterSubnetGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateClusterSubnetGroup.ClusterSubnetGroup.Tags'),
        outputPath: 'ClusterSubnetGroup.Tags',
        parameters: {
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          Description: this.__input.description,
          SubnetIds: this.__input.subnetIds,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClusterSubnetGroup.ClusterSubnetGroup.Tags', props);
    return resource.getResponseField('ClusterSubnetGroup.Tags') as unknown as shapes.RedshiftTag[];
  }

}

export class RedshiftResponsesCreateEndpointAccess {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateEndpointAccessMessage) {
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateEndpointAccess.ClusterIdentifier'),
        outputPath: 'ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ResourceOwner: this.__input.resourceOwner,
          EndpointName: this.__input.endpointName,
          SubnetGroupName: this.__input.subnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEndpointAccess.ClusterIdentifier', props);
    return resource.getResponseField('ClusterIdentifier') as unknown as string;
  }

  public get resourceOwner(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateEndpointAccess.ResourceOwner'),
        outputPath: 'ResourceOwner',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ResourceOwner: this.__input.resourceOwner,
          EndpointName: this.__input.endpointName,
          SubnetGroupName: this.__input.subnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEndpointAccess.ResourceOwner', props);
    return resource.getResponseField('ResourceOwner') as unknown as string;
  }

  public get subnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateEndpointAccess.SubnetGroupName'),
        outputPath: 'SubnetGroupName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ResourceOwner: this.__input.resourceOwner,
          EndpointName: this.__input.endpointName,
          SubnetGroupName: this.__input.subnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEndpointAccess.SubnetGroupName', props);
    return resource.getResponseField('SubnetGroupName') as unknown as string;
  }

  public get endpointStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateEndpointAccess.EndpointStatus'),
        outputPath: 'EndpointStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ResourceOwner: this.__input.resourceOwner,
          EndpointName: this.__input.endpointName,
          SubnetGroupName: this.__input.subnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEndpointAccess.EndpointStatus', props);
    return resource.getResponseField('EndpointStatus') as unknown as string;
  }

  public get endpointName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateEndpointAccess.EndpointName'),
        outputPath: 'EndpointName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ResourceOwner: this.__input.resourceOwner,
          EndpointName: this.__input.endpointName,
          SubnetGroupName: this.__input.subnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEndpointAccess.EndpointName', props);
    return resource.getResponseField('EndpointName') as unknown as string;
  }

  public get endpointCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateEndpointAccess.EndpointCreateTime'),
        outputPath: 'EndpointCreateTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ResourceOwner: this.__input.resourceOwner,
          EndpointName: this.__input.endpointName,
          SubnetGroupName: this.__input.subnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEndpointAccess.EndpointCreateTime', props);
    return resource.getResponseField('EndpointCreateTime') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateEndpointAccess.Port'),
        outputPath: 'Port',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ResourceOwner: this.__input.resourceOwner,
          EndpointName: this.__input.endpointName,
          SubnetGroupName: this.__input.subnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEndpointAccess.Port', props);
    return resource.getResponseField('Port') as unknown as number;
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateEndpointAccess.Address'),
        outputPath: 'Address',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ResourceOwner: this.__input.resourceOwner,
          EndpointName: this.__input.endpointName,
          SubnetGroupName: this.__input.subnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEndpointAccess.Address', props);
    return resource.getResponseField('Address') as unknown as string;
  }

  public get vpcSecurityGroups(): shapes.RedshiftVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateEndpointAccess.VpcSecurityGroups'),
        outputPath: 'VpcSecurityGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ResourceOwner: this.__input.resourceOwner,
          EndpointName: this.__input.endpointName,
          SubnetGroupName: this.__input.subnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEndpointAccess.VpcSecurityGroups', props);
    return resource.getResponseField('VpcSecurityGroups') as unknown as shapes.RedshiftVpcSecurityGroupMembership[];
  }

  public get vpcEndpoint(): RedshiftResponsesCreateEndpointAccessVpcEndpoint {
    return new RedshiftResponsesCreateEndpointAccessVpcEndpoint(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesCreateEndpointAccessVpcEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateEndpointAccessMessage) {
  }

  public get vpcEndpointId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateEndpointAccess.VpcEndpoint.VpcEndpointId'),
        outputPath: 'VpcEndpoint.VpcEndpointId',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ResourceOwner: this.__input.resourceOwner,
          EndpointName: this.__input.endpointName,
          SubnetGroupName: this.__input.subnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEndpointAccess.VpcEndpoint.VpcEndpointId', props);
    return resource.getResponseField('VpcEndpoint.VpcEndpointId') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateEndpointAccess.VpcEndpoint.VpcId'),
        outputPath: 'VpcEndpoint.VpcId',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ResourceOwner: this.__input.resourceOwner,
          EndpointName: this.__input.endpointName,
          SubnetGroupName: this.__input.subnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEndpointAccess.VpcEndpoint.VpcId', props);
    return resource.getResponseField('VpcEndpoint.VpcId') as unknown as string;
  }

  public get networkInterfaces(): shapes.RedshiftNetworkInterface[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateEndpointAccess.VpcEndpoint.NetworkInterfaces'),
        outputPath: 'VpcEndpoint.NetworkInterfaces',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ResourceOwner: this.__input.resourceOwner,
          EndpointName: this.__input.endpointName,
          SubnetGroupName: this.__input.subnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEndpointAccess.VpcEndpoint.NetworkInterfaces', props);
    return resource.getResponseField('VpcEndpoint.NetworkInterfaces') as unknown as shapes.RedshiftNetworkInterface[];
  }

}

export class RedshiftResponsesCreateEventSubscription {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateEventSubscriptionMessage) {
  }

  public get eventSubscription(): RedshiftResponsesCreateEventSubscriptionEventSubscription {
    return new RedshiftResponsesCreateEventSubscriptionEventSubscription(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesCreateEventSubscriptionEventSubscription {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateEventSubscriptionMessage) {
  }

  public get customerAwsId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateEventSubscription.EventSubscription.CustomerAwsId'),
        outputPath: 'EventSubscription.CustomerAwsId',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          SourceIds: this.__input.sourceIds,
          EventCategories: this.__input.eventCategories,
          Severity: this.__input.severity,
          Enabled: this.__input.enabled,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEventSubscription.EventSubscription.CustomerAwsId', props);
    return resource.getResponseField('EventSubscription.CustomerAwsId') as unknown as string;
  }

  public get custSubscriptionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateEventSubscription.EventSubscription.CustSubscriptionId'),
        outputPath: 'EventSubscription.CustSubscriptionId',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          SourceIds: this.__input.sourceIds,
          EventCategories: this.__input.eventCategories,
          Severity: this.__input.severity,
          Enabled: this.__input.enabled,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEventSubscription.EventSubscription.CustSubscriptionId', props);
    return resource.getResponseField('EventSubscription.CustSubscriptionId') as unknown as string;
  }

  public get snsTopicArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateEventSubscription.EventSubscription.SnsTopicArn'),
        outputPath: 'EventSubscription.SnsTopicArn',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          SourceIds: this.__input.sourceIds,
          EventCategories: this.__input.eventCategories,
          Severity: this.__input.severity,
          Enabled: this.__input.enabled,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEventSubscription.EventSubscription.SnsTopicArn', props);
    return resource.getResponseField('EventSubscription.SnsTopicArn') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateEventSubscription.EventSubscription.Status'),
        outputPath: 'EventSubscription.Status',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          SourceIds: this.__input.sourceIds,
          EventCategories: this.__input.eventCategories,
          Severity: this.__input.severity,
          Enabled: this.__input.enabled,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEventSubscription.EventSubscription.Status', props);
    return resource.getResponseField('EventSubscription.Status') as unknown as string;
  }

  public get subscriptionCreationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateEventSubscription.EventSubscription.SubscriptionCreationTime'),
        outputPath: 'EventSubscription.SubscriptionCreationTime',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          SourceIds: this.__input.sourceIds,
          EventCategories: this.__input.eventCategories,
          Severity: this.__input.severity,
          Enabled: this.__input.enabled,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEventSubscription.EventSubscription.SubscriptionCreationTime', props);
    return resource.getResponseField('EventSubscription.SubscriptionCreationTime') as unknown as string;
  }

  public get sourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateEventSubscription.EventSubscription.SourceType'),
        outputPath: 'EventSubscription.SourceType',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          SourceIds: this.__input.sourceIds,
          EventCategories: this.__input.eventCategories,
          Severity: this.__input.severity,
          Enabled: this.__input.enabled,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEventSubscription.EventSubscription.SourceType', props);
    return resource.getResponseField('EventSubscription.SourceType') as unknown as string;
  }

  public get sourceIdsList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateEventSubscription.EventSubscription.SourceIdsList'),
        outputPath: 'EventSubscription.SourceIdsList',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          SourceIds: this.__input.sourceIds,
          EventCategories: this.__input.eventCategories,
          Severity: this.__input.severity,
          Enabled: this.__input.enabled,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEventSubscription.EventSubscription.SourceIdsList', props);
    return resource.getResponseField('EventSubscription.SourceIdsList') as unknown as string[];
  }

  public get eventCategoriesList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateEventSubscription.EventSubscription.EventCategoriesList'),
        outputPath: 'EventSubscription.EventCategoriesList',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          SourceIds: this.__input.sourceIds,
          EventCategories: this.__input.eventCategories,
          Severity: this.__input.severity,
          Enabled: this.__input.enabled,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEventSubscription.EventSubscription.EventCategoriesList', props);
    return resource.getResponseField('EventSubscription.EventCategoriesList') as unknown as string[];
  }

  public get severity(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateEventSubscription.EventSubscription.Severity'),
        outputPath: 'EventSubscription.Severity',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          SourceIds: this.__input.sourceIds,
          EventCategories: this.__input.eventCategories,
          Severity: this.__input.severity,
          Enabled: this.__input.enabled,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEventSubscription.EventSubscription.Severity', props);
    return resource.getResponseField('EventSubscription.Severity') as unknown as string;
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateEventSubscription.EventSubscription.Enabled'),
        outputPath: 'EventSubscription.Enabled',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          SourceIds: this.__input.sourceIds,
          EventCategories: this.__input.eventCategories,
          Severity: this.__input.severity,
          Enabled: this.__input.enabled,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEventSubscription.EventSubscription.Enabled', props);
    return resource.getResponseField('EventSubscription.Enabled') as unknown as boolean;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateEventSubscription.EventSubscription.Tags'),
        outputPath: 'EventSubscription.Tags',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          SourceIds: this.__input.sourceIds,
          EventCategories: this.__input.eventCategories,
          Severity: this.__input.severity,
          Enabled: this.__input.enabled,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEventSubscription.EventSubscription.Tags', props);
    return resource.getResponseField('EventSubscription.Tags') as unknown as shapes.RedshiftTag[];
  }

}

export class RedshiftResponsesCreateHsmClientCertificate {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateHsmClientCertificateMessage) {
  }

  public get hsmClientCertificate(): RedshiftResponsesCreateHsmClientCertificateHsmClientCertificate {
    return new RedshiftResponsesCreateHsmClientCertificateHsmClientCertificate(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesCreateHsmClientCertificateHsmClientCertificate {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateHsmClientCertificateMessage) {
  }

  public get hsmClientCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createHsmClientCertificate',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateHsmClientCertificate.HsmClientCertificate.HsmClientCertificateIdentifier'),
        outputPath: 'HsmClientCertificate.HsmClientCertificateIdentifier',
        parameters: {
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateHsmClientCertificate.HsmClientCertificate.HsmClientCertificateIdentifier', props);
    return resource.getResponseField('HsmClientCertificate.HsmClientCertificateIdentifier') as unknown as string;
  }

  public get hsmClientCertificatePublicKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createHsmClientCertificate',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateHsmClientCertificate.HsmClientCertificate.HsmClientCertificatePublicKey'),
        outputPath: 'HsmClientCertificate.HsmClientCertificatePublicKey',
        parameters: {
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateHsmClientCertificate.HsmClientCertificate.HsmClientCertificatePublicKey', props);
    return resource.getResponseField('HsmClientCertificate.HsmClientCertificatePublicKey') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createHsmClientCertificate',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateHsmClientCertificate.HsmClientCertificate.Tags'),
        outputPath: 'HsmClientCertificate.Tags',
        parameters: {
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateHsmClientCertificate.HsmClientCertificate.Tags', props);
    return resource.getResponseField('HsmClientCertificate.Tags') as unknown as shapes.RedshiftTag[];
  }

}

export class RedshiftResponsesCreateHsmConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateHsmConfigurationMessage) {
  }

  public get hsmConfiguration(): RedshiftResponsesCreateHsmConfigurationHsmConfiguration {
    return new RedshiftResponsesCreateHsmConfigurationHsmConfiguration(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesCreateHsmConfigurationHsmConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateHsmConfigurationMessage) {
  }

  public get hsmConfigurationIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createHsmConfiguration',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateHsmConfiguration.HsmConfiguration.HsmConfigurationIdentifier'),
        outputPath: 'HsmConfiguration.HsmConfigurationIdentifier',
        parameters: {
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          Description: this.__input.description,
          HsmIpAddress: this.__input.hsmIpAddress,
          HsmPartitionName: this.__input.hsmPartitionName,
          HsmPartitionPassword: this.__input.hsmPartitionPassword,
          HsmServerPublicCertificate: this.__input.hsmServerPublicCertificate,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateHsmConfiguration.HsmConfiguration.HsmConfigurationIdentifier', props);
    return resource.getResponseField('HsmConfiguration.HsmConfigurationIdentifier') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createHsmConfiguration',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateHsmConfiguration.HsmConfiguration.Description'),
        outputPath: 'HsmConfiguration.Description',
        parameters: {
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          Description: this.__input.description,
          HsmIpAddress: this.__input.hsmIpAddress,
          HsmPartitionName: this.__input.hsmPartitionName,
          HsmPartitionPassword: this.__input.hsmPartitionPassword,
          HsmServerPublicCertificate: this.__input.hsmServerPublicCertificate,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateHsmConfiguration.HsmConfiguration.Description', props);
    return resource.getResponseField('HsmConfiguration.Description') as unknown as string;
  }

  public get hsmIpAddress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createHsmConfiguration',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateHsmConfiguration.HsmConfiguration.HsmIpAddress'),
        outputPath: 'HsmConfiguration.HsmIpAddress',
        parameters: {
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          Description: this.__input.description,
          HsmIpAddress: this.__input.hsmIpAddress,
          HsmPartitionName: this.__input.hsmPartitionName,
          HsmPartitionPassword: this.__input.hsmPartitionPassword,
          HsmServerPublicCertificate: this.__input.hsmServerPublicCertificate,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateHsmConfiguration.HsmConfiguration.HsmIpAddress', props);
    return resource.getResponseField('HsmConfiguration.HsmIpAddress') as unknown as string;
  }

  public get hsmPartitionName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createHsmConfiguration',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateHsmConfiguration.HsmConfiguration.HsmPartitionName'),
        outputPath: 'HsmConfiguration.HsmPartitionName',
        parameters: {
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          Description: this.__input.description,
          HsmIpAddress: this.__input.hsmIpAddress,
          HsmPartitionName: this.__input.hsmPartitionName,
          HsmPartitionPassword: this.__input.hsmPartitionPassword,
          HsmServerPublicCertificate: this.__input.hsmServerPublicCertificate,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateHsmConfiguration.HsmConfiguration.HsmPartitionName', props);
    return resource.getResponseField('HsmConfiguration.HsmPartitionName') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createHsmConfiguration',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateHsmConfiguration.HsmConfiguration.Tags'),
        outputPath: 'HsmConfiguration.Tags',
        parameters: {
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          Description: this.__input.description,
          HsmIpAddress: this.__input.hsmIpAddress,
          HsmPartitionName: this.__input.hsmPartitionName,
          HsmPartitionPassword: this.__input.hsmPartitionPassword,
          HsmServerPublicCertificate: this.__input.hsmServerPublicCertificate,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateHsmConfiguration.HsmConfiguration.Tags', props);
    return resource.getResponseField('HsmConfiguration.Tags') as unknown as shapes.RedshiftTag[];
  }

}

export class RedshiftResponsesCreateScheduledAction {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateScheduledActionMessage) {
  }

  public get scheduledActionName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateScheduledAction.ScheduledActionName'),
        outputPath: 'ScheduledActionName',
        parameters: {
          ScheduledActionName: this.__input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.__input.targetAction.resizeCluster?.clusterIdentifier,
              ClusterType: this.__input.targetAction.resizeCluster?.clusterType,
              NodeType: this.__input.targetAction.resizeCluster?.nodeType,
              NumberOfNodes: this.__input.targetAction.resizeCluster?.numberOfNodes,
              Classic: this.__input.targetAction.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.__input.targetAction.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.__input.targetAction.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.__input.schedule,
          IamRole: this.__input.iamRole,
          ScheduledActionDescription: this.__input.scheduledActionDescription,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Enable: this.__input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateScheduledAction.ScheduledActionName', props);
    return resource.getResponseField('ScheduledActionName') as unknown as string;
  }

  public get targetAction(): RedshiftResponsesCreateScheduledActionTargetAction {
    return new RedshiftResponsesCreateScheduledActionTargetAction(this.__scope, this.__resources, this.__input);
  }

  public get schedule(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateScheduledAction.Schedule'),
        outputPath: 'Schedule',
        parameters: {
          ScheduledActionName: this.__input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.__input.targetAction.resizeCluster?.clusterIdentifier,
              ClusterType: this.__input.targetAction.resizeCluster?.clusterType,
              NodeType: this.__input.targetAction.resizeCluster?.nodeType,
              NumberOfNodes: this.__input.targetAction.resizeCluster?.numberOfNodes,
              Classic: this.__input.targetAction.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.__input.targetAction.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.__input.targetAction.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.__input.schedule,
          IamRole: this.__input.iamRole,
          ScheduledActionDescription: this.__input.scheduledActionDescription,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Enable: this.__input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateScheduledAction.Schedule', props);
    return resource.getResponseField('Schedule') as unknown as string;
  }

  public get iamRole(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateScheduledAction.IamRole'),
        outputPath: 'IamRole',
        parameters: {
          ScheduledActionName: this.__input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.__input.targetAction.resizeCluster?.clusterIdentifier,
              ClusterType: this.__input.targetAction.resizeCluster?.clusterType,
              NodeType: this.__input.targetAction.resizeCluster?.nodeType,
              NumberOfNodes: this.__input.targetAction.resizeCluster?.numberOfNodes,
              Classic: this.__input.targetAction.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.__input.targetAction.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.__input.targetAction.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.__input.schedule,
          IamRole: this.__input.iamRole,
          ScheduledActionDescription: this.__input.scheduledActionDescription,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Enable: this.__input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateScheduledAction.IamRole', props);
    return resource.getResponseField('IamRole') as unknown as string;
  }

  public get scheduledActionDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateScheduledAction.ScheduledActionDescription'),
        outputPath: 'ScheduledActionDescription',
        parameters: {
          ScheduledActionName: this.__input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.__input.targetAction.resizeCluster?.clusterIdentifier,
              ClusterType: this.__input.targetAction.resizeCluster?.clusterType,
              NodeType: this.__input.targetAction.resizeCluster?.nodeType,
              NumberOfNodes: this.__input.targetAction.resizeCluster?.numberOfNodes,
              Classic: this.__input.targetAction.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.__input.targetAction.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.__input.targetAction.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.__input.schedule,
          IamRole: this.__input.iamRole,
          ScheduledActionDescription: this.__input.scheduledActionDescription,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Enable: this.__input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateScheduledAction.ScheduledActionDescription', props);
    return resource.getResponseField('ScheduledActionDescription') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateScheduledAction.State'),
        outputPath: 'State',
        parameters: {
          ScheduledActionName: this.__input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.__input.targetAction.resizeCluster?.clusterIdentifier,
              ClusterType: this.__input.targetAction.resizeCluster?.clusterType,
              NodeType: this.__input.targetAction.resizeCluster?.nodeType,
              NumberOfNodes: this.__input.targetAction.resizeCluster?.numberOfNodes,
              Classic: this.__input.targetAction.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.__input.targetAction.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.__input.targetAction.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.__input.schedule,
          IamRole: this.__input.iamRole,
          ScheduledActionDescription: this.__input.scheduledActionDescription,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Enable: this.__input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateScheduledAction.State', props);
    return resource.getResponseField('State') as unknown as string;
  }

  public get nextInvocations(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateScheduledAction.NextInvocations'),
        outputPath: 'NextInvocations',
        parameters: {
          ScheduledActionName: this.__input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.__input.targetAction.resizeCluster?.clusterIdentifier,
              ClusterType: this.__input.targetAction.resizeCluster?.clusterType,
              NodeType: this.__input.targetAction.resizeCluster?.nodeType,
              NumberOfNodes: this.__input.targetAction.resizeCluster?.numberOfNodes,
              Classic: this.__input.targetAction.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.__input.targetAction.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.__input.targetAction.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.__input.schedule,
          IamRole: this.__input.iamRole,
          ScheduledActionDescription: this.__input.scheduledActionDescription,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Enable: this.__input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateScheduledAction.NextInvocations', props);
    return resource.getResponseField('NextInvocations') as unknown as string[];
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateScheduledAction.StartTime'),
        outputPath: 'StartTime',
        parameters: {
          ScheduledActionName: this.__input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.__input.targetAction.resizeCluster?.clusterIdentifier,
              ClusterType: this.__input.targetAction.resizeCluster?.clusterType,
              NodeType: this.__input.targetAction.resizeCluster?.nodeType,
              NumberOfNodes: this.__input.targetAction.resizeCluster?.numberOfNodes,
              Classic: this.__input.targetAction.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.__input.targetAction.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.__input.targetAction.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.__input.schedule,
          IamRole: this.__input.iamRole,
          ScheduledActionDescription: this.__input.scheduledActionDescription,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Enable: this.__input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateScheduledAction.StartTime', props);
    return resource.getResponseField('StartTime') as unknown as string;
  }

  public get endTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateScheduledAction.EndTime'),
        outputPath: 'EndTime',
        parameters: {
          ScheduledActionName: this.__input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.__input.targetAction.resizeCluster?.clusterIdentifier,
              ClusterType: this.__input.targetAction.resizeCluster?.clusterType,
              NodeType: this.__input.targetAction.resizeCluster?.nodeType,
              NumberOfNodes: this.__input.targetAction.resizeCluster?.numberOfNodes,
              Classic: this.__input.targetAction.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.__input.targetAction.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.__input.targetAction.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.__input.schedule,
          IamRole: this.__input.iamRole,
          ScheduledActionDescription: this.__input.scheduledActionDescription,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Enable: this.__input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateScheduledAction.EndTime', props);
    return resource.getResponseField('EndTime') as unknown as string;
  }

}

export class RedshiftResponsesCreateScheduledActionTargetAction {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateScheduledActionMessage) {
  }

  public get resizeCluster(): RedshiftResponsesCreateScheduledActionTargetActionResizeCluster {
    return new RedshiftResponsesCreateScheduledActionTargetActionResizeCluster(this.__scope, this.__resources, this.__input);
  }

  public get pauseCluster(): RedshiftResponsesCreateScheduledActionTargetActionPauseCluster {
    return new RedshiftResponsesCreateScheduledActionTargetActionPauseCluster(this.__scope, this.__resources, this.__input);
  }

  public get resumeCluster(): RedshiftResponsesCreateScheduledActionTargetActionResumeCluster {
    return new RedshiftResponsesCreateScheduledActionTargetActionResumeCluster(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesCreateScheduledActionTargetActionResizeCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateScheduledActionMessage) {
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateScheduledAction.TargetAction.ResizeCluster.ClusterIdentifier'),
        outputPath: 'TargetAction.ResizeCluster.ClusterIdentifier',
        parameters: {
          ScheduledActionName: this.__input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.__input.targetAction.resizeCluster?.clusterIdentifier,
              ClusterType: this.__input.targetAction.resizeCluster?.clusterType,
              NodeType: this.__input.targetAction.resizeCluster?.nodeType,
              NumberOfNodes: this.__input.targetAction.resizeCluster?.numberOfNodes,
              Classic: this.__input.targetAction.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.__input.targetAction.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.__input.targetAction.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.__input.schedule,
          IamRole: this.__input.iamRole,
          ScheduledActionDescription: this.__input.scheduledActionDescription,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Enable: this.__input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateScheduledAction.TargetAction.ResizeCluster.ClusterIdentifier', props);
    return resource.getResponseField('TargetAction.ResizeCluster.ClusterIdentifier') as unknown as string;
  }

  public get clusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateScheduledAction.TargetAction.ResizeCluster.ClusterType'),
        outputPath: 'TargetAction.ResizeCluster.ClusterType',
        parameters: {
          ScheduledActionName: this.__input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.__input.targetAction.resizeCluster?.clusterIdentifier,
              ClusterType: this.__input.targetAction.resizeCluster?.clusterType,
              NodeType: this.__input.targetAction.resizeCluster?.nodeType,
              NumberOfNodes: this.__input.targetAction.resizeCluster?.numberOfNodes,
              Classic: this.__input.targetAction.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.__input.targetAction.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.__input.targetAction.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.__input.schedule,
          IamRole: this.__input.iamRole,
          ScheduledActionDescription: this.__input.scheduledActionDescription,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Enable: this.__input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateScheduledAction.TargetAction.ResizeCluster.ClusterType', props);
    return resource.getResponseField('TargetAction.ResizeCluster.ClusterType') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateScheduledAction.TargetAction.ResizeCluster.NodeType'),
        outputPath: 'TargetAction.ResizeCluster.NodeType',
        parameters: {
          ScheduledActionName: this.__input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.__input.targetAction.resizeCluster?.clusterIdentifier,
              ClusterType: this.__input.targetAction.resizeCluster?.clusterType,
              NodeType: this.__input.targetAction.resizeCluster?.nodeType,
              NumberOfNodes: this.__input.targetAction.resizeCluster?.numberOfNodes,
              Classic: this.__input.targetAction.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.__input.targetAction.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.__input.targetAction.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.__input.schedule,
          IamRole: this.__input.iamRole,
          ScheduledActionDescription: this.__input.scheduledActionDescription,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Enable: this.__input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateScheduledAction.TargetAction.ResizeCluster.NodeType', props);
    return resource.getResponseField('TargetAction.ResizeCluster.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateScheduledAction.TargetAction.ResizeCluster.NumberOfNodes'),
        outputPath: 'TargetAction.ResizeCluster.NumberOfNodes',
        parameters: {
          ScheduledActionName: this.__input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.__input.targetAction.resizeCluster?.clusterIdentifier,
              ClusterType: this.__input.targetAction.resizeCluster?.clusterType,
              NodeType: this.__input.targetAction.resizeCluster?.nodeType,
              NumberOfNodes: this.__input.targetAction.resizeCluster?.numberOfNodes,
              Classic: this.__input.targetAction.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.__input.targetAction.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.__input.targetAction.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.__input.schedule,
          IamRole: this.__input.iamRole,
          ScheduledActionDescription: this.__input.scheduledActionDescription,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Enable: this.__input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateScheduledAction.TargetAction.ResizeCluster.NumberOfNodes', props);
    return resource.getResponseField('TargetAction.ResizeCluster.NumberOfNodes') as unknown as number;
  }

  public get classic(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateScheduledAction.TargetAction.ResizeCluster.Classic'),
        outputPath: 'TargetAction.ResizeCluster.Classic',
        parameters: {
          ScheduledActionName: this.__input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.__input.targetAction.resizeCluster?.clusterIdentifier,
              ClusterType: this.__input.targetAction.resizeCluster?.clusterType,
              NodeType: this.__input.targetAction.resizeCluster?.nodeType,
              NumberOfNodes: this.__input.targetAction.resizeCluster?.numberOfNodes,
              Classic: this.__input.targetAction.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.__input.targetAction.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.__input.targetAction.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.__input.schedule,
          IamRole: this.__input.iamRole,
          ScheduledActionDescription: this.__input.scheduledActionDescription,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Enable: this.__input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateScheduledAction.TargetAction.ResizeCluster.Classic', props);
    return resource.getResponseField('TargetAction.ResizeCluster.Classic') as unknown as boolean;
  }

}

export class RedshiftResponsesCreateScheduledActionTargetActionPauseCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateScheduledActionMessage) {
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateScheduledAction.TargetAction.PauseCluster.ClusterIdentifier'),
        outputPath: 'TargetAction.PauseCluster.ClusterIdentifier',
        parameters: {
          ScheduledActionName: this.__input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.__input.targetAction.resizeCluster?.clusterIdentifier,
              ClusterType: this.__input.targetAction.resizeCluster?.clusterType,
              NodeType: this.__input.targetAction.resizeCluster?.nodeType,
              NumberOfNodes: this.__input.targetAction.resizeCluster?.numberOfNodes,
              Classic: this.__input.targetAction.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.__input.targetAction.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.__input.targetAction.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.__input.schedule,
          IamRole: this.__input.iamRole,
          ScheduledActionDescription: this.__input.scheduledActionDescription,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Enable: this.__input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateScheduledAction.TargetAction.PauseCluster.ClusterIdentifier', props);
    return resource.getResponseField('TargetAction.PauseCluster.ClusterIdentifier') as unknown as string;
  }

}

export class RedshiftResponsesCreateScheduledActionTargetActionResumeCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateScheduledActionMessage) {
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateScheduledAction.TargetAction.ResumeCluster.ClusterIdentifier'),
        outputPath: 'TargetAction.ResumeCluster.ClusterIdentifier',
        parameters: {
          ScheduledActionName: this.__input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.__input.targetAction.resizeCluster?.clusterIdentifier,
              ClusterType: this.__input.targetAction.resizeCluster?.clusterType,
              NodeType: this.__input.targetAction.resizeCluster?.nodeType,
              NumberOfNodes: this.__input.targetAction.resizeCluster?.numberOfNodes,
              Classic: this.__input.targetAction.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.__input.targetAction.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.__input.targetAction.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.__input.schedule,
          IamRole: this.__input.iamRole,
          ScheduledActionDescription: this.__input.scheduledActionDescription,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Enable: this.__input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateScheduledAction.TargetAction.ResumeCluster.ClusterIdentifier', props);
    return resource.getResponseField('TargetAction.ResumeCluster.ClusterIdentifier') as unknown as string;
  }

}

export class RedshiftResponsesCreateSnapshotCopyGrant {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateSnapshotCopyGrantMessage) {
  }

  public get snapshotCopyGrant(): RedshiftResponsesCreateSnapshotCopyGrantSnapshotCopyGrant {
    return new RedshiftResponsesCreateSnapshotCopyGrantSnapshotCopyGrant(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesCreateSnapshotCopyGrantSnapshotCopyGrant {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateSnapshotCopyGrantMessage) {
  }

  public get snapshotCopyGrantName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshotCopyGrant',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateSnapshotCopyGrant.SnapshotCopyGrant.SnapshotCopyGrantName'),
        outputPath: 'SnapshotCopyGrant.SnapshotCopyGrantName',
        parameters: {
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          KmsKeyId: this.__input.kmsKeyId,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSnapshotCopyGrant.SnapshotCopyGrant.SnapshotCopyGrantName', props);
    return resource.getResponseField('SnapshotCopyGrant.SnapshotCopyGrantName') as unknown as string;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshotCopyGrant',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateSnapshotCopyGrant.SnapshotCopyGrant.KmsKeyId'),
        outputPath: 'SnapshotCopyGrant.KmsKeyId',
        parameters: {
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          KmsKeyId: this.__input.kmsKeyId,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSnapshotCopyGrant.SnapshotCopyGrant.KmsKeyId', props);
    return resource.getResponseField('SnapshotCopyGrant.KmsKeyId') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshotCopyGrant',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateSnapshotCopyGrant.SnapshotCopyGrant.Tags'),
        outputPath: 'SnapshotCopyGrant.Tags',
        parameters: {
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          KmsKeyId: this.__input.kmsKeyId,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSnapshotCopyGrant.SnapshotCopyGrant.Tags', props);
    return resource.getResponseField('SnapshotCopyGrant.Tags') as unknown as shapes.RedshiftTag[];
  }

}

export class RedshiftResponsesCreateSnapshotSchedule {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateSnapshotScheduleMessage) {
  }

  public get scheduleDefinitions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshotSchedule',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateSnapshotSchedule.ScheduleDefinitions'),
        outputPath: 'ScheduleDefinitions',
        parameters: {
          ScheduleDefinitions: this.__input.scheduleDefinitions,
          ScheduleIdentifier: this.__input.scheduleIdentifier,
          ScheduleDescription: this.__input.scheduleDescription,
          Tags: this.__input.tags,
          DryRun: this.__input.dryRun,
          NextInvocations: this.__input.nextInvocations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSnapshotSchedule.ScheduleDefinitions', props);
    return resource.getResponseField('ScheduleDefinitions') as unknown as string[];
  }

  public get scheduleIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshotSchedule',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateSnapshotSchedule.ScheduleIdentifier'),
        outputPath: 'ScheduleIdentifier',
        parameters: {
          ScheduleDefinitions: this.__input.scheduleDefinitions,
          ScheduleIdentifier: this.__input.scheduleIdentifier,
          ScheduleDescription: this.__input.scheduleDescription,
          Tags: this.__input.tags,
          DryRun: this.__input.dryRun,
          NextInvocations: this.__input.nextInvocations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSnapshotSchedule.ScheduleIdentifier', props);
    return resource.getResponseField('ScheduleIdentifier') as unknown as string;
  }

  public get scheduleDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshotSchedule',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateSnapshotSchedule.ScheduleDescription'),
        outputPath: 'ScheduleDescription',
        parameters: {
          ScheduleDefinitions: this.__input.scheduleDefinitions,
          ScheduleIdentifier: this.__input.scheduleIdentifier,
          ScheduleDescription: this.__input.scheduleDescription,
          Tags: this.__input.tags,
          DryRun: this.__input.dryRun,
          NextInvocations: this.__input.nextInvocations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSnapshotSchedule.ScheduleDescription', props);
    return resource.getResponseField('ScheduleDescription') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshotSchedule',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateSnapshotSchedule.Tags'),
        outputPath: 'Tags',
        parameters: {
          ScheduleDefinitions: this.__input.scheduleDefinitions,
          ScheduleIdentifier: this.__input.scheduleIdentifier,
          ScheduleDescription: this.__input.scheduleDescription,
          Tags: this.__input.tags,
          DryRun: this.__input.dryRun,
          NextInvocations: this.__input.nextInvocations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSnapshotSchedule.Tags', props);
    return resource.getResponseField('Tags') as unknown as shapes.RedshiftTag[];
  }

  public get nextInvocations(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshotSchedule',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateSnapshotSchedule.NextInvocations'),
        outputPath: 'NextInvocations',
        parameters: {
          ScheduleDefinitions: this.__input.scheduleDefinitions,
          ScheduleIdentifier: this.__input.scheduleIdentifier,
          ScheduleDescription: this.__input.scheduleDescription,
          Tags: this.__input.tags,
          DryRun: this.__input.dryRun,
          NextInvocations: this.__input.nextInvocations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSnapshotSchedule.NextInvocations', props);
    return resource.getResponseField('NextInvocations') as unknown as string[];
  }

  public get associatedClusterCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshotSchedule',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateSnapshotSchedule.AssociatedClusterCount'),
        outputPath: 'AssociatedClusterCount',
        parameters: {
          ScheduleDefinitions: this.__input.scheduleDefinitions,
          ScheduleIdentifier: this.__input.scheduleIdentifier,
          ScheduleDescription: this.__input.scheduleDescription,
          Tags: this.__input.tags,
          DryRun: this.__input.dryRun,
          NextInvocations: this.__input.nextInvocations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSnapshotSchedule.AssociatedClusterCount', props);
    return resource.getResponseField('AssociatedClusterCount') as unknown as number;
  }

  public get associatedClusters(): shapes.RedshiftClusterAssociatedToSchedule[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshotSchedule',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateSnapshotSchedule.AssociatedClusters'),
        outputPath: 'AssociatedClusters',
        parameters: {
          ScheduleDefinitions: this.__input.scheduleDefinitions,
          ScheduleIdentifier: this.__input.scheduleIdentifier,
          ScheduleDescription: this.__input.scheduleDescription,
          Tags: this.__input.tags,
          DryRun: this.__input.dryRun,
          NextInvocations: this.__input.nextInvocations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSnapshotSchedule.AssociatedClusters', props);
    return resource.getResponseField('AssociatedClusters') as unknown as shapes.RedshiftClusterAssociatedToSchedule[];
  }

}

export class RedshiftResponsesCreateUsageLimit {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftCreateUsageLimitMessage) {
  }

  public get usageLimitId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createUsageLimit',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateUsageLimit.UsageLimitId'),
        outputPath: 'UsageLimitId',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          FeatureType: this.__input.featureType,
          LimitType: this.__input.limitType,
          Amount: this.__input.amount,
          Period: this.__input.period,
          BreachAction: this.__input.breachAction,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateUsageLimit.UsageLimitId', props);
    return resource.getResponseField('UsageLimitId') as unknown as string;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createUsageLimit',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateUsageLimit.ClusterIdentifier'),
        outputPath: 'ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          FeatureType: this.__input.featureType,
          LimitType: this.__input.limitType,
          Amount: this.__input.amount,
          Period: this.__input.period,
          BreachAction: this.__input.breachAction,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateUsageLimit.ClusterIdentifier', props);
    return resource.getResponseField('ClusterIdentifier') as unknown as string;
  }

  public get featureType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createUsageLimit',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateUsageLimit.FeatureType'),
        outputPath: 'FeatureType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          FeatureType: this.__input.featureType,
          LimitType: this.__input.limitType,
          Amount: this.__input.amount,
          Period: this.__input.period,
          BreachAction: this.__input.breachAction,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateUsageLimit.FeatureType', props);
    return resource.getResponseField('FeatureType') as unknown as string;
  }

  public get limitType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createUsageLimit',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateUsageLimit.LimitType'),
        outputPath: 'LimitType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          FeatureType: this.__input.featureType,
          LimitType: this.__input.limitType,
          Amount: this.__input.amount,
          Period: this.__input.period,
          BreachAction: this.__input.breachAction,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateUsageLimit.LimitType', props);
    return resource.getResponseField('LimitType') as unknown as string;
  }

  public get amount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createUsageLimit',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateUsageLimit.Amount'),
        outputPath: 'Amount',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          FeatureType: this.__input.featureType,
          LimitType: this.__input.limitType,
          Amount: this.__input.amount,
          Period: this.__input.period,
          BreachAction: this.__input.breachAction,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateUsageLimit.Amount', props);
    return resource.getResponseField('Amount') as unknown as number;
  }

  public get period(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createUsageLimit',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateUsageLimit.Period'),
        outputPath: 'Period',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          FeatureType: this.__input.featureType,
          LimitType: this.__input.limitType,
          Amount: this.__input.amount,
          Period: this.__input.period,
          BreachAction: this.__input.breachAction,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateUsageLimit.Period', props);
    return resource.getResponseField('Period') as unknown as string;
  }

  public get breachAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createUsageLimit',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateUsageLimit.BreachAction'),
        outputPath: 'BreachAction',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          FeatureType: this.__input.featureType,
          LimitType: this.__input.limitType,
          Amount: this.__input.amount,
          Period: this.__input.period,
          BreachAction: this.__input.breachAction,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateUsageLimit.BreachAction', props);
    return resource.getResponseField('BreachAction') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createUsageLimit',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.CreateUsageLimit.Tags'),
        outputPath: 'Tags',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          FeatureType: this.__input.featureType,
          LimitType: this.__input.limitType,
          Amount: this.__input.amount,
          Period: this.__input.period,
          BreachAction: this.__input.breachAction,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateUsageLimit.Tags', props);
    return resource.getResponseField('Tags') as unknown as shapes.RedshiftTag[];
  }

}

export class RedshiftResponsesDeauthorizeDataShare {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDeauthorizeDataShareMessage) {
  }

  public get dataShareArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deauthorizeDataShare',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeauthorizeDataShare.DataShareArn'),
        outputPath: 'DataShareArn',
        parameters: {
          DataShareArn: this.__input.dataShareArn,
          ConsumerIdentifier: this.__input.consumerIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeauthorizeDataShare.DataShareArn', props);
    return resource.getResponseField('DataShareArn') as unknown as string;
  }

  public get producerArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deauthorizeDataShare',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeauthorizeDataShare.ProducerArn'),
        outputPath: 'ProducerArn',
        parameters: {
          DataShareArn: this.__input.dataShareArn,
          ConsumerIdentifier: this.__input.consumerIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeauthorizeDataShare.ProducerArn', props);
    return resource.getResponseField('ProducerArn') as unknown as string;
  }

  public get allowPubliclyAccessibleConsumers(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deauthorizeDataShare',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeauthorizeDataShare.AllowPubliclyAccessibleConsumers'),
        outputPath: 'AllowPubliclyAccessibleConsumers',
        parameters: {
          DataShareArn: this.__input.dataShareArn,
          ConsumerIdentifier: this.__input.consumerIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeauthorizeDataShare.AllowPubliclyAccessibleConsumers', props);
    return resource.getResponseField('AllowPubliclyAccessibleConsumers') as unknown as boolean;
  }

  public get dataShareAssociations(): shapes.RedshiftDataShareAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deauthorizeDataShare',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeauthorizeDataShare.DataShareAssociations'),
        outputPath: 'DataShareAssociations',
        parameters: {
          DataShareArn: this.__input.dataShareArn,
          ConsumerIdentifier: this.__input.consumerIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeauthorizeDataShare.DataShareAssociations', props);
    return resource.getResponseField('DataShareAssociations') as unknown as shapes.RedshiftDataShareAssociation[];
  }

}

export class RedshiftResponsesDeleteAuthenticationProfile {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDeleteAuthenticationProfileMessage) {
  }

  public get authenticationProfileName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteAuthenticationProfile',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteAuthenticationProfile.AuthenticationProfileName'),
        outputPath: 'AuthenticationProfileName',
        parameters: {
          AuthenticationProfileName: this.__input.authenticationProfileName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteAuthenticationProfile.AuthenticationProfileName', props);
    return resource.getResponseField('AuthenticationProfileName') as unknown as string;
  }

}

export class RedshiftResponsesDeleteCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDeleteClusterMessage) {
  }

  public get cluster(): RedshiftResponsesDeleteClusterCluster {
    return new RedshiftResponsesDeleteClusterCluster(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesDeleteClusterCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDeleteClusterMessage) {
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ClusterIdentifier'),
        outputPath: 'Cluster.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.ClusterIdentifier') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.NodeType'),
        outputPath: 'Cluster.NodeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.NodeType', props);
    return resource.getResponseField('Cluster.NodeType') as unknown as string;
  }

  public get clusterStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ClusterStatus'),
        outputPath: 'Cluster.ClusterStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.ClusterStatus', props);
    return resource.getResponseField('Cluster.ClusterStatus') as unknown as string;
  }

  public get clusterAvailabilityStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ClusterAvailabilityStatus'),
        outputPath: 'Cluster.ClusterAvailabilityStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.ClusterAvailabilityStatus', props);
    return resource.getResponseField('Cluster.ClusterAvailabilityStatus') as unknown as string;
  }

  public get modifyStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ModifyStatus'),
        outputPath: 'Cluster.ModifyStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.ModifyStatus', props);
    return resource.getResponseField('Cluster.ModifyStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.MasterUsername'),
        outputPath: 'Cluster.MasterUsername',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.MasterUsername', props);
    return resource.getResponseField('Cluster.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.DBName'),
        outputPath: 'Cluster.DBName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.DBName', props);
    return resource.getResponseField('Cluster.DBName') as unknown as string;
  }

  public get endpoint(): RedshiftResponsesDeleteClusterClusterEndpoint {
    return new RedshiftResponsesDeleteClusterClusterEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ClusterCreateTime'),
        outputPath: 'Cluster.ClusterCreateTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.ClusterCreateTime', props);
    return resource.getResponseField('Cluster.ClusterCreateTime') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterSecurityGroups(): shapes.RedshiftClusterSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ClusterSecurityGroups'),
        outputPath: 'Cluster.ClusterSecurityGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.ClusterSecurityGroups', props);
    return resource.getResponseField('Cluster.ClusterSecurityGroups') as unknown as shapes.RedshiftClusterSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RedshiftVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.VpcSecurityGroups'),
        outputPath: 'Cluster.VpcSecurityGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.VpcSecurityGroups', props);
    return resource.getResponseField('Cluster.VpcSecurityGroups') as unknown as shapes.RedshiftVpcSecurityGroupMembership[];
  }

  public get clusterParameterGroups(): shapes.RedshiftClusterParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ClusterParameterGroups'),
        outputPath: 'Cluster.ClusterParameterGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.ClusterParameterGroups', props);
    return resource.getResponseField('Cluster.ClusterParameterGroups') as unknown as shapes.RedshiftClusterParameterGroupStatus[];
  }

  public get clusterSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ClusterSubnetGroupName'),
        outputPath: 'Cluster.ClusterSubnetGroupName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.ClusterSubnetGroupName', props);
    return resource.getResponseField('Cluster.ClusterSubnetGroupName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.VpcId'),
        outputPath: 'Cluster.VpcId',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.VpcId', props);
    return resource.getResponseField('Cluster.VpcId') as unknown as string;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.AvailabilityZone'),
        outputPath: 'Cluster.AvailabilityZone',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.AvailabilityZone', props);
    return resource.getResponseField('Cluster.AvailabilityZone') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.PreferredMaintenanceWindow'),
        outputPath: 'Cluster.PreferredMaintenanceWindow',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('Cluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RedshiftResponsesDeleteClusterClusterPendingModifiedValues {
    return new RedshiftResponsesDeleteClusterClusterPendingModifiedValues(this.__scope, this.__resources, this.__input);
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ClusterVersion'),
        outputPath: 'Cluster.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.ClusterVersion', props);
    return resource.getResponseField('Cluster.ClusterVersion') as unknown as string;
  }

  public get allowVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.AllowVersionUpgrade'),
        outputPath: 'Cluster.AllowVersionUpgrade',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.AllowVersionUpgrade', props);
    return resource.getResponseField('Cluster.AllowVersionUpgrade') as unknown as boolean;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.NumberOfNodes'),
        outputPath: 'Cluster.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.NumberOfNodes', props);
    return resource.getResponseField('Cluster.NumberOfNodes') as unknown as number;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.PubliclyAccessible'),
        outputPath: 'Cluster.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PubliclyAccessible') as unknown as boolean;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.Encrypted'),
        outputPath: 'Cluster.Encrypted',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.Encrypted', props);
    return resource.getResponseField('Cluster.Encrypted') as unknown as boolean;
  }

  public get restoreStatus(): RedshiftResponsesDeleteClusterClusterRestoreStatus {
    return new RedshiftResponsesDeleteClusterClusterRestoreStatus(this.__scope, this.__resources, this.__input);
  }

  public get dataTransferProgress(): RedshiftResponsesDeleteClusterClusterDataTransferProgress {
    return new RedshiftResponsesDeleteClusterClusterDataTransferProgress(this.__scope, this.__resources, this.__input);
  }

  public get hsmStatus(): RedshiftResponsesDeleteClusterClusterHsmStatus {
    return new RedshiftResponsesDeleteClusterClusterHsmStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterSnapshotCopyStatus(): RedshiftResponsesDeleteClusterClusterClusterSnapshotCopyStatus {
    return new RedshiftResponsesDeleteClusterClusterClusterSnapshotCopyStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterPublicKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ClusterPublicKey'),
        outputPath: 'Cluster.ClusterPublicKey',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.ClusterPublicKey', props);
    return resource.getResponseField('Cluster.ClusterPublicKey') as unknown as string;
  }

  public get clusterNodes(): shapes.RedshiftClusterNode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ClusterNodes'),
        outputPath: 'Cluster.ClusterNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.ClusterNodes', props);
    return resource.getResponseField('Cluster.ClusterNodes') as unknown as shapes.RedshiftClusterNode[];
  }

  public get elasticIpStatus(): RedshiftResponsesDeleteClusterClusterElasticIpStatus {
    return new RedshiftResponsesDeleteClusterClusterElasticIpStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterRevisionNumber(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ClusterRevisionNumber'),
        outputPath: 'Cluster.ClusterRevisionNumber',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.ClusterRevisionNumber', props);
    return resource.getResponseField('Cluster.ClusterRevisionNumber') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.Tags'),
        outputPath: 'Cluster.Tags',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.Tags', props);
    return resource.getResponseField('Cluster.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.KmsKeyId'),
        outputPath: 'Cluster.KmsKeyId',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.KmsKeyId', props);
    return resource.getResponseField('Cluster.KmsKeyId') as unknown as string;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.EnhancedVpcRouting'),
        outputPath: 'Cluster.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.EnhancedVpcRouting') as unknown as boolean;
  }

  public get iamRoles(): shapes.RedshiftClusterIamRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.IamRoles'),
        outputPath: 'Cluster.IamRoles',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.IamRoles', props);
    return resource.getResponseField('Cluster.IamRoles') as unknown as shapes.RedshiftClusterIamRole[];
  }

  public get pendingActions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.PendingActions'),
        outputPath: 'Cluster.PendingActions',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.PendingActions', props);
    return resource.getResponseField('Cluster.PendingActions') as unknown as string[];
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.MaintenanceTrackName'),
        outputPath: 'Cluster.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.MaintenanceTrackName') as unknown as string;
  }

  public get elasticResizeNumberOfNodeOptions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ElasticResizeNumberOfNodeOptions'),
        outputPath: 'Cluster.ElasticResizeNumberOfNodeOptions',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.ElasticResizeNumberOfNodeOptions', props);
    return resource.getResponseField('Cluster.ElasticResizeNumberOfNodeOptions') as unknown as string;
  }

  public get deferredMaintenanceWindows(): shapes.RedshiftDeferredMaintenanceWindow[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.DeferredMaintenanceWindows'),
        outputPath: 'Cluster.DeferredMaintenanceWindows',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.DeferredMaintenanceWindows', props);
    return resource.getResponseField('Cluster.DeferredMaintenanceWindows') as unknown as shapes.RedshiftDeferredMaintenanceWindow[];
  }

  public get snapshotScheduleIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.SnapshotScheduleIdentifier'),
        outputPath: 'Cluster.SnapshotScheduleIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.SnapshotScheduleIdentifier', props);
    return resource.getResponseField('Cluster.SnapshotScheduleIdentifier') as unknown as string;
  }

  public get snapshotScheduleState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.SnapshotScheduleState'),
        outputPath: 'Cluster.SnapshotScheduleState',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.SnapshotScheduleState', props);
    return resource.getResponseField('Cluster.SnapshotScheduleState') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ExpectedNextSnapshotScheduleTime'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.ExpectedNextSnapshotScheduleTime', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTime') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTimeStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ExpectedNextSnapshotScheduleTimeStatus'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTimeStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.ExpectedNextSnapshotScheduleTimeStatus', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTimeStatus') as unknown as string;
  }

  public get nextMaintenanceWindowStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.NextMaintenanceWindowStartTime'),
        outputPath: 'Cluster.NextMaintenanceWindowStartTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.NextMaintenanceWindowStartTime', props);
    return resource.getResponseField('Cluster.NextMaintenanceWindowStartTime') as unknown as string;
  }

  public get resizeInfo(): RedshiftResponsesDeleteClusterClusterResizeInfo {
    return new RedshiftResponsesDeleteClusterClusterResizeInfo(this.__scope, this.__resources, this.__input);
  }

  public get availabilityZoneRelocationStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.AvailabilityZoneRelocationStatus'),
        outputPath: 'Cluster.AvailabilityZoneRelocationStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.AvailabilityZoneRelocationStatus', props);
    return resource.getResponseField('Cluster.AvailabilityZoneRelocationStatus') as unknown as string;
  }

  public get clusterNamespaceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ClusterNamespaceArn'),
        outputPath: 'Cluster.ClusterNamespaceArn',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.ClusterNamespaceArn', props);
    return resource.getResponseField('Cluster.ClusterNamespaceArn') as unknown as string;
  }

  public get totalStorageCapacityInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.TotalStorageCapacityInMegaBytes'),
        outputPath: 'Cluster.TotalStorageCapacityInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.TotalStorageCapacityInMegaBytes', props);
    return resource.getResponseField('Cluster.TotalStorageCapacityInMegaBytes') as unknown as number;
  }

  public get aquaConfiguration(): RedshiftResponsesDeleteClusterClusterAquaConfiguration {
    return new RedshiftResponsesDeleteClusterClusterAquaConfiguration(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesDeleteClusterClusterEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDeleteClusterMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.Endpoint.Address'),
        outputPath: 'Cluster.Endpoint.Address',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.Endpoint.Address', props);
    return resource.getResponseField('Cluster.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.Endpoint.Port'),
        outputPath: 'Cluster.Endpoint.Port',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.Endpoint.Port', props);
    return resource.getResponseField('Cluster.Endpoint.Port') as unknown as number;
  }

  public get vpcEndpoints(): shapes.RedshiftVpcEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.Endpoint.VpcEndpoints'),
        outputPath: 'Cluster.Endpoint.VpcEndpoints',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.Endpoint.VpcEndpoints', props);
    return resource.getResponseField('Cluster.Endpoint.VpcEndpoints') as unknown as shapes.RedshiftVpcEndpoint[];
  }

}

export class RedshiftResponsesDeleteClusterClusterPendingModifiedValues {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDeleteClusterMessage) {
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'Cluster.PendingModifiedValues.MasterUserPassword',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.PendingModifiedValues.NodeType'),
        outputPath: 'Cluster.PendingModifiedValues.NodeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.PendingModifiedValues.NodeType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.PendingModifiedValues.NumberOfNodes'),
        outputPath: 'Cluster.PendingModifiedValues.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.PendingModifiedValues.NumberOfNodes', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NumberOfNodes') as unknown as number;
  }

  public get clusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.PendingModifiedValues.ClusterType'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.PendingModifiedValues.ClusterType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterType') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.PendingModifiedValues.ClusterVersion'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.PendingModifiedValues.ClusterVersion', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterVersion') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.PendingModifiedValues.ClusterIdentifier'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.PendingModifiedValues.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterIdentifier') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.PendingModifiedValues.PubliclyAccessible'),
        outputPath: 'Cluster.PendingModifiedValues.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.PendingModifiedValues.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.PubliclyAccessible') as unknown as boolean;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.PendingModifiedValues.EnhancedVpcRouting'),
        outputPath: 'Cluster.PendingModifiedValues.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.PendingModifiedValues.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.PendingModifiedValues.MaintenanceTrackName'),
        outputPath: 'Cluster.PendingModifiedValues.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.PendingModifiedValues.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MaintenanceTrackName') as unknown as string;
  }

  public get encryptionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.PendingModifiedValues.EncryptionType'),
        outputPath: 'Cluster.PendingModifiedValues.EncryptionType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.PendingModifiedValues.EncryptionType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EncryptionType') as unknown as string;
  }

}

export class RedshiftResponsesDeleteClusterClusterRestoreStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDeleteClusterMessage) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.RestoreStatus.Status'),
        outputPath: 'Cluster.RestoreStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.RestoreStatus.Status', props);
    return resource.getResponseField('Cluster.RestoreStatus.Status') as unknown as string;
  }

  public get currentRestoreRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond') as unknown as number;
  }

  public get snapshotSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.RestoreStatus.SnapshotSizeInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.SnapshotSizeInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.RestoreStatus.SnapshotSizeInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.SnapshotSizeInMegaBytes') as unknown as number;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.RestoreStatus.ProgressInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.ProgressInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.RestoreStatus.ProgressInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.ProgressInMegaBytes') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.RestoreStatus.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.RestoreStatus.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.RestoreStatus.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.ElapsedTimeInSeconds') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

}

export class RedshiftResponsesDeleteClusterClusterDataTransferProgress {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDeleteClusterMessage) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.DataTransferProgress.Status'),
        outputPath: 'Cluster.DataTransferProgress.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.DataTransferProgress.Status', props);
    return resource.getResponseField('Cluster.DataTransferProgress.Status') as unknown as string;
  }

  public get currentRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond') as unknown as number;
  }

  public get totalDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.DataTransferProgress.TotalDataInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.TotalDataInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.DataTransferProgress.TotalDataInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.TotalDataInMegaBytes') as unknown as number;
  }

  public get dataTransferredInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.DataTransferProgress.DataTransferredInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.DataTransferredInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.DataTransferProgress.DataTransferredInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.DataTransferredInMegaBytes') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.DataTransferProgress.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.DataTransferProgress.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.ElapsedTimeInSeconds') as unknown as number;
  }

}

export class RedshiftResponsesDeleteClusterClusterHsmStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDeleteClusterMessage) {
  }

  public get hsmClientCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.HsmStatus.HsmClientCertificateIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmClientCertificateIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.HsmStatus.HsmClientCertificateIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmClientCertificateIdentifier') as unknown as string;
  }

  public get hsmConfigurationIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.HsmStatus.HsmConfigurationIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmConfigurationIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.HsmStatus.HsmConfigurationIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmConfigurationIdentifier') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.HsmStatus.Status'),
        outputPath: 'Cluster.HsmStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.HsmStatus.Status', props);
    return resource.getResponseField('Cluster.HsmStatus.Status') as unknown as string;
  }

}

export class RedshiftResponsesDeleteClusterClusterClusterSnapshotCopyStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDeleteClusterMessage) {
  }

  public get destinationRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ClusterSnapshotCopyStatus.DestinationRegion'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.DestinationRegion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.ClusterSnapshotCopyStatus.DestinationRegion', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.DestinationRegion') as unknown as string;
  }

  public get retentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.RetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.RetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get snapshotCopyGrantName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName') as unknown as string;
  }

}

export class RedshiftResponsesDeleteClusterClusterElasticIpStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDeleteClusterMessage) {
  }

  public get elasticIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ElasticIpStatus.ElasticIp'),
        outputPath: 'Cluster.ElasticIpStatus.ElasticIp',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.ElasticIpStatus.ElasticIp', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.ElasticIp') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ElasticIpStatus.Status'),
        outputPath: 'Cluster.ElasticIpStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.ElasticIpStatus.Status', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.Status') as unknown as string;
  }

}

export class RedshiftResponsesDeleteClusterClusterResizeInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDeleteClusterMessage) {
  }

  public get resizeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ResizeInfo.ResizeType'),
        outputPath: 'Cluster.ResizeInfo.ResizeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.ResizeInfo.ResizeType', props);
    return resource.getResponseField('Cluster.ResizeInfo.ResizeType') as unknown as string;
  }

  public get allowCancelResize(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.ResizeInfo.AllowCancelResize'),
        outputPath: 'Cluster.ResizeInfo.AllowCancelResize',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.ResizeInfo.AllowCancelResize', props);
    return resource.getResponseField('Cluster.ResizeInfo.AllowCancelResize') as unknown as boolean;
  }

}

export class RedshiftResponsesDeleteClusterClusterAquaConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDeleteClusterMessage) {
  }

  public get aquaStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.AquaConfiguration.AquaStatus'),
        outputPath: 'Cluster.AquaConfiguration.AquaStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.AquaConfiguration.AquaStatus', props);
    return resource.getResponseField('Cluster.AquaConfiguration.AquaStatus') as unknown as string;
  }

  public get aquaConfigurationStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteCluster.Cluster.AquaConfiguration.AquaConfigurationStatus'),
        outputPath: 'Cluster.AquaConfiguration.AquaConfigurationStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SkipFinalClusterSnapshot: this.__input.skipFinalClusterSnapshot,
          FinalClusterSnapshotIdentifier: this.__input.finalClusterSnapshotIdentifier,
          FinalClusterSnapshotRetentionPeriod: this.__input.finalClusterSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCluster.Cluster.AquaConfiguration.AquaConfigurationStatus', props);
    return resource.getResponseField('Cluster.AquaConfiguration.AquaConfigurationStatus') as unknown as string;
  }

}

export class RedshiftResponsesDeleteClusterSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDeleteClusterSnapshotMessage) {
  }

  public get snapshot(): RedshiftResponsesDeleteClusterSnapshotSnapshot {
    return new RedshiftResponsesDeleteClusterSnapshotSnapshot(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesDeleteClusterSnapshotSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDeleteClusterSnapshotMessage) {
  }

  public get snapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.SnapshotIdentifier'),
        outputPath: 'Snapshot.SnapshotIdentifier',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClusterSnapshot.Snapshot.SnapshotIdentifier', props);
    return resource.getResponseField('Snapshot.SnapshotIdentifier') as unknown as string;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.ClusterIdentifier'),
        outputPath: 'Snapshot.ClusterIdentifier',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClusterSnapshot.Snapshot.ClusterIdentifier', props);
    return resource.getResponseField('Snapshot.ClusterIdentifier') as unknown as string;
  }

  public get snapshotCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.SnapshotCreateTime'),
        outputPath: 'Snapshot.SnapshotCreateTime',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClusterSnapshot.Snapshot.SnapshotCreateTime', props);
    return resource.getResponseField('Snapshot.SnapshotCreateTime') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.Status'),
        outputPath: 'Snapshot.Status',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClusterSnapshot.Snapshot.Status', props);
    return resource.getResponseField('Snapshot.Status') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.Port'),
        outputPath: 'Snapshot.Port',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClusterSnapshot.Snapshot.Port', props);
    return resource.getResponseField('Snapshot.Port') as unknown as number;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.AvailabilityZone'),
        outputPath: 'Snapshot.AvailabilityZone',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClusterSnapshot.Snapshot.AvailabilityZone', props);
    return resource.getResponseField('Snapshot.AvailabilityZone') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.ClusterCreateTime'),
        outputPath: 'Snapshot.ClusterCreateTime',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClusterSnapshot.Snapshot.ClusterCreateTime', props);
    return resource.getResponseField('Snapshot.ClusterCreateTime') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.MasterUsername'),
        outputPath: 'Snapshot.MasterUsername',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClusterSnapshot.Snapshot.MasterUsername', props);
    return resource.getResponseField('Snapshot.MasterUsername') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.ClusterVersion'),
        outputPath: 'Snapshot.ClusterVersion',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClusterSnapshot.Snapshot.ClusterVersion', props);
    return resource.getResponseField('Snapshot.ClusterVersion') as unknown as string;
  }

  public get engineFullVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.EngineFullVersion'),
        outputPath: 'Snapshot.EngineFullVersion',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClusterSnapshot.Snapshot.EngineFullVersion', props);
    return resource.getResponseField('Snapshot.EngineFullVersion') as unknown as string;
  }

  public get snapshotType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.SnapshotType'),
        outputPath: 'Snapshot.SnapshotType',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClusterSnapshot.Snapshot.SnapshotType', props);
    return resource.getResponseField('Snapshot.SnapshotType') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.NodeType'),
        outputPath: 'Snapshot.NodeType',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClusterSnapshot.Snapshot.NodeType', props);
    return resource.getResponseField('Snapshot.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.NumberOfNodes'),
        outputPath: 'Snapshot.NumberOfNodes',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClusterSnapshot.Snapshot.NumberOfNodes', props);
    return resource.getResponseField('Snapshot.NumberOfNodes') as unknown as number;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.DBName'),
        outputPath: 'Snapshot.DBName',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClusterSnapshot.Snapshot.DBName', props);
    return resource.getResponseField('Snapshot.DBName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.VpcId'),
        outputPath: 'Snapshot.VpcId',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClusterSnapshot.Snapshot.VpcId', props);
    return resource.getResponseField('Snapshot.VpcId') as unknown as string;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.Encrypted'),
        outputPath: 'Snapshot.Encrypted',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClusterSnapshot.Snapshot.Encrypted', props);
    return resource.getResponseField('Snapshot.Encrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.KmsKeyId'),
        outputPath: 'Snapshot.KmsKeyId',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClusterSnapshot.Snapshot.KmsKeyId', props);
    return resource.getResponseField('Snapshot.KmsKeyId') as unknown as string;
  }

  public get encryptedWithHsm(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.EncryptedWithHSM'),
        outputPath: 'Snapshot.EncryptedWithHSM',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClusterSnapshot.Snapshot.EncryptedWithHSM', props);
    return resource.getResponseField('Snapshot.EncryptedWithHSM') as unknown as boolean;
  }

  public get accountsWithRestoreAccess(): shapes.RedshiftAccountWithRestoreAccess[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.AccountsWithRestoreAccess'),
        outputPath: 'Snapshot.AccountsWithRestoreAccess',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClusterSnapshot.Snapshot.AccountsWithRestoreAccess', props);
    return resource.getResponseField('Snapshot.AccountsWithRestoreAccess') as unknown as shapes.RedshiftAccountWithRestoreAccess[];
  }

  public get ownerAccount(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.OwnerAccount'),
        outputPath: 'Snapshot.OwnerAccount',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClusterSnapshot.Snapshot.OwnerAccount', props);
    return resource.getResponseField('Snapshot.OwnerAccount') as unknown as string;
  }

  public get totalBackupSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.TotalBackupSizeInMegaBytes'),
        outputPath: 'Snapshot.TotalBackupSizeInMegaBytes',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClusterSnapshot.Snapshot.TotalBackupSizeInMegaBytes', props);
    return resource.getResponseField('Snapshot.TotalBackupSizeInMegaBytes') as unknown as number;
  }

  public get actualIncrementalBackupSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.ActualIncrementalBackupSizeInMegaBytes'),
        outputPath: 'Snapshot.ActualIncrementalBackupSizeInMegaBytes',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClusterSnapshot.Snapshot.ActualIncrementalBackupSizeInMegaBytes', props);
    return resource.getResponseField('Snapshot.ActualIncrementalBackupSizeInMegaBytes') as unknown as number;
  }

  public get backupProgressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.BackupProgressInMegaBytes'),
        outputPath: 'Snapshot.BackupProgressInMegaBytes',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClusterSnapshot.Snapshot.BackupProgressInMegaBytes', props);
    return resource.getResponseField('Snapshot.BackupProgressInMegaBytes') as unknown as number;
  }

  public get currentBackupRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.CurrentBackupRateInMegaBytesPerSecond'),
        outputPath: 'Snapshot.CurrentBackupRateInMegaBytesPerSecond',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClusterSnapshot.Snapshot.CurrentBackupRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Snapshot.CurrentBackupRateInMegaBytesPerSecond') as unknown as number;
  }

  public get estimatedSecondsToCompletion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.EstimatedSecondsToCompletion'),
        outputPath: 'Snapshot.EstimatedSecondsToCompletion',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClusterSnapshot.Snapshot.EstimatedSecondsToCompletion', props);
    return resource.getResponseField('Snapshot.EstimatedSecondsToCompletion') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.ElapsedTimeInSeconds'),
        outputPath: 'Snapshot.ElapsedTimeInSeconds',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClusterSnapshot.Snapshot.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Snapshot.ElapsedTimeInSeconds') as unknown as number;
  }

  public get sourceRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.SourceRegion'),
        outputPath: 'Snapshot.SourceRegion',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClusterSnapshot.Snapshot.SourceRegion', props);
    return resource.getResponseField('Snapshot.SourceRegion') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.Tags'),
        outputPath: 'Snapshot.Tags',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClusterSnapshot.Snapshot.Tags', props);
    return resource.getResponseField('Snapshot.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get restorableNodeTypes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.RestorableNodeTypes'),
        outputPath: 'Snapshot.RestorableNodeTypes',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClusterSnapshot.Snapshot.RestorableNodeTypes', props);
    return resource.getResponseField('Snapshot.RestorableNodeTypes') as unknown as string[];
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.EnhancedVpcRouting'),
        outputPath: 'Snapshot.EnhancedVpcRouting',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClusterSnapshot.Snapshot.EnhancedVpcRouting', props);
    return resource.getResponseField('Snapshot.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.MaintenanceTrackName'),
        outputPath: 'Snapshot.MaintenanceTrackName',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClusterSnapshot.Snapshot.MaintenanceTrackName', props);
    return resource.getResponseField('Snapshot.MaintenanceTrackName') as unknown as string;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.ManualSnapshotRetentionPeriod'),
        outputPath: 'Snapshot.ManualSnapshotRetentionPeriod',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClusterSnapshot.Snapshot.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Snapshot.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRemainingDays(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.ManualSnapshotRemainingDays'),
        outputPath: 'Snapshot.ManualSnapshotRemainingDays',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClusterSnapshot.Snapshot.ManualSnapshotRemainingDays', props);
    return resource.getResponseField('Snapshot.ManualSnapshotRemainingDays') as unknown as number;
  }

  public get snapshotRetentionStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteClusterSnapshot.Snapshot.SnapshotRetentionStartTime'),
        outputPath: 'Snapshot.SnapshotRetentionStartTime',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClusterSnapshot.Snapshot.SnapshotRetentionStartTime', props);
    return resource.getResponseField('Snapshot.SnapshotRetentionStartTime') as unknown as string;
  }

}

export class RedshiftResponsesDeleteEndpointAccess {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDeleteEndpointAccessMessage) {
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteEndpointAccess.ClusterIdentifier'),
        outputPath: 'ClusterIdentifier',
        parameters: {
          EndpointName: this.__input.endpointName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteEndpointAccess.ClusterIdentifier', props);
    return resource.getResponseField('ClusterIdentifier') as unknown as string;
  }

  public get resourceOwner(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteEndpointAccess.ResourceOwner'),
        outputPath: 'ResourceOwner',
        parameters: {
          EndpointName: this.__input.endpointName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteEndpointAccess.ResourceOwner', props);
    return resource.getResponseField('ResourceOwner') as unknown as string;
  }

  public get subnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteEndpointAccess.SubnetGroupName'),
        outputPath: 'SubnetGroupName',
        parameters: {
          EndpointName: this.__input.endpointName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteEndpointAccess.SubnetGroupName', props);
    return resource.getResponseField('SubnetGroupName') as unknown as string;
  }

  public get endpointStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteEndpointAccess.EndpointStatus'),
        outputPath: 'EndpointStatus',
        parameters: {
          EndpointName: this.__input.endpointName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteEndpointAccess.EndpointStatus', props);
    return resource.getResponseField('EndpointStatus') as unknown as string;
  }

  public get endpointName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteEndpointAccess.EndpointName'),
        outputPath: 'EndpointName',
        parameters: {
          EndpointName: this.__input.endpointName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteEndpointAccess.EndpointName', props);
    return resource.getResponseField('EndpointName') as unknown as string;
  }

  public get endpointCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteEndpointAccess.EndpointCreateTime'),
        outputPath: 'EndpointCreateTime',
        parameters: {
          EndpointName: this.__input.endpointName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteEndpointAccess.EndpointCreateTime', props);
    return resource.getResponseField('EndpointCreateTime') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteEndpointAccess.Port'),
        outputPath: 'Port',
        parameters: {
          EndpointName: this.__input.endpointName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteEndpointAccess.Port', props);
    return resource.getResponseField('Port') as unknown as number;
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteEndpointAccess.Address'),
        outputPath: 'Address',
        parameters: {
          EndpointName: this.__input.endpointName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteEndpointAccess.Address', props);
    return resource.getResponseField('Address') as unknown as string;
  }

  public get vpcSecurityGroups(): shapes.RedshiftVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteEndpointAccess.VpcSecurityGroups'),
        outputPath: 'VpcSecurityGroups',
        parameters: {
          EndpointName: this.__input.endpointName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteEndpointAccess.VpcSecurityGroups', props);
    return resource.getResponseField('VpcSecurityGroups') as unknown as shapes.RedshiftVpcSecurityGroupMembership[];
  }

  public get vpcEndpoint(): RedshiftResponsesDeleteEndpointAccessVpcEndpoint {
    return new RedshiftResponsesDeleteEndpointAccessVpcEndpoint(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesDeleteEndpointAccessVpcEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDeleteEndpointAccessMessage) {
  }

  public get vpcEndpointId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteEndpointAccess.VpcEndpoint.VpcEndpointId'),
        outputPath: 'VpcEndpoint.VpcEndpointId',
        parameters: {
          EndpointName: this.__input.endpointName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteEndpointAccess.VpcEndpoint.VpcEndpointId', props);
    return resource.getResponseField('VpcEndpoint.VpcEndpointId') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteEndpointAccess.VpcEndpoint.VpcId'),
        outputPath: 'VpcEndpoint.VpcId',
        parameters: {
          EndpointName: this.__input.endpointName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteEndpointAccess.VpcEndpoint.VpcId', props);
    return resource.getResponseField('VpcEndpoint.VpcId') as unknown as string;
  }

  public get networkInterfaces(): shapes.RedshiftNetworkInterface[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeleteEndpointAccess.VpcEndpoint.NetworkInterfaces'),
        outputPath: 'VpcEndpoint.NetworkInterfaces',
        parameters: {
          EndpointName: this.__input.endpointName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteEndpointAccess.VpcEndpoint.NetworkInterfaces', props);
    return resource.getResponseField('VpcEndpoint.NetworkInterfaces') as unknown as shapes.RedshiftNetworkInterface[];
  }

}

export class RedshiftResponsesDeletePartner {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftPartnerIntegrationInputMessage) {
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deletePartner',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeletePartner.DatabaseName'),
        outputPath: 'DatabaseName',
        parameters: {
          AccountId: this.__input.accountId,
          ClusterIdentifier: this.__input.clusterIdentifier,
          DatabaseName: this.__input.databaseName,
          PartnerName: this.__input.partnerName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeletePartner.DatabaseName', props);
    return resource.getResponseField('DatabaseName') as unknown as string;
  }

  public get partnerName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deletePartner',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DeletePartner.PartnerName'),
        outputPath: 'PartnerName',
        parameters: {
          AccountId: this.__input.accountId,
          ClusterIdentifier: this.__input.clusterIdentifier,
          DatabaseName: this.__input.databaseName,
          PartnerName: this.__input.partnerName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeletePartner.PartnerName', props);
    return resource.getResponseField('PartnerName') as unknown as string;
  }

}

export class RedshiftResponsesDescribeAccountAttributes {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeAccountAttributesMessage) {
  }

  public get accountAttributes(): shapes.RedshiftAccountAttribute[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeAccountAttributes',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeAccountAttributes.AccountAttributes'),
        outputPath: 'AccountAttributes',
        parameters: {
          AttributeNames: this.__input.attributeNames,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeAccountAttributes.AccountAttributes', props);
    return resource.getResponseField('AccountAttributes') as unknown as shapes.RedshiftAccountAttribute[];
  }

}

export class RedshiftResponsesDescribeAuthenticationProfiles {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeAuthenticationProfilesMessage) {
  }

  public get authenticationProfiles(): shapes.RedshiftAuthenticationProfile[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeAuthenticationProfiles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeAuthenticationProfiles.AuthenticationProfiles'),
        outputPath: 'AuthenticationProfiles',
        parameters: {
          AuthenticationProfileName: this.__input.authenticationProfileName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeAuthenticationProfiles.AuthenticationProfiles', props);
    return resource.getResponseField('AuthenticationProfiles') as unknown as shapes.RedshiftAuthenticationProfile[];
  }

}

export class RedshiftResponsesDescribeClusterDbRevisions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeClusterDbRevisionsMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusterDbRevisions',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusterDbRevisions.Marker'),
        outputPath: 'Marker',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeClusterDbRevisions.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get clusterDbRevisions(): shapes.RedshiftClusterDbRevision[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusterDbRevisions',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusterDbRevisions.ClusterDbRevisions'),
        outputPath: 'ClusterDbRevisions',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeClusterDbRevisions.ClusterDbRevisions', props);
    return resource.getResponseField('ClusterDbRevisions') as unknown as shapes.RedshiftClusterDbRevision[];
  }

}

export class RedshiftResponsesDescribeClusterParameterGroups {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeClusterParameterGroupsMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusterParameterGroups',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusterParameterGroups.Marker'),
        outputPath: 'Marker',
        parameters: {
          ParameterGroupName: this.__input.parameterGroupName,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          TagKeys: this.__input.tagKeys,
          TagValues: this.__input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeClusterParameterGroups.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get parameterGroups(): shapes.RedshiftClusterParameterGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusterParameterGroups',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusterParameterGroups.ParameterGroups'),
        outputPath: 'ParameterGroups',
        parameters: {
          ParameterGroupName: this.__input.parameterGroupName,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          TagKeys: this.__input.tagKeys,
          TagValues: this.__input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeClusterParameterGroups.ParameterGroups', props);
    return resource.getResponseField('ParameterGroups') as unknown as shapes.RedshiftClusterParameterGroup[];
  }

}

export class RedshiftResponsesDescribeClusterParameters {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeClusterParametersMessage) {
  }

  public get parameters(): shapes.RedshiftParameter[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusterParameters',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusterParameters.Parameters'),
        outputPath: 'Parameters',
        parameters: {
          ParameterGroupName: this.__input.parameterGroupName,
          Source: this.__input.source,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeClusterParameters.Parameters', props);
    return resource.getResponseField('Parameters') as unknown as shapes.RedshiftParameter[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusterParameters',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusterParameters.Marker'),
        outputPath: 'Marker',
        parameters: {
          ParameterGroupName: this.__input.parameterGroupName,
          Source: this.__input.source,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeClusterParameters.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RedshiftResponsesDescribeClusterSecurityGroups {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeClusterSecurityGroupsMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusterSecurityGroups',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusterSecurityGroups.Marker'),
        outputPath: 'Marker',
        parameters: {
          ClusterSecurityGroupName: this.__input.clusterSecurityGroupName,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          TagKeys: this.__input.tagKeys,
          TagValues: this.__input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeClusterSecurityGroups.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get clusterSecurityGroups(): shapes.RedshiftClusterSecurityGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusterSecurityGroups',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusterSecurityGroups.ClusterSecurityGroups'),
        outputPath: 'ClusterSecurityGroups',
        parameters: {
          ClusterSecurityGroupName: this.__input.clusterSecurityGroupName,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          TagKeys: this.__input.tagKeys,
          TagValues: this.__input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeClusterSecurityGroups.ClusterSecurityGroups', props);
    return resource.getResponseField('ClusterSecurityGroups') as unknown as shapes.RedshiftClusterSecurityGroup[];
  }

}

export class RedshiftResponsesDescribeClusterSnapshots {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeClusterSnapshotsMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusterSnapshots',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusterSnapshots.Marker'),
        outputPath: 'Marker',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotType: this.__input.snapshotType,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          OwnerAccount: this.__input.ownerAccount,
          TagKeys: this.__input.tagKeys,
          TagValues: this.__input.tagValues,
          ClusterExists: this.__input.clusterExists,
          SortingEntities: this.__input.sortingEntities,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeClusterSnapshots.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get snapshots(): shapes.RedshiftSnapshot[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusterSnapshots',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusterSnapshots.Snapshots'),
        outputPath: 'Snapshots',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotType: this.__input.snapshotType,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          OwnerAccount: this.__input.ownerAccount,
          TagKeys: this.__input.tagKeys,
          TagValues: this.__input.tagValues,
          ClusterExists: this.__input.clusterExists,
          SortingEntities: this.__input.sortingEntities,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeClusterSnapshots.Snapshots', props);
    return resource.getResponseField('Snapshots') as unknown as shapes.RedshiftSnapshot[];
  }

}

export class RedshiftResponsesDescribeClusterSubnetGroups {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeClusterSubnetGroupsMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusterSubnetGroups',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusterSubnetGroups.Marker'),
        outputPath: 'Marker',
        parameters: {
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          TagKeys: this.__input.tagKeys,
          TagValues: this.__input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeClusterSubnetGroups.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get clusterSubnetGroups(): shapes.RedshiftClusterSubnetGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusterSubnetGroups',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusterSubnetGroups.ClusterSubnetGroups'),
        outputPath: 'ClusterSubnetGroups',
        parameters: {
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          TagKeys: this.__input.tagKeys,
          TagValues: this.__input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeClusterSubnetGroups.ClusterSubnetGroups', props);
    return resource.getResponseField('ClusterSubnetGroups') as unknown as shapes.RedshiftClusterSubnetGroup[];
  }

}

export class RedshiftResponsesDescribeClusterTracks {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeClusterTracksMessage) {
  }

  public get maintenanceTracks(): shapes.RedshiftMaintenanceTrack[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusterTracks',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusterTracks.MaintenanceTracks'),
        outputPath: 'MaintenanceTracks',
        parameters: {
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeClusterTracks.MaintenanceTracks', props);
    return resource.getResponseField('MaintenanceTracks') as unknown as shapes.RedshiftMaintenanceTrack[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusterTracks',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusterTracks.Marker'),
        outputPath: 'Marker',
        parameters: {
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeClusterTracks.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RedshiftResponsesDescribeClusterVersions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeClusterVersionsMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusterVersions',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusterVersions.Marker'),
        outputPath: 'Marker',
        parameters: {
          ClusterVersion: this.__input.clusterVersion,
          ClusterParameterGroupFamily: this.__input.clusterParameterGroupFamily,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeClusterVersions.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get clusterVersions(): shapes.RedshiftClusterVersion[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusterVersions',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusterVersions.ClusterVersions'),
        outputPath: 'ClusterVersions',
        parameters: {
          ClusterVersion: this.__input.clusterVersion,
          ClusterParameterGroupFamily: this.__input.clusterParameterGroupFamily,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeClusterVersions.ClusterVersions', props);
    return resource.getResponseField('ClusterVersions') as unknown as shapes.RedshiftClusterVersion[];
  }

}

export class RedshiftResponsesDescribeClusters {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeClustersMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusters',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusters.Marker'),
        outputPath: 'Marker',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          TagKeys: this.__input.tagKeys,
          TagValues: this.__input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeClusters.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get clusters(): shapes.RedshiftCluster[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClusters',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeClusters.Clusters'),
        outputPath: 'Clusters',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          TagKeys: this.__input.tagKeys,
          TagValues: this.__input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeClusters.Clusters', props);
    return resource.getResponseField('Clusters') as unknown as shapes.RedshiftCluster[];
  }

}

export class RedshiftResponsesDescribeDataShares {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeDataSharesMessage) {
  }

  public get dataShares(): shapes.RedshiftDataShare[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDataShares',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeDataShares.DataShares'),
        outputPath: 'DataShares',
        parameters: {
          DataShareArn: this.__input.dataShareArn,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDataShares.DataShares', props);
    return resource.getResponseField('DataShares') as unknown as shapes.RedshiftDataShare[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDataShares',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeDataShares.Marker'),
        outputPath: 'Marker',
        parameters: {
          DataShareArn: this.__input.dataShareArn,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDataShares.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RedshiftResponsesDescribeDataSharesForConsumer {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeDataSharesForConsumerMessage) {
  }

  public get dataShares(): shapes.RedshiftDataShare[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDataSharesForConsumer',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeDataSharesForConsumer.DataShares'),
        outputPath: 'DataShares',
        parameters: {
          ConsumerArn: this.__input.consumerArn,
          Status: this.__input.status,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDataSharesForConsumer.DataShares', props);
    return resource.getResponseField('DataShares') as unknown as shapes.RedshiftDataShare[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDataSharesForConsumer',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeDataSharesForConsumer.Marker'),
        outputPath: 'Marker',
        parameters: {
          ConsumerArn: this.__input.consumerArn,
          Status: this.__input.status,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDataSharesForConsumer.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RedshiftResponsesDescribeDataSharesForProducer {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeDataSharesForProducerMessage) {
  }

  public get dataShares(): shapes.RedshiftDataShare[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDataSharesForProducer',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeDataSharesForProducer.DataShares'),
        outputPath: 'DataShares',
        parameters: {
          ProducerArn: this.__input.producerArn,
          Status: this.__input.status,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDataSharesForProducer.DataShares', props);
    return resource.getResponseField('DataShares') as unknown as shapes.RedshiftDataShare[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDataSharesForProducer',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeDataSharesForProducer.Marker'),
        outputPath: 'Marker',
        parameters: {
          ProducerArn: this.__input.producerArn,
          Status: this.__input.status,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDataSharesForProducer.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RedshiftResponsesDescribeDefaultClusterParameters {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeDefaultClusterParametersMessage) {
  }

  public get defaultClusterParameters(): RedshiftResponsesDescribeDefaultClusterParametersDefaultClusterParameters {
    return new RedshiftResponsesDescribeDefaultClusterParametersDefaultClusterParameters(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesDescribeDefaultClusterParametersDefaultClusterParameters {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeDefaultClusterParametersMessage) {
  }

  public get parameterGroupFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDefaultClusterParameters',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeDefaultClusterParameters.DefaultClusterParameters.ParameterGroupFamily'),
        outputPath: 'DefaultClusterParameters.ParameterGroupFamily',
        parameters: {
          ParameterGroupFamily: this.__input.parameterGroupFamily,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDefaultClusterParameters.DefaultClusterParameters.ParameterGroupFamily', props);
    return resource.getResponseField('DefaultClusterParameters.ParameterGroupFamily') as unknown as string;
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDefaultClusterParameters',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeDefaultClusterParameters.DefaultClusterParameters.Marker'),
        outputPath: 'DefaultClusterParameters.Marker',
        parameters: {
          ParameterGroupFamily: this.__input.parameterGroupFamily,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDefaultClusterParameters.DefaultClusterParameters.Marker', props);
    return resource.getResponseField('DefaultClusterParameters.Marker') as unknown as string;
  }

  public get parameters(): shapes.RedshiftParameter[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDefaultClusterParameters',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeDefaultClusterParameters.DefaultClusterParameters.Parameters'),
        outputPath: 'DefaultClusterParameters.Parameters',
        parameters: {
          ParameterGroupFamily: this.__input.parameterGroupFamily,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDefaultClusterParameters.DefaultClusterParameters.Parameters', props);
    return resource.getResponseField('DefaultClusterParameters.Parameters') as unknown as shapes.RedshiftParameter[];
  }

}

export class RedshiftResponsesDescribeEndpointAccess {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeEndpointAccessMessage) {
  }

  public get endpointAccessList(): shapes.RedshiftEndpointAccess[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeEndpointAccess.EndpointAccessList'),
        outputPath: 'EndpointAccessList',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ResourceOwner: this.__input.resourceOwner,
          EndpointName: this.__input.endpointName,
          VpcId: this.__input.vpcId,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeEndpointAccess.EndpointAccessList', props);
    return resource.getResponseField('EndpointAccessList') as unknown as shapes.RedshiftEndpointAccess[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeEndpointAccess.Marker'),
        outputPath: 'Marker',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ResourceOwner: this.__input.resourceOwner,
          EndpointName: this.__input.endpointName,
          VpcId: this.__input.vpcId,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeEndpointAccess.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RedshiftResponsesDescribeEndpointAuthorization {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeEndpointAuthorizationMessage) {
  }

  public get endpointAuthorizationList(): shapes.RedshiftEndpointAuthorization[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEndpointAuthorization',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeEndpointAuthorization.EndpointAuthorizationList'),
        outputPath: 'EndpointAuthorizationList',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          Account: this.__input.account,
          Grantee: this.__input.grantee,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeEndpointAuthorization.EndpointAuthorizationList', props);
    return resource.getResponseField('EndpointAuthorizationList') as unknown as shapes.RedshiftEndpointAuthorization[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEndpointAuthorization',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeEndpointAuthorization.Marker'),
        outputPath: 'Marker',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          Account: this.__input.account,
          Grantee: this.__input.grantee,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeEndpointAuthorization.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RedshiftResponsesDescribeEventCategories {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeEventCategoriesMessage) {
  }

  public get eventCategoriesMapList(): shapes.RedshiftEventCategoriesMap[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEventCategories',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeEventCategories.EventCategoriesMapList'),
        outputPath: 'EventCategoriesMapList',
        parameters: {
          SourceType: this.__input.sourceType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeEventCategories.EventCategoriesMapList', props);
    return resource.getResponseField('EventCategoriesMapList') as unknown as shapes.RedshiftEventCategoriesMap[];
  }

}

export class RedshiftResponsesDescribeEventSubscriptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeEventSubscriptionsMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEventSubscriptions',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeEventSubscriptions.Marker'),
        outputPath: 'Marker',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          TagKeys: this.__input.tagKeys,
          TagValues: this.__input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeEventSubscriptions.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get eventSubscriptionsList(): shapes.RedshiftEventSubscription[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEventSubscriptions',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeEventSubscriptions.EventSubscriptionsList'),
        outputPath: 'EventSubscriptionsList',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          TagKeys: this.__input.tagKeys,
          TagValues: this.__input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeEventSubscriptions.EventSubscriptionsList', props);
    return resource.getResponseField('EventSubscriptionsList') as unknown as shapes.RedshiftEventSubscription[];
  }

}

export class RedshiftResponsesDescribeEvents {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeEventsMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEvents',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeEvents.Marker'),
        outputPath: 'Marker',
        parameters: {
          SourceIdentifier: this.__input.sourceIdentifier,
          SourceType: this.__input.sourceType,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Duration: this.__input.duration,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeEvents.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get events(): shapes.RedshiftEvent[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEvents',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeEvents.Events'),
        outputPath: 'Events',
        parameters: {
          SourceIdentifier: this.__input.sourceIdentifier,
          SourceType: this.__input.sourceType,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Duration: this.__input.duration,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeEvents.Events', props);
    return resource.getResponseField('Events') as unknown as shapes.RedshiftEvent[];
  }

}

export class RedshiftResponsesDescribeHsmClientCertificates {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeHsmClientCertificatesMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeHsmClientCertificates',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeHsmClientCertificates.Marker'),
        outputPath: 'Marker',
        parameters: {
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          TagKeys: this.__input.tagKeys,
          TagValues: this.__input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeHsmClientCertificates.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get hsmClientCertificates(): shapes.RedshiftHsmClientCertificate[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeHsmClientCertificates',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeHsmClientCertificates.HsmClientCertificates'),
        outputPath: 'HsmClientCertificates',
        parameters: {
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          TagKeys: this.__input.tagKeys,
          TagValues: this.__input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeHsmClientCertificates.HsmClientCertificates', props);
    return resource.getResponseField('HsmClientCertificates') as unknown as shapes.RedshiftHsmClientCertificate[];
  }

}

export class RedshiftResponsesDescribeHsmConfigurations {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeHsmConfigurationsMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeHsmConfigurations',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeHsmConfigurations.Marker'),
        outputPath: 'Marker',
        parameters: {
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          TagKeys: this.__input.tagKeys,
          TagValues: this.__input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeHsmConfigurations.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get hsmConfigurations(): shapes.RedshiftHsmConfiguration[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeHsmConfigurations',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeHsmConfigurations.HsmConfigurations'),
        outputPath: 'HsmConfigurations',
        parameters: {
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          TagKeys: this.__input.tagKeys,
          TagValues: this.__input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeHsmConfigurations.HsmConfigurations', props);
    return resource.getResponseField('HsmConfigurations') as unknown as shapes.RedshiftHsmConfiguration[];
  }

}

export class RedshiftResponsesDescribeLoggingStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeLoggingStatusMessage) {
  }

  public get loggingEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLoggingStatus',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeLoggingStatus.LoggingEnabled'),
        outputPath: 'LoggingEnabled',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeLoggingStatus.LoggingEnabled', props);
    return resource.getResponseField('LoggingEnabled') as unknown as boolean;
  }

  public get bucketName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLoggingStatus',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeLoggingStatus.BucketName'),
        outputPath: 'BucketName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeLoggingStatus.BucketName', props);
    return resource.getResponseField('BucketName') as unknown as string;
  }

  public get s3KeyPrefix(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLoggingStatus',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeLoggingStatus.S3KeyPrefix'),
        outputPath: 'S3KeyPrefix',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeLoggingStatus.S3KeyPrefix', props);
    return resource.getResponseField('S3KeyPrefix') as unknown as string;
  }

  public get lastSuccessfulDeliveryTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLoggingStatus',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeLoggingStatus.LastSuccessfulDeliveryTime'),
        outputPath: 'LastSuccessfulDeliveryTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeLoggingStatus.LastSuccessfulDeliveryTime', props);
    return resource.getResponseField('LastSuccessfulDeliveryTime') as unknown as string;
  }

  public get lastFailureTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLoggingStatus',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeLoggingStatus.LastFailureTime'),
        outputPath: 'LastFailureTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeLoggingStatus.LastFailureTime', props);
    return resource.getResponseField('LastFailureTime') as unknown as string;
  }

  public get lastFailureMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLoggingStatus',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeLoggingStatus.LastFailureMessage'),
        outputPath: 'LastFailureMessage',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeLoggingStatus.LastFailureMessage', props);
    return resource.getResponseField('LastFailureMessage') as unknown as string;
  }

}

export class RedshiftResponsesDescribeNodeConfigurationOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeNodeConfigurationOptionsMessage) {
  }

  public get nodeConfigurationOptionList(): shapes.RedshiftNodeConfigurationOption[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNodeConfigurationOptions',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeNodeConfigurationOptions.NodeConfigurationOptionList'),
        outputPath: 'NodeConfigurationOptionList',
        parameters: {
          ActionType: this.__input.actionType,
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          OwnerAccount: this.__input.ownerAccount,
          Filters: this.__input.filters,
          Marker: this.__input.marker,
          MaxRecords: this.__input.maxRecords,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeNodeConfigurationOptions.NodeConfigurationOptionList', props);
    return resource.getResponseField('NodeConfigurationOptionList') as unknown as shapes.RedshiftNodeConfigurationOption[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNodeConfigurationOptions',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeNodeConfigurationOptions.Marker'),
        outputPath: 'Marker',
        parameters: {
          ActionType: this.__input.actionType,
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          OwnerAccount: this.__input.ownerAccount,
          Filters: this.__input.filters,
          Marker: this.__input.marker,
          MaxRecords: this.__input.maxRecords,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeNodeConfigurationOptions.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RedshiftResponsesDescribeOrderableClusterOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeOrderableClusterOptionsMessage) {
  }

  public get orderableClusterOptions(): shapes.RedshiftOrderableClusterOption[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOrderableClusterOptions',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeOrderableClusterOptions.OrderableClusterOptions'),
        outputPath: 'OrderableClusterOptions',
        parameters: {
          ClusterVersion: this.__input.clusterVersion,
          NodeType: this.__input.nodeType,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeOrderableClusterOptions.OrderableClusterOptions', props);
    return resource.getResponseField('OrderableClusterOptions') as unknown as shapes.RedshiftOrderableClusterOption[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOrderableClusterOptions',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeOrderableClusterOptions.Marker'),
        outputPath: 'Marker',
        parameters: {
          ClusterVersion: this.__input.clusterVersion,
          NodeType: this.__input.nodeType,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeOrderableClusterOptions.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RedshiftResponsesDescribePartners {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribePartnersInputMessage) {
  }

  public get partnerIntegrationInfoList(): shapes.RedshiftPartnerIntegrationInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describePartners',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribePartners.PartnerIntegrationInfoList'),
        outputPath: 'PartnerIntegrationInfoList',
        parameters: {
          AccountId: this.__input.accountId,
          ClusterIdentifier: this.__input.clusterIdentifier,
          DatabaseName: this.__input.databaseName,
          PartnerName: this.__input.partnerName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribePartners.PartnerIntegrationInfoList', props);
    return resource.getResponseField('PartnerIntegrationInfoList') as unknown as shapes.RedshiftPartnerIntegrationInfo[];
  }

}

export class RedshiftResponsesDescribeReservedNodeOfferings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeReservedNodeOfferingsMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedNodeOfferings',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeReservedNodeOfferings.Marker'),
        outputPath: 'Marker',
        parameters: {
          ReservedNodeOfferingId: this.__input.reservedNodeOfferingId,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservedNodeOfferings.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get reservedNodeOfferings(): shapes.RedshiftReservedNodeOffering[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedNodeOfferings',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeReservedNodeOfferings.ReservedNodeOfferings'),
        outputPath: 'ReservedNodeOfferings',
        parameters: {
          ReservedNodeOfferingId: this.__input.reservedNodeOfferingId,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservedNodeOfferings.ReservedNodeOfferings', props);
    return resource.getResponseField('ReservedNodeOfferings') as unknown as shapes.RedshiftReservedNodeOffering[];
  }

}

export class RedshiftResponsesDescribeReservedNodes {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeReservedNodesMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedNodes',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeReservedNodes.Marker'),
        outputPath: 'Marker',
        parameters: {
          ReservedNodeId: this.__input.reservedNodeId,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservedNodes.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get reservedNodes(): shapes.RedshiftReservedNode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedNodes',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeReservedNodes.ReservedNodes'),
        outputPath: 'ReservedNodes',
        parameters: {
          ReservedNodeId: this.__input.reservedNodeId,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservedNodes.ReservedNodes', props);
    return resource.getResponseField('ReservedNodes') as unknown as shapes.RedshiftReservedNode[];
  }

}

export class RedshiftResponsesDescribeResize {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeResizeMessage) {
  }

  public get targetNodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeResize.TargetNodeType'),
        outputPath: 'TargetNodeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeResize.TargetNodeType', props);
    return resource.getResponseField('TargetNodeType') as unknown as string;
  }

  public get targetNumberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeResize.TargetNumberOfNodes'),
        outputPath: 'TargetNumberOfNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeResize.TargetNumberOfNodes', props);
    return resource.getResponseField('TargetNumberOfNodes') as unknown as number;
  }

  public get targetClusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeResize.TargetClusterType'),
        outputPath: 'TargetClusterType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeResize.TargetClusterType', props);
    return resource.getResponseField('TargetClusterType') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeResize.Status'),
        outputPath: 'Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeResize.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

  public get importTablesCompleted(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeResize.ImportTablesCompleted'),
        outputPath: 'ImportTablesCompleted',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeResize.ImportTablesCompleted', props);
    return resource.getResponseField('ImportTablesCompleted') as unknown as string[];
  }

  public get importTablesInProgress(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeResize.ImportTablesInProgress'),
        outputPath: 'ImportTablesInProgress',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeResize.ImportTablesInProgress', props);
    return resource.getResponseField('ImportTablesInProgress') as unknown as string[];
  }

  public get importTablesNotStarted(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeResize.ImportTablesNotStarted'),
        outputPath: 'ImportTablesNotStarted',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeResize.ImportTablesNotStarted', props);
    return resource.getResponseField('ImportTablesNotStarted') as unknown as string[];
  }

  public get avgResizeRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeResize.AvgResizeRateInMegaBytesPerSecond'),
        outputPath: 'AvgResizeRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeResize.AvgResizeRateInMegaBytesPerSecond', props);
    return resource.getResponseField('AvgResizeRateInMegaBytesPerSecond') as unknown as number;
  }

  public get totalResizeDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeResize.TotalResizeDataInMegaBytes'),
        outputPath: 'TotalResizeDataInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeResize.TotalResizeDataInMegaBytes', props);
    return resource.getResponseField('TotalResizeDataInMegaBytes') as unknown as number;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeResize.ProgressInMegaBytes'),
        outputPath: 'ProgressInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeResize.ProgressInMegaBytes', props);
    return resource.getResponseField('ProgressInMegaBytes') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeResize.ElapsedTimeInSeconds'),
        outputPath: 'ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeResize.ElapsedTimeInSeconds', props);
    return resource.getResponseField('ElapsedTimeInSeconds') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeResize.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeResize.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

  public get resizeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeResize.ResizeType'),
        outputPath: 'ResizeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeResize.ResizeType', props);
    return resource.getResponseField('ResizeType') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeResize.Message'),
        outputPath: 'Message',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeResize.Message', props);
    return resource.getResponseField('Message') as unknown as string;
  }

  public get targetEncryptionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeResize.TargetEncryptionType'),
        outputPath: 'TargetEncryptionType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeResize.TargetEncryptionType', props);
    return resource.getResponseField('TargetEncryptionType') as unknown as string;
  }

  public get dataTransferProgressPercent(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeResize',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeResize.DataTransferProgressPercent'),
        outputPath: 'DataTransferProgressPercent',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeResize.DataTransferProgressPercent', props);
    return resource.getResponseField('DataTransferProgressPercent') as unknown as number;
  }

}

export class RedshiftResponsesDescribeScheduledActions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeScheduledActionsMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeScheduledActions',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeScheduledActions.Marker'),
        outputPath: 'Marker',
        parameters: {
          ScheduledActionName: this.__input.scheduledActionName,
          TargetActionType: this.__input.targetActionType,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Active: this.__input.active,
          Filters: this.__input.filters,
          Marker: this.__input.marker,
          MaxRecords: this.__input.maxRecords,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeScheduledActions.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get scheduledActions(): shapes.RedshiftScheduledAction[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeScheduledActions',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeScheduledActions.ScheduledActions'),
        outputPath: 'ScheduledActions',
        parameters: {
          ScheduledActionName: this.__input.scheduledActionName,
          TargetActionType: this.__input.targetActionType,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Active: this.__input.active,
          Filters: this.__input.filters,
          Marker: this.__input.marker,
          MaxRecords: this.__input.maxRecords,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeScheduledActions.ScheduledActions', props);
    return resource.getResponseField('ScheduledActions') as unknown as shapes.RedshiftScheduledAction[];
  }

}

export class RedshiftResponsesDescribeSnapshotCopyGrants {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeSnapshotCopyGrantsMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSnapshotCopyGrants',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeSnapshotCopyGrants.Marker'),
        outputPath: 'Marker',
        parameters: {
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          TagKeys: this.__input.tagKeys,
          TagValues: this.__input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSnapshotCopyGrants.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get snapshotCopyGrants(): shapes.RedshiftSnapshotCopyGrant[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSnapshotCopyGrants',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeSnapshotCopyGrants.SnapshotCopyGrants'),
        outputPath: 'SnapshotCopyGrants',
        parameters: {
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          TagKeys: this.__input.tagKeys,
          TagValues: this.__input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSnapshotCopyGrants.SnapshotCopyGrants', props);
    return resource.getResponseField('SnapshotCopyGrants') as unknown as shapes.RedshiftSnapshotCopyGrant[];
  }

}

export class RedshiftResponsesDescribeSnapshotSchedules {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeSnapshotSchedulesMessage) {
  }

  public get snapshotSchedules(): shapes.RedshiftSnapshotSchedule[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSnapshotSchedules',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeSnapshotSchedules.SnapshotSchedules'),
        outputPath: 'SnapshotSchedules',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ScheduleIdentifier: this.__input.scheduleIdentifier,
          TagKeys: this.__input.tagKeys,
          TagValues: this.__input.tagValues,
          Marker: this.__input.marker,
          MaxRecords: this.__input.maxRecords,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSnapshotSchedules.SnapshotSchedules', props);
    return resource.getResponseField('SnapshotSchedules') as unknown as shapes.RedshiftSnapshotSchedule[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSnapshotSchedules',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeSnapshotSchedules.Marker'),
        outputPath: 'Marker',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ScheduleIdentifier: this.__input.scheduleIdentifier,
          TagKeys: this.__input.tagKeys,
          TagValues: this.__input.tagValues,
          Marker: this.__input.marker,
          MaxRecords: this.__input.maxRecords,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSnapshotSchedules.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RedshiftResponsesDescribeStorage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[]) {
  }

  public get totalBackupSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeStorage',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeStorage.TotalBackupSizeInMegaBytes'),
        outputPath: 'TotalBackupSizeInMegaBytes',
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeStorage.TotalBackupSizeInMegaBytes', props);
    return resource.getResponseField('TotalBackupSizeInMegaBytes') as unknown as number;
  }

  public get totalProvisionedStorageInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeStorage',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeStorage.TotalProvisionedStorageInMegaBytes'),
        outputPath: 'TotalProvisionedStorageInMegaBytes',
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeStorage.TotalProvisionedStorageInMegaBytes', props);
    return resource.getResponseField('TotalProvisionedStorageInMegaBytes') as unknown as number;
  }

}

export class RedshiftResponsesDescribeTableRestoreStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeTableRestoreStatusMessage) {
  }

  public get tableRestoreStatusDetails(): shapes.RedshiftTableRestoreStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTableRestoreStatus',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeTableRestoreStatus.TableRestoreStatusDetails'),
        outputPath: 'TableRestoreStatusDetails',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          TableRestoreRequestId: this.__input.tableRestoreRequestId,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeTableRestoreStatus.TableRestoreStatusDetails', props);
    return resource.getResponseField('TableRestoreStatusDetails') as unknown as shapes.RedshiftTableRestoreStatus[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTableRestoreStatus',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeTableRestoreStatus.Marker'),
        outputPath: 'Marker',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          TableRestoreRequestId: this.__input.tableRestoreRequestId,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeTableRestoreStatus.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RedshiftResponsesDescribeTags {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeTagsMessage) {
  }

  public get taggedResources(): shapes.RedshiftTaggedResource[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTags',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeTags.TaggedResources'),
        outputPath: 'TaggedResources',
        parameters: {
          ResourceName: this.__input.resourceName,
          ResourceType: this.__input.resourceType,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          TagKeys: this.__input.tagKeys,
          TagValues: this.__input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeTags.TaggedResources', props);
    return resource.getResponseField('TaggedResources') as unknown as shapes.RedshiftTaggedResource[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTags',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeTags.Marker'),
        outputPath: 'Marker',
        parameters: {
          ResourceName: this.__input.resourceName,
          ResourceType: this.__input.resourceType,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          TagKeys: this.__input.tagKeys,
          TagValues: this.__input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeTags.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RedshiftResponsesDescribeUsageLimits {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDescribeUsageLimitsMessage) {
  }

  public get usageLimits(): shapes.RedshiftUsageLimit[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeUsageLimits',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeUsageLimits.UsageLimits'),
        outputPath: 'UsageLimits',
        parameters: {
          UsageLimitId: this.__input.usageLimitId,
          ClusterIdentifier: this.__input.clusterIdentifier,
          FeatureType: this.__input.featureType,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          TagKeys: this.__input.tagKeys,
          TagValues: this.__input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeUsageLimits.UsageLimits', props);
    return resource.getResponseField('UsageLimits') as unknown as shapes.RedshiftUsageLimit[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeUsageLimits',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DescribeUsageLimits.Marker'),
        outputPath: 'Marker',
        parameters: {
          UsageLimitId: this.__input.usageLimitId,
          ClusterIdentifier: this.__input.clusterIdentifier,
          FeatureType: this.__input.featureType,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          TagKeys: this.__input.tagKeys,
          TagValues: this.__input.tagValues,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeUsageLimits.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RedshiftResponsesDisableLogging {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDisableLoggingMessage) {
  }

  public get loggingEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableLogging',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableLogging.LoggingEnabled'),
        outputPath: 'LoggingEnabled',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableLogging.LoggingEnabled', props);
    return resource.getResponseField('LoggingEnabled') as unknown as boolean;
  }

  public get bucketName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableLogging',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableLogging.BucketName'),
        outputPath: 'BucketName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableLogging.BucketName', props);
    return resource.getResponseField('BucketName') as unknown as string;
  }

  public get s3KeyPrefix(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableLogging',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableLogging.S3KeyPrefix'),
        outputPath: 'S3KeyPrefix',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableLogging.S3KeyPrefix', props);
    return resource.getResponseField('S3KeyPrefix') as unknown as string;
  }

  public get lastSuccessfulDeliveryTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableLogging',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableLogging.LastSuccessfulDeliveryTime'),
        outputPath: 'LastSuccessfulDeliveryTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableLogging.LastSuccessfulDeliveryTime', props);
    return resource.getResponseField('LastSuccessfulDeliveryTime') as unknown as string;
  }

  public get lastFailureTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableLogging',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableLogging.LastFailureTime'),
        outputPath: 'LastFailureTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableLogging.LastFailureTime', props);
    return resource.getResponseField('LastFailureTime') as unknown as string;
  }

  public get lastFailureMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableLogging',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableLogging.LastFailureMessage'),
        outputPath: 'LastFailureMessage',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableLogging.LastFailureMessage', props);
    return resource.getResponseField('LastFailureMessage') as unknown as string;
  }

}

export class RedshiftResponsesDisableSnapshotCopy {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDisableSnapshotCopyMessage) {
  }

  public get cluster(): RedshiftResponsesDisableSnapshotCopyCluster {
    return new RedshiftResponsesDisableSnapshotCopyCluster(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesDisableSnapshotCopyCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDisableSnapshotCopyMessage) {
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ClusterIdentifier'),
        outputPath: 'Cluster.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.ClusterIdentifier') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.NodeType'),
        outputPath: 'Cluster.NodeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.NodeType', props);
    return resource.getResponseField('Cluster.NodeType') as unknown as string;
  }

  public get clusterStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ClusterStatus'),
        outputPath: 'Cluster.ClusterStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.ClusterStatus', props);
    return resource.getResponseField('Cluster.ClusterStatus') as unknown as string;
  }

  public get clusterAvailabilityStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ClusterAvailabilityStatus'),
        outputPath: 'Cluster.ClusterAvailabilityStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.ClusterAvailabilityStatus', props);
    return resource.getResponseField('Cluster.ClusterAvailabilityStatus') as unknown as string;
  }

  public get modifyStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ModifyStatus'),
        outputPath: 'Cluster.ModifyStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.ModifyStatus', props);
    return resource.getResponseField('Cluster.ModifyStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.MasterUsername'),
        outputPath: 'Cluster.MasterUsername',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.MasterUsername', props);
    return resource.getResponseField('Cluster.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.DBName'),
        outputPath: 'Cluster.DBName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.DBName', props);
    return resource.getResponseField('Cluster.DBName') as unknown as string;
  }

  public get endpoint(): RedshiftResponsesDisableSnapshotCopyClusterEndpoint {
    return new RedshiftResponsesDisableSnapshotCopyClusterEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ClusterCreateTime'),
        outputPath: 'Cluster.ClusterCreateTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.ClusterCreateTime', props);
    return resource.getResponseField('Cluster.ClusterCreateTime') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterSecurityGroups(): shapes.RedshiftClusterSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ClusterSecurityGroups'),
        outputPath: 'Cluster.ClusterSecurityGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.ClusterSecurityGroups', props);
    return resource.getResponseField('Cluster.ClusterSecurityGroups') as unknown as shapes.RedshiftClusterSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RedshiftVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.VpcSecurityGroups'),
        outputPath: 'Cluster.VpcSecurityGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.VpcSecurityGroups', props);
    return resource.getResponseField('Cluster.VpcSecurityGroups') as unknown as shapes.RedshiftVpcSecurityGroupMembership[];
  }

  public get clusterParameterGroups(): shapes.RedshiftClusterParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ClusterParameterGroups'),
        outputPath: 'Cluster.ClusterParameterGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.ClusterParameterGroups', props);
    return resource.getResponseField('Cluster.ClusterParameterGroups') as unknown as shapes.RedshiftClusterParameterGroupStatus[];
  }

  public get clusterSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ClusterSubnetGroupName'),
        outputPath: 'Cluster.ClusterSubnetGroupName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.ClusterSubnetGroupName', props);
    return resource.getResponseField('Cluster.ClusterSubnetGroupName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.VpcId'),
        outputPath: 'Cluster.VpcId',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.VpcId', props);
    return resource.getResponseField('Cluster.VpcId') as unknown as string;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.AvailabilityZone'),
        outputPath: 'Cluster.AvailabilityZone',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.AvailabilityZone', props);
    return resource.getResponseField('Cluster.AvailabilityZone') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.PreferredMaintenanceWindow'),
        outputPath: 'Cluster.PreferredMaintenanceWindow',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('Cluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RedshiftResponsesDisableSnapshotCopyClusterPendingModifiedValues {
    return new RedshiftResponsesDisableSnapshotCopyClusterPendingModifiedValues(this.__scope, this.__resources, this.__input);
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ClusterVersion'),
        outputPath: 'Cluster.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.ClusterVersion', props);
    return resource.getResponseField('Cluster.ClusterVersion') as unknown as string;
  }

  public get allowVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.AllowVersionUpgrade'),
        outputPath: 'Cluster.AllowVersionUpgrade',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.AllowVersionUpgrade', props);
    return resource.getResponseField('Cluster.AllowVersionUpgrade') as unknown as boolean;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.NumberOfNodes'),
        outputPath: 'Cluster.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.NumberOfNodes', props);
    return resource.getResponseField('Cluster.NumberOfNodes') as unknown as number;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.PubliclyAccessible'),
        outputPath: 'Cluster.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PubliclyAccessible') as unknown as boolean;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.Encrypted'),
        outputPath: 'Cluster.Encrypted',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.Encrypted', props);
    return resource.getResponseField('Cluster.Encrypted') as unknown as boolean;
  }

  public get restoreStatus(): RedshiftResponsesDisableSnapshotCopyClusterRestoreStatus {
    return new RedshiftResponsesDisableSnapshotCopyClusterRestoreStatus(this.__scope, this.__resources, this.__input);
  }

  public get dataTransferProgress(): RedshiftResponsesDisableSnapshotCopyClusterDataTransferProgress {
    return new RedshiftResponsesDisableSnapshotCopyClusterDataTransferProgress(this.__scope, this.__resources, this.__input);
  }

  public get hsmStatus(): RedshiftResponsesDisableSnapshotCopyClusterHsmStatus {
    return new RedshiftResponsesDisableSnapshotCopyClusterHsmStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterSnapshotCopyStatus(): RedshiftResponsesDisableSnapshotCopyClusterClusterSnapshotCopyStatus {
    return new RedshiftResponsesDisableSnapshotCopyClusterClusterSnapshotCopyStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterPublicKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ClusterPublicKey'),
        outputPath: 'Cluster.ClusterPublicKey',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.ClusterPublicKey', props);
    return resource.getResponseField('Cluster.ClusterPublicKey') as unknown as string;
  }

  public get clusterNodes(): shapes.RedshiftClusterNode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ClusterNodes'),
        outputPath: 'Cluster.ClusterNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.ClusterNodes', props);
    return resource.getResponseField('Cluster.ClusterNodes') as unknown as shapes.RedshiftClusterNode[];
  }

  public get elasticIpStatus(): RedshiftResponsesDisableSnapshotCopyClusterElasticIpStatus {
    return new RedshiftResponsesDisableSnapshotCopyClusterElasticIpStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterRevisionNumber(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ClusterRevisionNumber'),
        outputPath: 'Cluster.ClusterRevisionNumber',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.ClusterRevisionNumber', props);
    return resource.getResponseField('Cluster.ClusterRevisionNumber') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.Tags'),
        outputPath: 'Cluster.Tags',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.Tags', props);
    return resource.getResponseField('Cluster.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.KmsKeyId'),
        outputPath: 'Cluster.KmsKeyId',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.KmsKeyId', props);
    return resource.getResponseField('Cluster.KmsKeyId') as unknown as string;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.EnhancedVpcRouting'),
        outputPath: 'Cluster.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.EnhancedVpcRouting') as unknown as boolean;
  }

  public get iamRoles(): shapes.RedshiftClusterIamRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.IamRoles'),
        outputPath: 'Cluster.IamRoles',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.IamRoles', props);
    return resource.getResponseField('Cluster.IamRoles') as unknown as shapes.RedshiftClusterIamRole[];
  }

  public get pendingActions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.PendingActions'),
        outputPath: 'Cluster.PendingActions',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.PendingActions', props);
    return resource.getResponseField('Cluster.PendingActions') as unknown as string[];
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.MaintenanceTrackName'),
        outputPath: 'Cluster.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.MaintenanceTrackName') as unknown as string;
  }

  public get elasticResizeNumberOfNodeOptions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ElasticResizeNumberOfNodeOptions'),
        outputPath: 'Cluster.ElasticResizeNumberOfNodeOptions',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.ElasticResizeNumberOfNodeOptions', props);
    return resource.getResponseField('Cluster.ElasticResizeNumberOfNodeOptions') as unknown as string;
  }

  public get deferredMaintenanceWindows(): shapes.RedshiftDeferredMaintenanceWindow[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.DeferredMaintenanceWindows'),
        outputPath: 'Cluster.DeferredMaintenanceWindows',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.DeferredMaintenanceWindows', props);
    return resource.getResponseField('Cluster.DeferredMaintenanceWindows') as unknown as shapes.RedshiftDeferredMaintenanceWindow[];
  }

  public get snapshotScheduleIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.SnapshotScheduleIdentifier'),
        outputPath: 'Cluster.SnapshotScheduleIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.SnapshotScheduleIdentifier', props);
    return resource.getResponseField('Cluster.SnapshotScheduleIdentifier') as unknown as string;
  }

  public get snapshotScheduleState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.SnapshotScheduleState'),
        outputPath: 'Cluster.SnapshotScheduleState',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.SnapshotScheduleState', props);
    return resource.getResponseField('Cluster.SnapshotScheduleState') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ExpectedNextSnapshotScheduleTime'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.ExpectedNextSnapshotScheduleTime', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTime') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTimeStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ExpectedNextSnapshotScheduleTimeStatus'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTimeStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.ExpectedNextSnapshotScheduleTimeStatus', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTimeStatus') as unknown as string;
  }

  public get nextMaintenanceWindowStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.NextMaintenanceWindowStartTime'),
        outputPath: 'Cluster.NextMaintenanceWindowStartTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.NextMaintenanceWindowStartTime', props);
    return resource.getResponseField('Cluster.NextMaintenanceWindowStartTime') as unknown as string;
  }

  public get resizeInfo(): RedshiftResponsesDisableSnapshotCopyClusterResizeInfo {
    return new RedshiftResponsesDisableSnapshotCopyClusterResizeInfo(this.__scope, this.__resources, this.__input);
  }

  public get availabilityZoneRelocationStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.AvailabilityZoneRelocationStatus'),
        outputPath: 'Cluster.AvailabilityZoneRelocationStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.AvailabilityZoneRelocationStatus', props);
    return resource.getResponseField('Cluster.AvailabilityZoneRelocationStatus') as unknown as string;
  }

  public get clusterNamespaceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ClusterNamespaceArn'),
        outputPath: 'Cluster.ClusterNamespaceArn',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.ClusterNamespaceArn', props);
    return resource.getResponseField('Cluster.ClusterNamespaceArn') as unknown as string;
  }

  public get totalStorageCapacityInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.TotalStorageCapacityInMegaBytes'),
        outputPath: 'Cluster.TotalStorageCapacityInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.TotalStorageCapacityInMegaBytes', props);
    return resource.getResponseField('Cluster.TotalStorageCapacityInMegaBytes') as unknown as number;
  }

  public get aquaConfiguration(): RedshiftResponsesDisableSnapshotCopyClusterAquaConfiguration {
    return new RedshiftResponsesDisableSnapshotCopyClusterAquaConfiguration(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesDisableSnapshotCopyClusterEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDisableSnapshotCopyMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.Endpoint.Address'),
        outputPath: 'Cluster.Endpoint.Address',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.Endpoint.Address', props);
    return resource.getResponseField('Cluster.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.Endpoint.Port'),
        outputPath: 'Cluster.Endpoint.Port',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.Endpoint.Port', props);
    return resource.getResponseField('Cluster.Endpoint.Port') as unknown as number;
  }

  public get vpcEndpoints(): shapes.RedshiftVpcEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.Endpoint.VpcEndpoints'),
        outputPath: 'Cluster.Endpoint.VpcEndpoints',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.Endpoint.VpcEndpoints', props);
    return resource.getResponseField('Cluster.Endpoint.VpcEndpoints') as unknown as shapes.RedshiftVpcEndpoint[];
  }

}

export class RedshiftResponsesDisableSnapshotCopyClusterPendingModifiedValues {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDisableSnapshotCopyMessage) {
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'Cluster.PendingModifiedValues.MasterUserPassword',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.PendingModifiedValues.NodeType'),
        outputPath: 'Cluster.PendingModifiedValues.NodeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.PendingModifiedValues.NodeType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.PendingModifiedValues.NumberOfNodes'),
        outputPath: 'Cluster.PendingModifiedValues.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.PendingModifiedValues.NumberOfNodes', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NumberOfNodes') as unknown as number;
  }

  public get clusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.PendingModifiedValues.ClusterType'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.PendingModifiedValues.ClusterType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterType') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.PendingModifiedValues.ClusterVersion'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.PendingModifiedValues.ClusterVersion', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterVersion') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.PendingModifiedValues.ClusterIdentifier'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.PendingModifiedValues.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterIdentifier') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.PendingModifiedValues.PubliclyAccessible'),
        outputPath: 'Cluster.PendingModifiedValues.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.PendingModifiedValues.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.PubliclyAccessible') as unknown as boolean;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.PendingModifiedValues.EnhancedVpcRouting'),
        outputPath: 'Cluster.PendingModifiedValues.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.PendingModifiedValues.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.PendingModifiedValues.MaintenanceTrackName'),
        outputPath: 'Cluster.PendingModifiedValues.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.PendingModifiedValues.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MaintenanceTrackName') as unknown as string;
  }

  public get encryptionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.PendingModifiedValues.EncryptionType'),
        outputPath: 'Cluster.PendingModifiedValues.EncryptionType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.PendingModifiedValues.EncryptionType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EncryptionType') as unknown as string;
  }

}

export class RedshiftResponsesDisableSnapshotCopyClusterRestoreStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDisableSnapshotCopyMessage) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.RestoreStatus.Status'),
        outputPath: 'Cluster.RestoreStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.RestoreStatus.Status', props);
    return resource.getResponseField('Cluster.RestoreStatus.Status') as unknown as string;
  }

  public get currentRestoreRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond') as unknown as number;
  }

  public get snapshotSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.RestoreStatus.SnapshotSizeInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.SnapshotSizeInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.RestoreStatus.SnapshotSizeInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.SnapshotSizeInMegaBytes') as unknown as number;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.RestoreStatus.ProgressInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.ProgressInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.RestoreStatus.ProgressInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.ProgressInMegaBytes') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.RestoreStatus.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.RestoreStatus.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.RestoreStatus.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.ElapsedTimeInSeconds') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

}

export class RedshiftResponsesDisableSnapshotCopyClusterDataTransferProgress {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDisableSnapshotCopyMessage) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.DataTransferProgress.Status'),
        outputPath: 'Cluster.DataTransferProgress.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.DataTransferProgress.Status', props);
    return resource.getResponseField('Cluster.DataTransferProgress.Status') as unknown as string;
  }

  public get currentRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond') as unknown as number;
  }

  public get totalDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.DataTransferProgress.TotalDataInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.TotalDataInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.DataTransferProgress.TotalDataInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.TotalDataInMegaBytes') as unknown as number;
  }

  public get dataTransferredInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.DataTransferProgress.DataTransferredInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.DataTransferredInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.DataTransferProgress.DataTransferredInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.DataTransferredInMegaBytes') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.DataTransferProgress.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.DataTransferProgress.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.ElapsedTimeInSeconds') as unknown as number;
  }

}

export class RedshiftResponsesDisableSnapshotCopyClusterHsmStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDisableSnapshotCopyMessage) {
  }

  public get hsmClientCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.HsmStatus.HsmClientCertificateIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmClientCertificateIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.HsmStatus.HsmClientCertificateIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmClientCertificateIdentifier') as unknown as string;
  }

  public get hsmConfigurationIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.HsmStatus.HsmConfigurationIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmConfigurationIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.HsmStatus.HsmConfigurationIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmConfigurationIdentifier') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.HsmStatus.Status'),
        outputPath: 'Cluster.HsmStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.HsmStatus.Status', props);
    return resource.getResponseField('Cluster.HsmStatus.Status') as unknown as string;
  }

}

export class RedshiftResponsesDisableSnapshotCopyClusterClusterSnapshotCopyStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDisableSnapshotCopyMessage) {
  }

  public get destinationRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ClusterSnapshotCopyStatus.DestinationRegion'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.DestinationRegion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.ClusterSnapshotCopyStatus.DestinationRegion', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.DestinationRegion') as unknown as string;
  }

  public get retentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.RetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.RetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get snapshotCopyGrantName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName') as unknown as string;
  }

}

export class RedshiftResponsesDisableSnapshotCopyClusterElasticIpStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDisableSnapshotCopyMessage) {
  }

  public get elasticIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ElasticIpStatus.ElasticIp'),
        outputPath: 'Cluster.ElasticIpStatus.ElasticIp',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.ElasticIpStatus.ElasticIp', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.ElasticIp') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ElasticIpStatus.Status'),
        outputPath: 'Cluster.ElasticIpStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.ElasticIpStatus.Status', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.Status') as unknown as string;
  }

}

export class RedshiftResponsesDisableSnapshotCopyClusterResizeInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDisableSnapshotCopyMessage) {
  }

  public get resizeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ResizeInfo.ResizeType'),
        outputPath: 'Cluster.ResizeInfo.ResizeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.ResizeInfo.ResizeType', props);
    return resource.getResponseField('Cluster.ResizeInfo.ResizeType') as unknown as string;
  }

  public get allowCancelResize(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.ResizeInfo.AllowCancelResize'),
        outputPath: 'Cluster.ResizeInfo.AllowCancelResize',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.ResizeInfo.AllowCancelResize', props);
    return resource.getResponseField('Cluster.ResizeInfo.AllowCancelResize') as unknown as boolean;
  }

}

export class RedshiftResponsesDisableSnapshotCopyClusterAquaConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDisableSnapshotCopyMessage) {
  }

  public get aquaStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.AquaConfiguration.AquaStatus'),
        outputPath: 'Cluster.AquaConfiguration.AquaStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.AquaConfiguration.AquaStatus', props);
    return resource.getResponseField('Cluster.AquaConfiguration.AquaStatus') as unknown as string;
  }

  public get aquaConfigurationStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisableSnapshotCopy.Cluster.AquaConfiguration.AquaConfigurationStatus'),
        outputPath: 'Cluster.AquaConfiguration.AquaConfigurationStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSnapshotCopy.Cluster.AquaConfiguration.AquaConfigurationStatus', props);
    return resource.getResponseField('Cluster.AquaConfiguration.AquaConfigurationStatus') as unknown as string;
  }

}

export class RedshiftResponsesDisassociateDataShareConsumer {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftDisassociateDataShareConsumerMessage) {
  }

  public get dataShareArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateDataShareConsumer',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisassociateDataShareConsumer.DataShareArn'),
        outputPath: 'DataShareArn',
        parameters: {
          DataShareArn: this.__input.dataShareArn,
          DisassociateEntireAccount: this.__input.disassociateEntireAccount,
          ConsumerArn: this.__input.consumerArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateDataShareConsumer.DataShareArn', props);
    return resource.getResponseField('DataShareArn') as unknown as string;
  }

  public get producerArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateDataShareConsumer',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisassociateDataShareConsumer.ProducerArn'),
        outputPath: 'ProducerArn',
        parameters: {
          DataShareArn: this.__input.dataShareArn,
          DisassociateEntireAccount: this.__input.disassociateEntireAccount,
          ConsumerArn: this.__input.consumerArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateDataShareConsumer.ProducerArn', props);
    return resource.getResponseField('ProducerArn') as unknown as string;
  }

  public get allowPubliclyAccessibleConsumers(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateDataShareConsumer',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisassociateDataShareConsumer.AllowPubliclyAccessibleConsumers'),
        outputPath: 'AllowPubliclyAccessibleConsumers',
        parameters: {
          DataShareArn: this.__input.dataShareArn,
          DisassociateEntireAccount: this.__input.disassociateEntireAccount,
          ConsumerArn: this.__input.consumerArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateDataShareConsumer.AllowPubliclyAccessibleConsumers', props);
    return resource.getResponseField('AllowPubliclyAccessibleConsumers') as unknown as boolean;
  }

  public get dataShareAssociations(): shapes.RedshiftDataShareAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateDataShareConsumer',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.DisassociateDataShareConsumer.DataShareAssociations'),
        outputPath: 'DataShareAssociations',
        parameters: {
          DataShareArn: this.__input.dataShareArn,
          DisassociateEntireAccount: this.__input.disassociateEntireAccount,
          ConsumerArn: this.__input.consumerArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateDataShareConsumer.DataShareAssociations', props);
    return resource.getResponseField('DataShareAssociations') as unknown as shapes.RedshiftDataShareAssociation[];
  }

}

export class RedshiftResponsesEnableLogging {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftEnableLoggingMessage) {
  }

  public get loggingEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableLogging',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableLogging.LoggingEnabled'),
        outputPath: 'LoggingEnabled',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          BucketName: this.__input.bucketName,
          S3KeyPrefix: this.__input.s3KeyPrefix,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableLogging.LoggingEnabled', props);
    return resource.getResponseField('LoggingEnabled') as unknown as boolean;
  }

  public get bucketName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableLogging',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableLogging.BucketName'),
        outputPath: 'BucketName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          BucketName: this.__input.bucketName,
          S3KeyPrefix: this.__input.s3KeyPrefix,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableLogging.BucketName', props);
    return resource.getResponseField('BucketName') as unknown as string;
  }

  public get s3KeyPrefix(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableLogging',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableLogging.S3KeyPrefix'),
        outputPath: 'S3KeyPrefix',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          BucketName: this.__input.bucketName,
          S3KeyPrefix: this.__input.s3KeyPrefix,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableLogging.S3KeyPrefix', props);
    return resource.getResponseField('S3KeyPrefix') as unknown as string;
  }

  public get lastSuccessfulDeliveryTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableLogging',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableLogging.LastSuccessfulDeliveryTime'),
        outputPath: 'LastSuccessfulDeliveryTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          BucketName: this.__input.bucketName,
          S3KeyPrefix: this.__input.s3KeyPrefix,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableLogging.LastSuccessfulDeliveryTime', props);
    return resource.getResponseField('LastSuccessfulDeliveryTime') as unknown as string;
  }

  public get lastFailureTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableLogging',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableLogging.LastFailureTime'),
        outputPath: 'LastFailureTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          BucketName: this.__input.bucketName,
          S3KeyPrefix: this.__input.s3KeyPrefix,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableLogging.LastFailureTime', props);
    return resource.getResponseField('LastFailureTime') as unknown as string;
  }

  public get lastFailureMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableLogging',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableLogging.LastFailureMessage'),
        outputPath: 'LastFailureMessage',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          BucketName: this.__input.bucketName,
          S3KeyPrefix: this.__input.s3KeyPrefix,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableLogging.LastFailureMessage', props);
    return resource.getResponseField('LastFailureMessage') as unknown as string;
  }

}

export class RedshiftResponsesEnableSnapshotCopy {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftEnableSnapshotCopyMessage) {
  }

  public get cluster(): RedshiftResponsesEnableSnapshotCopyCluster {
    return new RedshiftResponsesEnableSnapshotCopyCluster(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesEnableSnapshotCopyCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftEnableSnapshotCopyMessage) {
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ClusterIdentifier'),
        outputPath: 'Cluster.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.ClusterIdentifier') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.NodeType'),
        outputPath: 'Cluster.NodeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.NodeType', props);
    return resource.getResponseField('Cluster.NodeType') as unknown as string;
  }

  public get clusterStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ClusterStatus'),
        outputPath: 'Cluster.ClusterStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.ClusterStatus', props);
    return resource.getResponseField('Cluster.ClusterStatus') as unknown as string;
  }

  public get clusterAvailabilityStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ClusterAvailabilityStatus'),
        outputPath: 'Cluster.ClusterAvailabilityStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.ClusterAvailabilityStatus', props);
    return resource.getResponseField('Cluster.ClusterAvailabilityStatus') as unknown as string;
  }

  public get modifyStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ModifyStatus'),
        outputPath: 'Cluster.ModifyStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.ModifyStatus', props);
    return resource.getResponseField('Cluster.ModifyStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.MasterUsername'),
        outputPath: 'Cluster.MasterUsername',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.MasterUsername', props);
    return resource.getResponseField('Cluster.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.DBName'),
        outputPath: 'Cluster.DBName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.DBName', props);
    return resource.getResponseField('Cluster.DBName') as unknown as string;
  }

  public get endpoint(): RedshiftResponsesEnableSnapshotCopyClusterEndpoint {
    return new RedshiftResponsesEnableSnapshotCopyClusterEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ClusterCreateTime'),
        outputPath: 'Cluster.ClusterCreateTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.ClusterCreateTime', props);
    return resource.getResponseField('Cluster.ClusterCreateTime') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterSecurityGroups(): shapes.RedshiftClusterSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ClusterSecurityGroups'),
        outputPath: 'Cluster.ClusterSecurityGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.ClusterSecurityGroups', props);
    return resource.getResponseField('Cluster.ClusterSecurityGroups') as unknown as shapes.RedshiftClusterSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RedshiftVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.VpcSecurityGroups'),
        outputPath: 'Cluster.VpcSecurityGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.VpcSecurityGroups', props);
    return resource.getResponseField('Cluster.VpcSecurityGroups') as unknown as shapes.RedshiftVpcSecurityGroupMembership[];
  }

  public get clusterParameterGroups(): shapes.RedshiftClusterParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ClusterParameterGroups'),
        outputPath: 'Cluster.ClusterParameterGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.ClusterParameterGroups', props);
    return resource.getResponseField('Cluster.ClusterParameterGroups') as unknown as shapes.RedshiftClusterParameterGroupStatus[];
  }

  public get clusterSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ClusterSubnetGroupName'),
        outputPath: 'Cluster.ClusterSubnetGroupName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.ClusterSubnetGroupName', props);
    return resource.getResponseField('Cluster.ClusterSubnetGroupName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.VpcId'),
        outputPath: 'Cluster.VpcId',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.VpcId', props);
    return resource.getResponseField('Cluster.VpcId') as unknown as string;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.AvailabilityZone'),
        outputPath: 'Cluster.AvailabilityZone',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.AvailabilityZone', props);
    return resource.getResponseField('Cluster.AvailabilityZone') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.PreferredMaintenanceWindow'),
        outputPath: 'Cluster.PreferredMaintenanceWindow',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('Cluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RedshiftResponsesEnableSnapshotCopyClusterPendingModifiedValues {
    return new RedshiftResponsesEnableSnapshotCopyClusterPendingModifiedValues(this.__scope, this.__resources, this.__input);
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ClusterVersion'),
        outputPath: 'Cluster.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.ClusterVersion', props);
    return resource.getResponseField('Cluster.ClusterVersion') as unknown as string;
  }

  public get allowVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.AllowVersionUpgrade'),
        outputPath: 'Cluster.AllowVersionUpgrade',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.AllowVersionUpgrade', props);
    return resource.getResponseField('Cluster.AllowVersionUpgrade') as unknown as boolean;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.NumberOfNodes'),
        outputPath: 'Cluster.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.NumberOfNodes', props);
    return resource.getResponseField('Cluster.NumberOfNodes') as unknown as number;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.PubliclyAccessible'),
        outputPath: 'Cluster.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PubliclyAccessible') as unknown as boolean;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.Encrypted'),
        outputPath: 'Cluster.Encrypted',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.Encrypted', props);
    return resource.getResponseField('Cluster.Encrypted') as unknown as boolean;
  }

  public get restoreStatus(): RedshiftResponsesEnableSnapshotCopyClusterRestoreStatus {
    return new RedshiftResponsesEnableSnapshotCopyClusterRestoreStatus(this.__scope, this.__resources, this.__input);
  }

  public get dataTransferProgress(): RedshiftResponsesEnableSnapshotCopyClusterDataTransferProgress {
    return new RedshiftResponsesEnableSnapshotCopyClusterDataTransferProgress(this.__scope, this.__resources, this.__input);
  }

  public get hsmStatus(): RedshiftResponsesEnableSnapshotCopyClusterHsmStatus {
    return new RedshiftResponsesEnableSnapshotCopyClusterHsmStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterSnapshotCopyStatus(): RedshiftResponsesEnableSnapshotCopyClusterClusterSnapshotCopyStatus {
    return new RedshiftResponsesEnableSnapshotCopyClusterClusterSnapshotCopyStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterPublicKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ClusterPublicKey'),
        outputPath: 'Cluster.ClusterPublicKey',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.ClusterPublicKey', props);
    return resource.getResponseField('Cluster.ClusterPublicKey') as unknown as string;
  }

  public get clusterNodes(): shapes.RedshiftClusterNode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ClusterNodes'),
        outputPath: 'Cluster.ClusterNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.ClusterNodes', props);
    return resource.getResponseField('Cluster.ClusterNodes') as unknown as shapes.RedshiftClusterNode[];
  }

  public get elasticIpStatus(): RedshiftResponsesEnableSnapshotCopyClusterElasticIpStatus {
    return new RedshiftResponsesEnableSnapshotCopyClusterElasticIpStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterRevisionNumber(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ClusterRevisionNumber'),
        outputPath: 'Cluster.ClusterRevisionNumber',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.ClusterRevisionNumber', props);
    return resource.getResponseField('Cluster.ClusterRevisionNumber') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.Tags'),
        outputPath: 'Cluster.Tags',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.Tags', props);
    return resource.getResponseField('Cluster.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.KmsKeyId'),
        outputPath: 'Cluster.KmsKeyId',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.KmsKeyId', props);
    return resource.getResponseField('Cluster.KmsKeyId') as unknown as string;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.EnhancedVpcRouting'),
        outputPath: 'Cluster.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.EnhancedVpcRouting') as unknown as boolean;
  }

  public get iamRoles(): shapes.RedshiftClusterIamRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.IamRoles'),
        outputPath: 'Cluster.IamRoles',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.IamRoles', props);
    return resource.getResponseField('Cluster.IamRoles') as unknown as shapes.RedshiftClusterIamRole[];
  }

  public get pendingActions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.PendingActions'),
        outputPath: 'Cluster.PendingActions',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.PendingActions', props);
    return resource.getResponseField('Cluster.PendingActions') as unknown as string[];
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.MaintenanceTrackName'),
        outputPath: 'Cluster.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.MaintenanceTrackName') as unknown as string;
  }

  public get elasticResizeNumberOfNodeOptions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ElasticResizeNumberOfNodeOptions'),
        outputPath: 'Cluster.ElasticResizeNumberOfNodeOptions',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.ElasticResizeNumberOfNodeOptions', props);
    return resource.getResponseField('Cluster.ElasticResizeNumberOfNodeOptions') as unknown as string;
  }

  public get deferredMaintenanceWindows(): shapes.RedshiftDeferredMaintenanceWindow[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.DeferredMaintenanceWindows'),
        outputPath: 'Cluster.DeferredMaintenanceWindows',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.DeferredMaintenanceWindows', props);
    return resource.getResponseField('Cluster.DeferredMaintenanceWindows') as unknown as shapes.RedshiftDeferredMaintenanceWindow[];
  }

  public get snapshotScheduleIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.SnapshotScheduleIdentifier'),
        outputPath: 'Cluster.SnapshotScheduleIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.SnapshotScheduleIdentifier', props);
    return resource.getResponseField('Cluster.SnapshotScheduleIdentifier') as unknown as string;
  }

  public get snapshotScheduleState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.SnapshotScheduleState'),
        outputPath: 'Cluster.SnapshotScheduleState',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.SnapshotScheduleState', props);
    return resource.getResponseField('Cluster.SnapshotScheduleState') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ExpectedNextSnapshotScheduleTime'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.ExpectedNextSnapshotScheduleTime', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTime') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTimeStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ExpectedNextSnapshotScheduleTimeStatus'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTimeStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.ExpectedNextSnapshotScheduleTimeStatus', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTimeStatus') as unknown as string;
  }

  public get nextMaintenanceWindowStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.NextMaintenanceWindowStartTime'),
        outputPath: 'Cluster.NextMaintenanceWindowStartTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.NextMaintenanceWindowStartTime', props);
    return resource.getResponseField('Cluster.NextMaintenanceWindowStartTime') as unknown as string;
  }

  public get resizeInfo(): RedshiftResponsesEnableSnapshotCopyClusterResizeInfo {
    return new RedshiftResponsesEnableSnapshotCopyClusterResizeInfo(this.__scope, this.__resources, this.__input);
  }

  public get availabilityZoneRelocationStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.AvailabilityZoneRelocationStatus'),
        outputPath: 'Cluster.AvailabilityZoneRelocationStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.AvailabilityZoneRelocationStatus', props);
    return resource.getResponseField('Cluster.AvailabilityZoneRelocationStatus') as unknown as string;
  }

  public get clusterNamespaceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ClusterNamespaceArn'),
        outputPath: 'Cluster.ClusterNamespaceArn',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.ClusterNamespaceArn', props);
    return resource.getResponseField('Cluster.ClusterNamespaceArn') as unknown as string;
  }

  public get totalStorageCapacityInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.TotalStorageCapacityInMegaBytes'),
        outputPath: 'Cluster.TotalStorageCapacityInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.TotalStorageCapacityInMegaBytes', props);
    return resource.getResponseField('Cluster.TotalStorageCapacityInMegaBytes') as unknown as number;
  }

  public get aquaConfiguration(): RedshiftResponsesEnableSnapshotCopyClusterAquaConfiguration {
    return new RedshiftResponsesEnableSnapshotCopyClusterAquaConfiguration(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesEnableSnapshotCopyClusterEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftEnableSnapshotCopyMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.Endpoint.Address'),
        outputPath: 'Cluster.Endpoint.Address',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.Endpoint.Address', props);
    return resource.getResponseField('Cluster.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.Endpoint.Port'),
        outputPath: 'Cluster.Endpoint.Port',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.Endpoint.Port', props);
    return resource.getResponseField('Cluster.Endpoint.Port') as unknown as number;
  }

  public get vpcEndpoints(): shapes.RedshiftVpcEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.Endpoint.VpcEndpoints'),
        outputPath: 'Cluster.Endpoint.VpcEndpoints',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.Endpoint.VpcEndpoints', props);
    return resource.getResponseField('Cluster.Endpoint.VpcEndpoints') as unknown as shapes.RedshiftVpcEndpoint[];
  }

}

export class RedshiftResponsesEnableSnapshotCopyClusterPendingModifiedValues {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftEnableSnapshotCopyMessage) {
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'Cluster.PendingModifiedValues.MasterUserPassword',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.PendingModifiedValues.NodeType'),
        outputPath: 'Cluster.PendingModifiedValues.NodeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.PendingModifiedValues.NodeType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.PendingModifiedValues.NumberOfNodes'),
        outputPath: 'Cluster.PendingModifiedValues.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.PendingModifiedValues.NumberOfNodes', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NumberOfNodes') as unknown as number;
  }

  public get clusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.PendingModifiedValues.ClusterType'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.PendingModifiedValues.ClusterType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterType') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.PendingModifiedValues.ClusterVersion'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.PendingModifiedValues.ClusterVersion', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterVersion') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.PendingModifiedValues.ClusterIdentifier'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.PendingModifiedValues.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterIdentifier') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.PendingModifiedValues.PubliclyAccessible'),
        outputPath: 'Cluster.PendingModifiedValues.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.PendingModifiedValues.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.PubliclyAccessible') as unknown as boolean;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.PendingModifiedValues.EnhancedVpcRouting'),
        outputPath: 'Cluster.PendingModifiedValues.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.PendingModifiedValues.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.PendingModifiedValues.MaintenanceTrackName'),
        outputPath: 'Cluster.PendingModifiedValues.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.PendingModifiedValues.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MaintenanceTrackName') as unknown as string;
  }

  public get encryptionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.PendingModifiedValues.EncryptionType'),
        outputPath: 'Cluster.PendingModifiedValues.EncryptionType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.PendingModifiedValues.EncryptionType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EncryptionType') as unknown as string;
  }

}

export class RedshiftResponsesEnableSnapshotCopyClusterRestoreStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftEnableSnapshotCopyMessage) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.RestoreStatus.Status'),
        outputPath: 'Cluster.RestoreStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.RestoreStatus.Status', props);
    return resource.getResponseField('Cluster.RestoreStatus.Status') as unknown as string;
  }

  public get currentRestoreRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond') as unknown as number;
  }

  public get snapshotSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.RestoreStatus.SnapshotSizeInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.SnapshotSizeInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.RestoreStatus.SnapshotSizeInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.SnapshotSizeInMegaBytes') as unknown as number;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.RestoreStatus.ProgressInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.ProgressInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.RestoreStatus.ProgressInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.ProgressInMegaBytes') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.RestoreStatus.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.RestoreStatus.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.RestoreStatus.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.ElapsedTimeInSeconds') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

}

export class RedshiftResponsesEnableSnapshotCopyClusterDataTransferProgress {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftEnableSnapshotCopyMessage) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.DataTransferProgress.Status'),
        outputPath: 'Cluster.DataTransferProgress.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.DataTransferProgress.Status', props);
    return resource.getResponseField('Cluster.DataTransferProgress.Status') as unknown as string;
  }

  public get currentRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond') as unknown as number;
  }

  public get totalDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.DataTransferProgress.TotalDataInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.TotalDataInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.DataTransferProgress.TotalDataInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.TotalDataInMegaBytes') as unknown as number;
  }

  public get dataTransferredInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.DataTransferProgress.DataTransferredInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.DataTransferredInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.DataTransferProgress.DataTransferredInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.DataTransferredInMegaBytes') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.DataTransferProgress.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.DataTransferProgress.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.ElapsedTimeInSeconds') as unknown as number;
  }

}

export class RedshiftResponsesEnableSnapshotCopyClusterHsmStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftEnableSnapshotCopyMessage) {
  }

  public get hsmClientCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.HsmStatus.HsmClientCertificateIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmClientCertificateIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.HsmStatus.HsmClientCertificateIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmClientCertificateIdentifier') as unknown as string;
  }

  public get hsmConfigurationIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.HsmStatus.HsmConfigurationIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmConfigurationIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.HsmStatus.HsmConfigurationIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmConfigurationIdentifier') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.HsmStatus.Status'),
        outputPath: 'Cluster.HsmStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.HsmStatus.Status', props);
    return resource.getResponseField('Cluster.HsmStatus.Status') as unknown as string;
  }

}

export class RedshiftResponsesEnableSnapshotCopyClusterClusterSnapshotCopyStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftEnableSnapshotCopyMessage) {
  }

  public get destinationRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ClusterSnapshotCopyStatus.DestinationRegion'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.DestinationRegion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.ClusterSnapshotCopyStatus.DestinationRegion', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.DestinationRegion') as unknown as string;
  }

  public get retentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.RetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.RetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get snapshotCopyGrantName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName') as unknown as string;
  }

}

export class RedshiftResponsesEnableSnapshotCopyClusterElasticIpStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftEnableSnapshotCopyMessage) {
  }

  public get elasticIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ElasticIpStatus.ElasticIp'),
        outputPath: 'Cluster.ElasticIpStatus.ElasticIp',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.ElasticIpStatus.ElasticIp', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.ElasticIp') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ElasticIpStatus.Status'),
        outputPath: 'Cluster.ElasticIpStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.ElasticIpStatus.Status', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.Status') as unknown as string;
  }

}

export class RedshiftResponsesEnableSnapshotCopyClusterResizeInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftEnableSnapshotCopyMessage) {
  }

  public get resizeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ResizeInfo.ResizeType'),
        outputPath: 'Cluster.ResizeInfo.ResizeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.ResizeInfo.ResizeType', props);
    return resource.getResponseField('Cluster.ResizeInfo.ResizeType') as unknown as string;
  }

  public get allowCancelResize(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.ResizeInfo.AllowCancelResize'),
        outputPath: 'Cluster.ResizeInfo.AllowCancelResize',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.ResizeInfo.AllowCancelResize', props);
    return resource.getResponseField('Cluster.ResizeInfo.AllowCancelResize') as unknown as boolean;
  }

}

export class RedshiftResponsesEnableSnapshotCopyClusterAquaConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftEnableSnapshotCopyMessage) {
  }

  public get aquaStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.AquaConfiguration.AquaStatus'),
        outputPath: 'Cluster.AquaConfiguration.AquaStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.AquaConfiguration.AquaStatus', props);
    return resource.getResponseField('Cluster.AquaConfiguration.AquaStatus') as unknown as string;
  }

  public get aquaConfigurationStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSnapshotCopy',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.EnableSnapshotCopy.Cluster.AquaConfiguration.AquaConfigurationStatus'),
        outputPath: 'Cluster.AquaConfiguration.AquaConfigurationStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DestinationRegion: this.__input.destinationRegion,
          RetentionPeriod: this.__input.retentionPeriod,
          SnapshotCopyGrantName: this.__input.snapshotCopyGrantName,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSnapshotCopy.Cluster.AquaConfiguration.AquaConfigurationStatus', props);
    return resource.getResponseField('Cluster.AquaConfiguration.AquaConfigurationStatus') as unknown as string;
  }

}

export class RedshiftResponsesFetchClusterCredentials {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftGetClusterCredentialsMessage) {
  }

  public get dbUser(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getClusterCredentials',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.GetClusterCredentials.DbUser'),
        outputPath: 'DbUser',
        parameters: {
          DbUser: this.__input.dbUser,
          DbName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          DurationSeconds: this.__input.durationSeconds,
          AutoCreate: this.__input.autoCreate,
          DbGroups: this.__input.dbGroups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetClusterCredentials.DbUser', props);
    return resource.getResponseField('DbUser') as unknown as string;
  }

  public get dbPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getClusterCredentials',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.GetClusterCredentials.DbPassword'),
        outputPath: 'DbPassword',
        parameters: {
          DbUser: this.__input.dbUser,
          DbName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          DurationSeconds: this.__input.durationSeconds,
          AutoCreate: this.__input.autoCreate,
          DbGroups: this.__input.dbGroups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetClusterCredentials.DbPassword', props);
    return resource.getResponseField('DbPassword') as unknown as string;
  }

  public get expiration(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getClusterCredentials',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.GetClusterCredentials.Expiration'),
        outputPath: 'Expiration',
        parameters: {
          DbUser: this.__input.dbUser,
          DbName: this.__input.dbName,
          ClusterIdentifier: this.__input.clusterIdentifier,
          DurationSeconds: this.__input.durationSeconds,
          AutoCreate: this.__input.autoCreate,
          DbGroups: this.__input.dbGroups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetClusterCredentials.Expiration', props);
    return resource.getResponseField('Expiration') as unknown as string;
  }

}

export class RedshiftResponsesFetchReservedNodeExchangeOfferings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftGetReservedNodeExchangeOfferingsInputMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReservedNodeExchangeOfferings',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.GetReservedNodeExchangeOfferings.Marker'),
        outputPath: 'Marker',
        parameters: {
          ReservedNodeId: this.__input.reservedNodeId,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetReservedNodeExchangeOfferings.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get reservedNodeOfferings(): shapes.RedshiftReservedNodeOffering[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReservedNodeExchangeOfferings',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.GetReservedNodeExchangeOfferings.ReservedNodeOfferings'),
        outputPath: 'ReservedNodeOfferings',
        parameters: {
          ReservedNodeId: this.__input.reservedNodeId,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetReservedNodeExchangeOfferings.ReservedNodeOfferings', props);
    return resource.getResponseField('ReservedNodeOfferings') as unknown as shapes.RedshiftReservedNodeOffering[];
  }

}

export class RedshiftResponsesModifyAquaConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyAquaInputMessage) {
  }

  public get aquaConfiguration(): RedshiftResponsesModifyAquaConfigurationAquaConfiguration {
    return new RedshiftResponsesModifyAquaConfigurationAquaConfiguration(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesModifyAquaConfigurationAquaConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyAquaInputMessage) {
  }

  public get aquaStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyAquaConfiguration',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyAquaConfiguration.AquaConfiguration.AquaStatus'),
        outputPath: 'AquaConfiguration.AquaStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyAquaConfiguration.AquaConfiguration.AquaStatus', props);
    return resource.getResponseField('AquaConfiguration.AquaStatus') as unknown as string;
  }

  public get aquaConfigurationStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyAquaConfiguration',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyAquaConfiguration.AquaConfiguration.AquaConfigurationStatus'),
        outputPath: 'AquaConfiguration.AquaConfigurationStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyAquaConfiguration.AquaConfiguration.AquaConfigurationStatus', props);
    return resource.getResponseField('AquaConfiguration.AquaConfigurationStatus') as unknown as string;
  }

}

export class RedshiftResponsesModifyAuthenticationProfile {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyAuthenticationProfileMessage) {
  }

  public get authenticationProfileName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyAuthenticationProfile',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyAuthenticationProfile.AuthenticationProfileName'),
        outputPath: 'AuthenticationProfileName',
        parameters: {
          AuthenticationProfileName: this.__input.authenticationProfileName,
          AuthenticationProfileContent: this.__input.authenticationProfileContent,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyAuthenticationProfile.AuthenticationProfileName', props);
    return resource.getResponseField('AuthenticationProfileName') as unknown as string;
  }

  public get authenticationProfileContent(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyAuthenticationProfile',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyAuthenticationProfile.AuthenticationProfileContent'),
        outputPath: 'AuthenticationProfileContent',
        parameters: {
          AuthenticationProfileName: this.__input.authenticationProfileName,
          AuthenticationProfileContent: this.__input.authenticationProfileContent,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyAuthenticationProfile.AuthenticationProfileContent', props);
    return resource.getResponseField('AuthenticationProfileContent') as unknown as string;
  }

}

export class RedshiftResponsesModifyCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterMessage) {
  }

  public get cluster(): RedshiftResponsesModifyClusterCluster {
    return new RedshiftResponsesModifyClusterCluster(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesModifyClusterCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterMessage) {
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ClusterIdentifier'),
        outputPath: 'Cluster.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.ClusterIdentifier') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.NodeType'),
        outputPath: 'Cluster.NodeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.NodeType', props);
    return resource.getResponseField('Cluster.NodeType') as unknown as string;
  }

  public get clusterStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ClusterStatus'),
        outputPath: 'Cluster.ClusterStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.ClusterStatus', props);
    return resource.getResponseField('Cluster.ClusterStatus') as unknown as string;
  }

  public get clusterAvailabilityStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ClusterAvailabilityStatus'),
        outputPath: 'Cluster.ClusterAvailabilityStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.ClusterAvailabilityStatus', props);
    return resource.getResponseField('Cluster.ClusterAvailabilityStatus') as unknown as string;
  }

  public get modifyStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ModifyStatus'),
        outputPath: 'Cluster.ModifyStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.ModifyStatus', props);
    return resource.getResponseField('Cluster.ModifyStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.MasterUsername'),
        outputPath: 'Cluster.MasterUsername',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.MasterUsername', props);
    return resource.getResponseField('Cluster.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.DBName'),
        outputPath: 'Cluster.DBName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.DBName', props);
    return resource.getResponseField('Cluster.DBName') as unknown as string;
  }

  public get endpoint(): RedshiftResponsesModifyClusterClusterEndpoint {
    return new RedshiftResponsesModifyClusterClusterEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ClusterCreateTime'),
        outputPath: 'Cluster.ClusterCreateTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.ClusterCreateTime', props);
    return resource.getResponseField('Cluster.ClusterCreateTime') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterSecurityGroups(): shapes.RedshiftClusterSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ClusterSecurityGroups'),
        outputPath: 'Cluster.ClusterSecurityGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.ClusterSecurityGroups', props);
    return resource.getResponseField('Cluster.ClusterSecurityGroups') as unknown as shapes.RedshiftClusterSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RedshiftVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.VpcSecurityGroups'),
        outputPath: 'Cluster.VpcSecurityGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.VpcSecurityGroups', props);
    return resource.getResponseField('Cluster.VpcSecurityGroups') as unknown as shapes.RedshiftVpcSecurityGroupMembership[];
  }

  public get clusterParameterGroups(): shapes.RedshiftClusterParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ClusterParameterGroups'),
        outputPath: 'Cluster.ClusterParameterGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.ClusterParameterGroups', props);
    return resource.getResponseField('Cluster.ClusterParameterGroups') as unknown as shapes.RedshiftClusterParameterGroupStatus[];
  }

  public get clusterSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ClusterSubnetGroupName'),
        outputPath: 'Cluster.ClusterSubnetGroupName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.ClusterSubnetGroupName', props);
    return resource.getResponseField('Cluster.ClusterSubnetGroupName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.VpcId'),
        outputPath: 'Cluster.VpcId',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.VpcId', props);
    return resource.getResponseField('Cluster.VpcId') as unknown as string;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.AvailabilityZone'),
        outputPath: 'Cluster.AvailabilityZone',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.AvailabilityZone', props);
    return resource.getResponseField('Cluster.AvailabilityZone') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.PreferredMaintenanceWindow'),
        outputPath: 'Cluster.PreferredMaintenanceWindow',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('Cluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RedshiftResponsesModifyClusterClusterPendingModifiedValues {
    return new RedshiftResponsesModifyClusterClusterPendingModifiedValues(this.__scope, this.__resources, this.__input);
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ClusterVersion'),
        outputPath: 'Cluster.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.ClusterVersion', props);
    return resource.getResponseField('Cluster.ClusterVersion') as unknown as string;
  }

  public get allowVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.AllowVersionUpgrade'),
        outputPath: 'Cluster.AllowVersionUpgrade',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.AllowVersionUpgrade', props);
    return resource.getResponseField('Cluster.AllowVersionUpgrade') as unknown as boolean;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.NumberOfNodes'),
        outputPath: 'Cluster.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.NumberOfNodes', props);
    return resource.getResponseField('Cluster.NumberOfNodes') as unknown as number;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.PubliclyAccessible'),
        outputPath: 'Cluster.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PubliclyAccessible') as unknown as boolean;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.Encrypted'),
        outputPath: 'Cluster.Encrypted',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.Encrypted', props);
    return resource.getResponseField('Cluster.Encrypted') as unknown as boolean;
  }

  public get restoreStatus(): RedshiftResponsesModifyClusterClusterRestoreStatus {
    return new RedshiftResponsesModifyClusterClusterRestoreStatus(this.__scope, this.__resources, this.__input);
  }

  public get dataTransferProgress(): RedshiftResponsesModifyClusterClusterDataTransferProgress {
    return new RedshiftResponsesModifyClusterClusterDataTransferProgress(this.__scope, this.__resources, this.__input);
  }

  public get hsmStatus(): RedshiftResponsesModifyClusterClusterHsmStatus {
    return new RedshiftResponsesModifyClusterClusterHsmStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterSnapshotCopyStatus(): RedshiftResponsesModifyClusterClusterClusterSnapshotCopyStatus {
    return new RedshiftResponsesModifyClusterClusterClusterSnapshotCopyStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterPublicKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ClusterPublicKey'),
        outputPath: 'Cluster.ClusterPublicKey',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.ClusterPublicKey', props);
    return resource.getResponseField('Cluster.ClusterPublicKey') as unknown as string;
  }

  public get clusterNodes(): shapes.RedshiftClusterNode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ClusterNodes'),
        outputPath: 'Cluster.ClusterNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.ClusterNodes', props);
    return resource.getResponseField('Cluster.ClusterNodes') as unknown as shapes.RedshiftClusterNode[];
  }

  public get elasticIpStatus(): RedshiftResponsesModifyClusterClusterElasticIpStatus {
    return new RedshiftResponsesModifyClusterClusterElasticIpStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterRevisionNumber(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ClusterRevisionNumber'),
        outputPath: 'Cluster.ClusterRevisionNumber',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.ClusterRevisionNumber', props);
    return resource.getResponseField('Cluster.ClusterRevisionNumber') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.Tags'),
        outputPath: 'Cluster.Tags',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.Tags', props);
    return resource.getResponseField('Cluster.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.KmsKeyId'),
        outputPath: 'Cluster.KmsKeyId',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.KmsKeyId', props);
    return resource.getResponseField('Cluster.KmsKeyId') as unknown as string;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.EnhancedVpcRouting'),
        outputPath: 'Cluster.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.EnhancedVpcRouting') as unknown as boolean;
  }

  public get iamRoles(): shapes.RedshiftClusterIamRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.IamRoles'),
        outputPath: 'Cluster.IamRoles',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.IamRoles', props);
    return resource.getResponseField('Cluster.IamRoles') as unknown as shapes.RedshiftClusterIamRole[];
  }

  public get pendingActions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.PendingActions'),
        outputPath: 'Cluster.PendingActions',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.PendingActions', props);
    return resource.getResponseField('Cluster.PendingActions') as unknown as string[];
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.MaintenanceTrackName'),
        outputPath: 'Cluster.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.MaintenanceTrackName') as unknown as string;
  }

  public get elasticResizeNumberOfNodeOptions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ElasticResizeNumberOfNodeOptions'),
        outputPath: 'Cluster.ElasticResizeNumberOfNodeOptions',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.ElasticResizeNumberOfNodeOptions', props);
    return resource.getResponseField('Cluster.ElasticResizeNumberOfNodeOptions') as unknown as string;
  }

  public get deferredMaintenanceWindows(): shapes.RedshiftDeferredMaintenanceWindow[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.DeferredMaintenanceWindows'),
        outputPath: 'Cluster.DeferredMaintenanceWindows',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.DeferredMaintenanceWindows', props);
    return resource.getResponseField('Cluster.DeferredMaintenanceWindows') as unknown as shapes.RedshiftDeferredMaintenanceWindow[];
  }

  public get snapshotScheduleIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.SnapshotScheduleIdentifier'),
        outputPath: 'Cluster.SnapshotScheduleIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.SnapshotScheduleIdentifier', props);
    return resource.getResponseField('Cluster.SnapshotScheduleIdentifier') as unknown as string;
  }

  public get snapshotScheduleState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.SnapshotScheduleState'),
        outputPath: 'Cluster.SnapshotScheduleState',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.SnapshotScheduleState', props);
    return resource.getResponseField('Cluster.SnapshotScheduleState') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ExpectedNextSnapshotScheduleTime'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.ExpectedNextSnapshotScheduleTime', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTime') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTimeStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ExpectedNextSnapshotScheduleTimeStatus'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTimeStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.ExpectedNextSnapshotScheduleTimeStatus', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTimeStatus') as unknown as string;
  }

  public get nextMaintenanceWindowStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.NextMaintenanceWindowStartTime'),
        outputPath: 'Cluster.NextMaintenanceWindowStartTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.NextMaintenanceWindowStartTime', props);
    return resource.getResponseField('Cluster.NextMaintenanceWindowStartTime') as unknown as string;
  }

  public get resizeInfo(): RedshiftResponsesModifyClusterClusterResizeInfo {
    return new RedshiftResponsesModifyClusterClusterResizeInfo(this.__scope, this.__resources, this.__input);
  }

  public get availabilityZoneRelocationStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.AvailabilityZoneRelocationStatus'),
        outputPath: 'Cluster.AvailabilityZoneRelocationStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.AvailabilityZoneRelocationStatus', props);
    return resource.getResponseField('Cluster.AvailabilityZoneRelocationStatus') as unknown as string;
  }

  public get clusterNamespaceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ClusterNamespaceArn'),
        outputPath: 'Cluster.ClusterNamespaceArn',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.ClusterNamespaceArn', props);
    return resource.getResponseField('Cluster.ClusterNamespaceArn') as unknown as string;
  }

  public get totalStorageCapacityInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.TotalStorageCapacityInMegaBytes'),
        outputPath: 'Cluster.TotalStorageCapacityInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.TotalStorageCapacityInMegaBytes', props);
    return resource.getResponseField('Cluster.TotalStorageCapacityInMegaBytes') as unknown as number;
  }

  public get aquaConfiguration(): RedshiftResponsesModifyClusterClusterAquaConfiguration {
    return new RedshiftResponsesModifyClusterClusterAquaConfiguration(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesModifyClusterClusterEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.Endpoint.Address'),
        outputPath: 'Cluster.Endpoint.Address',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.Endpoint.Address', props);
    return resource.getResponseField('Cluster.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.Endpoint.Port'),
        outputPath: 'Cluster.Endpoint.Port',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.Endpoint.Port', props);
    return resource.getResponseField('Cluster.Endpoint.Port') as unknown as number;
  }

  public get vpcEndpoints(): shapes.RedshiftVpcEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.Endpoint.VpcEndpoints'),
        outputPath: 'Cluster.Endpoint.VpcEndpoints',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.Endpoint.VpcEndpoints', props);
    return resource.getResponseField('Cluster.Endpoint.VpcEndpoints') as unknown as shapes.RedshiftVpcEndpoint[];
  }

}

export class RedshiftResponsesModifyClusterClusterPendingModifiedValues {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterMessage) {
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'Cluster.PendingModifiedValues.MasterUserPassword',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.PendingModifiedValues.NodeType'),
        outputPath: 'Cluster.PendingModifiedValues.NodeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.PendingModifiedValues.NodeType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.PendingModifiedValues.NumberOfNodes'),
        outputPath: 'Cluster.PendingModifiedValues.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.PendingModifiedValues.NumberOfNodes', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NumberOfNodes') as unknown as number;
  }

  public get clusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.PendingModifiedValues.ClusterType'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.PendingModifiedValues.ClusterType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterType') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.PendingModifiedValues.ClusterVersion'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.PendingModifiedValues.ClusterVersion', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterVersion') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.PendingModifiedValues.ClusterIdentifier'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.PendingModifiedValues.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterIdentifier') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.PendingModifiedValues.PubliclyAccessible'),
        outputPath: 'Cluster.PendingModifiedValues.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.PendingModifiedValues.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.PubliclyAccessible') as unknown as boolean;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.PendingModifiedValues.EnhancedVpcRouting'),
        outputPath: 'Cluster.PendingModifiedValues.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.PendingModifiedValues.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.PendingModifiedValues.MaintenanceTrackName'),
        outputPath: 'Cluster.PendingModifiedValues.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.PendingModifiedValues.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MaintenanceTrackName') as unknown as string;
  }

  public get encryptionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.PendingModifiedValues.EncryptionType'),
        outputPath: 'Cluster.PendingModifiedValues.EncryptionType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.PendingModifiedValues.EncryptionType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EncryptionType') as unknown as string;
  }

}

export class RedshiftResponsesModifyClusterClusterRestoreStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterMessage) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.RestoreStatus.Status'),
        outputPath: 'Cluster.RestoreStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.RestoreStatus.Status', props);
    return resource.getResponseField('Cluster.RestoreStatus.Status') as unknown as string;
  }

  public get currentRestoreRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond') as unknown as number;
  }

  public get snapshotSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.RestoreStatus.SnapshotSizeInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.SnapshotSizeInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.RestoreStatus.SnapshotSizeInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.SnapshotSizeInMegaBytes') as unknown as number;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.RestoreStatus.ProgressInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.ProgressInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.RestoreStatus.ProgressInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.ProgressInMegaBytes') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.RestoreStatus.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.RestoreStatus.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.RestoreStatus.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.ElapsedTimeInSeconds') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

}

export class RedshiftResponsesModifyClusterClusterDataTransferProgress {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterMessage) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.DataTransferProgress.Status'),
        outputPath: 'Cluster.DataTransferProgress.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.DataTransferProgress.Status', props);
    return resource.getResponseField('Cluster.DataTransferProgress.Status') as unknown as string;
  }

  public get currentRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond') as unknown as number;
  }

  public get totalDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.DataTransferProgress.TotalDataInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.TotalDataInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.DataTransferProgress.TotalDataInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.TotalDataInMegaBytes') as unknown as number;
  }

  public get dataTransferredInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.DataTransferProgress.DataTransferredInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.DataTransferredInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.DataTransferProgress.DataTransferredInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.DataTransferredInMegaBytes') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.DataTransferProgress.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.DataTransferProgress.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.ElapsedTimeInSeconds') as unknown as number;
  }

}

export class RedshiftResponsesModifyClusterClusterHsmStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterMessage) {
  }

  public get hsmClientCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.HsmStatus.HsmClientCertificateIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmClientCertificateIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.HsmStatus.HsmClientCertificateIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmClientCertificateIdentifier') as unknown as string;
  }

  public get hsmConfigurationIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.HsmStatus.HsmConfigurationIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmConfigurationIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.HsmStatus.HsmConfigurationIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmConfigurationIdentifier') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.HsmStatus.Status'),
        outputPath: 'Cluster.HsmStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.HsmStatus.Status', props);
    return resource.getResponseField('Cluster.HsmStatus.Status') as unknown as string;
  }

}

export class RedshiftResponsesModifyClusterClusterClusterSnapshotCopyStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterMessage) {
  }

  public get destinationRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ClusterSnapshotCopyStatus.DestinationRegion'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.DestinationRegion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.ClusterSnapshotCopyStatus.DestinationRegion', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.DestinationRegion') as unknown as string;
  }

  public get retentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.RetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.RetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get snapshotCopyGrantName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName') as unknown as string;
  }

}

export class RedshiftResponsesModifyClusterClusterElasticIpStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterMessage) {
  }

  public get elasticIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ElasticIpStatus.ElasticIp'),
        outputPath: 'Cluster.ElasticIpStatus.ElasticIp',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.ElasticIpStatus.ElasticIp', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.ElasticIp') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ElasticIpStatus.Status'),
        outputPath: 'Cluster.ElasticIpStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.ElasticIpStatus.Status', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.Status') as unknown as string;
  }

}

export class RedshiftResponsesModifyClusterClusterResizeInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterMessage) {
  }

  public get resizeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ResizeInfo.ResizeType'),
        outputPath: 'Cluster.ResizeInfo.ResizeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.ResizeInfo.ResizeType', props);
    return resource.getResponseField('Cluster.ResizeInfo.ResizeType') as unknown as string;
  }

  public get allowCancelResize(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.ResizeInfo.AllowCancelResize'),
        outputPath: 'Cluster.ResizeInfo.AllowCancelResize',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.ResizeInfo.AllowCancelResize', props);
    return resource.getResponseField('Cluster.ResizeInfo.AllowCancelResize') as unknown as boolean;
  }

}

export class RedshiftResponsesModifyClusterClusterAquaConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterMessage) {
  }

  public get aquaStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.AquaConfiguration.AquaStatus'),
        outputPath: 'Cluster.AquaConfiguration.AquaStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.AquaConfiguration.AquaStatus', props);
    return resource.getResponseField('Cluster.AquaConfiguration.AquaStatus') as unknown as string;
  }

  public get aquaConfigurationStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyCluster.Cluster.AquaConfiguration.AquaConfigurationStatus'),
        outputPath: 'Cluster.AquaConfiguration.AquaConfigurationStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          MasterUserPassword: this.__input.masterUserPassword,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ClusterVersion: this.__input.clusterVersion,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          NewClusterIdentifier: this.__input.newClusterIdentifier,
          PubliclyAccessible: this.__input.publiclyAccessible,
          ElasticIp: this.__input.elasticIp,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCluster.Cluster.AquaConfiguration.AquaConfigurationStatus', props);
    return resource.getResponseField('Cluster.AquaConfiguration.AquaConfigurationStatus') as unknown as string;
  }

}

export class RedshiftResponsesModifyClusterDbRevision {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterDbRevisionMessage) {
  }

  public get cluster(): RedshiftResponsesModifyClusterDbRevisionCluster {
    return new RedshiftResponsesModifyClusterDbRevisionCluster(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesModifyClusterDbRevisionCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterDbRevisionMessage) {
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ClusterIdentifier'),
        outputPath: 'Cluster.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.ClusterIdentifier') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.NodeType'),
        outputPath: 'Cluster.NodeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.NodeType', props);
    return resource.getResponseField('Cluster.NodeType') as unknown as string;
  }

  public get clusterStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ClusterStatus'),
        outputPath: 'Cluster.ClusterStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.ClusterStatus', props);
    return resource.getResponseField('Cluster.ClusterStatus') as unknown as string;
  }

  public get clusterAvailabilityStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ClusterAvailabilityStatus'),
        outputPath: 'Cluster.ClusterAvailabilityStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.ClusterAvailabilityStatus', props);
    return resource.getResponseField('Cluster.ClusterAvailabilityStatus') as unknown as string;
  }

  public get modifyStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ModifyStatus'),
        outputPath: 'Cluster.ModifyStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.ModifyStatus', props);
    return resource.getResponseField('Cluster.ModifyStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.MasterUsername'),
        outputPath: 'Cluster.MasterUsername',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.MasterUsername', props);
    return resource.getResponseField('Cluster.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.DBName'),
        outputPath: 'Cluster.DBName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.DBName', props);
    return resource.getResponseField('Cluster.DBName') as unknown as string;
  }

  public get endpoint(): RedshiftResponsesModifyClusterDbRevisionClusterEndpoint {
    return new RedshiftResponsesModifyClusterDbRevisionClusterEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ClusterCreateTime'),
        outputPath: 'Cluster.ClusterCreateTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.ClusterCreateTime', props);
    return resource.getResponseField('Cluster.ClusterCreateTime') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterSecurityGroups(): shapes.RedshiftClusterSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ClusterSecurityGroups'),
        outputPath: 'Cluster.ClusterSecurityGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.ClusterSecurityGroups', props);
    return resource.getResponseField('Cluster.ClusterSecurityGroups') as unknown as shapes.RedshiftClusterSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RedshiftVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.VpcSecurityGroups'),
        outputPath: 'Cluster.VpcSecurityGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.VpcSecurityGroups', props);
    return resource.getResponseField('Cluster.VpcSecurityGroups') as unknown as shapes.RedshiftVpcSecurityGroupMembership[];
  }

  public get clusterParameterGroups(): shapes.RedshiftClusterParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ClusterParameterGroups'),
        outputPath: 'Cluster.ClusterParameterGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.ClusterParameterGroups', props);
    return resource.getResponseField('Cluster.ClusterParameterGroups') as unknown as shapes.RedshiftClusterParameterGroupStatus[];
  }

  public get clusterSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ClusterSubnetGroupName'),
        outputPath: 'Cluster.ClusterSubnetGroupName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.ClusterSubnetGroupName', props);
    return resource.getResponseField('Cluster.ClusterSubnetGroupName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.VpcId'),
        outputPath: 'Cluster.VpcId',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.VpcId', props);
    return resource.getResponseField('Cluster.VpcId') as unknown as string;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.AvailabilityZone'),
        outputPath: 'Cluster.AvailabilityZone',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.AvailabilityZone', props);
    return resource.getResponseField('Cluster.AvailabilityZone') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.PreferredMaintenanceWindow'),
        outputPath: 'Cluster.PreferredMaintenanceWindow',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('Cluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RedshiftResponsesModifyClusterDbRevisionClusterPendingModifiedValues {
    return new RedshiftResponsesModifyClusterDbRevisionClusterPendingModifiedValues(this.__scope, this.__resources, this.__input);
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ClusterVersion'),
        outputPath: 'Cluster.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.ClusterVersion', props);
    return resource.getResponseField('Cluster.ClusterVersion') as unknown as string;
  }

  public get allowVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.AllowVersionUpgrade'),
        outputPath: 'Cluster.AllowVersionUpgrade',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.AllowVersionUpgrade', props);
    return resource.getResponseField('Cluster.AllowVersionUpgrade') as unknown as boolean;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.NumberOfNodes'),
        outputPath: 'Cluster.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.NumberOfNodes', props);
    return resource.getResponseField('Cluster.NumberOfNodes') as unknown as number;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.PubliclyAccessible'),
        outputPath: 'Cluster.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PubliclyAccessible') as unknown as boolean;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.Encrypted'),
        outputPath: 'Cluster.Encrypted',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.Encrypted', props);
    return resource.getResponseField('Cluster.Encrypted') as unknown as boolean;
  }

  public get restoreStatus(): RedshiftResponsesModifyClusterDbRevisionClusterRestoreStatus {
    return new RedshiftResponsesModifyClusterDbRevisionClusterRestoreStatus(this.__scope, this.__resources, this.__input);
  }

  public get dataTransferProgress(): RedshiftResponsesModifyClusterDbRevisionClusterDataTransferProgress {
    return new RedshiftResponsesModifyClusterDbRevisionClusterDataTransferProgress(this.__scope, this.__resources, this.__input);
  }

  public get hsmStatus(): RedshiftResponsesModifyClusterDbRevisionClusterHsmStatus {
    return new RedshiftResponsesModifyClusterDbRevisionClusterHsmStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterSnapshotCopyStatus(): RedshiftResponsesModifyClusterDbRevisionClusterClusterSnapshotCopyStatus {
    return new RedshiftResponsesModifyClusterDbRevisionClusterClusterSnapshotCopyStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterPublicKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ClusterPublicKey'),
        outputPath: 'Cluster.ClusterPublicKey',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.ClusterPublicKey', props);
    return resource.getResponseField('Cluster.ClusterPublicKey') as unknown as string;
  }

  public get clusterNodes(): shapes.RedshiftClusterNode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ClusterNodes'),
        outputPath: 'Cluster.ClusterNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.ClusterNodes', props);
    return resource.getResponseField('Cluster.ClusterNodes') as unknown as shapes.RedshiftClusterNode[];
  }

  public get elasticIpStatus(): RedshiftResponsesModifyClusterDbRevisionClusterElasticIpStatus {
    return new RedshiftResponsesModifyClusterDbRevisionClusterElasticIpStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterRevisionNumber(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ClusterRevisionNumber'),
        outputPath: 'Cluster.ClusterRevisionNumber',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.ClusterRevisionNumber', props);
    return resource.getResponseField('Cluster.ClusterRevisionNumber') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.Tags'),
        outputPath: 'Cluster.Tags',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.Tags', props);
    return resource.getResponseField('Cluster.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.KmsKeyId'),
        outputPath: 'Cluster.KmsKeyId',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.KmsKeyId', props);
    return resource.getResponseField('Cluster.KmsKeyId') as unknown as string;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.EnhancedVpcRouting'),
        outputPath: 'Cluster.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.EnhancedVpcRouting') as unknown as boolean;
  }

  public get iamRoles(): shapes.RedshiftClusterIamRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.IamRoles'),
        outputPath: 'Cluster.IamRoles',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.IamRoles', props);
    return resource.getResponseField('Cluster.IamRoles') as unknown as shapes.RedshiftClusterIamRole[];
  }

  public get pendingActions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.PendingActions'),
        outputPath: 'Cluster.PendingActions',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.PendingActions', props);
    return resource.getResponseField('Cluster.PendingActions') as unknown as string[];
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.MaintenanceTrackName'),
        outputPath: 'Cluster.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.MaintenanceTrackName') as unknown as string;
  }

  public get elasticResizeNumberOfNodeOptions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ElasticResizeNumberOfNodeOptions'),
        outputPath: 'Cluster.ElasticResizeNumberOfNodeOptions',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.ElasticResizeNumberOfNodeOptions', props);
    return resource.getResponseField('Cluster.ElasticResizeNumberOfNodeOptions') as unknown as string;
  }

  public get deferredMaintenanceWindows(): shapes.RedshiftDeferredMaintenanceWindow[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.DeferredMaintenanceWindows'),
        outputPath: 'Cluster.DeferredMaintenanceWindows',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.DeferredMaintenanceWindows', props);
    return resource.getResponseField('Cluster.DeferredMaintenanceWindows') as unknown as shapes.RedshiftDeferredMaintenanceWindow[];
  }

  public get snapshotScheduleIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.SnapshotScheduleIdentifier'),
        outputPath: 'Cluster.SnapshotScheduleIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.SnapshotScheduleIdentifier', props);
    return resource.getResponseField('Cluster.SnapshotScheduleIdentifier') as unknown as string;
  }

  public get snapshotScheduleState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.SnapshotScheduleState'),
        outputPath: 'Cluster.SnapshotScheduleState',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.SnapshotScheduleState', props);
    return resource.getResponseField('Cluster.SnapshotScheduleState') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ExpectedNextSnapshotScheduleTime'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.ExpectedNextSnapshotScheduleTime', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTime') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTimeStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ExpectedNextSnapshotScheduleTimeStatus'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTimeStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.ExpectedNextSnapshotScheduleTimeStatus', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTimeStatus') as unknown as string;
  }

  public get nextMaintenanceWindowStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.NextMaintenanceWindowStartTime'),
        outputPath: 'Cluster.NextMaintenanceWindowStartTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.NextMaintenanceWindowStartTime', props);
    return resource.getResponseField('Cluster.NextMaintenanceWindowStartTime') as unknown as string;
  }

  public get resizeInfo(): RedshiftResponsesModifyClusterDbRevisionClusterResizeInfo {
    return new RedshiftResponsesModifyClusterDbRevisionClusterResizeInfo(this.__scope, this.__resources, this.__input);
  }

  public get availabilityZoneRelocationStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.AvailabilityZoneRelocationStatus'),
        outputPath: 'Cluster.AvailabilityZoneRelocationStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.AvailabilityZoneRelocationStatus', props);
    return resource.getResponseField('Cluster.AvailabilityZoneRelocationStatus') as unknown as string;
  }

  public get clusterNamespaceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ClusterNamespaceArn'),
        outputPath: 'Cluster.ClusterNamespaceArn',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.ClusterNamespaceArn', props);
    return resource.getResponseField('Cluster.ClusterNamespaceArn') as unknown as string;
  }

  public get totalStorageCapacityInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.TotalStorageCapacityInMegaBytes'),
        outputPath: 'Cluster.TotalStorageCapacityInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.TotalStorageCapacityInMegaBytes', props);
    return resource.getResponseField('Cluster.TotalStorageCapacityInMegaBytes') as unknown as number;
  }

  public get aquaConfiguration(): RedshiftResponsesModifyClusterDbRevisionClusterAquaConfiguration {
    return new RedshiftResponsesModifyClusterDbRevisionClusterAquaConfiguration(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesModifyClusterDbRevisionClusterEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterDbRevisionMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.Endpoint.Address'),
        outputPath: 'Cluster.Endpoint.Address',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.Endpoint.Address', props);
    return resource.getResponseField('Cluster.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.Endpoint.Port'),
        outputPath: 'Cluster.Endpoint.Port',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.Endpoint.Port', props);
    return resource.getResponseField('Cluster.Endpoint.Port') as unknown as number;
  }

  public get vpcEndpoints(): shapes.RedshiftVpcEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.Endpoint.VpcEndpoints'),
        outputPath: 'Cluster.Endpoint.VpcEndpoints',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.Endpoint.VpcEndpoints', props);
    return resource.getResponseField('Cluster.Endpoint.VpcEndpoints') as unknown as shapes.RedshiftVpcEndpoint[];
  }

}

export class RedshiftResponsesModifyClusterDbRevisionClusterPendingModifiedValues {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterDbRevisionMessage) {
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'Cluster.PendingModifiedValues.MasterUserPassword',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.PendingModifiedValues.NodeType'),
        outputPath: 'Cluster.PendingModifiedValues.NodeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.PendingModifiedValues.NodeType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.PendingModifiedValues.NumberOfNodes'),
        outputPath: 'Cluster.PendingModifiedValues.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.PendingModifiedValues.NumberOfNodes', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NumberOfNodes') as unknown as number;
  }

  public get clusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.PendingModifiedValues.ClusterType'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.PendingModifiedValues.ClusterType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterType') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.PendingModifiedValues.ClusterVersion'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.PendingModifiedValues.ClusterVersion', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterVersion') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.PendingModifiedValues.ClusterIdentifier'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.PendingModifiedValues.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterIdentifier') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.PendingModifiedValues.PubliclyAccessible'),
        outputPath: 'Cluster.PendingModifiedValues.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.PendingModifiedValues.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.PubliclyAccessible') as unknown as boolean;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.PendingModifiedValues.EnhancedVpcRouting'),
        outputPath: 'Cluster.PendingModifiedValues.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.PendingModifiedValues.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.PendingModifiedValues.MaintenanceTrackName'),
        outputPath: 'Cluster.PendingModifiedValues.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.PendingModifiedValues.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MaintenanceTrackName') as unknown as string;
  }

  public get encryptionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.PendingModifiedValues.EncryptionType'),
        outputPath: 'Cluster.PendingModifiedValues.EncryptionType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.PendingModifiedValues.EncryptionType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EncryptionType') as unknown as string;
  }

}

export class RedshiftResponsesModifyClusterDbRevisionClusterRestoreStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterDbRevisionMessage) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.RestoreStatus.Status'),
        outputPath: 'Cluster.RestoreStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.RestoreStatus.Status', props);
    return resource.getResponseField('Cluster.RestoreStatus.Status') as unknown as string;
  }

  public get currentRestoreRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond') as unknown as number;
  }

  public get snapshotSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.RestoreStatus.SnapshotSizeInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.SnapshotSizeInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.RestoreStatus.SnapshotSizeInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.SnapshotSizeInMegaBytes') as unknown as number;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.RestoreStatus.ProgressInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.ProgressInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.RestoreStatus.ProgressInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.ProgressInMegaBytes') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.RestoreStatus.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.RestoreStatus.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.RestoreStatus.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.ElapsedTimeInSeconds') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

}

export class RedshiftResponsesModifyClusterDbRevisionClusterDataTransferProgress {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterDbRevisionMessage) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.DataTransferProgress.Status'),
        outputPath: 'Cluster.DataTransferProgress.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.DataTransferProgress.Status', props);
    return resource.getResponseField('Cluster.DataTransferProgress.Status') as unknown as string;
  }

  public get currentRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond') as unknown as number;
  }

  public get totalDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.DataTransferProgress.TotalDataInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.TotalDataInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.DataTransferProgress.TotalDataInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.TotalDataInMegaBytes') as unknown as number;
  }

  public get dataTransferredInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.DataTransferProgress.DataTransferredInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.DataTransferredInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.DataTransferProgress.DataTransferredInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.DataTransferredInMegaBytes') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.DataTransferProgress.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.DataTransferProgress.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.ElapsedTimeInSeconds') as unknown as number;
  }

}

export class RedshiftResponsesModifyClusterDbRevisionClusterHsmStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterDbRevisionMessage) {
  }

  public get hsmClientCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.HsmStatus.HsmClientCertificateIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmClientCertificateIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.HsmStatus.HsmClientCertificateIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmClientCertificateIdentifier') as unknown as string;
  }

  public get hsmConfigurationIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.HsmStatus.HsmConfigurationIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmConfigurationIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.HsmStatus.HsmConfigurationIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmConfigurationIdentifier') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.HsmStatus.Status'),
        outputPath: 'Cluster.HsmStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.HsmStatus.Status', props);
    return resource.getResponseField('Cluster.HsmStatus.Status') as unknown as string;
  }

}

export class RedshiftResponsesModifyClusterDbRevisionClusterClusterSnapshotCopyStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterDbRevisionMessage) {
  }

  public get destinationRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ClusterSnapshotCopyStatus.DestinationRegion'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.DestinationRegion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.ClusterSnapshotCopyStatus.DestinationRegion', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.DestinationRegion') as unknown as string;
  }

  public get retentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.RetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.RetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get snapshotCopyGrantName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName') as unknown as string;
  }

}

export class RedshiftResponsesModifyClusterDbRevisionClusterElasticIpStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterDbRevisionMessage) {
  }

  public get elasticIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ElasticIpStatus.ElasticIp'),
        outputPath: 'Cluster.ElasticIpStatus.ElasticIp',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.ElasticIpStatus.ElasticIp', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.ElasticIp') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ElasticIpStatus.Status'),
        outputPath: 'Cluster.ElasticIpStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.ElasticIpStatus.Status', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.Status') as unknown as string;
  }

}

export class RedshiftResponsesModifyClusterDbRevisionClusterResizeInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterDbRevisionMessage) {
  }

  public get resizeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ResizeInfo.ResizeType'),
        outputPath: 'Cluster.ResizeInfo.ResizeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.ResizeInfo.ResizeType', props);
    return resource.getResponseField('Cluster.ResizeInfo.ResizeType') as unknown as string;
  }

  public get allowCancelResize(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.ResizeInfo.AllowCancelResize'),
        outputPath: 'Cluster.ResizeInfo.AllowCancelResize',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.ResizeInfo.AllowCancelResize', props);
    return resource.getResponseField('Cluster.ResizeInfo.AllowCancelResize') as unknown as boolean;
  }

}

export class RedshiftResponsesModifyClusterDbRevisionClusterAquaConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterDbRevisionMessage) {
  }

  public get aquaStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.AquaConfiguration.AquaStatus'),
        outputPath: 'Cluster.AquaConfiguration.AquaStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.AquaConfiguration.AquaStatus', props);
    return resource.getResponseField('Cluster.AquaConfiguration.AquaStatus') as unknown as string;
  }

  public get aquaConfigurationStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterDbRevision',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterDbRevision.Cluster.AquaConfiguration.AquaConfigurationStatus'),
        outputPath: 'Cluster.AquaConfiguration.AquaConfigurationStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RevisionTarget: this.__input.revisionTarget,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterDbRevision.Cluster.AquaConfiguration.AquaConfigurationStatus', props);
    return resource.getResponseField('Cluster.AquaConfiguration.AquaConfigurationStatus') as unknown as string;
  }

}

export class RedshiftResponsesModifyClusterIamRoles {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterIamRolesMessage) {
  }

  public get cluster(): RedshiftResponsesModifyClusterIamRolesCluster {
    return new RedshiftResponsesModifyClusterIamRolesCluster(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesModifyClusterIamRolesCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterIamRolesMessage) {
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ClusterIdentifier'),
        outputPath: 'Cluster.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.ClusterIdentifier') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.NodeType'),
        outputPath: 'Cluster.NodeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.NodeType', props);
    return resource.getResponseField('Cluster.NodeType') as unknown as string;
  }

  public get clusterStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ClusterStatus'),
        outputPath: 'Cluster.ClusterStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.ClusterStatus', props);
    return resource.getResponseField('Cluster.ClusterStatus') as unknown as string;
  }

  public get clusterAvailabilityStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ClusterAvailabilityStatus'),
        outputPath: 'Cluster.ClusterAvailabilityStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.ClusterAvailabilityStatus', props);
    return resource.getResponseField('Cluster.ClusterAvailabilityStatus') as unknown as string;
  }

  public get modifyStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ModifyStatus'),
        outputPath: 'Cluster.ModifyStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.ModifyStatus', props);
    return resource.getResponseField('Cluster.ModifyStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.MasterUsername'),
        outputPath: 'Cluster.MasterUsername',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.MasterUsername', props);
    return resource.getResponseField('Cluster.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.DBName'),
        outputPath: 'Cluster.DBName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.DBName', props);
    return resource.getResponseField('Cluster.DBName') as unknown as string;
  }

  public get endpoint(): RedshiftResponsesModifyClusterIamRolesClusterEndpoint {
    return new RedshiftResponsesModifyClusterIamRolesClusterEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ClusterCreateTime'),
        outputPath: 'Cluster.ClusterCreateTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.ClusterCreateTime', props);
    return resource.getResponseField('Cluster.ClusterCreateTime') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterSecurityGroups(): shapes.RedshiftClusterSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ClusterSecurityGroups'),
        outputPath: 'Cluster.ClusterSecurityGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.ClusterSecurityGroups', props);
    return resource.getResponseField('Cluster.ClusterSecurityGroups') as unknown as shapes.RedshiftClusterSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RedshiftVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.VpcSecurityGroups'),
        outputPath: 'Cluster.VpcSecurityGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.VpcSecurityGroups', props);
    return resource.getResponseField('Cluster.VpcSecurityGroups') as unknown as shapes.RedshiftVpcSecurityGroupMembership[];
  }

  public get clusterParameterGroups(): shapes.RedshiftClusterParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ClusterParameterGroups'),
        outputPath: 'Cluster.ClusterParameterGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.ClusterParameterGroups', props);
    return resource.getResponseField('Cluster.ClusterParameterGroups') as unknown as shapes.RedshiftClusterParameterGroupStatus[];
  }

  public get clusterSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ClusterSubnetGroupName'),
        outputPath: 'Cluster.ClusterSubnetGroupName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.ClusterSubnetGroupName', props);
    return resource.getResponseField('Cluster.ClusterSubnetGroupName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.VpcId'),
        outputPath: 'Cluster.VpcId',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.VpcId', props);
    return resource.getResponseField('Cluster.VpcId') as unknown as string;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.AvailabilityZone'),
        outputPath: 'Cluster.AvailabilityZone',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.AvailabilityZone', props);
    return resource.getResponseField('Cluster.AvailabilityZone') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.PreferredMaintenanceWindow'),
        outputPath: 'Cluster.PreferredMaintenanceWindow',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('Cluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RedshiftResponsesModifyClusterIamRolesClusterPendingModifiedValues {
    return new RedshiftResponsesModifyClusterIamRolesClusterPendingModifiedValues(this.__scope, this.__resources, this.__input);
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ClusterVersion'),
        outputPath: 'Cluster.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.ClusterVersion', props);
    return resource.getResponseField('Cluster.ClusterVersion') as unknown as string;
  }

  public get allowVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.AllowVersionUpgrade'),
        outputPath: 'Cluster.AllowVersionUpgrade',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.AllowVersionUpgrade', props);
    return resource.getResponseField('Cluster.AllowVersionUpgrade') as unknown as boolean;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.NumberOfNodes'),
        outputPath: 'Cluster.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.NumberOfNodes', props);
    return resource.getResponseField('Cluster.NumberOfNodes') as unknown as number;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.PubliclyAccessible'),
        outputPath: 'Cluster.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PubliclyAccessible') as unknown as boolean;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.Encrypted'),
        outputPath: 'Cluster.Encrypted',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.Encrypted', props);
    return resource.getResponseField('Cluster.Encrypted') as unknown as boolean;
  }

  public get restoreStatus(): RedshiftResponsesModifyClusterIamRolesClusterRestoreStatus {
    return new RedshiftResponsesModifyClusterIamRolesClusterRestoreStatus(this.__scope, this.__resources, this.__input);
  }

  public get dataTransferProgress(): RedshiftResponsesModifyClusterIamRolesClusterDataTransferProgress {
    return new RedshiftResponsesModifyClusterIamRolesClusterDataTransferProgress(this.__scope, this.__resources, this.__input);
  }

  public get hsmStatus(): RedshiftResponsesModifyClusterIamRolesClusterHsmStatus {
    return new RedshiftResponsesModifyClusterIamRolesClusterHsmStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterSnapshotCopyStatus(): RedshiftResponsesModifyClusterIamRolesClusterClusterSnapshotCopyStatus {
    return new RedshiftResponsesModifyClusterIamRolesClusterClusterSnapshotCopyStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterPublicKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ClusterPublicKey'),
        outputPath: 'Cluster.ClusterPublicKey',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.ClusterPublicKey', props);
    return resource.getResponseField('Cluster.ClusterPublicKey') as unknown as string;
  }

  public get clusterNodes(): shapes.RedshiftClusterNode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ClusterNodes'),
        outputPath: 'Cluster.ClusterNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.ClusterNodes', props);
    return resource.getResponseField('Cluster.ClusterNodes') as unknown as shapes.RedshiftClusterNode[];
  }

  public get elasticIpStatus(): RedshiftResponsesModifyClusterIamRolesClusterElasticIpStatus {
    return new RedshiftResponsesModifyClusterIamRolesClusterElasticIpStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterRevisionNumber(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ClusterRevisionNumber'),
        outputPath: 'Cluster.ClusterRevisionNumber',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.ClusterRevisionNumber', props);
    return resource.getResponseField('Cluster.ClusterRevisionNumber') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.Tags'),
        outputPath: 'Cluster.Tags',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.Tags', props);
    return resource.getResponseField('Cluster.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.KmsKeyId'),
        outputPath: 'Cluster.KmsKeyId',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.KmsKeyId', props);
    return resource.getResponseField('Cluster.KmsKeyId') as unknown as string;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.EnhancedVpcRouting'),
        outputPath: 'Cluster.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.EnhancedVpcRouting') as unknown as boolean;
  }

  public get iamRoles(): shapes.RedshiftClusterIamRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.IamRoles'),
        outputPath: 'Cluster.IamRoles',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.IamRoles', props);
    return resource.getResponseField('Cluster.IamRoles') as unknown as shapes.RedshiftClusterIamRole[];
  }

  public get pendingActions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.PendingActions'),
        outputPath: 'Cluster.PendingActions',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.PendingActions', props);
    return resource.getResponseField('Cluster.PendingActions') as unknown as string[];
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.MaintenanceTrackName'),
        outputPath: 'Cluster.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.MaintenanceTrackName') as unknown as string;
  }

  public get elasticResizeNumberOfNodeOptions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ElasticResizeNumberOfNodeOptions'),
        outputPath: 'Cluster.ElasticResizeNumberOfNodeOptions',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.ElasticResizeNumberOfNodeOptions', props);
    return resource.getResponseField('Cluster.ElasticResizeNumberOfNodeOptions') as unknown as string;
  }

  public get deferredMaintenanceWindows(): shapes.RedshiftDeferredMaintenanceWindow[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.DeferredMaintenanceWindows'),
        outputPath: 'Cluster.DeferredMaintenanceWindows',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.DeferredMaintenanceWindows', props);
    return resource.getResponseField('Cluster.DeferredMaintenanceWindows') as unknown as shapes.RedshiftDeferredMaintenanceWindow[];
  }

  public get snapshotScheduleIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.SnapshotScheduleIdentifier'),
        outputPath: 'Cluster.SnapshotScheduleIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.SnapshotScheduleIdentifier', props);
    return resource.getResponseField('Cluster.SnapshotScheduleIdentifier') as unknown as string;
  }

  public get snapshotScheduleState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.SnapshotScheduleState'),
        outputPath: 'Cluster.SnapshotScheduleState',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.SnapshotScheduleState', props);
    return resource.getResponseField('Cluster.SnapshotScheduleState') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ExpectedNextSnapshotScheduleTime'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.ExpectedNextSnapshotScheduleTime', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTime') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTimeStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ExpectedNextSnapshotScheduleTimeStatus'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTimeStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.ExpectedNextSnapshotScheduleTimeStatus', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTimeStatus') as unknown as string;
  }

  public get nextMaintenanceWindowStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.NextMaintenanceWindowStartTime'),
        outputPath: 'Cluster.NextMaintenanceWindowStartTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.NextMaintenanceWindowStartTime', props);
    return resource.getResponseField('Cluster.NextMaintenanceWindowStartTime') as unknown as string;
  }

  public get resizeInfo(): RedshiftResponsesModifyClusterIamRolesClusterResizeInfo {
    return new RedshiftResponsesModifyClusterIamRolesClusterResizeInfo(this.__scope, this.__resources, this.__input);
  }

  public get availabilityZoneRelocationStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.AvailabilityZoneRelocationStatus'),
        outputPath: 'Cluster.AvailabilityZoneRelocationStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.AvailabilityZoneRelocationStatus', props);
    return resource.getResponseField('Cluster.AvailabilityZoneRelocationStatus') as unknown as string;
  }

  public get clusterNamespaceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ClusterNamespaceArn'),
        outputPath: 'Cluster.ClusterNamespaceArn',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.ClusterNamespaceArn', props);
    return resource.getResponseField('Cluster.ClusterNamespaceArn') as unknown as string;
  }

  public get totalStorageCapacityInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.TotalStorageCapacityInMegaBytes'),
        outputPath: 'Cluster.TotalStorageCapacityInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.TotalStorageCapacityInMegaBytes', props);
    return resource.getResponseField('Cluster.TotalStorageCapacityInMegaBytes') as unknown as number;
  }

  public get aquaConfiguration(): RedshiftResponsesModifyClusterIamRolesClusterAquaConfiguration {
    return new RedshiftResponsesModifyClusterIamRolesClusterAquaConfiguration(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesModifyClusterIamRolesClusterEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterIamRolesMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.Endpoint.Address'),
        outputPath: 'Cluster.Endpoint.Address',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.Endpoint.Address', props);
    return resource.getResponseField('Cluster.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.Endpoint.Port'),
        outputPath: 'Cluster.Endpoint.Port',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.Endpoint.Port', props);
    return resource.getResponseField('Cluster.Endpoint.Port') as unknown as number;
  }

  public get vpcEndpoints(): shapes.RedshiftVpcEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.Endpoint.VpcEndpoints'),
        outputPath: 'Cluster.Endpoint.VpcEndpoints',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.Endpoint.VpcEndpoints', props);
    return resource.getResponseField('Cluster.Endpoint.VpcEndpoints') as unknown as shapes.RedshiftVpcEndpoint[];
  }

}

export class RedshiftResponsesModifyClusterIamRolesClusterPendingModifiedValues {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterIamRolesMessage) {
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'Cluster.PendingModifiedValues.MasterUserPassword',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.PendingModifiedValues.NodeType'),
        outputPath: 'Cluster.PendingModifiedValues.NodeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.PendingModifiedValues.NodeType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.PendingModifiedValues.NumberOfNodes'),
        outputPath: 'Cluster.PendingModifiedValues.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.PendingModifiedValues.NumberOfNodes', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NumberOfNodes') as unknown as number;
  }

  public get clusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.PendingModifiedValues.ClusterType'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.PendingModifiedValues.ClusterType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterType') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.PendingModifiedValues.ClusterVersion'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.PendingModifiedValues.ClusterVersion', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterVersion') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.PendingModifiedValues.ClusterIdentifier'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.PendingModifiedValues.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterIdentifier') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.PendingModifiedValues.PubliclyAccessible'),
        outputPath: 'Cluster.PendingModifiedValues.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.PendingModifiedValues.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.PubliclyAccessible') as unknown as boolean;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.PendingModifiedValues.EnhancedVpcRouting'),
        outputPath: 'Cluster.PendingModifiedValues.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.PendingModifiedValues.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.PendingModifiedValues.MaintenanceTrackName'),
        outputPath: 'Cluster.PendingModifiedValues.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.PendingModifiedValues.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MaintenanceTrackName') as unknown as string;
  }

  public get encryptionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.PendingModifiedValues.EncryptionType'),
        outputPath: 'Cluster.PendingModifiedValues.EncryptionType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.PendingModifiedValues.EncryptionType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EncryptionType') as unknown as string;
  }

}

export class RedshiftResponsesModifyClusterIamRolesClusterRestoreStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterIamRolesMessage) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.RestoreStatus.Status'),
        outputPath: 'Cluster.RestoreStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.RestoreStatus.Status', props);
    return resource.getResponseField('Cluster.RestoreStatus.Status') as unknown as string;
  }

  public get currentRestoreRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond') as unknown as number;
  }

  public get snapshotSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.RestoreStatus.SnapshotSizeInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.SnapshotSizeInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.RestoreStatus.SnapshotSizeInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.SnapshotSizeInMegaBytes') as unknown as number;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.RestoreStatus.ProgressInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.ProgressInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.RestoreStatus.ProgressInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.ProgressInMegaBytes') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.RestoreStatus.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.RestoreStatus.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.RestoreStatus.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.ElapsedTimeInSeconds') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

}

export class RedshiftResponsesModifyClusterIamRolesClusterDataTransferProgress {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterIamRolesMessage) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.DataTransferProgress.Status'),
        outputPath: 'Cluster.DataTransferProgress.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.DataTransferProgress.Status', props);
    return resource.getResponseField('Cluster.DataTransferProgress.Status') as unknown as string;
  }

  public get currentRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond') as unknown as number;
  }

  public get totalDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.DataTransferProgress.TotalDataInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.TotalDataInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.DataTransferProgress.TotalDataInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.TotalDataInMegaBytes') as unknown as number;
  }

  public get dataTransferredInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.DataTransferProgress.DataTransferredInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.DataTransferredInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.DataTransferProgress.DataTransferredInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.DataTransferredInMegaBytes') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.DataTransferProgress.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.DataTransferProgress.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.ElapsedTimeInSeconds') as unknown as number;
  }

}

export class RedshiftResponsesModifyClusterIamRolesClusterHsmStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterIamRolesMessage) {
  }

  public get hsmClientCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.HsmStatus.HsmClientCertificateIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmClientCertificateIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.HsmStatus.HsmClientCertificateIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmClientCertificateIdentifier') as unknown as string;
  }

  public get hsmConfigurationIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.HsmStatus.HsmConfigurationIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmConfigurationIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.HsmStatus.HsmConfigurationIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmConfigurationIdentifier') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.HsmStatus.Status'),
        outputPath: 'Cluster.HsmStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.HsmStatus.Status', props);
    return resource.getResponseField('Cluster.HsmStatus.Status') as unknown as string;
  }

}

export class RedshiftResponsesModifyClusterIamRolesClusterClusterSnapshotCopyStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterIamRolesMessage) {
  }

  public get destinationRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ClusterSnapshotCopyStatus.DestinationRegion'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.DestinationRegion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.ClusterSnapshotCopyStatus.DestinationRegion', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.DestinationRegion') as unknown as string;
  }

  public get retentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.RetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.RetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get snapshotCopyGrantName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName') as unknown as string;
  }

}

export class RedshiftResponsesModifyClusterIamRolesClusterElasticIpStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterIamRolesMessage) {
  }

  public get elasticIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ElasticIpStatus.ElasticIp'),
        outputPath: 'Cluster.ElasticIpStatus.ElasticIp',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.ElasticIpStatus.ElasticIp', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.ElasticIp') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ElasticIpStatus.Status'),
        outputPath: 'Cluster.ElasticIpStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.ElasticIpStatus.Status', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.Status') as unknown as string;
  }

}

export class RedshiftResponsesModifyClusterIamRolesClusterResizeInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterIamRolesMessage) {
  }

  public get resizeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ResizeInfo.ResizeType'),
        outputPath: 'Cluster.ResizeInfo.ResizeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.ResizeInfo.ResizeType', props);
    return resource.getResponseField('Cluster.ResizeInfo.ResizeType') as unknown as string;
  }

  public get allowCancelResize(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.ResizeInfo.AllowCancelResize'),
        outputPath: 'Cluster.ResizeInfo.AllowCancelResize',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.ResizeInfo.AllowCancelResize', props);
    return resource.getResponseField('Cluster.ResizeInfo.AllowCancelResize') as unknown as boolean;
  }

}

export class RedshiftResponsesModifyClusterIamRolesClusterAquaConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterIamRolesMessage) {
  }

  public get aquaStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.AquaConfiguration.AquaStatus'),
        outputPath: 'Cluster.AquaConfiguration.AquaStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.AquaConfiguration.AquaStatus', props);
    return resource.getResponseField('Cluster.AquaConfiguration.AquaStatus') as unknown as string;
  }

  public get aquaConfigurationStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterIamRoles',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterIamRoles.Cluster.AquaConfiguration.AquaConfigurationStatus'),
        outputPath: 'Cluster.AquaConfiguration.AquaConfigurationStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          AddIamRoles: this.__input.addIamRoles,
          RemoveIamRoles: this.__input.removeIamRoles,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterIamRoles.Cluster.AquaConfiguration.AquaConfigurationStatus', props);
    return resource.getResponseField('Cluster.AquaConfiguration.AquaConfigurationStatus') as unknown as string;
  }

}

export class RedshiftResponsesModifyClusterMaintenance {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterMaintenanceMessage) {
  }

  public get cluster(): RedshiftResponsesModifyClusterMaintenanceCluster {
    return new RedshiftResponsesModifyClusterMaintenanceCluster(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesModifyClusterMaintenanceCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterMaintenanceMessage) {
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ClusterIdentifier'),
        outputPath: 'Cluster.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.ClusterIdentifier') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.NodeType'),
        outputPath: 'Cluster.NodeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.NodeType', props);
    return resource.getResponseField('Cluster.NodeType') as unknown as string;
  }

  public get clusterStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ClusterStatus'),
        outputPath: 'Cluster.ClusterStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.ClusterStatus', props);
    return resource.getResponseField('Cluster.ClusterStatus') as unknown as string;
  }

  public get clusterAvailabilityStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ClusterAvailabilityStatus'),
        outputPath: 'Cluster.ClusterAvailabilityStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.ClusterAvailabilityStatus', props);
    return resource.getResponseField('Cluster.ClusterAvailabilityStatus') as unknown as string;
  }

  public get modifyStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ModifyStatus'),
        outputPath: 'Cluster.ModifyStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.ModifyStatus', props);
    return resource.getResponseField('Cluster.ModifyStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.MasterUsername'),
        outputPath: 'Cluster.MasterUsername',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.MasterUsername', props);
    return resource.getResponseField('Cluster.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.DBName'),
        outputPath: 'Cluster.DBName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.DBName', props);
    return resource.getResponseField('Cluster.DBName') as unknown as string;
  }

  public get endpoint(): RedshiftResponsesModifyClusterMaintenanceClusterEndpoint {
    return new RedshiftResponsesModifyClusterMaintenanceClusterEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ClusterCreateTime'),
        outputPath: 'Cluster.ClusterCreateTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.ClusterCreateTime', props);
    return resource.getResponseField('Cluster.ClusterCreateTime') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterSecurityGroups(): shapes.RedshiftClusterSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ClusterSecurityGroups'),
        outputPath: 'Cluster.ClusterSecurityGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.ClusterSecurityGroups', props);
    return resource.getResponseField('Cluster.ClusterSecurityGroups') as unknown as shapes.RedshiftClusterSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RedshiftVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.VpcSecurityGroups'),
        outputPath: 'Cluster.VpcSecurityGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.VpcSecurityGroups', props);
    return resource.getResponseField('Cluster.VpcSecurityGroups') as unknown as shapes.RedshiftVpcSecurityGroupMembership[];
  }

  public get clusterParameterGroups(): shapes.RedshiftClusterParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ClusterParameterGroups'),
        outputPath: 'Cluster.ClusterParameterGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.ClusterParameterGroups', props);
    return resource.getResponseField('Cluster.ClusterParameterGroups') as unknown as shapes.RedshiftClusterParameterGroupStatus[];
  }

  public get clusterSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ClusterSubnetGroupName'),
        outputPath: 'Cluster.ClusterSubnetGroupName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.ClusterSubnetGroupName', props);
    return resource.getResponseField('Cluster.ClusterSubnetGroupName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.VpcId'),
        outputPath: 'Cluster.VpcId',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.VpcId', props);
    return resource.getResponseField('Cluster.VpcId') as unknown as string;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.AvailabilityZone'),
        outputPath: 'Cluster.AvailabilityZone',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.AvailabilityZone', props);
    return resource.getResponseField('Cluster.AvailabilityZone') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.PreferredMaintenanceWindow'),
        outputPath: 'Cluster.PreferredMaintenanceWindow',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('Cluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RedshiftResponsesModifyClusterMaintenanceClusterPendingModifiedValues {
    return new RedshiftResponsesModifyClusterMaintenanceClusterPendingModifiedValues(this.__scope, this.__resources, this.__input);
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ClusterVersion'),
        outputPath: 'Cluster.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.ClusterVersion', props);
    return resource.getResponseField('Cluster.ClusterVersion') as unknown as string;
  }

  public get allowVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.AllowVersionUpgrade'),
        outputPath: 'Cluster.AllowVersionUpgrade',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.AllowVersionUpgrade', props);
    return resource.getResponseField('Cluster.AllowVersionUpgrade') as unknown as boolean;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.NumberOfNodes'),
        outputPath: 'Cluster.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.NumberOfNodes', props);
    return resource.getResponseField('Cluster.NumberOfNodes') as unknown as number;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.PubliclyAccessible'),
        outputPath: 'Cluster.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PubliclyAccessible') as unknown as boolean;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.Encrypted'),
        outputPath: 'Cluster.Encrypted',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.Encrypted', props);
    return resource.getResponseField('Cluster.Encrypted') as unknown as boolean;
  }

  public get restoreStatus(): RedshiftResponsesModifyClusterMaintenanceClusterRestoreStatus {
    return new RedshiftResponsesModifyClusterMaintenanceClusterRestoreStatus(this.__scope, this.__resources, this.__input);
  }

  public get dataTransferProgress(): RedshiftResponsesModifyClusterMaintenanceClusterDataTransferProgress {
    return new RedshiftResponsesModifyClusterMaintenanceClusterDataTransferProgress(this.__scope, this.__resources, this.__input);
  }

  public get hsmStatus(): RedshiftResponsesModifyClusterMaintenanceClusterHsmStatus {
    return new RedshiftResponsesModifyClusterMaintenanceClusterHsmStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterSnapshotCopyStatus(): RedshiftResponsesModifyClusterMaintenanceClusterClusterSnapshotCopyStatus {
    return new RedshiftResponsesModifyClusterMaintenanceClusterClusterSnapshotCopyStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterPublicKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ClusterPublicKey'),
        outputPath: 'Cluster.ClusterPublicKey',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.ClusterPublicKey', props);
    return resource.getResponseField('Cluster.ClusterPublicKey') as unknown as string;
  }

  public get clusterNodes(): shapes.RedshiftClusterNode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ClusterNodes'),
        outputPath: 'Cluster.ClusterNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.ClusterNodes', props);
    return resource.getResponseField('Cluster.ClusterNodes') as unknown as shapes.RedshiftClusterNode[];
  }

  public get elasticIpStatus(): RedshiftResponsesModifyClusterMaintenanceClusterElasticIpStatus {
    return new RedshiftResponsesModifyClusterMaintenanceClusterElasticIpStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterRevisionNumber(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ClusterRevisionNumber'),
        outputPath: 'Cluster.ClusterRevisionNumber',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.ClusterRevisionNumber', props);
    return resource.getResponseField('Cluster.ClusterRevisionNumber') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.Tags'),
        outputPath: 'Cluster.Tags',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.Tags', props);
    return resource.getResponseField('Cluster.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.KmsKeyId'),
        outputPath: 'Cluster.KmsKeyId',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.KmsKeyId', props);
    return resource.getResponseField('Cluster.KmsKeyId') as unknown as string;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.EnhancedVpcRouting'),
        outputPath: 'Cluster.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.EnhancedVpcRouting') as unknown as boolean;
  }

  public get iamRoles(): shapes.RedshiftClusterIamRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.IamRoles'),
        outputPath: 'Cluster.IamRoles',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.IamRoles', props);
    return resource.getResponseField('Cluster.IamRoles') as unknown as shapes.RedshiftClusterIamRole[];
  }

  public get pendingActions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.PendingActions'),
        outputPath: 'Cluster.PendingActions',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.PendingActions', props);
    return resource.getResponseField('Cluster.PendingActions') as unknown as string[];
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.MaintenanceTrackName'),
        outputPath: 'Cluster.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.MaintenanceTrackName') as unknown as string;
  }

  public get elasticResizeNumberOfNodeOptions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ElasticResizeNumberOfNodeOptions'),
        outputPath: 'Cluster.ElasticResizeNumberOfNodeOptions',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.ElasticResizeNumberOfNodeOptions', props);
    return resource.getResponseField('Cluster.ElasticResizeNumberOfNodeOptions') as unknown as string;
  }

  public get deferredMaintenanceWindows(): shapes.RedshiftDeferredMaintenanceWindow[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.DeferredMaintenanceWindows'),
        outputPath: 'Cluster.DeferredMaintenanceWindows',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.DeferredMaintenanceWindows', props);
    return resource.getResponseField('Cluster.DeferredMaintenanceWindows') as unknown as shapes.RedshiftDeferredMaintenanceWindow[];
  }

  public get snapshotScheduleIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.SnapshotScheduleIdentifier'),
        outputPath: 'Cluster.SnapshotScheduleIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.SnapshotScheduleIdentifier', props);
    return resource.getResponseField('Cluster.SnapshotScheduleIdentifier') as unknown as string;
  }

  public get snapshotScheduleState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.SnapshotScheduleState'),
        outputPath: 'Cluster.SnapshotScheduleState',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.SnapshotScheduleState', props);
    return resource.getResponseField('Cluster.SnapshotScheduleState') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ExpectedNextSnapshotScheduleTime'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.ExpectedNextSnapshotScheduleTime', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTime') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTimeStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ExpectedNextSnapshotScheduleTimeStatus'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTimeStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.ExpectedNextSnapshotScheduleTimeStatus', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTimeStatus') as unknown as string;
  }

  public get nextMaintenanceWindowStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.NextMaintenanceWindowStartTime'),
        outputPath: 'Cluster.NextMaintenanceWindowStartTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.NextMaintenanceWindowStartTime', props);
    return resource.getResponseField('Cluster.NextMaintenanceWindowStartTime') as unknown as string;
  }

  public get resizeInfo(): RedshiftResponsesModifyClusterMaintenanceClusterResizeInfo {
    return new RedshiftResponsesModifyClusterMaintenanceClusterResizeInfo(this.__scope, this.__resources, this.__input);
  }

  public get availabilityZoneRelocationStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.AvailabilityZoneRelocationStatus'),
        outputPath: 'Cluster.AvailabilityZoneRelocationStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.AvailabilityZoneRelocationStatus', props);
    return resource.getResponseField('Cluster.AvailabilityZoneRelocationStatus') as unknown as string;
  }

  public get clusterNamespaceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ClusterNamespaceArn'),
        outputPath: 'Cluster.ClusterNamespaceArn',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.ClusterNamespaceArn', props);
    return resource.getResponseField('Cluster.ClusterNamespaceArn') as unknown as string;
  }

  public get totalStorageCapacityInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.TotalStorageCapacityInMegaBytes'),
        outputPath: 'Cluster.TotalStorageCapacityInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.TotalStorageCapacityInMegaBytes', props);
    return resource.getResponseField('Cluster.TotalStorageCapacityInMegaBytes') as unknown as number;
  }

  public get aquaConfiguration(): RedshiftResponsesModifyClusterMaintenanceClusterAquaConfiguration {
    return new RedshiftResponsesModifyClusterMaintenanceClusterAquaConfiguration(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesModifyClusterMaintenanceClusterEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterMaintenanceMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.Endpoint.Address'),
        outputPath: 'Cluster.Endpoint.Address',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.Endpoint.Address', props);
    return resource.getResponseField('Cluster.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.Endpoint.Port'),
        outputPath: 'Cluster.Endpoint.Port',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.Endpoint.Port', props);
    return resource.getResponseField('Cluster.Endpoint.Port') as unknown as number;
  }

  public get vpcEndpoints(): shapes.RedshiftVpcEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.Endpoint.VpcEndpoints'),
        outputPath: 'Cluster.Endpoint.VpcEndpoints',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.Endpoint.VpcEndpoints', props);
    return resource.getResponseField('Cluster.Endpoint.VpcEndpoints') as unknown as shapes.RedshiftVpcEndpoint[];
  }

}

export class RedshiftResponsesModifyClusterMaintenanceClusterPendingModifiedValues {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterMaintenanceMessage) {
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'Cluster.PendingModifiedValues.MasterUserPassword',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.PendingModifiedValues.NodeType'),
        outputPath: 'Cluster.PendingModifiedValues.NodeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.PendingModifiedValues.NodeType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.PendingModifiedValues.NumberOfNodes'),
        outputPath: 'Cluster.PendingModifiedValues.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.PendingModifiedValues.NumberOfNodes', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NumberOfNodes') as unknown as number;
  }

  public get clusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.PendingModifiedValues.ClusterType'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.PendingModifiedValues.ClusterType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterType') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.PendingModifiedValues.ClusterVersion'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.PendingModifiedValues.ClusterVersion', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterVersion') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.PendingModifiedValues.ClusterIdentifier'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.PendingModifiedValues.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterIdentifier') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.PendingModifiedValues.PubliclyAccessible'),
        outputPath: 'Cluster.PendingModifiedValues.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.PendingModifiedValues.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.PubliclyAccessible') as unknown as boolean;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.PendingModifiedValues.EnhancedVpcRouting'),
        outputPath: 'Cluster.PendingModifiedValues.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.PendingModifiedValues.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.PendingModifiedValues.MaintenanceTrackName'),
        outputPath: 'Cluster.PendingModifiedValues.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.PendingModifiedValues.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MaintenanceTrackName') as unknown as string;
  }

  public get encryptionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.PendingModifiedValues.EncryptionType'),
        outputPath: 'Cluster.PendingModifiedValues.EncryptionType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.PendingModifiedValues.EncryptionType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EncryptionType') as unknown as string;
  }

}

export class RedshiftResponsesModifyClusterMaintenanceClusterRestoreStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterMaintenanceMessage) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.RestoreStatus.Status'),
        outputPath: 'Cluster.RestoreStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.RestoreStatus.Status', props);
    return resource.getResponseField('Cluster.RestoreStatus.Status') as unknown as string;
  }

  public get currentRestoreRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond') as unknown as number;
  }

  public get snapshotSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.RestoreStatus.SnapshotSizeInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.SnapshotSizeInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.RestoreStatus.SnapshotSizeInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.SnapshotSizeInMegaBytes') as unknown as number;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.RestoreStatus.ProgressInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.ProgressInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.RestoreStatus.ProgressInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.ProgressInMegaBytes') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.RestoreStatus.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.RestoreStatus.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.RestoreStatus.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.ElapsedTimeInSeconds') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

}

export class RedshiftResponsesModifyClusterMaintenanceClusterDataTransferProgress {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterMaintenanceMessage) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.DataTransferProgress.Status'),
        outputPath: 'Cluster.DataTransferProgress.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.DataTransferProgress.Status', props);
    return resource.getResponseField('Cluster.DataTransferProgress.Status') as unknown as string;
  }

  public get currentRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond') as unknown as number;
  }

  public get totalDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.DataTransferProgress.TotalDataInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.TotalDataInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.DataTransferProgress.TotalDataInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.TotalDataInMegaBytes') as unknown as number;
  }

  public get dataTransferredInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.DataTransferProgress.DataTransferredInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.DataTransferredInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.DataTransferProgress.DataTransferredInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.DataTransferredInMegaBytes') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.DataTransferProgress.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.DataTransferProgress.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.ElapsedTimeInSeconds') as unknown as number;
  }

}

export class RedshiftResponsesModifyClusterMaintenanceClusterHsmStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterMaintenanceMessage) {
  }

  public get hsmClientCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.HsmStatus.HsmClientCertificateIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmClientCertificateIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.HsmStatus.HsmClientCertificateIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmClientCertificateIdentifier') as unknown as string;
  }

  public get hsmConfigurationIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.HsmStatus.HsmConfigurationIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmConfigurationIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.HsmStatus.HsmConfigurationIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmConfigurationIdentifier') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.HsmStatus.Status'),
        outputPath: 'Cluster.HsmStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.HsmStatus.Status', props);
    return resource.getResponseField('Cluster.HsmStatus.Status') as unknown as string;
  }

}

export class RedshiftResponsesModifyClusterMaintenanceClusterClusterSnapshotCopyStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterMaintenanceMessage) {
  }

  public get destinationRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ClusterSnapshotCopyStatus.DestinationRegion'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.DestinationRegion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.ClusterSnapshotCopyStatus.DestinationRegion', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.DestinationRegion') as unknown as string;
  }

  public get retentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.RetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.RetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get snapshotCopyGrantName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName') as unknown as string;
  }

}

export class RedshiftResponsesModifyClusterMaintenanceClusterElasticIpStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterMaintenanceMessage) {
  }

  public get elasticIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ElasticIpStatus.ElasticIp'),
        outputPath: 'Cluster.ElasticIpStatus.ElasticIp',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.ElasticIpStatus.ElasticIp', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.ElasticIp') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ElasticIpStatus.Status'),
        outputPath: 'Cluster.ElasticIpStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.ElasticIpStatus.Status', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.Status') as unknown as string;
  }

}

export class RedshiftResponsesModifyClusterMaintenanceClusterResizeInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterMaintenanceMessage) {
  }

  public get resizeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ResizeInfo.ResizeType'),
        outputPath: 'Cluster.ResizeInfo.ResizeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.ResizeInfo.ResizeType', props);
    return resource.getResponseField('Cluster.ResizeInfo.ResizeType') as unknown as string;
  }

  public get allowCancelResize(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.ResizeInfo.AllowCancelResize'),
        outputPath: 'Cluster.ResizeInfo.AllowCancelResize',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.ResizeInfo.AllowCancelResize', props);
    return resource.getResponseField('Cluster.ResizeInfo.AllowCancelResize') as unknown as boolean;
  }

}

export class RedshiftResponsesModifyClusterMaintenanceClusterAquaConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterMaintenanceMessage) {
  }

  public get aquaStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.AquaConfiguration.AquaStatus'),
        outputPath: 'Cluster.AquaConfiguration.AquaStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.AquaConfiguration.AquaStatus', props);
    return resource.getResponseField('Cluster.AquaConfiguration.AquaStatus') as unknown as string;
  }

  public get aquaConfigurationStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterMaintenance',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterMaintenance.Cluster.AquaConfiguration.AquaConfigurationStatus'),
        outputPath: 'Cluster.AquaConfiguration.AquaConfigurationStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          DeferMaintenance: this.__input.deferMaintenance,
          DeferMaintenanceIdentifier: this.__input.deferMaintenanceIdentifier,
          DeferMaintenanceStartTime: this.__input.deferMaintenanceStartTime,
          DeferMaintenanceEndTime: this.__input.deferMaintenanceEndTime,
          DeferMaintenanceDuration: this.__input.deferMaintenanceDuration,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterMaintenance.Cluster.AquaConfiguration.AquaConfigurationStatus', props);
    return resource.getResponseField('Cluster.AquaConfiguration.AquaConfigurationStatus') as unknown as string;
  }

}

export class RedshiftResponsesModifyClusterParameterGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterParameterGroupMessage) {
  }

  public get parameterGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterParameterGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterParameterGroup.ParameterGroupName'),
        outputPath: 'ParameterGroupName',
        parameters: {
          ParameterGroupName: this.__input.parameterGroupName,
          Parameters: this.__input.parameters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterParameterGroup.ParameterGroupName', props);
    return resource.getResponseField('ParameterGroupName') as unknown as string;
  }

  public get parameterGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterParameterGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterParameterGroup.ParameterGroupStatus'),
        outputPath: 'ParameterGroupStatus',
        parameters: {
          ParameterGroupName: this.__input.parameterGroupName,
          Parameters: this.__input.parameters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterParameterGroup.ParameterGroupStatus', props);
    return resource.getResponseField('ParameterGroupStatus') as unknown as string;
  }

}

export class RedshiftResponsesModifyClusterSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterSnapshotMessage) {
  }

  public get snapshot(): RedshiftResponsesModifyClusterSnapshotSnapshot {
    return new RedshiftResponsesModifyClusterSnapshotSnapshot(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesModifyClusterSnapshotSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterSnapshotMessage) {
  }

  public get snapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.SnapshotIdentifier'),
        outputPath: 'Snapshot.SnapshotIdentifier',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSnapshot.Snapshot.SnapshotIdentifier', props);
    return resource.getResponseField('Snapshot.SnapshotIdentifier') as unknown as string;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.ClusterIdentifier'),
        outputPath: 'Snapshot.ClusterIdentifier',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSnapshot.Snapshot.ClusterIdentifier', props);
    return resource.getResponseField('Snapshot.ClusterIdentifier') as unknown as string;
  }

  public get snapshotCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.SnapshotCreateTime'),
        outputPath: 'Snapshot.SnapshotCreateTime',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSnapshot.Snapshot.SnapshotCreateTime', props);
    return resource.getResponseField('Snapshot.SnapshotCreateTime') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.Status'),
        outputPath: 'Snapshot.Status',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSnapshot.Snapshot.Status', props);
    return resource.getResponseField('Snapshot.Status') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.Port'),
        outputPath: 'Snapshot.Port',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSnapshot.Snapshot.Port', props);
    return resource.getResponseField('Snapshot.Port') as unknown as number;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.AvailabilityZone'),
        outputPath: 'Snapshot.AvailabilityZone',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSnapshot.Snapshot.AvailabilityZone', props);
    return resource.getResponseField('Snapshot.AvailabilityZone') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.ClusterCreateTime'),
        outputPath: 'Snapshot.ClusterCreateTime',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSnapshot.Snapshot.ClusterCreateTime', props);
    return resource.getResponseField('Snapshot.ClusterCreateTime') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.MasterUsername'),
        outputPath: 'Snapshot.MasterUsername',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSnapshot.Snapshot.MasterUsername', props);
    return resource.getResponseField('Snapshot.MasterUsername') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.ClusterVersion'),
        outputPath: 'Snapshot.ClusterVersion',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSnapshot.Snapshot.ClusterVersion', props);
    return resource.getResponseField('Snapshot.ClusterVersion') as unknown as string;
  }

  public get engineFullVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.EngineFullVersion'),
        outputPath: 'Snapshot.EngineFullVersion',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSnapshot.Snapshot.EngineFullVersion', props);
    return resource.getResponseField('Snapshot.EngineFullVersion') as unknown as string;
  }

  public get snapshotType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.SnapshotType'),
        outputPath: 'Snapshot.SnapshotType',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSnapshot.Snapshot.SnapshotType', props);
    return resource.getResponseField('Snapshot.SnapshotType') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.NodeType'),
        outputPath: 'Snapshot.NodeType',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSnapshot.Snapshot.NodeType', props);
    return resource.getResponseField('Snapshot.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.NumberOfNodes'),
        outputPath: 'Snapshot.NumberOfNodes',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSnapshot.Snapshot.NumberOfNodes', props);
    return resource.getResponseField('Snapshot.NumberOfNodes') as unknown as number;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.DBName'),
        outputPath: 'Snapshot.DBName',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSnapshot.Snapshot.DBName', props);
    return resource.getResponseField('Snapshot.DBName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.VpcId'),
        outputPath: 'Snapshot.VpcId',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSnapshot.Snapshot.VpcId', props);
    return resource.getResponseField('Snapshot.VpcId') as unknown as string;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.Encrypted'),
        outputPath: 'Snapshot.Encrypted',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSnapshot.Snapshot.Encrypted', props);
    return resource.getResponseField('Snapshot.Encrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.KmsKeyId'),
        outputPath: 'Snapshot.KmsKeyId',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSnapshot.Snapshot.KmsKeyId', props);
    return resource.getResponseField('Snapshot.KmsKeyId') as unknown as string;
  }

  public get encryptedWithHsm(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.EncryptedWithHSM'),
        outputPath: 'Snapshot.EncryptedWithHSM',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSnapshot.Snapshot.EncryptedWithHSM', props);
    return resource.getResponseField('Snapshot.EncryptedWithHSM') as unknown as boolean;
  }

  public get accountsWithRestoreAccess(): shapes.RedshiftAccountWithRestoreAccess[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.AccountsWithRestoreAccess'),
        outputPath: 'Snapshot.AccountsWithRestoreAccess',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSnapshot.Snapshot.AccountsWithRestoreAccess', props);
    return resource.getResponseField('Snapshot.AccountsWithRestoreAccess') as unknown as shapes.RedshiftAccountWithRestoreAccess[];
  }

  public get ownerAccount(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.OwnerAccount'),
        outputPath: 'Snapshot.OwnerAccount',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSnapshot.Snapshot.OwnerAccount', props);
    return resource.getResponseField('Snapshot.OwnerAccount') as unknown as string;
  }

  public get totalBackupSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.TotalBackupSizeInMegaBytes'),
        outputPath: 'Snapshot.TotalBackupSizeInMegaBytes',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSnapshot.Snapshot.TotalBackupSizeInMegaBytes', props);
    return resource.getResponseField('Snapshot.TotalBackupSizeInMegaBytes') as unknown as number;
  }

  public get actualIncrementalBackupSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.ActualIncrementalBackupSizeInMegaBytes'),
        outputPath: 'Snapshot.ActualIncrementalBackupSizeInMegaBytes',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSnapshot.Snapshot.ActualIncrementalBackupSizeInMegaBytes', props);
    return resource.getResponseField('Snapshot.ActualIncrementalBackupSizeInMegaBytes') as unknown as number;
  }

  public get backupProgressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.BackupProgressInMegaBytes'),
        outputPath: 'Snapshot.BackupProgressInMegaBytes',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSnapshot.Snapshot.BackupProgressInMegaBytes', props);
    return resource.getResponseField('Snapshot.BackupProgressInMegaBytes') as unknown as number;
  }

  public get currentBackupRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.CurrentBackupRateInMegaBytesPerSecond'),
        outputPath: 'Snapshot.CurrentBackupRateInMegaBytesPerSecond',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSnapshot.Snapshot.CurrentBackupRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Snapshot.CurrentBackupRateInMegaBytesPerSecond') as unknown as number;
  }

  public get estimatedSecondsToCompletion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.EstimatedSecondsToCompletion'),
        outputPath: 'Snapshot.EstimatedSecondsToCompletion',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSnapshot.Snapshot.EstimatedSecondsToCompletion', props);
    return resource.getResponseField('Snapshot.EstimatedSecondsToCompletion') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.ElapsedTimeInSeconds'),
        outputPath: 'Snapshot.ElapsedTimeInSeconds',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSnapshot.Snapshot.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Snapshot.ElapsedTimeInSeconds') as unknown as number;
  }

  public get sourceRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.SourceRegion'),
        outputPath: 'Snapshot.SourceRegion',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSnapshot.Snapshot.SourceRegion', props);
    return resource.getResponseField('Snapshot.SourceRegion') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.Tags'),
        outputPath: 'Snapshot.Tags',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSnapshot.Snapshot.Tags', props);
    return resource.getResponseField('Snapshot.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get restorableNodeTypes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.RestorableNodeTypes'),
        outputPath: 'Snapshot.RestorableNodeTypes',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSnapshot.Snapshot.RestorableNodeTypes', props);
    return resource.getResponseField('Snapshot.RestorableNodeTypes') as unknown as string[];
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.EnhancedVpcRouting'),
        outputPath: 'Snapshot.EnhancedVpcRouting',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSnapshot.Snapshot.EnhancedVpcRouting', props);
    return resource.getResponseField('Snapshot.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.MaintenanceTrackName'),
        outputPath: 'Snapshot.MaintenanceTrackName',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSnapshot.Snapshot.MaintenanceTrackName', props);
    return resource.getResponseField('Snapshot.MaintenanceTrackName') as unknown as string;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.ManualSnapshotRetentionPeriod'),
        outputPath: 'Snapshot.ManualSnapshotRetentionPeriod',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSnapshot.Snapshot.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Snapshot.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRemainingDays(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.ManualSnapshotRemainingDays'),
        outputPath: 'Snapshot.ManualSnapshotRemainingDays',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSnapshot.Snapshot.ManualSnapshotRemainingDays', props);
    return resource.getResponseField('Snapshot.ManualSnapshotRemainingDays') as unknown as number;
  }

  public get snapshotRetentionStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSnapshot.Snapshot.SnapshotRetentionStartTime'),
        outputPath: 'Snapshot.SnapshotRetentionStartTime',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSnapshot.Snapshot.SnapshotRetentionStartTime', props);
    return resource.getResponseField('Snapshot.SnapshotRetentionStartTime') as unknown as string;
  }

}

export class RedshiftResponsesModifyClusterSubnetGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterSubnetGroupMessage) {
  }

  public get clusterSubnetGroup(): RedshiftResponsesModifyClusterSubnetGroupClusterSubnetGroup {
    return new RedshiftResponsesModifyClusterSubnetGroupClusterSubnetGroup(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesModifyClusterSubnetGroupClusterSubnetGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyClusterSubnetGroupMessage) {
  }

  public get clusterSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSubnetGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSubnetGroup.ClusterSubnetGroup.ClusterSubnetGroupName'),
        outputPath: 'ClusterSubnetGroup.ClusterSubnetGroupName',
        parameters: {
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          Description: this.__input.description,
          SubnetIds: this.__input.subnetIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSubnetGroup.ClusterSubnetGroup.ClusterSubnetGroupName', props);
    return resource.getResponseField('ClusterSubnetGroup.ClusterSubnetGroupName') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSubnetGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSubnetGroup.ClusterSubnetGroup.Description'),
        outputPath: 'ClusterSubnetGroup.Description',
        parameters: {
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          Description: this.__input.description,
          SubnetIds: this.__input.subnetIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSubnetGroup.ClusterSubnetGroup.Description', props);
    return resource.getResponseField('ClusterSubnetGroup.Description') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSubnetGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSubnetGroup.ClusterSubnetGroup.VpcId'),
        outputPath: 'ClusterSubnetGroup.VpcId',
        parameters: {
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          Description: this.__input.description,
          SubnetIds: this.__input.subnetIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSubnetGroup.ClusterSubnetGroup.VpcId', props);
    return resource.getResponseField('ClusterSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSubnetGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSubnetGroup.ClusterSubnetGroup.SubnetGroupStatus'),
        outputPath: 'ClusterSubnetGroup.SubnetGroupStatus',
        parameters: {
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          Description: this.__input.description,
          SubnetIds: this.__input.subnetIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSubnetGroup.ClusterSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('ClusterSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.RedshiftSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSubnetGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSubnetGroup.ClusterSubnetGroup.Subnets'),
        outputPath: 'ClusterSubnetGroup.Subnets',
        parameters: {
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          Description: this.__input.description,
          SubnetIds: this.__input.subnetIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSubnetGroup.ClusterSubnetGroup.Subnets', props);
    return resource.getResponseField('ClusterSubnetGroup.Subnets') as unknown as shapes.RedshiftSubnet[];
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClusterSubnetGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyClusterSubnetGroup.ClusterSubnetGroup.Tags'),
        outputPath: 'ClusterSubnetGroup.Tags',
        parameters: {
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          Description: this.__input.description,
          SubnetIds: this.__input.subnetIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClusterSubnetGroup.ClusterSubnetGroup.Tags', props);
    return resource.getResponseField('ClusterSubnetGroup.Tags') as unknown as shapes.RedshiftTag[];
  }

}

export class RedshiftResponsesModifyEndpointAccess {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyEndpointAccessMessage) {
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyEndpointAccess.ClusterIdentifier'),
        outputPath: 'ClusterIdentifier',
        parameters: {
          EndpointName: this.__input.endpointName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEndpointAccess.ClusterIdentifier', props);
    return resource.getResponseField('ClusterIdentifier') as unknown as string;
  }

  public get resourceOwner(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyEndpointAccess.ResourceOwner'),
        outputPath: 'ResourceOwner',
        parameters: {
          EndpointName: this.__input.endpointName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEndpointAccess.ResourceOwner', props);
    return resource.getResponseField('ResourceOwner') as unknown as string;
  }

  public get subnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyEndpointAccess.SubnetGroupName'),
        outputPath: 'SubnetGroupName',
        parameters: {
          EndpointName: this.__input.endpointName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEndpointAccess.SubnetGroupName', props);
    return resource.getResponseField('SubnetGroupName') as unknown as string;
  }

  public get endpointStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyEndpointAccess.EndpointStatus'),
        outputPath: 'EndpointStatus',
        parameters: {
          EndpointName: this.__input.endpointName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEndpointAccess.EndpointStatus', props);
    return resource.getResponseField('EndpointStatus') as unknown as string;
  }

  public get endpointName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyEndpointAccess.EndpointName'),
        outputPath: 'EndpointName',
        parameters: {
          EndpointName: this.__input.endpointName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEndpointAccess.EndpointName', props);
    return resource.getResponseField('EndpointName') as unknown as string;
  }

  public get endpointCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyEndpointAccess.EndpointCreateTime'),
        outputPath: 'EndpointCreateTime',
        parameters: {
          EndpointName: this.__input.endpointName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEndpointAccess.EndpointCreateTime', props);
    return resource.getResponseField('EndpointCreateTime') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyEndpointAccess.Port'),
        outputPath: 'Port',
        parameters: {
          EndpointName: this.__input.endpointName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEndpointAccess.Port', props);
    return resource.getResponseField('Port') as unknown as number;
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyEndpointAccess.Address'),
        outputPath: 'Address',
        parameters: {
          EndpointName: this.__input.endpointName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEndpointAccess.Address', props);
    return resource.getResponseField('Address') as unknown as string;
  }

  public get vpcSecurityGroups(): shapes.RedshiftVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyEndpointAccess.VpcSecurityGroups'),
        outputPath: 'VpcSecurityGroups',
        parameters: {
          EndpointName: this.__input.endpointName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEndpointAccess.VpcSecurityGroups', props);
    return resource.getResponseField('VpcSecurityGroups') as unknown as shapes.RedshiftVpcSecurityGroupMembership[];
  }

  public get vpcEndpoint(): RedshiftResponsesModifyEndpointAccessVpcEndpoint {
    return new RedshiftResponsesModifyEndpointAccessVpcEndpoint(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesModifyEndpointAccessVpcEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyEndpointAccessMessage) {
  }

  public get vpcEndpointId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyEndpointAccess.VpcEndpoint.VpcEndpointId'),
        outputPath: 'VpcEndpoint.VpcEndpointId',
        parameters: {
          EndpointName: this.__input.endpointName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEndpointAccess.VpcEndpoint.VpcEndpointId', props);
    return resource.getResponseField('VpcEndpoint.VpcEndpointId') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyEndpointAccess.VpcEndpoint.VpcId'),
        outputPath: 'VpcEndpoint.VpcId',
        parameters: {
          EndpointName: this.__input.endpointName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEndpointAccess.VpcEndpoint.VpcId', props);
    return resource.getResponseField('VpcEndpoint.VpcId') as unknown as string;
  }

  public get networkInterfaces(): shapes.RedshiftNetworkInterface[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyEndpointAccess.VpcEndpoint.NetworkInterfaces'),
        outputPath: 'VpcEndpoint.NetworkInterfaces',
        parameters: {
          EndpointName: this.__input.endpointName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEndpointAccess.VpcEndpoint.NetworkInterfaces', props);
    return resource.getResponseField('VpcEndpoint.NetworkInterfaces') as unknown as shapes.RedshiftNetworkInterface[];
  }

}

export class RedshiftResponsesModifyEventSubscription {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyEventSubscriptionMessage) {
  }

  public get eventSubscription(): RedshiftResponsesModifyEventSubscriptionEventSubscription {
    return new RedshiftResponsesModifyEventSubscriptionEventSubscription(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesModifyEventSubscriptionEventSubscription {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyEventSubscriptionMessage) {
  }

  public get customerAwsId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyEventSubscription.EventSubscription.CustomerAwsId'),
        outputPath: 'EventSubscription.CustomerAwsId',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          SourceIds: this.__input.sourceIds,
          EventCategories: this.__input.eventCategories,
          Severity: this.__input.severity,
          Enabled: this.__input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEventSubscription.EventSubscription.CustomerAwsId', props);
    return resource.getResponseField('EventSubscription.CustomerAwsId') as unknown as string;
  }

  public get custSubscriptionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyEventSubscription.EventSubscription.CustSubscriptionId'),
        outputPath: 'EventSubscription.CustSubscriptionId',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          SourceIds: this.__input.sourceIds,
          EventCategories: this.__input.eventCategories,
          Severity: this.__input.severity,
          Enabled: this.__input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEventSubscription.EventSubscription.CustSubscriptionId', props);
    return resource.getResponseField('EventSubscription.CustSubscriptionId') as unknown as string;
  }

  public get snsTopicArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyEventSubscription.EventSubscription.SnsTopicArn'),
        outputPath: 'EventSubscription.SnsTopicArn',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          SourceIds: this.__input.sourceIds,
          EventCategories: this.__input.eventCategories,
          Severity: this.__input.severity,
          Enabled: this.__input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEventSubscription.EventSubscription.SnsTopicArn', props);
    return resource.getResponseField('EventSubscription.SnsTopicArn') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyEventSubscription.EventSubscription.Status'),
        outputPath: 'EventSubscription.Status',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          SourceIds: this.__input.sourceIds,
          EventCategories: this.__input.eventCategories,
          Severity: this.__input.severity,
          Enabled: this.__input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEventSubscription.EventSubscription.Status', props);
    return resource.getResponseField('EventSubscription.Status') as unknown as string;
  }

  public get subscriptionCreationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyEventSubscription.EventSubscription.SubscriptionCreationTime'),
        outputPath: 'EventSubscription.SubscriptionCreationTime',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          SourceIds: this.__input.sourceIds,
          EventCategories: this.__input.eventCategories,
          Severity: this.__input.severity,
          Enabled: this.__input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEventSubscription.EventSubscription.SubscriptionCreationTime', props);
    return resource.getResponseField('EventSubscription.SubscriptionCreationTime') as unknown as string;
  }

  public get sourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyEventSubscription.EventSubscription.SourceType'),
        outputPath: 'EventSubscription.SourceType',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          SourceIds: this.__input.sourceIds,
          EventCategories: this.__input.eventCategories,
          Severity: this.__input.severity,
          Enabled: this.__input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEventSubscription.EventSubscription.SourceType', props);
    return resource.getResponseField('EventSubscription.SourceType') as unknown as string;
  }

  public get sourceIdsList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyEventSubscription.EventSubscription.SourceIdsList'),
        outputPath: 'EventSubscription.SourceIdsList',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          SourceIds: this.__input.sourceIds,
          EventCategories: this.__input.eventCategories,
          Severity: this.__input.severity,
          Enabled: this.__input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEventSubscription.EventSubscription.SourceIdsList', props);
    return resource.getResponseField('EventSubscription.SourceIdsList') as unknown as string[];
  }

  public get eventCategoriesList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyEventSubscription.EventSubscription.EventCategoriesList'),
        outputPath: 'EventSubscription.EventCategoriesList',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          SourceIds: this.__input.sourceIds,
          EventCategories: this.__input.eventCategories,
          Severity: this.__input.severity,
          Enabled: this.__input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEventSubscription.EventSubscription.EventCategoriesList', props);
    return resource.getResponseField('EventSubscription.EventCategoriesList') as unknown as string[];
  }

  public get severity(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyEventSubscription.EventSubscription.Severity'),
        outputPath: 'EventSubscription.Severity',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          SourceIds: this.__input.sourceIds,
          EventCategories: this.__input.eventCategories,
          Severity: this.__input.severity,
          Enabled: this.__input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEventSubscription.EventSubscription.Severity', props);
    return resource.getResponseField('EventSubscription.Severity') as unknown as string;
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyEventSubscription.EventSubscription.Enabled'),
        outputPath: 'EventSubscription.Enabled',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          SourceIds: this.__input.sourceIds,
          EventCategories: this.__input.eventCategories,
          Severity: this.__input.severity,
          Enabled: this.__input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEventSubscription.EventSubscription.Enabled', props);
    return resource.getResponseField('EventSubscription.Enabled') as unknown as boolean;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyEventSubscription.EventSubscription.Tags'),
        outputPath: 'EventSubscription.Tags',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          SourceIds: this.__input.sourceIds,
          EventCategories: this.__input.eventCategories,
          Severity: this.__input.severity,
          Enabled: this.__input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEventSubscription.EventSubscription.Tags', props);
    return resource.getResponseField('EventSubscription.Tags') as unknown as shapes.RedshiftTag[];
  }

}

export class RedshiftResponsesModifyScheduledAction {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyScheduledActionMessage) {
  }

  public get scheduledActionName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyScheduledAction.ScheduledActionName'),
        outputPath: 'ScheduledActionName',
        parameters: {
          ScheduledActionName: this.__input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.__input.targetAction?.resizeCluster?.clusterIdentifier,
              ClusterType: this.__input.targetAction?.resizeCluster?.clusterType,
              NodeType: this.__input.targetAction?.resizeCluster?.nodeType,
              NumberOfNodes: this.__input.targetAction?.resizeCluster?.numberOfNodes,
              Classic: this.__input.targetAction?.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.__input.targetAction?.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.__input.targetAction?.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.__input.schedule,
          IamRole: this.__input.iamRole,
          ScheduledActionDescription: this.__input.scheduledActionDescription,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Enable: this.__input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyScheduledAction.ScheduledActionName', props);
    return resource.getResponseField('ScheduledActionName') as unknown as string;
  }

  public get targetAction(): RedshiftResponsesModifyScheduledActionTargetAction {
    return new RedshiftResponsesModifyScheduledActionTargetAction(this.__scope, this.__resources, this.__input);
  }

  public get schedule(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyScheduledAction.Schedule'),
        outputPath: 'Schedule',
        parameters: {
          ScheduledActionName: this.__input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.__input.targetAction?.resizeCluster?.clusterIdentifier,
              ClusterType: this.__input.targetAction?.resizeCluster?.clusterType,
              NodeType: this.__input.targetAction?.resizeCluster?.nodeType,
              NumberOfNodes: this.__input.targetAction?.resizeCluster?.numberOfNodes,
              Classic: this.__input.targetAction?.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.__input.targetAction?.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.__input.targetAction?.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.__input.schedule,
          IamRole: this.__input.iamRole,
          ScheduledActionDescription: this.__input.scheduledActionDescription,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Enable: this.__input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyScheduledAction.Schedule', props);
    return resource.getResponseField('Schedule') as unknown as string;
  }

  public get iamRole(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyScheduledAction.IamRole'),
        outputPath: 'IamRole',
        parameters: {
          ScheduledActionName: this.__input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.__input.targetAction?.resizeCluster?.clusterIdentifier,
              ClusterType: this.__input.targetAction?.resizeCluster?.clusterType,
              NodeType: this.__input.targetAction?.resizeCluster?.nodeType,
              NumberOfNodes: this.__input.targetAction?.resizeCluster?.numberOfNodes,
              Classic: this.__input.targetAction?.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.__input.targetAction?.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.__input.targetAction?.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.__input.schedule,
          IamRole: this.__input.iamRole,
          ScheduledActionDescription: this.__input.scheduledActionDescription,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Enable: this.__input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyScheduledAction.IamRole', props);
    return resource.getResponseField('IamRole') as unknown as string;
  }

  public get scheduledActionDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyScheduledAction.ScheduledActionDescription'),
        outputPath: 'ScheduledActionDescription',
        parameters: {
          ScheduledActionName: this.__input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.__input.targetAction?.resizeCluster?.clusterIdentifier,
              ClusterType: this.__input.targetAction?.resizeCluster?.clusterType,
              NodeType: this.__input.targetAction?.resizeCluster?.nodeType,
              NumberOfNodes: this.__input.targetAction?.resizeCluster?.numberOfNodes,
              Classic: this.__input.targetAction?.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.__input.targetAction?.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.__input.targetAction?.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.__input.schedule,
          IamRole: this.__input.iamRole,
          ScheduledActionDescription: this.__input.scheduledActionDescription,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Enable: this.__input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyScheduledAction.ScheduledActionDescription', props);
    return resource.getResponseField('ScheduledActionDescription') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyScheduledAction.State'),
        outputPath: 'State',
        parameters: {
          ScheduledActionName: this.__input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.__input.targetAction?.resizeCluster?.clusterIdentifier,
              ClusterType: this.__input.targetAction?.resizeCluster?.clusterType,
              NodeType: this.__input.targetAction?.resizeCluster?.nodeType,
              NumberOfNodes: this.__input.targetAction?.resizeCluster?.numberOfNodes,
              Classic: this.__input.targetAction?.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.__input.targetAction?.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.__input.targetAction?.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.__input.schedule,
          IamRole: this.__input.iamRole,
          ScheduledActionDescription: this.__input.scheduledActionDescription,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Enable: this.__input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyScheduledAction.State', props);
    return resource.getResponseField('State') as unknown as string;
  }

  public get nextInvocations(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyScheduledAction.NextInvocations'),
        outputPath: 'NextInvocations',
        parameters: {
          ScheduledActionName: this.__input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.__input.targetAction?.resizeCluster?.clusterIdentifier,
              ClusterType: this.__input.targetAction?.resizeCluster?.clusterType,
              NodeType: this.__input.targetAction?.resizeCluster?.nodeType,
              NumberOfNodes: this.__input.targetAction?.resizeCluster?.numberOfNodes,
              Classic: this.__input.targetAction?.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.__input.targetAction?.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.__input.targetAction?.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.__input.schedule,
          IamRole: this.__input.iamRole,
          ScheduledActionDescription: this.__input.scheduledActionDescription,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Enable: this.__input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyScheduledAction.NextInvocations', props);
    return resource.getResponseField('NextInvocations') as unknown as string[];
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyScheduledAction.StartTime'),
        outputPath: 'StartTime',
        parameters: {
          ScheduledActionName: this.__input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.__input.targetAction?.resizeCluster?.clusterIdentifier,
              ClusterType: this.__input.targetAction?.resizeCluster?.clusterType,
              NodeType: this.__input.targetAction?.resizeCluster?.nodeType,
              NumberOfNodes: this.__input.targetAction?.resizeCluster?.numberOfNodes,
              Classic: this.__input.targetAction?.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.__input.targetAction?.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.__input.targetAction?.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.__input.schedule,
          IamRole: this.__input.iamRole,
          ScheduledActionDescription: this.__input.scheduledActionDescription,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Enable: this.__input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyScheduledAction.StartTime', props);
    return resource.getResponseField('StartTime') as unknown as string;
  }

  public get endTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyScheduledAction.EndTime'),
        outputPath: 'EndTime',
        parameters: {
          ScheduledActionName: this.__input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.__input.targetAction?.resizeCluster?.clusterIdentifier,
              ClusterType: this.__input.targetAction?.resizeCluster?.clusterType,
              NodeType: this.__input.targetAction?.resizeCluster?.nodeType,
              NumberOfNodes: this.__input.targetAction?.resizeCluster?.numberOfNodes,
              Classic: this.__input.targetAction?.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.__input.targetAction?.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.__input.targetAction?.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.__input.schedule,
          IamRole: this.__input.iamRole,
          ScheduledActionDescription: this.__input.scheduledActionDescription,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Enable: this.__input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyScheduledAction.EndTime', props);
    return resource.getResponseField('EndTime') as unknown as string;
  }

}

export class RedshiftResponsesModifyScheduledActionTargetAction {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyScheduledActionMessage) {
  }

  public get resizeCluster(): RedshiftResponsesModifyScheduledActionTargetActionResizeCluster {
    return new RedshiftResponsesModifyScheduledActionTargetActionResizeCluster(this.__scope, this.__resources, this.__input);
  }

  public get pauseCluster(): RedshiftResponsesModifyScheduledActionTargetActionPauseCluster {
    return new RedshiftResponsesModifyScheduledActionTargetActionPauseCluster(this.__scope, this.__resources, this.__input);
  }

  public get resumeCluster(): RedshiftResponsesModifyScheduledActionTargetActionResumeCluster {
    return new RedshiftResponsesModifyScheduledActionTargetActionResumeCluster(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesModifyScheduledActionTargetActionResizeCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyScheduledActionMessage) {
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyScheduledAction.TargetAction.ResizeCluster.ClusterIdentifier'),
        outputPath: 'TargetAction.ResizeCluster.ClusterIdentifier',
        parameters: {
          ScheduledActionName: this.__input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.__input.targetAction?.resizeCluster?.clusterIdentifier,
              ClusterType: this.__input.targetAction?.resizeCluster?.clusterType,
              NodeType: this.__input.targetAction?.resizeCluster?.nodeType,
              NumberOfNodes: this.__input.targetAction?.resizeCluster?.numberOfNodes,
              Classic: this.__input.targetAction?.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.__input.targetAction?.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.__input.targetAction?.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.__input.schedule,
          IamRole: this.__input.iamRole,
          ScheduledActionDescription: this.__input.scheduledActionDescription,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Enable: this.__input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyScheduledAction.TargetAction.ResizeCluster.ClusterIdentifier', props);
    return resource.getResponseField('TargetAction.ResizeCluster.ClusterIdentifier') as unknown as string;
  }

  public get clusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyScheduledAction.TargetAction.ResizeCluster.ClusterType'),
        outputPath: 'TargetAction.ResizeCluster.ClusterType',
        parameters: {
          ScheduledActionName: this.__input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.__input.targetAction?.resizeCluster?.clusterIdentifier,
              ClusterType: this.__input.targetAction?.resizeCluster?.clusterType,
              NodeType: this.__input.targetAction?.resizeCluster?.nodeType,
              NumberOfNodes: this.__input.targetAction?.resizeCluster?.numberOfNodes,
              Classic: this.__input.targetAction?.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.__input.targetAction?.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.__input.targetAction?.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.__input.schedule,
          IamRole: this.__input.iamRole,
          ScheduledActionDescription: this.__input.scheduledActionDescription,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Enable: this.__input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyScheduledAction.TargetAction.ResizeCluster.ClusterType', props);
    return resource.getResponseField('TargetAction.ResizeCluster.ClusterType') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyScheduledAction.TargetAction.ResizeCluster.NodeType'),
        outputPath: 'TargetAction.ResizeCluster.NodeType',
        parameters: {
          ScheduledActionName: this.__input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.__input.targetAction?.resizeCluster?.clusterIdentifier,
              ClusterType: this.__input.targetAction?.resizeCluster?.clusterType,
              NodeType: this.__input.targetAction?.resizeCluster?.nodeType,
              NumberOfNodes: this.__input.targetAction?.resizeCluster?.numberOfNodes,
              Classic: this.__input.targetAction?.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.__input.targetAction?.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.__input.targetAction?.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.__input.schedule,
          IamRole: this.__input.iamRole,
          ScheduledActionDescription: this.__input.scheduledActionDescription,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Enable: this.__input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyScheduledAction.TargetAction.ResizeCluster.NodeType', props);
    return resource.getResponseField('TargetAction.ResizeCluster.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyScheduledAction.TargetAction.ResizeCluster.NumberOfNodes'),
        outputPath: 'TargetAction.ResizeCluster.NumberOfNodes',
        parameters: {
          ScheduledActionName: this.__input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.__input.targetAction?.resizeCluster?.clusterIdentifier,
              ClusterType: this.__input.targetAction?.resizeCluster?.clusterType,
              NodeType: this.__input.targetAction?.resizeCluster?.nodeType,
              NumberOfNodes: this.__input.targetAction?.resizeCluster?.numberOfNodes,
              Classic: this.__input.targetAction?.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.__input.targetAction?.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.__input.targetAction?.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.__input.schedule,
          IamRole: this.__input.iamRole,
          ScheduledActionDescription: this.__input.scheduledActionDescription,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Enable: this.__input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyScheduledAction.TargetAction.ResizeCluster.NumberOfNodes', props);
    return resource.getResponseField('TargetAction.ResizeCluster.NumberOfNodes') as unknown as number;
  }

  public get classic(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyScheduledAction.TargetAction.ResizeCluster.Classic'),
        outputPath: 'TargetAction.ResizeCluster.Classic',
        parameters: {
          ScheduledActionName: this.__input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.__input.targetAction?.resizeCluster?.clusterIdentifier,
              ClusterType: this.__input.targetAction?.resizeCluster?.clusterType,
              NodeType: this.__input.targetAction?.resizeCluster?.nodeType,
              NumberOfNodes: this.__input.targetAction?.resizeCluster?.numberOfNodes,
              Classic: this.__input.targetAction?.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.__input.targetAction?.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.__input.targetAction?.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.__input.schedule,
          IamRole: this.__input.iamRole,
          ScheduledActionDescription: this.__input.scheduledActionDescription,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Enable: this.__input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyScheduledAction.TargetAction.ResizeCluster.Classic', props);
    return resource.getResponseField('TargetAction.ResizeCluster.Classic') as unknown as boolean;
  }

}

export class RedshiftResponsesModifyScheduledActionTargetActionPauseCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyScheduledActionMessage) {
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyScheduledAction.TargetAction.PauseCluster.ClusterIdentifier'),
        outputPath: 'TargetAction.PauseCluster.ClusterIdentifier',
        parameters: {
          ScheduledActionName: this.__input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.__input.targetAction?.resizeCluster?.clusterIdentifier,
              ClusterType: this.__input.targetAction?.resizeCluster?.clusterType,
              NodeType: this.__input.targetAction?.resizeCluster?.nodeType,
              NumberOfNodes: this.__input.targetAction?.resizeCluster?.numberOfNodes,
              Classic: this.__input.targetAction?.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.__input.targetAction?.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.__input.targetAction?.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.__input.schedule,
          IamRole: this.__input.iamRole,
          ScheduledActionDescription: this.__input.scheduledActionDescription,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Enable: this.__input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyScheduledAction.TargetAction.PauseCluster.ClusterIdentifier', props);
    return resource.getResponseField('TargetAction.PauseCluster.ClusterIdentifier') as unknown as string;
  }

}

export class RedshiftResponsesModifyScheduledActionTargetActionResumeCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyScheduledActionMessage) {
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyScheduledAction',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyScheduledAction.TargetAction.ResumeCluster.ClusterIdentifier'),
        outputPath: 'TargetAction.ResumeCluster.ClusterIdentifier',
        parameters: {
          ScheduledActionName: this.__input.scheduledActionName,
          TargetAction: {
            ResizeCluster: {
              ClusterIdentifier: this.__input.targetAction?.resizeCluster?.clusterIdentifier,
              ClusterType: this.__input.targetAction?.resizeCluster?.clusterType,
              NodeType: this.__input.targetAction?.resizeCluster?.nodeType,
              NumberOfNodes: this.__input.targetAction?.resizeCluster?.numberOfNodes,
              Classic: this.__input.targetAction?.resizeCluster?.classic,
            },
            PauseCluster: {
              ClusterIdentifier: this.__input.targetAction?.pauseCluster?.clusterIdentifier,
            },
            ResumeCluster: {
              ClusterIdentifier: this.__input.targetAction?.resumeCluster?.clusterIdentifier,
            },
          },
          Schedule: this.__input.schedule,
          IamRole: this.__input.iamRole,
          ScheduledActionDescription: this.__input.scheduledActionDescription,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Enable: this.__input.enable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyScheduledAction.TargetAction.ResumeCluster.ClusterIdentifier', props);
    return resource.getResponseField('TargetAction.ResumeCluster.ClusterIdentifier') as unknown as string;
  }

}

export class RedshiftResponsesModifySnapshotCopyRetentionPeriod {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifySnapshotCopyRetentionPeriodMessage) {
  }

  public get cluster(): RedshiftResponsesModifySnapshotCopyRetentionPeriodCluster {
    return new RedshiftResponsesModifySnapshotCopyRetentionPeriodCluster(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesModifySnapshotCopyRetentionPeriodCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifySnapshotCopyRetentionPeriodMessage) {
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ClusterIdentifier'),
        outputPath: 'Cluster.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.ClusterIdentifier') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.NodeType'),
        outputPath: 'Cluster.NodeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.NodeType', props);
    return resource.getResponseField('Cluster.NodeType') as unknown as string;
  }

  public get clusterStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ClusterStatus'),
        outputPath: 'Cluster.ClusterStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.ClusterStatus', props);
    return resource.getResponseField('Cluster.ClusterStatus') as unknown as string;
  }

  public get clusterAvailabilityStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ClusterAvailabilityStatus'),
        outputPath: 'Cluster.ClusterAvailabilityStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.ClusterAvailabilityStatus', props);
    return resource.getResponseField('Cluster.ClusterAvailabilityStatus') as unknown as string;
  }

  public get modifyStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ModifyStatus'),
        outputPath: 'Cluster.ModifyStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.ModifyStatus', props);
    return resource.getResponseField('Cluster.ModifyStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.MasterUsername'),
        outputPath: 'Cluster.MasterUsername',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.MasterUsername', props);
    return resource.getResponseField('Cluster.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.DBName'),
        outputPath: 'Cluster.DBName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.DBName', props);
    return resource.getResponseField('Cluster.DBName') as unknown as string;
  }

  public get endpoint(): RedshiftResponsesModifySnapshotCopyRetentionPeriodClusterEndpoint {
    return new RedshiftResponsesModifySnapshotCopyRetentionPeriodClusterEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ClusterCreateTime'),
        outputPath: 'Cluster.ClusterCreateTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.ClusterCreateTime', props);
    return resource.getResponseField('Cluster.ClusterCreateTime') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterSecurityGroups(): shapes.RedshiftClusterSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ClusterSecurityGroups'),
        outputPath: 'Cluster.ClusterSecurityGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.ClusterSecurityGroups', props);
    return resource.getResponseField('Cluster.ClusterSecurityGroups') as unknown as shapes.RedshiftClusterSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RedshiftVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.VpcSecurityGroups'),
        outputPath: 'Cluster.VpcSecurityGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.VpcSecurityGroups', props);
    return resource.getResponseField('Cluster.VpcSecurityGroups') as unknown as shapes.RedshiftVpcSecurityGroupMembership[];
  }

  public get clusterParameterGroups(): shapes.RedshiftClusterParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ClusterParameterGroups'),
        outputPath: 'Cluster.ClusterParameterGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.ClusterParameterGroups', props);
    return resource.getResponseField('Cluster.ClusterParameterGroups') as unknown as shapes.RedshiftClusterParameterGroupStatus[];
  }

  public get clusterSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ClusterSubnetGroupName'),
        outputPath: 'Cluster.ClusterSubnetGroupName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.ClusterSubnetGroupName', props);
    return resource.getResponseField('Cluster.ClusterSubnetGroupName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.VpcId'),
        outputPath: 'Cluster.VpcId',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.VpcId', props);
    return resource.getResponseField('Cluster.VpcId') as unknown as string;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.AvailabilityZone'),
        outputPath: 'Cluster.AvailabilityZone',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.AvailabilityZone', props);
    return resource.getResponseField('Cluster.AvailabilityZone') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.PreferredMaintenanceWindow'),
        outputPath: 'Cluster.PreferredMaintenanceWindow',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('Cluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RedshiftResponsesModifySnapshotCopyRetentionPeriodClusterPendingModifiedValues {
    return new RedshiftResponsesModifySnapshotCopyRetentionPeriodClusterPendingModifiedValues(this.__scope, this.__resources, this.__input);
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ClusterVersion'),
        outputPath: 'Cluster.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.ClusterVersion', props);
    return resource.getResponseField('Cluster.ClusterVersion') as unknown as string;
  }

  public get allowVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.AllowVersionUpgrade'),
        outputPath: 'Cluster.AllowVersionUpgrade',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.AllowVersionUpgrade', props);
    return resource.getResponseField('Cluster.AllowVersionUpgrade') as unknown as boolean;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.NumberOfNodes'),
        outputPath: 'Cluster.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.NumberOfNodes', props);
    return resource.getResponseField('Cluster.NumberOfNodes') as unknown as number;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.PubliclyAccessible'),
        outputPath: 'Cluster.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PubliclyAccessible') as unknown as boolean;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.Encrypted'),
        outputPath: 'Cluster.Encrypted',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.Encrypted', props);
    return resource.getResponseField('Cluster.Encrypted') as unknown as boolean;
  }

  public get restoreStatus(): RedshiftResponsesModifySnapshotCopyRetentionPeriodClusterRestoreStatus {
    return new RedshiftResponsesModifySnapshotCopyRetentionPeriodClusterRestoreStatus(this.__scope, this.__resources, this.__input);
  }

  public get dataTransferProgress(): RedshiftResponsesModifySnapshotCopyRetentionPeriodClusterDataTransferProgress {
    return new RedshiftResponsesModifySnapshotCopyRetentionPeriodClusterDataTransferProgress(this.__scope, this.__resources, this.__input);
  }

  public get hsmStatus(): RedshiftResponsesModifySnapshotCopyRetentionPeriodClusterHsmStatus {
    return new RedshiftResponsesModifySnapshotCopyRetentionPeriodClusterHsmStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterSnapshotCopyStatus(): RedshiftResponsesModifySnapshotCopyRetentionPeriodClusterClusterSnapshotCopyStatus {
    return new RedshiftResponsesModifySnapshotCopyRetentionPeriodClusterClusterSnapshotCopyStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterPublicKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ClusterPublicKey'),
        outputPath: 'Cluster.ClusterPublicKey',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.ClusterPublicKey', props);
    return resource.getResponseField('Cluster.ClusterPublicKey') as unknown as string;
  }

  public get clusterNodes(): shapes.RedshiftClusterNode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ClusterNodes'),
        outputPath: 'Cluster.ClusterNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.ClusterNodes', props);
    return resource.getResponseField('Cluster.ClusterNodes') as unknown as shapes.RedshiftClusterNode[];
  }

  public get elasticIpStatus(): RedshiftResponsesModifySnapshotCopyRetentionPeriodClusterElasticIpStatus {
    return new RedshiftResponsesModifySnapshotCopyRetentionPeriodClusterElasticIpStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterRevisionNumber(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ClusterRevisionNumber'),
        outputPath: 'Cluster.ClusterRevisionNumber',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.ClusterRevisionNumber', props);
    return resource.getResponseField('Cluster.ClusterRevisionNumber') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.Tags'),
        outputPath: 'Cluster.Tags',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.Tags', props);
    return resource.getResponseField('Cluster.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.KmsKeyId'),
        outputPath: 'Cluster.KmsKeyId',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.KmsKeyId', props);
    return resource.getResponseField('Cluster.KmsKeyId') as unknown as string;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.EnhancedVpcRouting'),
        outputPath: 'Cluster.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.EnhancedVpcRouting') as unknown as boolean;
  }

  public get iamRoles(): shapes.RedshiftClusterIamRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.IamRoles'),
        outputPath: 'Cluster.IamRoles',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.IamRoles', props);
    return resource.getResponseField('Cluster.IamRoles') as unknown as shapes.RedshiftClusterIamRole[];
  }

  public get pendingActions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.PendingActions'),
        outputPath: 'Cluster.PendingActions',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.PendingActions', props);
    return resource.getResponseField('Cluster.PendingActions') as unknown as string[];
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.MaintenanceTrackName'),
        outputPath: 'Cluster.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.MaintenanceTrackName') as unknown as string;
  }

  public get elasticResizeNumberOfNodeOptions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ElasticResizeNumberOfNodeOptions'),
        outputPath: 'Cluster.ElasticResizeNumberOfNodeOptions',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.ElasticResizeNumberOfNodeOptions', props);
    return resource.getResponseField('Cluster.ElasticResizeNumberOfNodeOptions') as unknown as string;
  }

  public get deferredMaintenanceWindows(): shapes.RedshiftDeferredMaintenanceWindow[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.DeferredMaintenanceWindows'),
        outputPath: 'Cluster.DeferredMaintenanceWindows',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.DeferredMaintenanceWindows', props);
    return resource.getResponseField('Cluster.DeferredMaintenanceWindows') as unknown as shapes.RedshiftDeferredMaintenanceWindow[];
  }

  public get snapshotScheduleIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.SnapshotScheduleIdentifier'),
        outputPath: 'Cluster.SnapshotScheduleIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.SnapshotScheduleIdentifier', props);
    return resource.getResponseField('Cluster.SnapshotScheduleIdentifier') as unknown as string;
  }

  public get snapshotScheduleState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.SnapshotScheduleState'),
        outputPath: 'Cluster.SnapshotScheduleState',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.SnapshotScheduleState', props);
    return resource.getResponseField('Cluster.SnapshotScheduleState') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ExpectedNextSnapshotScheduleTime'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.ExpectedNextSnapshotScheduleTime', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTime') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTimeStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ExpectedNextSnapshotScheduleTimeStatus'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTimeStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.ExpectedNextSnapshotScheduleTimeStatus', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTimeStatus') as unknown as string;
  }

  public get nextMaintenanceWindowStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.NextMaintenanceWindowStartTime'),
        outputPath: 'Cluster.NextMaintenanceWindowStartTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.NextMaintenanceWindowStartTime', props);
    return resource.getResponseField('Cluster.NextMaintenanceWindowStartTime') as unknown as string;
  }

  public get resizeInfo(): RedshiftResponsesModifySnapshotCopyRetentionPeriodClusterResizeInfo {
    return new RedshiftResponsesModifySnapshotCopyRetentionPeriodClusterResizeInfo(this.__scope, this.__resources, this.__input);
  }

  public get availabilityZoneRelocationStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.AvailabilityZoneRelocationStatus'),
        outputPath: 'Cluster.AvailabilityZoneRelocationStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.AvailabilityZoneRelocationStatus', props);
    return resource.getResponseField('Cluster.AvailabilityZoneRelocationStatus') as unknown as string;
  }

  public get clusterNamespaceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ClusterNamespaceArn'),
        outputPath: 'Cluster.ClusterNamespaceArn',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.ClusterNamespaceArn', props);
    return resource.getResponseField('Cluster.ClusterNamespaceArn') as unknown as string;
  }

  public get totalStorageCapacityInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.TotalStorageCapacityInMegaBytes'),
        outputPath: 'Cluster.TotalStorageCapacityInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.TotalStorageCapacityInMegaBytes', props);
    return resource.getResponseField('Cluster.TotalStorageCapacityInMegaBytes') as unknown as number;
  }

  public get aquaConfiguration(): RedshiftResponsesModifySnapshotCopyRetentionPeriodClusterAquaConfiguration {
    return new RedshiftResponsesModifySnapshotCopyRetentionPeriodClusterAquaConfiguration(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesModifySnapshotCopyRetentionPeriodClusterEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifySnapshotCopyRetentionPeriodMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.Endpoint.Address'),
        outputPath: 'Cluster.Endpoint.Address',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.Endpoint.Address', props);
    return resource.getResponseField('Cluster.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.Endpoint.Port'),
        outputPath: 'Cluster.Endpoint.Port',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.Endpoint.Port', props);
    return resource.getResponseField('Cluster.Endpoint.Port') as unknown as number;
  }

  public get vpcEndpoints(): shapes.RedshiftVpcEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.Endpoint.VpcEndpoints'),
        outputPath: 'Cluster.Endpoint.VpcEndpoints',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.Endpoint.VpcEndpoints', props);
    return resource.getResponseField('Cluster.Endpoint.VpcEndpoints') as unknown as shapes.RedshiftVpcEndpoint[];
  }

}

export class RedshiftResponsesModifySnapshotCopyRetentionPeriodClusterPendingModifiedValues {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifySnapshotCopyRetentionPeriodMessage) {
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'Cluster.PendingModifiedValues.MasterUserPassword',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.NodeType'),
        outputPath: 'Cluster.PendingModifiedValues.NodeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.NodeType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.NumberOfNodes'),
        outputPath: 'Cluster.PendingModifiedValues.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.NumberOfNodes', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NumberOfNodes') as unknown as number;
  }

  public get clusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.ClusterType'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.ClusterType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterType') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.ClusterVersion'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.ClusterVersion', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterVersion') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.ClusterIdentifier'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterIdentifier') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.PubliclyAccessible'),
        outputPath: 'Cluster.PendingModifiedValues.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.PubliclyAccessible') as unknown as boolean;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.EnhancedVpcRouting'),
        outputPath: 'Cluster.PendingModifiedValues.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.MaintenanceTrackName'),
        outputPath: 'Cluster.PendingModifiedValues.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MaintenanceTrackName') as unknown as string;
  }

  public get encryptionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.EncryptionType'),
        outputPath: 'Cluster.PendingModifiedValues.EncryptionType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.PendingModifiedValues.EncryptionType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EncryptionType') as unknown as string;
  }

}

export class RedshiftResponsesModifySnapshotCopyRetentionPeriodClusterRestoreStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifySnapshotCopyRetentionPeriodMessage) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.RestoreStatus.Status'),
        outputPath: 'Cluster.RestoreStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.RestoreStatus.Status', props);
    return resource.getResponseField('Cluster.RestoreStatus.Status') as unknown as string;
  }

  public get currentRestoreRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond') as unknown as number;
  }

  public get snapshotSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.RestoreStatus.SnapshotSizeInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.SnapshotSizeInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.RestoreStatus.SnapshotSizeInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.SnapshotSizeInMegaBytes') as unknown as number;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.RestoreStatus.ProgressInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.ProgressInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.RestoreStatus.ProgressInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.ProgressInMegaBytes') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.RestoreStatus.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.RestoreStatus.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.RestoreStatus.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.ElapsedTimeInSeconds') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

}

export class RedshiftResponsesModifySnapshotCopyRetentionPeriodClusterDataTransferProgress {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifySnapshotCopyRetentionPeriodMessage) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.DataTransferProgress.Status'),
        outputPath: 'Cluster.DataTransferProgress.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.DataTransferProgress.Status', props);
    return resource.getResponseField('Cluster.DataTransferProgress.Status') as unknown as string;
  }

  public get currentRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond') as unknown as number;
  }

  public get totalDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.DataTransferProgress.TotalDataInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.TotalDataInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.DataTransferProgress.TotalDataInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.TotalDataInMegaBytes') as unknown as number;
  }

  public get dataTransferredInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.DataTransferProgress.DataTransferredInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.DataTransferredInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.DataTransferProgress.DataTransferredInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.DataTransferredInMegaBytes') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.DataTransferProgress.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.DataTransferProgress.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.ElapsedTimeInSeconds') as unknown as number;
  }

}

export class RedshiftResponsesModifySnapshotCopyRetentionPeriodClusterHsmStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifySnapshotCopyRetentionPeriodMessage) {
  }

  public get hsmClientCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.HsmStatus.HsmClientCertificateIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmClientCertificateIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.HsmStatus.HsmClientCertificateIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmClientCertificateIdentifier') as unknown as string;
  }

  public get hsmConfigurationIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.HsmStatus.HsmConfigurationIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmConfigurationIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.HsmStatus.HsmConfigurationIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmConfigurationIdentifier') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.HsmStatus.Status'),
        outputPath: 'Cluster.HsmStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.HsmStatus.Status', props);
    return resource.getResponseField('Cluster.HsmStatus.Status') as unknown as string;
  }

}

export class RedshiftResponsesModifySnapshotCopyRetentionPeriodClusterClusterSnapshotCopyStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifySnapshotCopyRetentionPeriodMessage) {
  }

  public get destinationRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ClusterSnapshotCopyStatus.DestinationRegion'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.DestinationRegion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.ClusterSnapshotCopyStatus.DestinationRegion', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.DestinationRegion') as unknown as string;
  }

  public get retentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.RetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.RetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get snapshotCopyGrantName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName') as unknown as string;
  }

}

export class RedshiftResponsesModifySnapshotCopyRetentionPeriodClusterElasticIpStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifySnapshotCopyRetentionPeriodMessage) {
  }

  public get elasticIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ElasticIpStatus.ElasticIp'),
        outputPath: 'Cluster.ElasticIpStatus.ElasticIp',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.ElasticIpStatus.ElasticIp', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.ElasticIp') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ElasticIpStatus.Status'),
        outputPath: 'Cluster.ElasticIpStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.ElasticIpStatus.Status', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.Status') as unknown as string;
  }

}

export class RedshiftResponsesModifySnapshotCopyRetentionPeriodClusterResizeInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifySnapshotCopyRetentionPeriodMessage) {
  }

  public get resizeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ResizeInfo.ResizeType'),
        outputPath: 'Cluster.ResizeInfo.ResizeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.ResizeInfo.ResizeType', props);
    return resource.getResponseField('Cluster.ResizeInfo.ResizeType') as unknown as string;
  }

  public get allowCancelResize(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.ResizeInfo.AllowCancelResize'),
        outputPath: 'Cluster.ResizeInfo.AllowCancelResize',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.ResizeInfo.AllowCancelResize', props);
    return resource.getResponseField('Cluster.ResizeInfo.AllowCancelResize') as unknown as boolean;
  }

}

export class RedshiftResponsesModifySnapshotCopyRetentionPeriodClusterAquaConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifySnapshotCopyRetentionPeriodMessage) {
  }

  public get aquaStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.AquaConfiguration.AquaStatus'),
        outputPath: 'Cluster.AquaConfiguration.AquaStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.AquaConfiguration.AquaStatus', props);
    return resource.getResponseField('Cluster.AquaConfiguration.AquaStatus') as unknown as string;
  }

  public get aquaConfigurationStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotCopyRetentionPeriod',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotCopyRetentionPeriod.Cluster.AquaConfiguration.AquaConfigurationStatus'),
        outputPath: 'Cluster.AquaConfiguration.AquaConfigurationStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          RetentionPeriod: this.__input.retentionPeriod,
          Manual: this.__input.manual,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotCopyRetentionPeriod.Cluster.AquaConfiguration.AquaConfigurationStatus', props);
    return resource.getResponseField('Cluster.AquaConfiguration.AquaConfigurationStatus') as unknown as string;
  }

}

export class RedshiftResponsesModifySnapshotSchedule {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifySnapshotScheduleMessage) {
  }

  public get scheduleDefinitions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotSchedule',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotSchedule.ScheduleDefinitions'),
        outputPath: 'ScheduleDefinitions',
        parameters: {
          ScheduleIdentifier: this.__input.scheduleIdentifier,
          ScheduleDefinitions: this.__input.scheduleDefinitions,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotSchedule.ScheduleDefinitions', props);
    return resource.getResponseField('ScheduleDefinitions') as unknown as string[];
  }

  public get scheduleIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotSchedule',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotSchedule.ScheduleIdentifier'),
        outputPath: 'ScheduleIdentifier',
        parameters: {
          ScheduleIdentifier: this.__input.scheduleIdentifier,
          ScheduleDefinitions: this.__input.scheduleDefinitions,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotSchedule.ScheduleIdentifier', props);
    return resource.getResponseField('ScheduleIdentifier') as unknown as string;
  }

  public get scheduleDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotSchedule',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotSchedule.ScheduleDescription'),
        outputPath: 'ScheduleDescription',
        parameters: {
          ScheduleIdentifier: this.__input.scheduleIdentifier,
          ScheduleDefinitions: this.__input.scheduleDefinitions,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotSchedule.ScheduleDescription', props);
    return resource.getResponseField('ScheduleDescription') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotSchedule',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotSchedule.Tags'),
        outputPath: 'Tags',
        parameters: {
          ScheduleIdentifier: this.__input.scheduleIdentifier,
          ScheduleDefinitions: this.__input.scheduleDefinitions,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotSchedule.Tags', props);
    return resource.getResponseField('Tags') as unknown as shapes.RedshiftTag[];
  }

  public get nextInvocations(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotSchedule',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotSchedule.NextInvocations'),
        outputPath: 'NextInvocations',
        parameters: {
          ScheduleIdentifier: this.__input.scheduleIdentifier,
          ScheduleDefinitions: this.__input.scheduleDefinitions,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotSchedule.NextInvocations', props);
    return resource.getResponseField('NextInvocations') as unknown as string[];
  }

  public get associatedClusterCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotSchedule',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotSchedule.AssociatedClusterCount'),
        outputPath: 'AssociatedClusterCount',
        parameters: {
          ScheduleIdentifier: this.__input.scheduleIdentifier,
          ScheduleDefinitions: this.__input.scheduleDefinitions,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotSchedule.AssociatedClusterCount', props);
    return resource.getResponseField('AssociatedClusterCount') as unknown as number;
  }

  public get associatedClusters(): shapes.RedshiftClusterAssociatedToSchedule[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotSchedule',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifySnapshotSchedule.AssociatedClusters'),
        outputPath: 'AssociatedClusters',
        parameters: {
          ScheduleIdentifier: this.__input.scheduleIdentifier,
          ScheduleDefinitions: this.__input.scheduleDefinitions,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySnapshotSchedule.AssociatedClusters', props);
    return resource.getResponseField('AssociatedClusters') as unknown as shapes.RedshiftClusterAssociatedToSchedule[];
  }

}

export class RedshiftResponsesModifyUsageLimit {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftModifyUsageLimitMessage) {
  }

  public get usageLimitId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyUsageLimit',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyUsageLimit.UsageLimitId'),
        outputPath: 'UsageLimitId',
        parameters: {
          UsageLimitId: this.__input.usageLimitId,
          Amount: this.__input.amount,
          BreachAction: this.__input.breachAction,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyUsageLimit.UsageLimitId', props);
    return resource.getResponseField('UsageLimitId') as unknown as string;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyUsageLimit',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyUsageLimit.ClusterIdentifier'),
        outputPath: 'ClusterIdentifier',
        parameters: {
          UsageLimitId: this.__input.usageLimitId,
          Amount: this.__input.amount,
          BreachAction: this.__input.breachAction,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyUsageLimit.ClusterIdentifier', props);
    return resource.getResponseField('ClusterIdentifier') as unknown as string;
  }

  public get featureType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyUsageLimit',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyUsageLimit.FeatureType'),
        outputPath: 'FeatureType',
        parameters: {
          UsageLimitId: this.__input.usageLimitId,
          Amount: this.__input.amount,
          BreachAction: this.__input.breachAction,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyUsageLimit.FeatureType', props);
    return resource.getResponseField('FeatureType') as unknown as string;
  }

  public get limitType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyUsageLimit',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyUsageLimit.LimitType'),
        outputPath: 'LimitType',
        parameters: {
          UsageLimitId: this.__input.usageLimitId,
          Amount: this.__input.amount,
          BreachAction: this.__input.breachAction,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyUsageLimit.LimitType', props);
    return resource.getResponseField('LimitType') as unknown as string;
  }

  public get amount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyUsageLimit',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyUsageLimit.Amount'),
        outputPath: 'Amount',
        parameters: {
          UsageLimitId: this.__input.usageLimitId,
          Amount: this.__input.amount,
          BreachAction: this.__input.breachAction,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyUsageLimit.Amount', props);
    return resource.getResponseField('Amount') as unknown as number;
  }

  public get period(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyUsageLimit',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyUsageLimit.Period'),
        outputPath: 'Period',
        parameters: {
          UsageLimitId: this.__input.usageLimitId,
          Amount: this.__input.amount,
          BreachAction: this.__input.breachAction,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyUsageLimit.Period', props);
    return resource.getResponseField('Period') as unknown as string;
  }

  public get breachAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyUsageLimit',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyUsageLimit.BreachAction'),
        outputPath: 'BreachAction',
        parameters: {
          UsageLimitId: this.__input.usageLimitId,
          Amount: this.__input.amount,
          BreachAction: this.__input.breachAction,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyUsageLimit.BreachAction', props);
    return resource.getResponseField('BreachAction') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyUsageLimit',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ModifyUsageLimit.Tags'),
        outputPath: 'Tags',
        parameters: {
          UsageLimitId: this.__input.usageLimitId,
          Amount: this.__input.amount,
          BreachAction: this.__input.breachAction,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyUsageLimit.Tags', props);
    return resource.getResponseField('Tags') as unknown as shapes.RedshiftTag[];
  }

}

export class RedshiftResponsesPauseCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftPauseClusterMessage) {
  }

  public get cluster(): RedshiftResponsesPauseClusterCluster {
    return new RedshiftResponsesPauseClusterCluster(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesPauseClusterCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftPauseClusterMessage) {
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ClusterIdentifier'),
        outputPath: 'Cluster.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.ClusterIdentifier') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.NodeType'),
        outputPath: 'Cluster.NodeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.NodeType', props);
    return resource.getResponseField('Cluster.NodeType') as unknown as string;
  }

  public get clusterStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ClusterStatus'),
        outputPath: 'Cluster.ClusterStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.ClusterStatus', props);
    return resource.getResponseField('Cluster.ClusterStatus') as unknown as string;
  }

  public get clusterAvailabilityStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ClusterAvailabilityStatus'),
        outputPath: 'Cluster.ClusterAvailabilityStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.ClusterAvailabilityStatus', props);
    return resource.getResponseField('Cluster.ClusterAvailabilityStatus') as unknown as string;
  }

  public get modifyStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ModifyStatus'),
        outputPath: 'Cluster.ModifyStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.ModifyStatus', props);
    return resource.getResponseField('Cluster.ModifyStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.MasterUsername'),
        outputPath: 'Cluster.MasterUsername',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.MasterUsername', props);
    return resource.getResponseField('Cluster.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.DBName'),
        outputPath: 'Cluster.DBName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.DBName', props);
    return resource.getResponseField('Cluster.DBName') as unknown as string;
  }

  public get endpoint(): RedshiftResponsesPauseClusterClusterEndpoint {
    return new RedshiftResponsesPauseClusterClusterEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ClusterCreateTime'),
        outputPath: 'Cluster.ClusterCreateTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.ClusterCreateTime', props);
    return resource.getResponseField('Cluster.ClusterCreateTime') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterSecurityGroups(): shapes.RedshiftClusterSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ClusterSecurityGroups'),
        outputPath: 'Cluster.ClusterSecurityGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.ClusterSecurityGroups', props);
    return resource.getResponseField('Cluster.ClusterSecurityGroups') as unknown as shapes.RedshiftClusterSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RedshiftVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.VpcSecurityGroups'),
        outputPath: 'Cluster.VpcSecurityGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.VpcSecurityGroups', props);
    return resource.getResponseField('Cluster.VpcSecurityGroups') as unknown as shapes.RedshiftVpcSecurityGroupMembership[];
  }

  public get clusterParameterGroups(): shapes.RedshiftClusterParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ClusterParameterGroups'),
        outputPath: 'Cluster.ClusterParameterGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.ClusterParameterGroups', props);
    return resource.getResponseField('Cluster.ClusterParameterGroups') as unknown as shapes.RedshiftClusterParameterGroupStatus[];
  }

  public get clusterSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ClusterSubnetGroupName'),
        outputPath: 'Cluster.ClusterSubnetGroupName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.ClusterSubnetGroupName', props);
    return resource.getResponseField('Cluster.ClusterSubnetGroupName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.VpcId'),
        outputPath: 'Cluster.VpcId',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.VpcId', props);
    return resource.getResponseField('Cluster.VpcId') as unknown as string;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.AvailabilityZone'),
        outputPath: 'Cluster.AvailabilityZone',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.AvailabilityZone', props);
    return resource.getResponseField('Cluster.AvailabilityZone') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.PreferredMaintenanceWindow'),
        outputPath: 'Cluster.PreferredMaintenanceWindow',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('Cluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RedshiftResponsesPauseClusterClusterPendingModifiedValues {
    return new RedshiftResponsesPauseClusterClusterPendingModifiedValues(this.__scope, this.__resources, this.__input);
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ClusterVersion'),
        outputPath: 'Cluster.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.ClusterVersion', props);
    return resource.getResponseField('Cluster.ClusterVersion') as unknown as string;
  }

  public get allowVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.AllowVersionUpgrade'),
        outputPath: 'Cluster.AllowVersionUpgrade',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.AllowVersionUpgrade', props);
    return resource.getResponseField('Cluster.AllowVersionUpgrade') as unknown as boolean;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.NumberOfNodes'),
        outputPath: 'Cluster.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.NumberOfNodes', props);
    return resource.getResponseField('Cluster.NumberOfNodes') as unknown as number;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.PubliclyAccessible'),
        outputPath: 'Cluster.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PubliclyAccessible') as unknown as boolean;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.Encrypted'),
        outputPath: 'Cluster.Encrypted',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.Encrypted', props);
    return resource.getResponseField('Cluster.Encrypted') as unknown as boolean;
  }

  public get restoreStatus(): RedshiftResponsesPauseClusterClusterRestoreStatus {
    return new RedshiftResponsesPauseClusterClusterRestoreStatus(this.__scope, this.__resources, this.__input);
  }

  public get dataTransferProgress(): RedshiftResponsesPauseClusterClusterDataTransferProgress {
    return new RedshiftResponsesPauseClusterClusterDataTransferProgress(this.__scope, this.__resources, this.__input);
  }

  public get hsmStatus(): RedshiftResponsesPauseClusterClusterHsmStatus {
    return new RedshiftResponsesPauseClusterClusterHsmStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterSnapshotCopyStatus(): RedshiftResponsesPauseClusterClusterClusterSnapshotCopyStatus {
    return new RedshiftResponsesPauseClusterClusterClusterSnapshotCopyStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterPublicKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ClusterPublicKey'),
        outputPath: 'Cluster.ClusterPublicKey',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.ClusterPublicKey', props);
    return resource.getResponseField('Cluster.ClusterPublicKey') as unknown as string;
  }

  public get clusterNodes(): shapes.RedshiftClusterNode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ClusterNodes'),
        outputPath: 'Cluster.ClusterNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.ClusterNodes', props);
    return resource.getResponseField('Cluster.ClusterNodes') as unknown as shapes.RedshiftClusterNode[];
  }

  public get elasticIpStatus(): RedshiftResponsesPauseClusterClusterElasticIpStatus {
    return new RedshiftResponsesPauseClusterClusterElasticIpStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterRevisionNumber(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ClusterRevisionNumber'),
        outputPath: 'Cluster.ClusterRevisionNumber',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.ClusterRevisionNumber', props);
    return resource.getResponseField('Cluster.ClusterRevisionNumber') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.Tags'),
        outputPath: 'Cluster.Tags',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.Tags', props);
    return resource.getResponseField('Cluster.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.KmsKeyId'),
        outputPath: 'Cluster.KmsKeyId',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.KmsKeyId', props);
    return resource.getResponseField('Cluster.KmsKeyId') as unknown as string;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.EnhancedVpcRouting'),
        outputPath: 'Cluster.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.EnhancedVpcRouting') as unknown as boolean;
  }

  public get iamRoles(): shapes.RedshiftClusterIamRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.IamRoles'),
        outputPath: 'Cluster.IamRoles',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.IamRoles', props);
    return resource.getResponseField('Cluster.IamRoles') as unknown as shapes.RedshiftClusterIamRole[];
  }

  public get pendingActions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.PendingActions'),
        outputPath: 'Cluster.PendingActions',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.PendingActions', props);
    return resource.getResponseField('Cluster.PendingActions') as unknown as string[];
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.MaintenanceTrackName'),
        outputPath: 'Cluster.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.MaintenanceTrackName') as unknown as string;
  }

  public get elasticResizeNumberOfNodeOptions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ElasticResizeNumberOfNodeOptions'),
        outputPath: 'Cluster.ElasticResizeNumberOfNodeOptions',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.ElasticResizeNumberOfNodeOptions', props);
    return resource.getResponseField('Cluster.ElasticResizeNumberOfNodeOptions') as unknown as string;
  }

  public get deferredMaintenanceWindows(): shapes.RedshiftDeferredMaintenanceWindow[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.DeferredMaintenanceWindows'),
        outputPath: 'Cluster.DeferredMaintenanceWindows',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.DeferredMaintenanceWindows', props);
    return resource.getResponseField('Cluster.DeferredMaintenanceWindows') as unknown as shapes.RedshiftDeferredMaintenanceWindow[];
  }

  public get snapshotScheduleIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.SnapshotScheduleIdentifier'),
        outputPath: 'Cluster.SnapshotScheduleIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.SnapshotScheduleIdentifier', props);
    return resource.getResponseField('Cluster.SnapshotScheduleIdentifier') as unknown as string;
  }

  public get snapshotScheduleState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.SnapshotScheduleState'),
        outputPath: 'Cluster.SnapshotScheduleState',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.SnapshotScheduleState', props);
    return resource.getResponseField('Cluster.SnapshotScheduleState') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ExpectedNextSnapshotScheduleTime'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.ExpectedNextSnapshotScheduleTime', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTime') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTimeStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ExpectedNextSnapshotScheduleTimeStatus'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTimeStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.ExpectedNextSnapshotScheduleTimeStatus', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTimeStatus') as unknown as string;
  }

  public get nextMaintenanceWindowStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.NextMaintenanceWindowStartTime'),
        outputPath: 'Cluster.NextMaintenanceWindowStartTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.NextMaintenanceWindowStartTime', props);
    return resource.getResponseField('Cluster.NextMaintenanceWindowStartTime') as unknown as string;
  }

  public get resizeInfo(): RedshiftResponsesPauseClusterClusterResizeInfo {
    return new RedshiftResponsesPauseClusterClusterResizeInfo(this.__scope, this.__resources, this.__input);
  }

  public get availabilityZoneRelocationStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.AvailabilityZoneRelocationStatus'),
        outputPath: 'Cluster.AvailabilityZoneRelocationStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.AvailabilityZoneRelocationStatus', props);
    return resource.getResponseField('Cluster.AvailabilityZoneRelocationStatus') as unknown as string;
  }

  public get clusterNamespaceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ClusterNamespaceArn'),
        outputPath: 'Cluster.ClusterNamespaceArn',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.ClusterNamespaceArn', props);
    return resource.getResponseField('Cluster.ClusterNamespaceArn') as unknown as string;
  }

  public get totalStorageCapacityInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.TotalStorageCapacityInMegaBytes'),
        outputPath: 'Cluster.TotalStorageCapacityInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.TotalStorageCapacityInMegaBytes', props);
    return resource.getResponseField('Cluster.TotalStorageCapacityInMegaBytes') as unknown as number;
  }

  public get aquaConfiguration(): RedshiftResponsesPauseClusterClusterAquaConfiguration {
    return new RedshiftResponsesPauseClusterClusterAquaConfiguration(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesPauseClusterClusterEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftPauseClusterMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.Endpoint.Address'),
        outputPath: 'Cluster.Endpoint.Address',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.Endpoint.Address', props);
    return resource.getResponseField('Cluster.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.Endpoint.Port'),
        outputPath: 'Cluster.Endpoint.Port',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.Endpoint.Port', props);
    return resource.getResponseField('Cluster.Endpoint.Port') as unknown as number;
  }

  public get vpcEndpoints(): shapes.RedshiftVpcEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.Endpoint.VpcEndpoints'),
        outputPath: 'Cluster.Endpoint.VpcEndpoints',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.Endpoint.VpcEndpoints', props);
    return resource.getResponseField('Cluster.Endpoint.VpcEndpoints') as unknown as shapes.RedshiftVpcEndpoint[];
  }

}

export class RedshiftResponsesPauseClusterClusterPendingModifiedValues {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftPauseClusterMessage) {
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'Cluster.PendingModifiedValues.MasterUserPassword',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.PendingModifiedValues.NodeType'),
        outputPath: 'Cluster.PendingModifiedValues.NodeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.PendingModifiedValues.NodeType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.PendingModifiedValues.NumberOfNodes'),
        outputPath: 'Cluster.PendingModifiedValues.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.PendingModifiedValues.NumberOfNodes', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NumberOfNodes') as unknown as number;
  }

  public get clusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.PendingModifiedValues.ClusterType'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.PendingModifiedValues.ClusterType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterType') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.PendingModifiedValues.ClusterVersion'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.PendingModifiedValues.ClusterVersion', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterVersion') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.PendingModifiedValues.ClusterIdentifier'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.PendingModifiedValues.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterIdentifier') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.PendingModifiedValues.PubliclyAccessible'),
        outputPath: 'Cluster.PendingModifiedValues.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.PendingModifiedValues.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.PubliclyAccessible') as unknown as boolean;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.PendingModifiedValues.EnhancedVpcRouting'),
        outputPath: 'Cluster.PendingModifiedValues.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.PendingModifiedValues.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.PendingModifiedValues.MaintenanceTrackName'),
        outputPath: 'Cluster.PendingModifiedValues.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.PendingModifiedValues.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MaintenanceTrackName') as unknown as string;
  }

  public get encryptionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.PendingModifiedValues.EncryptionType'),
        outputPath: 'Cluster.PendingModifiedValues.EncryptionType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.PendingModifiedValues.EncryptionType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EncryptionType') as unknown as string;
  }

}

export class RedshiftResponsesPauseClusterClusterRestoreStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftPauseClusterMessage) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.RestoreStatus.Status'),
        outputPath: 'Cluster.RestoreStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.RestoreStatus.Status', props);
    return resource.getResponseField('Cluster.RestoreStatus.Status') as unknown as string;
  }

  public get currentRestoreRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond') as unknown as number;
  }

  public get snapshotSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.RestoreStatus.SnapshotSizeInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.SnapshotSizeInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.RestoreStatus.SnapshotSizeInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.SnapshotSizeInMegaBytes') as unknown as number;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.RestoreStatus.ProgressInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.ProgressInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.RestoreStatus.ProgressInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.ProgressInMegaBytes') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.RestoreStatus.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.RestoreStatus.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.RestoreStatus.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.ElapsedTimeInSeconds') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

}

export class RedshiftResponsesPauseClusterClusterDataTransferProgress {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftPauseClusterMessage) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.DataTransferProgress.Status'),
        outputPath: 'Cluster.DataTransferProgress.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.DataTransferProgress.Status', props);
    return resource.getResponseField('Cluster.DataTransferProgress.Status') as unknown as string;
  }

  public get currentRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond') as unknown as number;
  }

  public get totalDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.DataTransferProgress.TotalDataInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.TotalDataInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.DataTransferProgress.TotalDataInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.TotalDataInMegaBytes') as unknown as number;
  }

  public get dataTransferredInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.DataTransferProgress.DataTransferredInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.DataTransferredInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.DataTransferProgress.DataTransferredInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.DataTransferredInMegaBytes') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.DataTransferProgress.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.DataTransferProgress.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.ElapsedTimeInSeconds') as unknown as number;
  }

}

export class RedshiftResponsesPauseClusterClusterHsmStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftPauseClusterMessage) {
  }

  public get hsmClientCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.HsmStatus.HsmClientCertificateIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmClientCertificateIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.HsmStatus.HsmClientCertificateIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmClientCertificateIdentifier') as unknown as string;
  }

  public get hsmConfigurationIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.HsmStatus.HsmConfigurationIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmConfigurationIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.HsmStatus.HsmConfigurationIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmConfigurationIdentifier') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.HsmStatus.Status'),
        outputPath: 'Cluster.HsmStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.HsmStatus.Status', props);
    return resource.getResponseField('Cluster.HsmStatus.Status') as unknown as string;
  }

}

export class RedshiftResponsesPauseClusterClusterClusterSnapshotCopyStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftPauseClusterMessage) {
  }

  public get destinationRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ClusterSnapshotCopyStatus.DestinationRegion'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.DestinationRegion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.ClusterSnapshotCopyStatus.DestinationRegion', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.DestinationRegion') as unknown as string;
  }

  public get retentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.RetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.RetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get snapshotCopyGrantName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName') as unknown as string;
  }

}

export class RedshiftResponsesPauseClusterClusterElasticIpStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftPauseClusterMessage) {
  }

  public get elasticIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ElasticIpStatus.ElasticIp'),
        outputPath: 'Cluster.ElasticIpStatus.ElasticIp',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.ElasticIpStatus.ElasticIp', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.ElasticIp') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ElasticIpStatus.Status'),
        outputPath: 'Cluster.ElasticIpStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.ElasticIpStatus.Status', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.Status') as unknown as string;
  }

}

export class RedshiftResponsesPauseClusterClusterResizeInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftPauseClusterMessage) {
  }

  public get resizeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ResizeInfo.ResizeType'),
        outputPath: 'Cluster.ResizeInfo.ResizeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.ResizeInfo.ResizeType', props);
    return resource.getResponseField('Cluster.ResizeInfo.ResizeType') as unknown as string;
  }

  public get allowCancelResize(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.ResizeInfo.AllowCancelResize'),
        outputPath: 'Cluster.ResizeInfo.AllowCancelResize',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.ResizeInfo.AllowCancelResize', props);
    return resource.getResponseField('Cluster.ResizeInfo.AllowCancelResize') as unknown as boolean;
  }

}

export class RedshiftResponsesPauseClusterClusterAquaConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftPauseClusterMessage) {
  }

  public get aquaStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.AquaConfiguration.AquaStatus'),
        outputPath: 'Cluster.AquaConfiguration.AquaStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.AquaConfiguration.AquaStatus', props);
    return resource.getResponseField('Cluster.AquaConfiguration.AquaStatus') as unknown as string;
  }

  public get aquaConfigurationStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'pauseCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PauseCluster.Cluster.AquaConfiguration.AquaConfigurationStatus'),
        outputPath: 'Cluster.AquaConfiguration.AquaConfigurationStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PauseCluster.Cluster.AquaConfiguration.AquaConfigurationStatus', props);
    return resource.getResponseField('Cluster.AquaConfiguration.AquaConfigurationStatus') as unknown as string;
  }

}

export class RedshiftResponsesPurchaseReservedNodeOffering {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftPurchaseReservedNodeOfferingMessage) {
  }

  public get reservedNode(): RedshiftResponsesPurchaseReservedNodeOfferingReservedNode {
    return new RedshiftResponsesPurchaseReservedNodeOfferingReservedNode(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesPurchaseReservedNodeOfferingReservedNode {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftPurchaseReservedNodeOfferingMessage) {
  }

  public get reservedNodeId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedNodeOffering',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PurchaseReservedNodeOffering.ReservedNode.ReservedNodeId'),
        outputPath: 'ReservedNode.ReservedNodeId',
        parameters: {
          ReservedNodeOfferingId: this.__input.reservedNodeOfferingId,
          NodeCount: this.__input.nodeCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseReservedNodeOffering.ReservedNode.ReservedNodeId', props);
    return resource.getResponseField('ReservedNode.ReservedNodeId') as unknown as string;
  }

  public get reservedNodeOfferingId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedNodeOffering',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PurchaseReservedNodeOffering.ReservedNode.ReservedNodeOfferingId'),
        outputPath: 'ReservedNode.ReservedNodeOfferingId',
        parameters: {
          ReservedNodeOfferingId: this.__input.reservedNodeOfferingId,
          NodeCount: this.__input.nodeCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseReservedNodeOffering.ReservedNode.ReservedNodeOfferingId', props);
    return resource.getResponseField('ReservedNode.ReservedNodeOfferingId') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedNodeOffering',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PurchaseReservedNodeOffering.ReservedNode.NodeType'),
        outputPath: 'ReservedNode.NodeType',
        parameters: {
          ReservedNodeOfferingId: this.__input.reservedNodeOfferingId,
          NodeCount: this.__input.nodeCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseReservedNodeOffering.ReservedNode.NodeType', props);
    return resource.getResponseField('ReservedNode.NodeType') as unknown as string;
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedNodeOffering',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PurchaseReservedNodeOffering.ReservedNode.StartTime'),
        outputPath: 'ReservedNode.StartTime',
        parameters: {
          ReservedNodeOfferingId: this.__input.reservedNodeOfferingId,
          NodeCount: this.__input.nodeCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseReservedNodeOffering.ReservedNode.StartTime', props);
    return resource.getResponseField('ReservedNode.StartTime') as unknown as string;
  }

  public get duration(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedNodeOffering',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PurchaseReservedNodeOffering.ReservedNode.Duration'),
        outputPath: 'ReservedNode.Duration',
        parameters: {
          ReservedNodeOfferingId: this.__input.reservedNodeOfferingId,
          NodeCount: this.__input.nodeCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseReservedNodeOffering.ReservedNode.Duration', props);
    return resource.getResponseField('ReservedNode.Duration') as unknown as number;
  }

  public get fixedPrice(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedNodeOffering',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PurchaseReservedNodeOffering.ReservedNode.FixedPrice'),
        outputPath: 'ReservedNode.FixedPrice',
        parameters: {
          ReservedNodeOfferingId: this.__input.reservedNodeOfferingId,
          NodeCount: this.__input.nodeCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseReservedNodeOffering.ReservedNode.FixedPrice', props);
    return resource.getResponseField('ReservedNode.FixedPrice') as unknown as number;
  }

  public get usagePrice(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedNodeOffering',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PurchaseReservedNodeOffering.ReservedNode.UsagePrice'),
        outputPath: 'ReservedNode.UsagePrice',
        parameters: {
          ReservedNodeOfferingId: this.__input.reservedNodeOfferingId,
          NodeCount: this.__input.nodeCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseReservedNodeOffering.ReservedNode.UsagePrice', props);
    return resource.getResponseField('ReservedNode.UsagePrice') as unknown as number;
  }

  public get currencyCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedNodeOffering',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PurchaseReservedNodeOffering.ReservedNode.CurrencyCode'),
        outputPath: 'ReservedNode.CurrencyCode',
        parameters: {
          ReservedNodeOfferingId: this.__input.reservedNodeOfferingId,
          NodeCount: this.__input.nodeCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseReservedNodeOffering.ReservedNode.CurrencyCode', props);
    return resource.getResponseField('ReservedNode.CurrencyCode') as unknown as string;
  }

  public get nodeCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedNodeOffering',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PurchaseReservedNodeOffering.ReservedNode.NodeCount'),
        outputPath: 'ReservedNode.NodeCount',
        parameters: {
          ReservedNodeOfferingId: this.__input.reservedNodeOfferingId,
          NodeCount: this.__input.nodeCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseReservedNodeOffering.ReservedNode.NodeCount', props);
    return resource.getResponseField('ReservedNode.NodeCount') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedNodeOffering',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PurchaseReservedNodeOffering.ReservedNode.State'),
        outputPath: 'ReservedNode.State',
        parameters: {
          ReservedNodeOfferingId: this.__input.reservedNodeOfferingId,
          NodeCount: this.__input.nodeCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseReservedNodeOffering.ReservedNode.State', props);
    return resource.getResponseField('ReservedNode.State') as unknown as string;
  }

  public get offeringType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedNodeOffering',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PurchaseReservedNodeOffering.ReservedNode.OfferingType'),
        outputPath: 'ReservedNode.OfferingType',
        parameters: {
          ReservedNodeOfferingId: this.__input.reservedNodeOfferingId,
          NodeCount: this.__input.nodeCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseReservedNodeOffering.ReservedNode.OfferingType', props);
    return resource.getResponseField('ReservedNode.OfferingType') as unknown as string;
  }

  public get recurringCharges(): shapes.RedshiftRecurringCharge[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedNodeOffering',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PurchaseReservedNodeOffering.ReservedNode.RecurringCharges'),
        outputPath: 'ReservedNode.RecurringCharges',
        parameters: {
          ReservedNodeOfferingId: this.__input.reservedNodeOfferingId,
          NodeCount: this.__input.nodeCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseReservedNodeOffering.ReservedNode.RecurringCharges', props);
    return resource.getResponseField('ReservedNode.RecurringCharges') as unknown as shapes.RedshiftRecurringCharge[];
  }

  public get reservedNodeOfferingType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedNodeOffering',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.PurchaseReservedNodeOffering.ReservedNode.ReservedNodeOfferingType'),
        outputPath: 'ReservedNode.ReservedNodeOfferingType',
        parameters: {
          ReservedNodeOfferingId: this.__input.reservedNodeOfferingId,
          NodeCount: this.__input.nodeCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseReservedNodeOffering.ReservedNode.ReservedNodeOfferingType', props);
    return resource.getResponseField('ReservedNode.ReservedNodeOfferingType') as unknown as string;
  }

}

export class RedshiftResponsesRebootCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRebootClusterMessage) {
  }

  public get cluster(): RedshiftResponsesRebootClusterCluster {
    return new RedshiftResponsesRebootClusterCluster(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesRebootClusterCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRebootClusterMessage) {
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ClusterIdentifier'),
        outputPath: 'Cluster.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.ClusterIdentifier') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.NodeType'),
        outputPath: 'Cluster.NodeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.NodeType', props);
    return resource.getResponseField('Cluster.NodeType') as unknown as string;
  }

  public get clusterStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ClusterStatus'),
        outputPath: 'Cluster.ClusterStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.ClusterStatus', props);
    return resource.getResponseField('Cluster.ClusterStatus') as unknown as string;
  }

  public get clusterAvailabilityStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ClusterAvailabilityStatus'),
        outputPath: 'Cluster.ClusterAvailabilityStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.ClusterAvailabilityStatus', props);
    return resource.getResponseField('Cluster.ClusterAvailabilityStatus') as unknown as string;
  }

  public get modifyStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ModifyStatus'),
        outputPath: 'Cluster.ModifyStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.ModifyStatus', props);
    return resource.getResponseField('Cluster.ModifyStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.MasterUsername'),
        outputPath: 'Cluster.MasterUsername',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.MasterUsername', props);
    return resource.getResponseField('Cluster.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.DBName'),
        outputPath: 'Cluster.DBName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.DBName', props);
    return resource.getResponseField('Cluster.DBName') as unknown as string;
  }

  public get endpoint(): RedshiftResponsesRebootClusterClusterEndpoint {
    return new RedshiftResponsesRebootClusterClusterEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ClusterCreateTime'),
        outputPath: 'Cluster.ClusterCreateTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.ClusterCreateTime', props);
    return resource.getResponseField('Cluster.ClusterCreateTime') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterSecurityGroups(): shapes.RedshiftClusterSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ClusterSecurityGroups'),
        outputPath: 'Cluster.ClusterSecurityGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.ClusterSecurityGroups', props);
    return resource.getResponseField('Cluster.ClusterSecurityGroups') as unknown as shapes.RedshiftClusterSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RedshiftVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.VpcSecurityGroups'),
        outputPath: 'Cluster.VpcSecurityGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.VpcSecurityGroups', props);
    return resource.getResponseField('Cluster.VpcSecurityGroups') as unknown as shapes.RedshiftVpcSecurityGroupMembership[];
  }

  public get clusterParameterGroups(): shapes.RedshiftClusterParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ClusterParameterGroups'),
        outputPath: 'Cluster.ClusterParameterGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.ClusterParameterGroups', props);
    return resource.getResponseField('Cluster.ClusterParameterGroups') as unknown as shapes.RedshiftClusterParameterGroupStatus[];
  }

  public get clusterSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ClusterSubnetGroupName'),
        outputPath: 'Cluster.ClusterSubnetGroupName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.ClusterSubnetGroupName', props);
    return resource.getResponseField('Cluster.ClusterSubnetGroupName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.VpcId'),
        outputPath: 'Cluster.VpcId',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.VpcId', props);
    return resource.getResponseField('Cluster.VpcId') as unknown as string;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.AvailabilityZone'),
        outputPath: 'Cluster.AvailabilityZone',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.AvailabilityZone', props);
    return resource.getResponseField('Cluster.AvailabilityZone') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.PreferredMaintenanceWindow'),
        outputPath: 'Cluster.PreferredMaintenanceWindow',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('Cluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RedshiftResponsesRebootClusterClusterPendingModifiedValues {
    return new RedshiftResponsesRebootClusterClusterPendingModifiedValues(this.__scope, this.__resources, this.__input);
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ClusterVersion'),
        outputPath: 'Cluster.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.ClusterVersion', props);
    return resource.getResponseField('Cluster.ClusterVersion') as unknown as string;
  }

  public get allowVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.AllowVersionUpgrade'),
        outputPath: 'Cluster.AllowVersionUpgrade',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.AllowVersionUpgrade', props);
    return resource.getResponseField('Cluster.AllowVersionUpgrade') as unknown as boolean;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.NumberOfNodes'),
        outputPath: 'Cluster.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.NumberOfNodes', props);
    return resource.getResponseField('Cluster.NumberOfNodes') as unknown as number;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.PubliclyAccessible'),
        outputPath: 'Cluster.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PubliclyAccessible') as unknown as boolean;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.Encrypted'),
        outputPath: 'Cluster.Encrypted',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.Encrypted', props);
    return resource.getResponseField('Cluster.Encrypted') as unknown as boolean;
  }

  public get restoreStatus(): RedshiftResponsesRebootClusterClusterRestoreStatus {
    return new RedshiftResponsesRebootClusterClusterRestoreStatus(this.__scope, this.__resources, this.__input);
  }

  public get dataTransferProgress(): RedshiftResponsesRebootClusterClusterDataTransferProgress {
    return new RedshiftResponsesRebootClusterClusterDataTransferProgress(this.__scope, this.__resources, this.__input);
  }

  public get hsmStatus(): RedshiftResponsesRebootClusterClusterHsmStatus {
    return new RedshiftResponsesRebootClusterClusterHsmStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterSnapshotCopyStatus(): RedshiftResponsesRebootClusterClusterClusterSnapshotCopyStatus {
    return new RedshiftResponsesRebootClusterClusterClusterSnapshotCopyStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterPublicKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ClusterPublicKey'),
        outputPath: 'Cluster.ClusterPublicKey',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.ClusterPublicKey', props);
    return resource.getResponseField('Cluster.ClusterPublicKey') as unknown as string;
  }

  public get clusterNodes(): shapes.RedshiftClusterNode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ClusterNodes'),
        outputPath: 'Cluster.ClusterNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.ClusterNodes', props);
    return resource.getResponseField('Cluster.ClusterNodes') as unknown as shapes.RedshiftClusterNode[];
  }

  public get elasticIpStatus(): RedshiftResponsesRebootClusterClusterElasticIpStatus {
    return new RedshiftResponsesRebootClusterClusterElasticIpStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterRevisionNumber(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ClusterRevisionNumber'),
        outputPath: 'Cluster.ClusterRevisionNumber',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.ClusterRevisionNumber', props);
    return resource.getResponseField('Cluster.ClusterRevisionNumber') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.Tags'),
        outputPath: 'Cluster.Tags',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.Tags', props);
    return resource.getResponseField('Cluster.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.KmsKeyId'),
        outputPath: 'Cluster.KmsKeyId',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.KmsKeyId', props);
    return resource.getResponseField('Cluster.KmsKeyId') as unknown as string;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.EnhancedVpcRouting'),
        outputPath: 'Cluster.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.EnhancedVpcRouting') as unknown as boolean;
  }

  public get iamRoles(): shapes.RedshiftClusterIamRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.IamRoles'),
        outputPath: 'Cluster.IamRoles',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.IamRoles', props);
    return resource.getResponseField('Cluster.IamRoles') as unknown as shapes.RedshiftClusterIamRole[];
  }

  public get pendingActions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.PendingActions'),
        outputPath: 'Cluster.PendingActions',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.PendingActions', props);
    return resource.getResponseField('Cluster.PendingActions') as unknown as string[];
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.MaintenanceTrackName'),
        outputPath: 'Cluster.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.MaintenanceTrackName') as unknown as string;
  }

  public get elasticResizeNumberOfNodeOptions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ElasticResizeNumberOfNodeOptions'),
        outputPath: 'Cluster.ElasticResizeNumberOfNodeOptions',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.ElasticResizeNumberOfNodeOptions', props);
    return resource.getResponseField('Cluster.ElasticResizeNumberOfNodeOptions') as unknown as string;
  }

  public get deferredMaintenanceWindows(): shapes.RedshiftDeferredMaintenanceWindow[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.DeferredMaintenanceWindows'),
        outputPath: 'Cluster.DeferredMaintenanceWindows',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.DeferredMaintenanceWindows', props);
    return resource.getResponseField('Cluster.DeferredMaintenanceWindows') as unknown as shapes.RedshiftDeferredMaintenanceWindow[];
  }

  public get snapshotScheduleIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.SnapshotScheduleIdentifier'),
        outputPath: 'Cluster.SnapshotScheduleIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.SnapshotScheduleIdentifier', props);
    return resource.getResponseField('Cluster.SnapshotScheduleIdentifier') as unknown as string;
  }

  public get snapshotScheduleState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.SnapshotScheduleState'),
        outputPath: 'Cluster.SnapshotScheduleState',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.SnapshotScheduleState', props);
    return resource.getResponseField('Cluster.SnapshotScheduleState') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ExpectedNextSnapshotScheduleTime'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.ExpectedNextSnapshotScheduleTime', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTime') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTimeStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ExpectedNextSnapshotScheduleTimeStatus'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTimeStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.ExpectedNextSnapshotScheduleTimeStatus', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTimeStatus') as unknown as string;
  }

  public get nextMaintenanceWindowStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.NextMaintenanceWindowStartTime'),
        outputPath: 'Cluster.NextMaintenanceWindowStartTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.NextMaintenanceWindowStartTime', props);
    return resource.getResponseField('Cluster.NextMaintenanceWindowStartTime') as unknown as string;
  }

  public get resizeInfo(): RedshiftResponsesRebootClusterClusterResizeInfo {
    return new RedshiftResponsesRebootClusterClusterResizeInfo(this.__scope, this.__resources, this.__input);
  }

  public get availabilityZoneRelocationStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.AvailabilityZoneRelocationStatus'),
        outputPath: 'Cluster.AvailabilityZoneRelocationStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.AvailabilityZoneRelocationStatus', props);
    return resource.getResponseField('Cluster.AvailabilityZoneRelocationStatus') as unknown as string;
  }

  public get clusterNamespaceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ClusterNamespaceArn'),
        outputPath: 'Cluster.ClusterNamespaceArn',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.ClusterNamespaceArn', props);
    return resource.getResponseField('Cluster.ClusterNamespaceArn') as unknown as string;
  }

  public get totalStorageCapacityInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.TotalStorageCapacityInMegaBytes'),
        outputPath: 'Cluster.TotalStorageCapacityInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.TotalStorageCapacityInMegaBytes', props);
    return resource.getResponseField('Cluster.TotalStorageCapacityInMegaBytes') as unknown as number;
  }

  public get aquaConfiguration(): RedshiftResponsesRebootClusterClusterAquaConfiguration {
    return new RedshiftResponsesRebootClusterClusterAquaConfiguration(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesRebootClusterClusterEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRebootClusterMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.Endpoint.Address'),
        outputPath: 'Cluster.Endpoint.Address',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.Endpoint.Address', props);
    return resource.getResponseField('Cluster.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.Endpoint.Port'),
        outputPath: 'Cluster.Endpoint.Port',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.Endpoint.Port', props);
    return resource.getResponseField('Cluster.Endpoint.Port') as unknown as number;
  }

  public get vpcEndpoints(): shapes.RedshiftVpcEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.Endpoint.VpcEndpoints'),
        outputPath: 'Cluster.Endpoint.VpcEndpoints',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.Endpoint.VpcEndpoints', props);
    return resource.getResponseField('Cluster.Endpoint.VpcEndpoints') as unknown as shapes.RedshiftVpcEndpoint[];
  }

}

export class RedshiftResponsesRebootClusterClusterPendingModifiedValues {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRebootClusterMessage) {
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'Cluster.PendingModifiedValues.MasterUserPassword',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.PendingModifiedValues.NodeType'),
        outputPath: 'Cluster.PendingModifiedValues.NodeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.PendingModifiedValues.NodeType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.PendingModifiedValues.NumberOfNodes'),
        outputPath: 'Cluster.PendingModifiedValues.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.PendingModifiedValues.NumberOfNodes', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NumberOfNodes') as unknown as number;
  }

  public get clusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.PendingModifiedValues.ClusterType'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.PendingModifiedValues.ClusterType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterType') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.PendingModifiedValues.ClusterVersion'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.PendingModifiedValues.ClusterVersion', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterVersion') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.PendingModifiedValues.ClusterIdentifier'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.PendingModifiedValues.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterIdentifier') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.PendingModifiedValues.PubliclyAccessible'),
        outputPath: 'Cluster.PendingModifiedValues.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.PendingModifiedValues.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.PubliclyAccessible') as unknown as boolean;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.PendingModifiedValues.EnhancedVpcRouting'),
        outputPath: 'Cluster.PendingModifiedValues.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.PendingModifiedValues.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.PendingModifiedValues.MaintenanceTrackName'),
        outputPath: 'Cluster.PendingModifiedValues.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.PendingModifiedValues.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MaintenanceTrackName') as unknown as string;
  }

  public get encryptionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.PendingModifiedValues.EncryptionType'),
        outputPath: 'Cluster.PendingModifiedValues.EncryptionType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.PendingModifiedValues.EncryptionType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EncryptionType') as unknown as string;
  }

}

export class RedshiftResponsesRebootClusterClusterRestoreStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRebootClusterMessage) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.RestoreStatus.Status'),
        outputPath: 'Cluster.RestoreStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.RestoreStatus.Status', props);
    return resource.getResponseField('Cluster.RestoreStatus.Status') as unknown as string;
  }

  public get currentRestoreRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond') as unknown as number;
  }

  public get snapshotSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.RestoreStatus.SnapshotSizeInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.SnapshotSizeInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.RestoreStatus.SnapshotSizeInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.SnapshotSizeInMegaBytes') as unknown as number;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.RestoreStatus.ProgressInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.ProgressInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.RestoreStatus.ProgressInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.ProgressInMegaBytes') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.RestoreStatus.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.RestoreStatus.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.RestoreStatus.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.ElapsedTimeInSeconds') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

}

export class RedshiftResponsesRebootClusterClusterDataTransferProgress {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRebootClusterMessage) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.DataTransferProgress.Status'),
        outputPath: 'Cluster.DataTransferProgress.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.DataTransferProgress.Status', props);
    return resource.getResponseField('Cluster.DataTransferProgress.Status') as unknown as string;
  }

  public get currentRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond') as unknown as number;
  }

  public get totalDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.DataTransferProgress.TotalDataInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.TotalDataInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.DataTransferProgress.TotalDataInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.TotalDataInMegaBytes') as unknown as number;
  }

  public get dataTransferredInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.DataTransferProgress.DataTransferredInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.DataTransferredInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.DataTransferProgress.DataTransferredInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.DataTransferredInMegaBytes') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.DataTransferProgress.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.DataTransferProgress.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.ElapsedTimeInSeconds') as unknown as number;
  }

}

export class RedshiftResponsesRebootClusterClusterHsmStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRebootClusterMessage) {
  }

  public get hsmClientCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.HsmStatus.HsmClientCertificateIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmClientCertificateIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.HsmStatus.HsmClientCertificateIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmClientCertificateIdentifier') as unknown as string;
  }

  public get hsmConfigurationIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.HsmStatus.HsmConfigurationIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmConfigurationIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.HsmStatus.HsmConfigurationIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmConfigurationIdentifier') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.HsmStatus.Status'),
        outputPath: 'Cluster.HsmStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.HsmStatus.Status', props);
    return resource.getResponseField('Cluster.HsmStatus.Status') as unknown as string;
  }

}

export class RedshiftResponsesRebootClusterClusterClusterSnapshotCopyStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRebootClusterMessage) {
  }

  public get destinationRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ClusterSnapshotCopyStatus.DestinationRegion'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.DestinationRegion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.ClusterSnapshotCopyStatus.DestinationRegion', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.DestinationRegion') as unknown as string;
  }

  public get retentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.RetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.RetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get snapshotCopyGrantName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName') as unknown as string;
  }

}

export class RedshiftResponsesRebootClusterClusterElasticIpStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRebootClusterMessage) {
  }

  public get elasticIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ElasticIpStatus.ElasticIp'),
        outputPath: 'Cluster.ElasticIpStatus.ElasticIp',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.ElasticIpStatus.ElasticIp', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.ElasticIp') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ElasticIpStatus.Status'),
        outputPath: 'Cluster.ElasticIpStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.ElasticIpStatus.Status', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.Status') as unknown as string;
  }

}

export class RedshiftResponsesRebootClusterClusterResizeInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRebootClusterMessage) {
  }

  public get resizeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ResizeInfo.ResizeType'),
        outputPath: 'Cluster.ResizeInfo.ResizeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.ResizeInfo.ResizeType', props);
    return resource.getResponseField('Cluster.ResizeInfo.ResizeType') as unknown as string;
  }

  public get allowCancelResize(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.ResizeInfo.AllowCancelResize'),
        outputPath: 'Cluster.ResizeInfo.AllowCancelResize',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.ResizeInfo.AllowCancelResize', props);
    return resource.getResponseField('Cluster.ResizeInfo.AllowCancelResize') as unknown as boolean;
  }

}

export class RedshiftResponsesRebootClusterClusterAquaConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRebootClusterMessage) {
  }

  public get aquaStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.AquaConfiguration.AquaStatus'),
        outputPath: 'Cluster.AquaConfiguration.AquaStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.AquaConfiguration.AquaStatus', props);
    return resource.getResponseField('Cluster.AquaConfiguration.AquaStatus') as unknown as string;
  }

  public get aquaConfigurationStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RebootCluster.Cluster.AquaConfiguration.AquaConfigurationStatus'),
        outputPath: 'Cluster.AquaConfiguration.AquaConfigurationStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootCluster.Cluster.AquaConfiguration.AquaConfigurationStatus', props);
    return resource.getResponseField('Cluster.AquaConfiguration.AquaConfigurationStatus') as unknown as string;
  }

}

export class RedshiftResponsesRejectDataShare {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRejectDataShareMessage) {
  }

  public get dataShareArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectDataShare',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RejectDataShare.DataShareArn'),
        outputPath: 'DataShareArn',
        parameters: {
          DataShareArn: this.__input.dataShareArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectDataShare.DataShareArn', props);
    return resource.getResponseField('DataShareArn') as unknown as string;
  }

  public get producerArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectDataShare',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RejectDataShare.ProducerArn'),
        outputPath: 'ProducerArn',
        parameters: {
          DataShareArn: this.__input.dataShareArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectDataShare.ProducerArn', props);
    return resource.getResponseField('ProducerArn') as unknown as string;
  }

  public get allowPubliclyAccessibleConsumers(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectDataShare',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RejectDataShare.AllowPubliclyAccessibleConsumers'),
        outputPath: 'AllowPubliclyAccessibleConsumers',
        parameters: {
          DataShareArn: this.__input.dataShareArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectDataShare.AllowPubliclyAccessibleConsumers', props);
    return resource.getResponseField('AllowPubliclyAccessibleConsumers') as unknown as boolean;
  }

  public get dataShareAssociations(): shapes.RedshiftDataShareAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectDataShare',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RejectDataShare.DataShareAssociations'),
        outputPath: 'DataShareAssociations',
        parameters: {
          DataShareArn: this.__input.dataShareArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectDataShare.DataShareAssociations', props);
    return resource.getResponseField('DataShareAssociations') as unknown as shapes.RedshiftDataShareAssociation[];
  }

}

export class RedshiftResponsesResetClusterParameterGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftResetClusterParameterGroupMessage) {
  }

  public get parameterGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resetClusterParameterGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResetClusterParameterGroup.ParameterGroupName'),
        outputPath: 'ParameterGroupName',
        parameters: {
          ParameterGroupName: this.__input.parameterGroupName,
          ResetAllParameters: this.__input.resetAllParameters,
          Parameters: this.__input.parameters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResetClusterParameterGroup.ParameterGroupName', props);
    return resource.getResponseField('ParameterGroupName') as unknown as string;
  }

  public get parameterGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resetClusterParameterGroup',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResetClusterParameterGroup.ParameterGroupStatus'),
        outputPath: 'ParameterGroupStatus',
        parameters: {
          ParameterGroupName: this.__input.parameterGroupName,
          ResetAllParameters: this.__input.resetAllParameters,
          Parameters: this.__input.parameters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResetClusterParameterGroup.ParameterGroupStatus', props);
    return resource.getResponseField('ParameterGroupStatus') as unknown as string;
  }

}

export class RedshiftResponsesResizeCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftResizeClusterMessage) {
  }

  public get cluster(): RedshiftResponsesResizeClusterCluster {
    return new RedshiftResponsesResizeClusterCluster(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesResizeClusterCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftResizeClusterMessage) {
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ClusterIdentifier'),
        outputPath: 'Cluster.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.ClusterIdentifier') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.NodeType'),
        outputPath: 'Cluster.NodeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.NodeType', props);
    return resource.getResponseField('Cluster.NodeType') as unknown as string;
  }

  public get clusterStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ClusterStatus'),
        outputPath: 'Cluster.ClusterStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.ClusterStatus', props);
    return resource.getResponseField('Cluster.ClusterStatus') as unknown as string;
  }

  public get clusterAvailabilityStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ClusterAvailabilityStatus'),
        outputPath: 'Cluster.ClusterAvailabilityStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.ClusterAvailabilityStatus', props);
    return resource.getResponseField('Cluster.ClusterAvailabilityStatus') as unknown as string;
  }

  public get modifyStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ModifyStatus'),
        outputPath: 'Cluster.ModifyStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.ModifyStatus', props);
    return resource.getResponseField('Cluster.ModifyStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.MasterUsername'),
        outputPath: 'Cluster.MasterUsername',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.MasterUsername', props);
    return resource.getResponseField('Cluster.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.DBName'),
        outputPath: 'Cluster.DBName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.DBName', props);
    return resource.getResponseField('Cluster.DBName') as unknown as string;
  }

  public get endpoint(): RedshiftResponsesResizeClusterClusterEndpoint {
    return new RedshiftResponsesResizeClusterClusterEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ClusterCreateTime'),
        outputPath: 'Cluster.ClusterCreateTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.ClusterCreateTime', props);
    return resource.getResponseField('Cluster.ClusterCreateTime') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterSecurityGroups(): shapes.RedshiftClusterSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ClusterSecurityGroups'),
        outputPath: 'Cluster.ClusterSecurityGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.ClusterSecurityGroups', props);
    return resource.getResponseField('Cluster.ClusterSecurityGroups') as unknown as shapes.RedshiftClusterSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RedshiftVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.VpcSecurityGroups'),
        outputPath: 'Cluster.VpcSecurityGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.VpcSecurityGroups', props);
    return resource.getResponseField('Cluster.VpcSecurityGroups') as unknown as shapes.RedshiftVpcSecurityGroupMembership[];
  }

  public get clusterParameterGroups(): shapes.RedshiftClusterParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ClusterParameterGroups'),
        outputPath: 'Cluster.ClusterParameterGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.ClusterParameterGroups', props);
    return resource.getResponseField('Cluster.ClusterParameterGroups') as unknown as shapes.RedshiftClusterParameterGroupStatus[];
  }

  public get clusterSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ClusterSubnetGroupName'),
        outputPath: 'Cluster.ClusterSubnetGroupName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.ClusterSubnetGroupName', props);
    return resource.getResponseField('Cluster.ClusterSubnetGroupName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.VpcId'),
        outputPath: 'Cluster.VpcId',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.VpcId', props);
    return resource.getResponseField('Cluster.VpcId') as unknown as string;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.AvailabilityZone'),
        outputPath: 'Cluster.AvailabilityZone',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.AvailabilityZone', props);
    return resource.getResponseField('Cluster.AvailabilityZone') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.PreferredMaintenanceWindow'),
        outputPath: 'Cluster.PreferredMaintenanceWindow',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('Cluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RedshiftResponsesResizeClusterClusterPendingModifiedValues {
    return new RedshiftResponsesResizeClusterClusterPendingModifiedValues(this.__scope, this.__resources, this.__input);
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ClusterVersion'),
        outputPath: 'Cluster.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.ClusterVersion', props);
    return resource.getResponseField('Cluster.ClusterVersion') as unknown as string;
  }

  public get allowVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.AllowVersionUpgrade'),
        outputPath: 'Cluster.AllowVersionUpgrade',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.AllowVersionUpgrade', props);
    return resource.getResponseField('Cluster.AllowVersionUpgrade') as unknown as boolean;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.NumberOfNodes'),
        outputPath: 'Cluster.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.NumberOfNodes', props);
    return resource.getResponseField('Cluster.NumberOfNodes') as unknown as number;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.PubliclyAccessible'),
        outputPath: 'Cluster.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PubliclyAccessible') as unknown as boolean;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.Encrypted'),
        outputPath: 'Cluster.Encrypted',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.Encrypted', props);
    return resource.getResponseField('Cluster.Encrypted') as unknown as boolean;
  }

  public get restoreStatus(): RedshiftResponsesResizeClusterClusterRestoreStatus {
    return new RedshiftResponsesResizeClusterClusterRestoreStatus(this.__scope, this.__resources, this.__input);
  }

  public get dataTransferProgress(): RedshiftResponsesResizeClusterClusterDataTransferProgress {
    return new RedshiftResponsesResizeClusterClusterDataTransferProgress(this.__scope, this.__resources, this.__input);
  }

  public get hsmStatus(): RedshiftResponsesResizeClusterClusterHsmStatus {
    return new RedshiftResponsesResizeClusterClusterHsmStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterSnapshotCopyStatus(): RedshiftResponsesResizeClusterClusterClusterSnapshotCopyStatus {
    return new RedshiftResponsesResizeClusterClusterClusterSnapshotCopyStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterPublicKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ClusterPublicKey'),
        outputPath: 'Cluster.ClusterPublicKey',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.ClusterPublicKey', props);
    return resource.getResponseField('Cluster.ClusterPublicKey') as unknown as string;
  }

  public get clusterNodes(): shapes.RedshiftClusterNode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ClusterNodes'),
        outputPath: 'Cluster.ClusterNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.ClusterNodes', props);
    return resource.getResponseField('Cluster.ClusterNodes') as unknown as shapes.RedshiftClusterNode[];
  }

  public get elasticIpStatus(): RedshiftResponsesResizeClusterClusterElasticIpStatus {
    return new RedshiftResponsesResizeClusterClusterElasticIpStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterRevisionNumber(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ClusterRevisionNumber'),
        outputPath: 'Cluster.ClusterRevisionNumber',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.ClusterRevisionNumber', props);
    return resource.getResponseField('Cluster.ClusterRevisionNumber') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.Tags'),
        outputPath: 'Cluster.Tags',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.Tags', props);
    return resource.getResponseField('Cluster.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.KmsKeyId'),
        outputPath: 'Cluster.KmsKeyId',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.KmsKeyId', props);
    return resource.getResponseField('Cluster.KmsKeyId') as unknown as string;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.EnhancedVpcRouting'),
        outputPath: 'Cluster.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.EnhancedVpcRouting') as unknown as boolean;
  }

  public get iamRoles(): shapes.RedshiftClusterIamRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.IamRoles'),
        outputPath: 'Cluster.IamRoles',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.IamRoles', props);
    return resource.getResponseField('Cluster.IamRoles') as unknown as shapes.RedshiftClusterIamRole[];
  }

  public get pendingActions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.PendingActions'),
        outputPath: 'Cluster.PendingActions',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.PendingActions', props);
    return resource.getResponseField('Cluster.PendingActions') as unknown as string[];
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.MaintenanceTrackName'),
        outputPath: 'Cluster.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.MaintenanceTrackName') as unknown as string;
  }

  public get elasticResizeNumberOfNodeOptions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ElasticResizeNumberOfNodeOptions'),
        outputPath: 'Cluster.ElasticResizeNumberOfNodeOptions',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.ElasticResizeNumberOfNodeOptions', props);
    return resource.getResponseField('Cluster.ElasticResizeNumberOfNodeOptions') as unknown as string;
  }

  public get deferredMaintenanceWindows(): shapes.RedshiftDeferredMaintenanceWindow[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.DeferredMaintenanceWindows'),
        outputPath: 'Cluster.DeferredMaintenanceWindows',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.DeferredMaintenanceWindows', props);
    return resource.getResponseField('Cluster.DeferredMaintenanceWindows') as unknown as shapes.RedshiftDeferredMaintenanceWindow[];
  }

  public get snapshotScheduleIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.SnapshotScheduleIdentifier'),
        outputPath: 'Cluster.SnapshotScheduleIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.SnapshotScheduleIdentifier', props);
    return resource.getResponseField('Cluster.SnapshotScheduleIdentifier') as unknown as string;
  }

  public get snapshotScheduleState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.SnapshotScheduleState'),
        outputPath: 'Cluster.SnapshotScheduleState',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.SnapshotScheduleState', props);
    return resource.getResponseField('Cluster.SnapshotScheduleState') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ExpectedNextSnapshotScheduleTime'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.ExpectedNextSnapshotScheduleTime', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTime') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTimeStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ExpectedNextSnapshotScheduleTimeStatus'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTimeStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.ExpectedNextSnapshotScheduleTimeStatus', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTimeStatus') as unknown as string;
  }

  public get nextMaintenanceWindowStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.NextMaintenanceWindowStartTime'),
        outputPath: 'Cluster.NextMaintenanceWindowStartTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.NextMaintenanceWindowStartTime', props);
    return resource.getResponseField('Cluster.NextMaintenanceWindowStartTime') as unknown as string;
  }

  public get resizeInfo(): RedshiftResponsesResizeClusterClusterResizeInfo {
    return new RedshiftResponsesResizeClusterClusterResizeInfo(this.__scope, this.__resources, this.__input);
  }

  public get availabilityZoneRelocationStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.AvailabilityZoneRelocationStatus'),
        outputPath: 'Cluster.AvailabilityZoneRelocationStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.AvailabilityZoneRelocationStatus', props);
    return resource.getResponseField('Cluster.AvailabilityZoneRelocationStatus') as unknown as string;
  }

  public get clusterNamespaceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ClusterNamespaceArn'),
        outputPath: 'Cluster.ClusterNamespaceArn',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.ClusterNamespaceArn', props);
    return resource.getResponseField('Cluster.ClusterNamespaceArn') as unknown as string;
  }

  public get totalStorageCapacityInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.TotalStorageCapacityInMegaBytes'),
        outputPath: 'Cluster.TotalStorageCapacityInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.TotalStorageCapacityInMegaBytes', props);
    return resource.getResponseField('Cluster.TotalStorageCapacityInMegaBytes') as unknown as number;
  }

  public get aquaConfiguration(): RedshiftResponsesResizeClusterClusterAquaConfiguration {
    return new RedshiftResponsesResizeClusterClusterAquaConfiguration(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesResizeClusterClusterEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftResizeClusterMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.Endpoint.Address'),
        outputPath: 'Cluster.Endpoint.Address',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.Endpoint.Address', props);
    return resource.getResponseField('Cluster.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.Endpoint.Port'),
        outputPath: 'Cluster.Endpoint.Port',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.Endpoint.Port', props);
    return resource.getResponseField('Cluster.Endpoint.Port') as unknown as number;
  }

  public get vpcEndpoints(): shapes.RedshiftVpcEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.Endpoint.VpcEndpoints'),
        outputPath: 'Cluster.Endpoint.VpcEndpoints',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.Endpoint.VpcEndpoints', props);
    return resource.getResponseField('Cluster.Endpoint.VpcEndpoints') as unknown as shapes.RedshiftVpcEndpoint[];
  }

}

export class RedshiftResponsesResizeClusterClusterPendingModifiedValues {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftResizeClusterMessage) {
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'Cluster.PendingModifiedValues.MasterUserPassword',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.PendingModifiedValues.NodeType'),
        outputPath: 'Cluster.PendingModifiedValues.NodeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.PendingModifiedValues.NodeType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.PendingModifiedValues.NumberOfNodes'),
        outputPath: 'Cluster.PendingModifiedValues.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.PendingModifiedValues.NumberOfNodes', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NumberOfNodes') as unknown as number;
  }

  public get clusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.PendingModifiedValues.ClusterType'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.PendingModifiedValues.ClusterType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterType') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.PendingModifiedValues.ClusterVersion'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.PendingModifiedValues.ClusterVersion', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterVersion') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.PendingModifiedValues.ClusterIdentifier'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.PendingModifiedValues.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterIdentifier') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.PendingModifiedValues.PubliclyAccessible'),
        outputPath: 'Cluster.PendingModifiedValues.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.PendingModifiedValues.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.PubliclyAccessible') as unknown as boolean;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.PendingModifiedValues.EnhancedVpcRouting'),
        outputPath: 'Cluster.PendingModifiedValues.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.PendingModifiedValues.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.PendingModifiedValues.MaintenanceTrackName'),
        outputPath: 'Cluster.PendingModifiedValues.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.PendingModifiedValues.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MaintenanceTrackName') as unknown as string;
  }

  public get encryptionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.PendingModifiedValues.EncryptionType'),
        outputPath: 'Cluster.PendingModifiedValues.EncryptionType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.PendingModifiedValues.EncryptionType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EncryptionType') as unknown as string;
  }

}

export class RedshiftResponsesResizeClusterClusterRestoreStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftResizeClusterMessage) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.RestoreStatus.Status'),
        outputPath: 'Cluster.RestoreStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.RestoreStatus.Status', props);
    return resource.getResponseField('Cluster.RestoreStatus.Status') as unknown as string;
  }

  public get currentRestoreRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond') as unknown as number;
  }

  public get snapshotSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.RestoreStatus.SnapshotSizeInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.SnapshotSizeInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.RestoreStatus.SnapshotSizeInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.SnapshotSizeInMegaBytes') as unknown as number;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.RestoreStatus.ProgressInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.ProgressInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.RestoreStatus.ProgressInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.ProgressInMegaBytes') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.RestoreStatus.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.RestoreStatus.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.RestoreStatus.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.ElapsedTimeInSeconds') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

}

export class RedshiftResponsesResizeClusterClusterDataTransferProgress {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftResizeClusterMessage) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.DataTransferProgress.Status'),
        outputPath: 'Cluster.DataTransferProgress.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.DataTransferProgress.Status', props);
    return resource.getResponseField('Cluster.DataTransferProgress.Status') as unknown as string;
  }

  public get currentRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond') as unknown as number;
  }

  public get totalDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.DataTransferProgress.TotalDataInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.TotalDataInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.DataTransferProgress.TotalDataInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.TotalDataInMegaBytes') as unknown as number;
  }

  public get dataTransferredInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.DataTransferProgress.DataTransferredInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.DataTransferredInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.DataTransferProgress.DataTransferredInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.DataTransferredInMegaBytes') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.DataTransferProgress.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.DataTransferProgress.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.ElapsedTimeInSeconds') as unknown as number;
  }

}

export class RedshiftResponsesResizeClusterClusterHsmStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftResizeClusterMessage) {
  }

  public get hsmClientCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.HsmStatus.HsmClientCertificateIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmClientCertificateIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.HsmStatus.HsmClientCertificateIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmClientCertificateIdentifier') as unknown as string;
  }

  public get hsmConfigurationIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.HsmStatus.HsmConfigurationIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmConfigurationIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.HsmStatus.HsmConfigurationIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmConfigurationIdentifier') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.HsmStatus.Status'),
        outputPath: 'Cluster.HsmStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.HsmStatus.Status', props);
    return resource.getResponseField('Cluster.HsmStatus.Status') as unknown as string;
  }

}

export class RedshiftResponsesResizeClusterClusterClusterSnapshotCopyStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftResizeClusterMessage) {
  }

  public get destinationRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ClusterSnapshotCopyStatus.DestinationRegion'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.DestinationRegion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.ClusterSnapshotCopyStatus.DestinationRegion', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.DestinationRegion') as unknown as string;
  }

  public get retentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.RetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.RetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get snapshotCopyGrantName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName') as unknown as string;
  }

}

export class RedshiftResponsesResizeClusterClusterElasticIpStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftResizeClusterMessage) {
  }

  public get elasticIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ElasticIpStatus.ElasticIp'),
        outputPath: 'Cluster.ElasticIpStatus.ElasticIp',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.ElasticIpStatus.ElasticIp', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.ElasticIp') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ElasticIpStatus.Status'),
        outputPath: 'Cluster.ElasticIpStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.ElasticIpStatus.Status', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.Status') as unknown as string;
  }

}

export class RedshiftResponsesResizeClusterClusterResizeInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftResizeClusterMessage) {
  }

  public get resizeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ResizeInfo.ResizeType'),
        outputPath: 'Cluster.ResizeInfo.ResizeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.ResizeInfo.ResizeType', props);
    return resource.getResponseField('Cluster.ResizeInfo.ResizeType') as unknown as string;
  }

  public get allowCancelResize(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.ResizeInfo.AllowCancelResize'),
        outputPath: 'Cluster.ResizeInfo.AllowCancelResize',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.ResizeInfo.AllowCancelResize', props);
    return resource.getResponseField('Cluster.ResizeInfo.AllowCancelResize') as unknown as boolean;
  }

}

export class RedshiftResponsesResizeClusterClusterAquaConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftResizeClusterMessage) {
  }

  public get aquaStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.AquaConfiguration.AquaStatus'),
        outputPath: 'Cluster.AquaConfiguration.AquaStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.AquaConfiguration.AquaStatus', props);
    return resource.getResponseField('Cluster.AquaConfiguration.AquaStatus') as unknown as string;
  }

  public get aquaConfigurationStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resizeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResizeCluster.Cluster.AquaConfiguration.AquaConfigurationStatus'),
        outputPath: 'Cluster.AquaConfiguration.AquaConfigurationStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          ClusterType: this.__input.clusterType,
          NodeType: this.__input.nodeType,
          NumberOfNodes: this.__input.numberOfNodes,
          Classic: this.__input.classic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResizeCluster.Cluster.AquaConfiguration.AquaConfigurationStatus', props);
    return resource.getResponseField('Cluster.AquaConfiguration.AquaConfigurationStatus') as unknown as string;
  }

}

export class RedshiftResponsesRestoreFromClusterSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRestoreFromClusterSnapshotMessage) {
  }

  public get cluster(): RedshiftResponsesRestoreFromClusterSnapshotCluster {
    return new RedshiftResponsesRestoreFromClusterSnapshotCluster(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesRestoreFromClusterSnapshotCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRestoreFromClusterSnapshotMessage) {
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ClusterIdentifier'),
        outputPath: 'Cluster.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.ClusterIdentifier') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.NodeType'),
        outputPath: 'Cluster.NodeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.NodeType', props);
    return resource.getResponseField('Cluster.NodeType') as unknown as string;
  }

  public get clusterStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ClusterStatus'),
        outputPath: 'Cluster.ClusterStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.ClusterStatus', props);
    return resource.getResponseField('Cluster.ClusterStatus') as unknown as string;
  }

  public get clusterAvailabilityStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ClusterAvailabilityStatus'),
        outputPath: 'Cluster.ClusterAvailabilityStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.ClusterAvailabilityStatus', props);
    return resource.getResponseField('Cluster.ClusterAvailabilityStatus') as unknown as string;
  }

  public get modifyStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ModifyStatus'),
        outputPath: 'Cluster.ModifyStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.ModifyStatus', props);
    return resource.getResponseField('Cluster.ModifyStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.MasterUsername'),
        outputPath: 'Cluster.MasterUsername',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.MasterUsername', props);
    return resource.getResponseField('Cluster.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.DBName'),
        outputPath: 'Cluster.DBName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.DBName', props);
    return resource.getResponseField('Cluster.DBName') as unknown as string;
  }

  public get endpoint(): RedshiftResponsesRestoreFromClusterSnapshotClusterEndpoint {
    return new RedshiftResponsesRestoreFromClusterSnapshotClusterEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ClusterCreateTime'),
        outputPath: 'Cluster.ClusterCreateTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.ClusterCreateTime', props);
    return resource.getResponseField('Cluster.ClusterCreateTime') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterSecurityGroups(): shapes.RedshiftClusterSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ClusterSecurityGroups'),
        outputPath: 'Cluster.ClusterSecurityGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.ClusterSecurityGroups', props);
    return resource.getResponseField('Cluster.ClusterSecurityGroups') as unknown as shapes.RedshiftClusterSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RedshiftVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.VpcSecurityGroups'),
        outputPath: 'Cluster.VpcSecurityGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.VpcSecurityGroups', props);
    return resource.getResponseField('Cluster.VpcSecurityGroups') as unknown as shapes.RedshiftVpcSecurityGroupMembership[];
  }

  public get clusterParameterGroups(): shapes.RedshiftClusterParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ClusterParameterGroups'),
        outputPath: 'Cluster.ClusterParameterGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.ClusterParameterGroups', props);
    return resource.getResponseField('Cluster.ClusterParameterGroups') as unknown as shapes.RedshiftClusterParameterGroupStatus[];
  }

  public get clusterSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ClusterSubnetGroupName'),
        outputPath: 'Cluster.ClusterSubnetGroupName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.ClusterSubnetGroupName', props);
    return resource.getResponseField('Cluster.ClusterSubnetGroupName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.VpcId'),
        outputPath: 'Cluster.VpcId',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.VpcId', props);
    return resource.getResponseField('Cluster.VpcId') as unknown as string;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.AvailabilityZone'),
        outputPath: 'Cluster.AvailabilityZone',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.AvailabilityZone', props);
    return resource.getResponseField('Cluster.AvailabilityZone') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.PreferredMaintenanceWindow'),
        outputPath: 'Cluster.PreferredMaintenanceWindow',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('Cluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RedshiftResponsesRestoreFromClusterSnapshotClusterPendingModifiedValues {
    return new RedshiftResponsesRestoreFromClusterSnapshotClusterPendingModifiedValues(this.__scope, this.__resources, this.__input);
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ClusterVersion'),
        outputPath: 'Cluster.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.ClusterVersion', props);
    return resource.getResponseField('Cluster.ClusterVersion') as unknown as string;
  }

  public get allowVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.AllowVersionUpgrade'),
        outputPath: 'Cluster.AllowVersionUpgrade',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.AllowVersionUpgrade', props);
    return resource.getResponseField('Cluster.AllowVersionUpgrade') as unknown as boolean;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.NumberOfNodes'),
        outputPath: 'Cluster.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.NumberOfNodes', props);
    return resource.getResponseField('Cluster.NumberOfNodes') as unknown as number;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.PubliclyAccessible'),
        outputPath: 'Cluster.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PubliclyAccessible') as unknown as boolean;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.Encrypted'),
        outputPath: 'Cluster.Encrypted',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.Encrypted', props);
    return resource.getResponseField('Cluster.Encrypted') as unknown as boolean;
  }

  public get restoreStatus(): RedshiftResponsesRestoreFromClusterSnapshotClusterRestoreStatus {
    return new RedshiftResponsesRestoreFromClusterSnapshotClusterRestoreStatus(this.__scope, this.__resources, this.__input);
  }

  public get dataTransferProgress(): RedshiftResponsesRestoreFromClusterSnapshotClusterDataTransferProgress {
    return new RedshiftResponsesRestoreFromClusterSnapshotClusterDataTransferProgress(this.__scope, this.__resources, this.__input);
  }

  public get hsmStatus(): RedshiftResponsesRestoreFromClusterSnapshotClusterHsmStatus {
    return new RedshiftResponsesRestoreFromClusterSnapshotClusterHsmStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterSnapshotCopyStatus(): RedshiftResponsesRestoreFromClusterSnapshotClusterClusterSnapshotCopyStatus {
    return new RedshiftResponsesRestoreFromClusterSnapshotClusterClusterSnapshotCopyStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterPublicKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ClusterPublicKey'),
        outputPath: 'Cluster.ClusterPublicKey',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.ClusterPublicKey', props);
    return resource.getResponseField('Cluster.ClusterPublicKey') as unknown as string;
  }

  public get clusterNodes(): shapes.RedshiftClusterNode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ClusterNodes'),
        outputPath: 'Cluster.ClusterNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.ClusterNodes', props);
    return resource.getResponseField('Cluster.ClusterNodes') as unknown as shapes.RedshiftClusterNode[];
  }

  public get elasticIpStatus(): RedshiftResponsesRestoreFromClusterSnapshotClusterElasticIpStatus {
    return new RedshiftResponsesRestoreFromClusterSnapshotClusterElasticIpStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterRevisionNumber(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ClusterRevisionNumber'),
        outputPath: 'Cluster.ClusterRevisionNumber',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.ClusterRevisionNumber', props);
    return resource.getResponseField('Cluster.ClusterRevisionNumber') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.Tags'),
        outputPath: 'Cluster.Tags',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.Tags', props);
    return resource.getResponseField('Cluster.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.KmsKeyId'),
        outputPath: 'Cluster.KmsKeyId',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.KmsKeyId', props);
    return resource.getResponseField('Cluster.KmsKeyId') as unknown as string;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.EnhancedVpcRouting'),
        outputPath: 'Cluster.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.EnhancedVpcRouting') as unknown as boolean;
  }

  public get iamRoles(): shapes.RedshiftClusterIamRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.IamRoles'),
        outputPath: 'Cluster.IamRoles',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.IamRoles', props);
    return resource.getResponseField('Cluster.IamRoles') as unknown as shapes.RedshiftClusterIamRole[];
  }

  public get pendingActions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.PendingActions'),
        outputPath: 'Cluster.PendingActions',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.PendingActions', props);
    return resource.getResponseField('Cluster.PendingActions') as unknown as string[];
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.MaintenanceTrackName'),
        outputPath: 'Cluster.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.MaintenanceTrackName') as unknown as string;
  }

  public get elasticResizeNumberOfNodeOptions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ElasticResizeNumberOfNodeOptions'),
        outputPath: 'Cluster.ElasticResizeNumberOfNodeOptions',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.ElasticResizeNumberOfNodeOptions', props);
    return resource.getResponseField('Cluster.ElasticResizeNumberOfNodeOptions') as unknown as string;
  }

  public get deferredMaintenanceWindows(): shapes.RedshiftDeferredMaintenanceWindow[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.DeferredMaintenanceWindows'),
        outputPath: 'Cluster.DeferredMaintenanceWindows',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.DeferredMaintenanceWindows', props);
    return resource.getResponseField('Cluster.DeferredMaintenanceWindows') as unknown as shapes.RedshiftDeferredMaintenanceWindow[];
  }

  public get snapshotScheduleIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.SnapshotScheduleIdentifier'),
        outputPath: 'Cluster.SnapshotScheduleIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.SnapshotScheduleIdentifier', props);
    return resource.getResponseField('Cluster.SnapshotScheduleIdentifier') as unknown as string;
  }

  public get snapshotScheduleState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.SnapshotScheduleState'),
        outputPath: 'Cluster.SnapshotScheduleState',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.SnapshotScheduleState', props);
    return resource.getResponseField('Cluster.SnapshotScheduleState') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ExpectedNextSnapshotScheduleTime'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.ExpectedNextSnapshotScheduleTime', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTime') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTimeStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ExpectedNextSnapshotScheduleTimeStatus'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTimeStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.ExpectedNextSnapshotScheduleTimeStatus', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTimeStatus') as unknown as string;
  }

  public get nextMaintenanceWindowStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.NextMaintenanceWindowStartTime'),
        outputPath: 'Cluster.NextMaintenanceWindowStartTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.NextMaintenanceWindowStartTime', props);
    return resource.getResponseField('Cluster.NextMaintenanceWindowStartTime') as unknown as string;
  }

  public get resizeInfo(): RedshiftResponsesRestoreFromClusterSnapshotClusterResizeInfo {
    return new RedshiftResponsesRestoreFromClusterSnapshotClusterResizeInfo(this.__scope, this.__resources, this.__input);
  }

  public get availabilityZoneRelocationStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.AvailabilityZoneRelocationStatus'),
        outputPath: 'Cluster.AvailabilityZoneRelocationStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.AvailabilityZoneRelocationStatus', props);
    return resource.getResponseField('Cluster.AvailabilityZoneRelocationStatus') as unknown as string;
  }

  public get clusterNamespaceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ClusterNamespaceArn'),
        outputPath: 'Cluster.ClusterNamespaceArn',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.ClusterNamespaceArn', props);
    return resource.getResponseField('Cluster.ClusterNamespaceArn') as unknown as string;
  }

  public get totalStorageCapacityInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.TotalStorageCapacityInMegaBytes'),
        outputPath: 'Cluster.TotalStorageCapacityInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.TotalStorageCapacityInMegaBytes', props);
    return resource.getResponseField('Cluster.TotalStorageCapacityInMegaBytes') as unknown as number;
  }

  public get aquaConfiguration(): RedshiftResponsesRestoreFromClusterSnapshotClusterAquaConfiguration {
    return new RedshiftResponsesRestoreFromClusterSnapshotClusterAquaConfiguration(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesRestoreFromClusterSnapshotClusterEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRestoreFromClusterSnapshotMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.Endpoint.Address'),
        outputPath: 'Cluster.Endpoint.Address',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.Endpoint.Address', props);
    return resource.getResponseField('Cluster.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.Endpoint.Port'),
        outputPath: 'Cluster.Endpoint.Port',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.Endpoint.Port', props);
    return resource.getResponseField('Cluster.Endpoint.Port') as unknown as number;
  }

  public get vpcEndpoints(): shapes.RedshiftVpcEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.Endpoint.VpcEndpoints'),
        outputPath: 'Cluster.Endpoint.VpcEndpoints',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.Endpoint.VpcEndpoints', props);
    return resource.getResponseField('Cluster.Endpoint.VpcEndpoints') as unknown as shapes.RedshiftVpcEndpoint[];
  }

}

export class RedshiftResponsesRestoreFromClusterSnapshotClusterPendingModifiedValues {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRestoreFromClusterSnapshotMessage) {
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'Cluster.PendingModifiedValues.MasterUserPassword',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.NodeType'),
        outputPath: 'Cluster.PendingModifiedValues.NodeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.NodeType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.NumberOfNodes'),
        outputPath: 'Cluster.PendingModifiedValues.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.NumberOfNodes', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NumberOfNodes') as unknown as number;
  }

  public get clusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.ClusterType'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.ClusterType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterType') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.ClusterVersion'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.ClusterVersion', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterVersion') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.ClusterIdentifier'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterIdentifier') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.PubliclyAccessible'),
        outputPath: 'Cluster.PendingModifiedValues.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.PubliclyAccessible') as unknown as boolean;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.EnhancedVpcRouting'),
        outputPath: 'Cluster.PendingModifiedValues.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.MaintenanceTrackName'),
        outputPath: 'Cluster.PendingModifiedValues.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MaintenanceTrackName') as unknown as string;
  }

  public get encryptionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.EncryptionType'),
        outputPath: 'Cluster.PendingModifiedValues.EncryptionType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.PendingModifiedValues.EncryptionType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EncryptionType') as unknown as string;
  }

}

export class RedshiftResponsesRestoreFromClusterSnapshotClusterRestoreStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRestoreFromClusterSnapshotMessage) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.RestoreStatus.Status'),
        outputPath: 'Cluster.RestoreStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.RestoreStatus.Status', props);
    return resource.getResponseField('Cluster.RestoreStatus.Status') as unknown as string;
  }

  public get currentRestoreRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond') as unknown as number;
  }

  public get snapshotSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.RestoreStatus.SnapshotSizeInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.SnapshotSizeInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.RestoreStatus.SnapshotSizeInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.SnapshotSizeInMegaBytes') as unknown as number;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.RestoreStatus.ProgressInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.ProgressInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.RestoreStatus.ProgressInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.ProgressInMegaBytes') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.RestoreStatus.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.RestoreStatus.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.RestoreStatus.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.ElapsedTimeInSeconds') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

}

export class RedshiftResponsesRestoreFromClusterSnapshotClusterDataTransferProgress {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRestoreFromClusterSnapshotMessage) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.DataTransferProgress.Status'),
        outputPath: 'Cluster.DataTransferProgress.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.DataTransferProgress.Status', props);
    return resource.getResponseField('Cluster.DataTransferProgress.Status') as unknown as string;
  }

  public get currentRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond') as unknown as number;
  }

  public get totalDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.DataTransferProgress.TotalDataInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.TotalDataInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.DataTransferProgress.TotalDataInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.TotalDataInMegaBytes') as unknown as number;
  }

  public get dataTransferredInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.DataTransferProgress.DataTransferredInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.DataTransferredInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.DataTransferProgress.DataTransferredInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.DataTransferredInMegaBytes') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.DataTransferProgress.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.DataTransferProgress.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.ElapsedTimeInSeconds') as unknown as number;
  }

}

export class RedshiftResponsesRestoreFromClusterSnapshotClusterHsmStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRestoreFromClusterSnapshotMessage) {
  }

  public get hsmClientCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.HsmStatus.HsmClientCertificateIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmClientCertificateIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.HsmStatus.HsmClientCertificateIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmClientCertificateIdentifier') as unknown as string;
  }

  public get hsmConfigurationIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.HsmStatus.HsmConfigurationIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmConfigurationIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.HsmStatus.HsmConfigurationIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmConfigurationIdentifier') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.HsmStatus.Status'),
        outputPath: 'Cluster.HsmStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.HsmStatus.Status', props);
    return resource.getResponseField('Cluster.HsmStatus.Status') as unknown as string;
  }

}

export class RedshiftResponsesRestoreFromClusterSnapshotClusterClusterSnapshotCopyStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRestoreFromClusterSnapshotMessage) {
  }

  public get destinationRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ClusterSnapshotCopyStatus.DestinationRegion'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.DestinationRegion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.ClusterSnapshotCopyStatus.DestinationRegion', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.DestinationRegion') as unknown as string;
  }

  public get retentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.RetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.RetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get snapshotCopyGrantName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName') as unknown as string;
  }

}

export class RedshiftResponsesRestoreFromClusterSnapshotClusterElasticIpStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRestoreFromClusterSnapshotMessage) {
  }

  public get elasticIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ElasticIpStatus.ElasticIp'),
        outputPath: 'Cluster.ElasticIpStatus.ElasticIp',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.ElasticIpStatus.ElasticIp', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.ElasticIp') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ElasticIpStatus.Status'),
        outputPath: 'Cluster.ElasticIpStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.ElasticIpStatus.Status', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.Status') as unknown as string;
  }

}

export class RedshiftResponsesRestoreFromClusterSnapshotClusterResizeInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRestoreFromClusterSnapshotMessage) {
  }

  public get resizeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ResizeInfo.ResizeType'),
        outputPath: 'Cluster.ResizeInfo.ResizeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.ResizeInfo.ResizeType', props);
    return resource.getResponseField('Cluster.ResizeInfo.ResizeType') as unknown as string;
  }

  public get allowCancelResize(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.ResizeInfo.AllowCancelResize'),
        outputPath: 'Cluster.ResizeInfo.AllowCancelResize',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.ResizeInfo.AllowCancelResize', props);
    return resource.getResponseField('Cluster.ResizeInfo.AllowCancelResize') as unknown as boolean;
  }

}

export class RedshiftResponsesRestoreFromClusterSnapshotClusterAquaConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRestoreFromClusterSnapshotMessage) {
  }

  public get aquaStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.AquaConfiguration.AquaStatus'),
        outputPath: 'Cluster.AquaConfiguration.AquaStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.AquaConfiguration.AquaStatus', props);
    return resource.getResponseField('Cluster.AquaConfiguration.AquaStatus') as unknown as string;
  }

  public get aquaConfigurationStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreFromClusterSnapshot.Cluster.AquaConfiguration.AquaConfigurationStatus'),
        outputPath: 'Cluster.AquaConfiguration.AquaConfigurationStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          AllowVersionUpgrade: this.__input.allowVersionUpgrade,
          ClusterSubnetGroupName: this.__input.clusterSubnetGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          OwnerAccount: this.__input.ownerAccount,
          HsmClientCertificateIdentifier: this.__input.hsmClientCertificateIdentifier,
          HsmConfigurationIdentifier: this.__input.hsmConfigurationIdentifier,
          ElasticIp: this.__input.elasticIp,
          ClusterParameterGroupName: this.__input.clusterParameterGroupName,
          ClusterSecurityGroups: this.__input.clusterSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          AutomatedSnapshotRetentionPeriod: this.__input.automatedSnapshotRetentionPeriod,
          ManualSnapshotRetentionPeriod: this.__input.manualSnapshotRetentionPeriod,
          KmsKeyId: this.__input.kmsKeyId,
          NodeType: this.__input.nodeType,
          EnhancedVpcRouting: this.__input.enhancedVpcRouting,
          AdditionalInfo: this.__input.additionalInfo,
          IamRoles: this.__input.iamRoles,
          MaintenanceTrackName: this.__input.maintenanceTrackName,
          SnapshotScheduleIdentifier: this.__input.snapshotScheduleIdentifier,
          NumberOfNodes: this.__input.numberOfNodes,
          AvailabilityZoneRelocation: this.__input.availabilityZoneRelocation,
          AquaConfigurationStatus: this.__input.aquaConfigurationStatus,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreFromClusterSnapshot.Cluster.AquaConfiguration.AquaConfigurationStatus', props);
    return resource.getResponseField('Cluster.AquaConfiguration.AquaConfigurationStatus') as unknown as string;
  }

}

export class RedshiftResponsesRestoreTableFromClusterSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRestoreTableFromClusterSnapshotMessage) {
  }

  public get tableRestoreStatus(): RedshiftResponsesRestoreTableFromClusterSnapshotTableRestoreStatus {
    return new RedshiftResponsesRestoreTableFromClusterSnapshotTableRestoreStatus(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesRestoreTableFromClusterSnapshotTableRestoreStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRestoreTableFromClusterSnapshotMessage) {
  }

  public get tableRestoreRequestId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreTableFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreTableFromClusterSnapshot.TableRestoreStatus.TableRestoreRequestId'),
        outputPath: 'TableRestoreStatus.TableRestoreRequestId',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SourceDatabaseName: this.__input.sourceDatabaseName,
          SourceSchemaName: this.__input.sourceSchemaName,
          SourceTableName: this.__input.sourceTableName,
          TargetDatabaseName: this.__input.targetDatabaseName,
          TargetSchemaName: this.__input.targetSchemaName,
          NewTableName: this.__input.newTableName,
          EnableCaseSensitiveIdentifier: this.__input.enableCaseSensitiveIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreTableFromClusterSnapshot.TableRestoreStatus.TableRestoreRequestId', props);
    return resource.getResponseField('TableRestoreStatus.TableRestoreRequestId') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreTableFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreTableFromClusterSnapshot.TableRestoreStatus.Status'),
        outputPath: 'TableRestoreStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SourceDatabaseName: this.__input.sourceDatabaseName,
          SourceSchemaName: this.__input.sourceSchemaName,
          SourceTableName: this.__input.sourceTableName,
          TargetDatabaseName: this.__input.targetDatabaseName,
          TargetSchemaName: this.__input.targetSchemaName,
          NewTableName: this.__input.newTableName,
          EnableCaseSensitiveIdentifier: this.__input.enableCaseSensitiveIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreTableFromClusterSnapshot.TableRestoreStatus.Status', props);
    return resource.getResponseField('TableRestoreStatus.Status') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreTableFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreTableFromClusterSnapshot.TableRestoreStatus.Message'),
        outputPath: 'TableRestoreStatus.Message',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SourceDatabaseName: this.__input.sourceDatabaseName,
          SourceSchemaName: this.__input.sourceSchemaName,
          SourceTableName: this.__input.sourceTableName,
          TargetDatabaseName: this.__input.targetDatabaseName,
          TargetSchemaName: this.__input.targetSchemaName,
          NewTableName: this.__input.newTableName,
          EnableCaseSensitiveIdentifier: this.__input.enableCaseSensitiveIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreTableFromClusterSnapshot.TableRestoreStatus.Message', props);
    return resource.getResponseField('TableRestoreStatus.Message') as unknown as string;
  }

  public get requestTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreTableFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreTableFromClusterSnapshot.TableRestoreStatus.RequestTime'),
        outputPath: 'TableRestoreStatus.RequestTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SourceDatabaseName: this.__input.sourceDatabaseName,
          SourceSchemaName: this.__input.sourceSchemaName,
          SourceTableName: this.__input.sourceTableName,
          TargetDatabaseName: this.__input.targetDatabaseName,
          TargetSchemaName: this.__input.targetSchemaName,
          NewTableName: this.__input.newTableName,
          EnableCaseSensitiveIdentifier: this.__input.enableCaseSensitiveIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreTableFromClusterSnapshot.TableRestoreStatus.RequestTime', props);
    return resource.getResponseField('TableRestoreStatus.RequestTime') as unknown as string;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreTableFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreTableFromClusterSnapshot.TableRestoreStatus.ProgressInMegaBytes'),
        outputPath: 'TableRestoreStatus.ProgressInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SourceDatabaseName: this.__input.sourceDatabaseName,
          SourceSchemaName: this.__input.sourceSchemaName,
          SourceTableName: this.__input.sourceTableName,
          TargetDatabaseName: this.__input.targetDatabaseName,
          TargetSchemaName: this.__input.targetSchemaName,
          NewTableName: this.__input.newTableName,
          EnableCaseSensitiveIdentifier: this.__input.enableCaseSensitiveIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreTableFromClusterSnapshot.TableRestoreStatus.ProgressInMegaBytes', props);
    return resource.getResponseField('TableRestoreStatus.ProgressInMegaBytes') as unknown as number;
  }

  public get totalDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreTableFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreTableFromClusterSnapshot.TableRestoreStatus.TotalDataInMegaBytes'),
        outputPath: 'TableRestoreStatus.TotalDataInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SourceDatabaseName: this.__input.sourceDatabaseName,
          SourceSchemaName: this.__input.sourceSchemaName,
          SourceTableName: this.__input.sourceTableName,
          TargetDatabaseName: this.__input.targetDatabaseName,
          TargetSchemaName: this.__input.targetSchemaName,
          NewTableName: this.__input.newTableName,
          EnableCaseSensitiveIdentifier: this.__input.enableCaseSensitiveIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreTableFromClusterSnapshot.TableRestoreStatus.TotalDataInMegaBytes', props);
    return resource.getResponseField('TableRestoreStatus.TotalDataInMegaBytes') as unknown as number;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreTableFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreTableFromClusterSnapshot.TableRestoreStatus.ClusterIdentifier'),
        outputPath: 'TableRestoreStatus.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SourceDatabaseName: this.__input.sourceDatabaseName,
          SourceSchemaName: this.__input.sourceSchemaName,
          SourceTableName: this.__input.sourceTableName,
          TargetDatabaseName: this.__input.targetDatabaseName,
          TargetSchemaName: this.__input.targetSchemaName,
          NewTableName: this.__input.newTableName,
          EnableCaseSensitiveIdentifier: this.__input.enableCaseSensitiveIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreTableFromClusterSnapshot.TableRestoreStatus.ClusterIdentifier', props);
    return resource.getResponseField('TableRestoreStatus.ClusterIdentifier') as unknown as string;
  }

  public get snapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreTableFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreTableFromClusterSnapshot.TableRestoreStatus.SnapshotIdentifier'),
        outputPath: 'TableRestoreStatus.SnapshotIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SourceDatabaseName: this.__input.sourceDatabaseName,
          SourceSchemaName: this.__input.sourceSchemaName,
          SourceTableName: this.__input.sourceTableName,
          TargetDatabaseName: this.__input.targetDatabaseName,
          TargetSchemaName: this.__input.targetSchemaName,
          NewTableName: this.__input.newTableName,
          EnableCaseSensitiveIdentifier: this.__input.enableCaseSensitiveIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreTableFromClusterSnapshot.TableRestoreStatus.SnapshotIdentifier', props);
    return resource.getResponseField('TableRestoreStatus.SnapshotIdentifier') as unknown as string;
  }

  public get sourceDatabaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreTableFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreTableFromClusterSnapshot.TableRestoreStatus.SourceDatabaseName'),
        outputPath: 'TableRestoreStatus.SourceDatabaseName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SourceDatabaseName: this.__input.sourceDatabaseName,
          SourceSchemaName: this.__input.sourceSchemaName,
          SourceTableName: this.__input.sourceTableName,
          TargetDatabaseName: this.__input.targetDatabaseName,
          TargetSchemaName: this.__input.targetSchemaName,
          NewTableName: this.__input.newTableName,
          EnableCaseSensitiveIdentifier: this.__input.enableCaseSensitiveIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreTableFromClusterSnapshot.TableRestoreStatus.SourceDatabaseName', props);
    return resource.getResponseField('TableRestoreStatus.SourceDatabaseName') as unknown as string;
  }

  public get sourceSchemaName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreTableFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreTableFromClusterSnapshot.TableRestoreStatus.SourceSchemaName'),
        outputPath: 'TableRestoreStatus.SourceSchemaName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SourceDatabaseName: this.__input.sourceDatabaseName,
          SourceSchemaName: this.__input.sourceSchemaName,
          SourceTableName: this.__input.sourceTableName,
          TargetDatabaseName: this.__input.targetDatabaseName,
          TargetSchemaName: this.__input.targetSchemaName,
          NewTableName: this.__input.newTableName,
          EnableCaseSensitiveIdentifier: this.__input.enableCaseSensitiveIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreTableFromClusterSnapshot.TableRestoreStatus.SourceSchemaName', props);
    return resource.getResponseField('TableRestoreStatus.SourceSchemaName') as unknown as string;
  }

  public get sourceTableName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreTableFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreTableFromClusterSnapshot.TableRestoreStatus.SourceTableName'),
        outputPath: 'TableRestoreStatus.SourceTableName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SourceDatabaseName: this.__input.sourceDatabaseName,
          SourceSchemaName: this.__input.sourceSchemaName,
          SourceTableName: this.__input.sourceTableName,
          TargetDatabaseName: this.__input.targetDatabaseName,
          TargetSchemaName: this.__input.targetSchemaName,
          NewTableName: this.__input.newTableName,
          EnableCaseSensitiveIdentifier: this.__input.enableCaseSensitiveIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreTableFromClusterSnapshot.TableRestoreStatus.SourceTableName', props);
    return resource.getResponseField('TableRestoreStatus.SourceTableName') as unknown as string;
  }

  public get targetDatabaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreTableFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreTableFromClusterSnapshot.TableRestoreStatus.TargetDatabaseName'),
        outputPath: 'TableRestoreStatus.TargetDatabaseName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SourceDatabaseName: this.__input.sourceDatabaseName,
          SourceSchemaName: this.__input.sourceSchemaName,
          SourceTableName: this.__input.sourceTableName,
          TargetDatabaseName: this.__input.targetDatabaseName,
          TargetSchemaName: this.__input.targetSchemaName,
          NewTableName: this.__input.newTableName,
          EnableCaseSensitiveIdentifier: this.__input.enableCaseSensitiveIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreTableFromClusterSnapshot.TableRestoreStatus.TargetDatabaseName', props);
    return resource.getResponseField('TableRestoreStatus.TargetDatabaseName') as unknown as string;
  }

  public get targetSchemaName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreTableFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreTableFromClusterSnapshot.TableRestoreStatus.TargetSchemaName'),
        outputPath: 'TableRestoreStatus.TargetSchemaName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SourceDatabaseName: this.__input.sourceDatabaseName,
          SourceSchemaName: this.__input.sourceSchemaName,
          SourceTableName: this.__input.sourceTableName,
          TargetDatabaseName: this.__input.targetDatabaseName,
          TargetSchemaName: this.__input.targetSchemaName,
          NewTableName: this.__input.newTableName,
          EnableCaseSensitiveIdentifier: this.__input.enableCaseSensitiveIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreTableFromClusterSnapshot.TableRestoreStatus.TargetSchemaName', props);
    return resource.getResponseField('TableRestoreStatus.TargetSchemaName') as unknown as string;
  }

  public get newTableName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreTableFromClusterSnapshot',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RestoreTableFromClusterSnapshot.TableRestoreStatus.NewTableName'),
        outputPath: 'TableRestoreStatus.NewTableName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SourceDatabaseName: this.__input.sourceDatabaseName,
          SourceSchemaName: this.__input.sourceSchemaName,
          SourceTableName: this.__input.sourceTableName,
          TargetDatabaseName: this.__input.targetDatabaseName,
          TargetSchemaName: this.__input.targetSchemaName,
          NewTableName: this.__input.newTableName,
          EnableCaseSensitiveIdentifier: this.__input.enableCaseSensitiveIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreTableFromClusterSnapshot.TableRestoreStatus.NewTableName', props);
    return resource.getResponseField('TableRestoreStatus.NewTableName') as unknown as string;
  }

}

export class RedshiftResponsesResumeCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftResumeClusterMessage) {
  }

  public get cluster(): RedshiftResponsesResumeClusterCluster {
    return new RedshiftResponsesResumeClusterCluster(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesResumeClusterCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftResumeClusterMessage) {
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ClusterIdentifier'),
        outputPath: 'Cluster.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.ClusterIdentifier') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.NodeType'),
        outputPath: 'Cluster.NodeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.NodeType', props);
    return resource.getResponseField('Cluster.NodeType') as unknown as string;
  }

  public get clusterStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ClusterStatus'),
        outputPath: 'Cluster.ClusterStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.ClusterStatus', props);
    return resource.getResponseField('Cluster.ClusterStatus') as unknown as string;
  }

  public get clusterAvailabilityStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ClusterAvailabilityStatus'),
        outputPath: 'Cluster.ClusterAvailabilityStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.ClusterAvailabilityStatus', props);
    return resource.getResponseField('Cluster.ClusterAvailabilityStatus') as unknown as string;
  }

  public get modifyStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ModifyStatus'),
        outputPath: 'Cluster.ModifyStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.ModifyStatus', props);
    return resource.getResponseField('Cluster.ModifyStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.MasterUsername'),
        outputPath: 'Cluster.MasterUsername',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.MasterUsername', props);
    return resource.getResponseField('Cluster.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.DBName'),
        outputPath: 'Cluster.DBName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.DBName', props);
    return resource.getResponseField('Cluster.DBName') as unknown as string;
  }

  public get endpoint(): RedshiftResponsesResumeClusterClusterEndpoint {
    return new RedshiftResponsesResumeClusterClusterEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ClusterCreateTime'),
        outputPath: 'Cluster.ClusterCreateTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.ClusterCreateTime', props);
    return resource.getResponseField('Cluster.ClusterCreateTime') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterSecurityGroups(): shapes.RedshiftClusterSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ClusterSecurityGroups'),
        outputPath: 'Cluster.ClusterSecurityGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.ClusterSecurityGroups', props);
    return resource.getResponseField('Cluster.ClusterSecurityGroups') as unknown as shapes.RedshiftClusterSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RedshiftVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.VpcSecurityGroups'),
        outputPath: 'Cluster.VpcSecurityGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.VpcSecurityGroups', props);
    return resource.getResponseField('Cluster.VpcSecurityGroups') as unknown as shapes.RedshiftVpcSecurityGroupMembership[];
  }

  public get clusterParameterGroups(): shapes.RedshiftClusterParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ClusterParameterGroups'),
        outputPath: 'Cluster.ClusterParameterGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.ClusterParameterGroups', props);
    return resource.getResponseField('Cluster.ClusterParameterGroups') as unknown as shapes.RedshiftClusterParameterGroupStatus[];
  }

  public get clusterSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ClusterSubnetGroupName'),
        outputPath: 'Cluster.ClusterSubnetGroupName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.ClusterSubnetGroupName', props);
    return resource.getResponseField('Cluster.ClusterSubnetGroupName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.VpcId'),
        outputPath: 'Cluster.VpcId',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.VpcId', props);
    return resource.getResponseField('Cluster.VpcId') as unknown as string;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.AvailabilityZone'),
        outputPath: 'Cluster.AvailabilityZone',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.AvailabilityZone', props);
    return resource.getResponseField('Cluster.AvailabilityZone') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.PreferredMaintenanceWindow'),
        outputPath: 'Cluster.PreferredMaintenanceWindow',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('Cluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RedshiftResponsesResumeClusterClusterPendingModifiedValues {
    return new RedshiftResponsesResumeClusterClusterPendingModifiedValues(this.__scope, this.__resources, this.__input);
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ClusterVersion'),
        outputPath: 'Cluster.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.ClusterVersion', props);
    return resource.getResponseField('Cluster.ClusterVersion') as unknown as string;
  }

  public get allowVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.AllowVersionUpgrade'),
        outputPath: 'Cluster.AllowVersionUpgrade',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.AllowVersionUpgrade', props);
    return resource.getResponseField('Cluster.AllowVersionUpgrade') as unknown as boolean;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.NumberOfNodes'),
        outputPath: 'Cluster.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.NumberOfNodes', props);
    return resource.getResponseField('Cluster.NumberOfNodes') as unknown as number;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.PubliclyAccessible'),
        outputPath: 'Cluster.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PubliclyAccessible') as unknown as boolean;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.Encrypted'),
        outputPath: 'Cluster.Encrypted',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.Encrypted', props);
    return resource.getResponseField('Cluster.Encrypted') as unknown as boolean;
  }

  public get restoreStatus(): RedshiftResponsesResumeClusterClusterRestoreStatus {
    return new RedshiftResponsesResumeClusterClusterRestoreStatus(this.__scope, this.__resources, this.__input);
  }

  public get dataTransferProgress(): RedshiftResponsesResumeClusterClusterDataTransferProgress {
    return new RedshiftResponsesResumeClusterClusterDataTransferProgress(this.__scope, this.__resources, this.__input);
  }

  public get hsmStatus(): RedshiftResponsesResumeClusterClusterHsmStatus {
    return new RedshiftResponsesResumeClusterClusterHsmStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterSnapshotCopyStatus(): RedshiftResponsesResumeClusterClusterClusterSnapshotCopyStatus {
    return new RedshiftResponsesResumeClusterClusterClusterSnapshotCopyStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterPublicKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ClusterPublicKey'),
        outputPath: 'Cluster.ClusterPublicKey',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.ClusterPublicKey', props);
    return resource.getResponseField('Cluster.ClusterPublicKey') as unknown as string;
  }

  public get clusterNodes(): shapes.RedshiftClusterNode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ClusterNodes'),
        outputPath: 'Cluster.ClusterNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.ClusterNodes', props);
    return resource.getResponseField('Cluster.ClusterNodes') as unknown as shapes.RedshiftClusterNode[];
  }

  public get elasticIpStatus(): RedshiftResponsesResumeClusterClusterElasticIpStatus {
    return new RedshiftResponsesResumeClusterClusterElasticIpStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterRevisionNumber(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ClusterRevisionNumber'),
        outputPath: 'Cluster.ClusterRevisionNumber',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.ClusterRevisionNumber', props);
    return resource.getResponseField('Cluster.ClusterRevisionNumber') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.Tags'),
        outputPath: 'Cluster.Tags',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.Tags', props);
    return resource.getResponseField('Cluster.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.KmsKeyId'),
        outputPath: 'Cluster.KmsKeyId',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.KmsKeyId', props);
    return resource.getResponseField('Cluster.KmsKeyId') as unknown as string;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.EnhancedVpcRouting'),
        outputPath: 'Cluster.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.EnhancedVpcRouting') as unknown as boolean;
  }

  public get iamRoles(): shapes.RedshiftClusterIamRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.IamRoles'),
        outputPath: 'Cluster.IamRoles',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.IamRoles', props);
    return resource.getResponseField('Cluster.IamRoles') as unknown as shapes.RedshiftClusterIamRole[];
  }

  public get pendingActions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.PendingActions'),
        outputPath: 'Cluster.PendingActions',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.PendingActions', props);
    return resource.getResponseField('Cluster.PendingActions') as unknown as string[];
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.MaintenanceTrackName'),
        outputPath: 'Cluster.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.MaintenanceTrackName') as unknown as string;
  }

  public get elasticResizeNumberOfNodeOptions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ElasticResizeNumberOfNodeOptions'),
        outputPath: 'Cluster.ElasticResizeNumberOfNodeOptions',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.ElasticResizeNumberOfNodeOptions', props);
    return resource.getResponseField('Cluster.ElasticResizeNumberOfNodeOptions') as unknown as string;
  }

  public get deferredMaintenanceWindows(): shapes.RedshiftDeferredMaintenanceWindow[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.DeferredMaintenanceWindows'),
        outputPath: 'Cluster.DeferredMaintenanceWindows',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.DeferredMaintenanceWindows', props);
    return resource.getResponseField('Cluster.DeferredMaintenanceWindows') as unknown as shapes.RedshiftDeferredMaintenanceWindow[];
  }

  public get snapshotScheduleIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.SnapshotScheduleIdentifier'),
        outputPath: 'Cluster.SnapshotScheduleIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.SnapshotScheduleIdentifier', props);
    return resource.getResponseField('Cluster.SnapshotScheduleIdentifier') as unknown as string;
  }

  public get snapshotScheduleState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.SnapshotScheduleState'),
        outputPath: 'Cluster.SnapshotScheduleState',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.SnapshotScheduleState', props);
    return resource.getResponseField('Cluster.SnapshotScheduleState') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ExpectedNextSnapshotScheduleTime'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.ExpectedNextSnapshotScheduleTime', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTime') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTimeStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ExpectedNextSnapshotScheduleTimeStatus'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTimeStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.ExpectedNextSnapshotScheduleTimeStatus', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTimeStatus') as unknown as string;
  }

  public get nextMaintenanceWindowStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.NextMaintenanceWindowStartTime'),
        outputPath: 'Cluster.NextMaintenanceWindowStartTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.NextMaintenanceWindowStartTime', props);
    return resource.getResponseField('Cluster.NextMaintenanceWindowStartTime') as unknown as string;
  }

  public get resizeInfo(): RedshiftResponsesResumeClusterClusterResizeInfo {
    return new RedshiftResponsesResumeClusterClusterResizeInfo(this.__scope, this.__resources, this.__input);
  }

  public get availabilityZoneRelocationStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.AvailabilityZoneRelocationStatus'),
        outputPath: 'Cluster.AvailabilityZoneRelocationStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.AvailabilityZoneRelocationStatus', props);
    return resource.getResponseField('Cluster.AvailabilityZoneRelocationStatus') as unknown as string;
  }

  public get clusterNamespaceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ClusterNamespaceArn'),
        outputPath: 'Cluster.ClusterNamespaceArn',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.ClusterNamespaceArn', props);
    return resource.getResponseField('Cluster.ClusterNamespaceArn') as unknown as string;
  }

  public get totalStorageCapacityInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.TotalStorageCapacityInMegaBytes'),
        outputPath: 'Cluster.TotalStorageCapacityInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.TotalStorageCapacityInMegaBytes', props);
    return resource.getResponseField('Cluster.TotalStorageCapacityInMegaBytes') as unknown as number;
  }

  public get aquaConfiguration(): RedshiftResponsesResumeClusterClusterAquaConfiguration {
    return new RedshiftResponsesResumeClusterClusterAquaConfiguration(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesResumeClusterClusterEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftResumeClusterMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.Endpoint.Address'),
        outputPath: 'Cluster.Endpoint.Address',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.Endpoint.Address', props);
    return resource.getResponseField('Cluster.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.Endpoint.Port'),
        outputPath: 'Cluster.Endpoint.Port',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.Endpoint.Port', props);
    return resource.getResponseField('Cluster.Endpoint.Port') as unknown as number;
  }

  public get vpcEndpoints(): shapes.RedshiftVpcEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.Endpoint.VpcEndpoints'),
        outputPath: 'Cluster.Endpoint.VpcEndpoints',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.Endpoint.VpcEndpoints', props);
    return resource.getResponseField('Cluster.Endpoint.VpcEndpoints') as unknown as shapes.RedshiftVpcEndpoint[];
  }

}

export class RedshiftResponsesResumeClusterClusterPendingModifiedValues {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftResumeClusterMessage) {
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'Cluster.PendingModifiedValues.MasterUserPassword',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.PendingModifiedValues.NodeType'),
        outputPath: 'Cluster.PendingModifiedValues.NodeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.PendingModifiedValues.NodeType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.PendingModifiedValues.NumberOfNodes'),
        outputPath: 'Cluster.PendingModifiedValues.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.PendingModifiedValues.NumberOfNodes', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NumberOfNodes') as unknown as number;
  }

  public get clusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.PendingModifiedValues.ClusterType'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.PendingModifiedValues.ClusterType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterType') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.PendingModifiedValues.ClusterVersion'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.PendingModifiedValues.ClusterVersion', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterVersion') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.PendingModifiedValues.ClusterIdentifier'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.PendingModifiedValues.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterIdentifier') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.PendingModifiedValues.PubliclyAccessible'),
        outputPath: 'Cluster.PendingModifiedValues.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.PendingModifiedValues.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.PubliclyAccessible') as unknown as boolean;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.PendingModifiedValues.EnhancedVpcRouting'),
        outputPath: 'Cluster.PendingModifiedValues.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.PendingModifiedValues.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.PendingModifiedValues.MaintenanceTrackName'),
        outputPath: 'Cluster.PendingModifiedValues.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.PendingModifiedValues.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MaintenanceTrackName') as unknown as string;
  }

  public get encryptionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.PendingModifiedValues.EncryptionType'),
        outputPath: 'Cluster.PendingModifiedValues.EncryptionType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.PendingModifiedValues.EncryptionType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EncryptionType') as unknown as string;
  }

}

export class RedshiftResponsesResumeClusterClusterRestoreStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftResumeClusterMessage) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.RestoreStatus.Status'),
        outputPath: 'Cluster.RestoreStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.RestoreStatus.Status', props);
    return resource.getResponseField('Cluster.RestoreStatus.Status') as unknown as string;
  }

  public get currentRestoreRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond') as unknown as number;
  }

  public get snapshotSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.RestoreStatus.SnapshotSizeInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.SnapshotSizeInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.RestoreStatus.SnapshotSizeInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.SnapshotSizeInMegaBytes') as unknown as number;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.RestoreStatus.ProgressInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.ProgressInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.RestoreStatus.ProgressInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.ProgressInMegaBytes') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.RestoreStatus.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.RestoreStatus.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.RestoreStatus.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.ElapsedTimeInSeconds') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

}

export class RedshiftResponsesResumeClusterClusterDataTransferProgress {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftResumeClusterMessage) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.DataTransferProgress.Status'),
        outputPath: 'Cluster.DataTransferProgress.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.DataTransferProgress.Status', props);
    return resource.getResponseField('Cluster.DataTransferProgress.Status') as unknown as string;
  }

  public get currentRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond') as unknown as number;
  }

  public get totalDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.DataTransferProgress.TotalDataInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.TotalDataInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.DataTransferProgress.TotalDataInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.TotalDataInMegaBytes') as unknown as number;
  }

  public get dataTransferredInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.DataTransferProgress.DataTransferredInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.DataTransferredInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.DataTransferProgress.DataTransferredInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.DataTransferredInMegaBytes') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.DataTransferProgress.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.DataTransferProgress.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.ElapsedTimeInSeconds') as unknown as number;
  }

}

export class RedshiftResponsesResumeClusterClusterHsmStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftResumeClusterMessage) {
  }

  public get hsmClientCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.HsmStatus.HsmClientCertificateIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmClientCertificateIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.HsmStatus.HsmClientCertificateIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmClientCertificateIdentifier') as unknown as string;
  }

  public get hsmConfigurationIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.HsmStatus.HsmConfigurationIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmConfigurationIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.HsmStatus.HsmConfigurationIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmConfigurationIdentifier') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.HsmStatus.Status'),
        outputPath: 'Cluster.HsmStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.HsmStatus.Status', props);
    return resource.getResponseField('Cluster.HsmStatus.Status') as unknown as string;
  }

}

export class RedshiftResponsesResumeClusterClusterClusterSnapshotCopyStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftResumeClusterMessage) {
  }

  public get destinationRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ClusterSnapshotCopyStatus.DestinationRegion'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.DestinationRegion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.ClusterSnapshotCopyStatus.DestinationRegion', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.DestinationRegion') as unknown as string;
  }

  public get retentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.RetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.RetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get snapshotCopyGrantName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName') as unknown as string;
  }

}

export class RedshiftResponsesResumeClusterClusterElasticIpStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftResumeClusterMessage) {
  }

  public get elasticIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ElasticIpStatus.ElasticIp'),
        outputPath: 'Cluster.ElasticIpStatus.ElasticIp',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.ElasticIpStatus.ElasticIp', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.ElasticIp') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ElasticIpStatus.Status'),
        outputPath: 'Cluster.ElasticIpStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.ElasticIpStatus.Status', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.Status') as unknown as string;
  }

}

export class RedshiftResponsesResumeClusterClusterResizeInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftResumeClusterMessage) {
  }

  public get resizeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ResizeInfo.ResizeType'),
        outputPath: 'Cluster.ResizeInfo.ResizeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.ResizeInfo.ResizeType', props);
    return resource.getResponseField('Cluster.ResizeInfo.ResizeType') as unknown as string;
  }

  public get allowCancelResize(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.ResizeInfo.AllowCancelResize'),
        outputPath: 'Cluster.ResizeInfo.AllowCancelResize',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.ResizeInfo.AllowCancelResize', props);
    return resource.getResponseField('Cluster.ResizeInfo.AllowCancelResize') as unknown as boolean;
  }

}

export class RedshiftResponsesResumeClusterClusterAquaConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftResumeClusterMessage) {
  }

  public get aquaStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.AquaConfiguration.AquaStatus'),
        outputPath: 'Cluster.AquaConfiguration.AquaStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.AquaConfiguration.AquaStatus', props);
    return resource.getResponseField('Cluster.AquaConfiguration.AquaStatus') as unknown as string;
  }

  public get aquaConfigurationStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resumeCluster',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.ResumeCluster.Cluster.AquaConfiguration.AquaConfigurationStatus'),
        outputPath: 'Cluster.AquaConfiguration.AquaConfigurationStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResumeCluster.Cluster.AquaConfiguration.AquaConfigurationStatus', props);
    return resource.getResponseField('Cluster.AquaConfiguration.AquaConfigurationStatus') as unknown as string;
  }

}

export class RedshiftResponsesRevokeClusterSecurityGroupIngress {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRevokeClusterSecurityGroupIngressMessage) {
  }

  public get clusterSecurityGroup(): RedshiftResponsesRevokeClusterSecurityGroupIngressClusterSecurityGroup {
    return new RedshiftResponsesRevokeClusterSecurityGroupIngressClusterSecurityGroup(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesRevokeClusterSecurityGroupIngressClusterSecurityGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRevokeClusterSecurityGroupIngressMessage) {
  }

  public get clusterSecurityGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeClusterSecurityGroupIngress',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeClusterSecurityGroupIngress.ClusterSecurityGroup.ClusterSecurityGroupName'),
        outputPath: 'ClusterSecurityGroup.ClusterSecurityGroupName',
        parameters: {
          ClusterSecurityGroupName: this.__input.clusterSecurityGroupName,
          CIDRIP: this.__input.cidrip,
          EC2SecurityGroupName: this.__input.ec2SecurityGroupName,
          EC2SecurityGroupOwnerId: this.__input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeClusterSecurityGroupIngress.ClusterSecurityGroup.ClusterSecurityGroupName', props);
    return resource.getResponseField('ClusterSecurityGroup.ClusterSecurityGroupName') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeClusterSecurityGroupIngress',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeClusterSecurityGroupIngress.ClusterSecurityGroup.Description'),
        outputPath: 'ClusterSecurityGroup.Description',
        parameters: {
          ClusterSecurityGroupName: this.__input.clusterSecurityGroupName,
          CIDRIP: this.__input.cidrip,
          EC2SecurityGroupName: this.__input.ec2SecurityGroupName,
          EC2SecurityGroupOwnerId: this.__input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeClusterSecurityGroupIngress.ClusterSecurityGroup.Description', props);
    return resource.getResponseField('ClusterSecurityGroup.Description') as unknown as string;
  }

  public get ec2SecurityGroups(): shapes.RedshiftEc2SecurityGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeClusterSecurityGroupIngress',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeClusterSecurityGroupIngress.ClusterSecurityGroup.EC2SecurityGroups'),
        outputPath: 'ClusterSecurityGroup.EC2SecurityGroups',
        parameters: {
          ClusterSecurityGroupName: this.__input.clusterSecurityGroupName,
          CIDRIP: this.__input.cidrip,
          EC2SecurityGroupName: this.__input.ec2SecurityGroupName,
          EC2SecurityGroupOwnerId: this.__input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeClusterSecurityGroupIngress.ClusterSecurityGroup.EC2SecurityGroups', props);
    return resource.getResponseField('ClusterSecurityGroup.EC2SecurityGroups') as unknown as shapes.RedshiftEc2SecurityGroup[];
  }

  public get ipRanges(): shapes.RedshiftIpRange[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeClusterSecurityGroupIngress',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeClusterSecurityGroupIngress.ClusterSecurityGroup.IPRanges'),
        outputPath: 'ClusterSecurityGroup.IPRanges',
        parameters: {
          ClusterSecurityGroupName: this.__input.clusterSecurityGroupName,
          CIDRIP: this.__input.cidrip,
          EC2SecurityGroupName: this.__input.ec2SecurityGroupName,
          EC2SecurityGroupOwnerId: this.__input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeClusterSecurityGroupIngress.ClusterSecurityGroup.IPRanges', props);
    return resource.getResponseField('ClusterSecurityGroup.IPRanges') as unknown as shapes.RedshiftIpRange[];
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeClusterSecurityGroupIngress',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeClusterSecurityGroupIngress.ClusterSecurityGroup.Tags'),
        outputPath: 'ClusterSecurityGroup.Tags',
        parameters: {
          ClusterSecurityGroupName: this.__input.clusterSecurityGroupName,
          CIDRIP: this.__input.cidrip,
          EC2SecurityGroupName: this.__input.ec2SecurityGroupName,
          EC2SecurityGroupOwnerId: this.__input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeClusterSecurityGroupIngress.ClusterSecurityGroup.Tags', props);
    return resource.getResponseField('ClusterSecurityGroup.Tags') as unknown as shapes.RedshiftTag[];
  }

}

export class RedshiftResponsesRevokeEndpointAccess {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRevokeEndpointAccessMessage) {
  }

  public get grantor(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeEndpointAccess.Grantor'),
        outputPath: 'Grantor',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          Account: this.__input.account,
          VpcIds: this.__input.vpcIds,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeEndpointAccess.Grantor', props);
    return resource.getResponseField('Grantor') as unknown as string;
  }

  public get grantee(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeEndpointAccess.Grantee'),
        outputPath: 'Grantee',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          Account: this.__input.account,
          VpcIds: this.__input.vpcIds,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeEndpointAccess.Grantee', props);
    return resource.getResponseField('Grantee') as unknown as string;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeEndpointAccess.ClusterIdentifier'),
        outputPath: 'ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          Account: this.__input.account,
          VpcIds: this.__input.vpcIds,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeEndpointAccess.ClusterIdentifier', props);
    return resource.getResponseField('ClusterIdentifier') as unknown as string;
  }

  public get authorizeTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeEndpointAccess.AuthorizeTime'),
        outputPath: 'AuthorizeTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          Account: this.__input.account,
          VpcIds: this.__input.vpcIds,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeEndpointAccess.AuthorizeTime', props);
    return resource.getResponseField('AuthorizeTime') as unknown as string;
  }

  public get clusterStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeEndpointAccess.ClusterStatus'),
        outputPath: 'ClusterStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          Account: this.__input.account,
          VpcIds: this.__input.vpcIds,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeEndpointAccess.ClusterStatus', props);
    return resource.getResponseField('ClusterStatus') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeEndpointAccess.Status'),
        outputPath: 'Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          Account: this.__input.account,
          VpcIds: this.__input.vpcIds,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeEndpointAccess.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

  public get allowedAllVpCs(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeEndpointAccess.AllowedAllVPCs'),
        outputPath: 'AllowedAllVPCs',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          Account: this.__input.account,
          VpcIds: this.__input.vpcIds,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeEndpointAccess.AllowedAllVPCs', props);
    return resource.getResponseField('AllowedAllVPCs') as unknown as boolean;
  }

  public get allowedVpCs(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeEndpointAccess.AllowedVPCs'),
        outputPath: 'AllowedVPCs',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          Account: this.__input.account,
          VpcIds: this.__input.vpcIds,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeEndpointAccess.AllowedVPCs', props);
    return resource.getResponseField('AllowedVPCs') as unknown as string[];
  }

  public get endpointCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeEndpointAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeEndpointAccess.EndpointCount'),
        outputPath: 'EndpointCount',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
          Account: this.__input.account,
          VpcIds: this.__input.vpcIds,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeEndpointAccess.EndpointCount', props);
    return resource.getResponseField('EndpointCount') as unknown as number;
  }

}

export class RedshiftResponsesRevokeSnapshotAccess {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRevokeSnapshotAccessMessage) {
  }

  public get snapshot(): RedshiftResponsesRevokeSnapshotAccessSnapshot {
    return new RedshiftResponsesRevokeSnapshotAccessSnapshot(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesRevokeSnapshotAccessSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRevokeSnapshotAccessMessage) {
  }

  public get snapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.SnapshotIdentifier'),
        outputPath: 'Snapshot.SnapshotIdentifier',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSnapshotAccess.Snapshot.SnapshotIdentifier', props);
    return resource.getResponseField('Snapshot.SnapshotIdentifier') as unknown as string;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.ClusterIdentifier'),
        outputPath: 'Snapshot.ClusterIdentifier',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSnapshotAccess.Snapshot.ClusterIdentifier', props);
    return resource.getResponseField('Snapshot.ClusterIdentifier') as unknown as string;
  }

  public get snapshotCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.SnapshotCreateTime'),
        outputPath: 'Snapshot.SnapshotCreateTime',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSnapshotAccess.Snapshot.SnapshotCreateTime', props);
    return resource.getResponseField('Snapshot.SnapshotCreateTime') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.Status'),
        outputPath: 'Snapshot.Status',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSnapshotAccess.Snapshot.Status', props);
    return resource.getResponseField('Snapshot.Status') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.Port'),
        outputPath: 'Snapshot.Port',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSnapshotAccess.Snapshot.Port', props);
    return resource.getResponseField('Snapshot.Port') as unknown as number;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.AvailabilityZone'),
        outputPath: 'Snapshot.AvailabilityZone',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSnapshotAccess.Snapshot.AvailabilityZone', props);
    return resource.getResponseField('Snapshot.AvailabilityZone') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.ClusterCreateTime'),
        outputPath: 'Snapshot.ClusterCreateTime',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSnapshotAccess.Snapshot.ClusterCreateTime', props);
    return resource.getResponseField('Snapshot.ClusterCreateTime') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.MasterUsername'),
        outputPath: 'Snapshot.MasterUsername',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSnapshotAccess.Snapshot.MasterUsername', props);
    return resource.getResponseField('Snapshot.MasterUsername') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.ClusterVersion'),
        outputPath: 'Snapshot.ClusterVersion',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSnapshotAccess.Snapshot.ClusterVersion', props);
    return resource.getResponseField('Snapshot.ClusterVersion') as unknown as string;
  }

  public get engineFullVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.EngineFullVersion'),
        outputPath: 'Snapshot.EngineFullVersion',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSnapshotAccess.Snapshot.EngineFullVersion', props);
    return resource.getResponseField('Snapshot.EngineFullVersion') as unknown as string;
  }

  public get snapshotType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.SnapshotType'),
        outputPath: 'Snapshot.SnapshotType',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSnapshotAccess.Snapshot.SnapshotType', props);
    return resource.getResponseField('Snapshot.SnapshotType') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.NodeType'),
        outputPath: 'Snapshot.NodeType',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSnapshotAccess.Snapshot.NodeType', props);
    return resource.getResponseField('Snapshot.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.NumberOfNodes'),
        outputPath: 'Snapshot.NumberOfNodes',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSnapshotAccess.Snapshot.NumberOfNodes', props);
    return resource.getResponseField('Snapshot.NumberOfNodes') as unknown as number;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.DBName'),
        outputPath: 'Snapshot.DBName',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSnapshotAccess.Snapshot.DBName', props);
    return resource.getResponseField('Snapshot.DBName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.VpcId'),
        outputPath: 'Snapshot.VpcId',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSnapshotAccess.Snapshot.VpcId', props);
    return resource.getResponseField('Snapshot.VpcId') as unknown as string;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.Encrypted'),
        outputPath: 'Snapshot.Encrypted',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSnapshotAccess.Snapshot.Encrypted', props);
    return resource.getResponseField('Snapshot.Encrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.KmsKeyId'),
        outputPath: 'Snapshot.KmsKeyId',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSnapshotAccess.Snapshot.KmsKeyId', props);
    return resource.getResponseField('Snapshot.KmsKeyId') as unknown as string;
  }

  public get encryptedWithHsm(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.EncryptedWithHSM'),
        outputPath: 'Snapshot.EncryptedWithHSM',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSnapshotAccess.Snapshot.EncryptedWithHSM', props);
    return resource.getResponseField('Snapshot.EncryptedWithHSM') as unknown as boolean;
  }

  public get accountsWithRestoreAccess(): shapes.RedshiftAccountWithRestoreAccess[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.AccountsWithRestoreAccess'),
        outputPath: 'Snapshot.AccountsWithRestoreAccess',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSnapshotAccess.Snapshot.AccountsWithRestoreAccess', props);
    return resource.getResponseField('Snapshot.AccountsWithRestoreAccess') as unknown as shapes.RedshiftAccountWithRestoreAccess[];
  }

  public get ownerAccount(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.OwnerAccount'),
        outputPath: 'Snapshot.OwnerAccount',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSnapshotAccess.Snapshot.OwnerAccount', props);
    return resource.getResponseField('Snapshot.OwnerAccount') as unknown as string;
  }

  public get totalBackupSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.TotalBackupSizeInMegaBytes'),
        outputPath: 'Snapshot.TotalBackupSizeInMegaBytes',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSnapshotAccess.Snapshot.TotalBackupSizeInMegaBytes', props);
    return resource.getResponseField('Snapshot.TotalBackupSizeInMegaBytes') as unknown as number;
  }

  public get actualIncrementalBackupSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.ActualIncrementalBackupSizeInMegaBytes'),
        outputPath: 'Snapshot.ActualIncrementalBackupSizeInMegaBytes',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSnapshotAccess.Snapshot.ActualIncrementalBackupSizeInMegaBytes', props);
    return resource.getResponseField('Snapshot.ActualIncrementalBackupSizeInMegaBytes') as unknown as number;
  }

  public get backupProgressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.BackupProgressInMegaBytes'),
        outputPath: 'Snapshot.BackupProgressInMegaBytes',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSnapshotAccess.Snapshot.BackupProgressInMegaBytes', props);
    return resource.getResponseField('Snapshot.BackupProgressInMegaBytes') as unknown as number;
  }

  public get currentBackupRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.CurrentBackupRateInMegaBytesPerSecond'),
        outputPath: 'Snapshot.CurrentBackupRateInMegaBytesPerSecond',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSnapshotAccess.Snapshot.CurrentBackupRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Snapshot.CurrentBackupRateInMegaBytesPerSecond') as unknown as number;
  }

  public get estimatedSecondsToCompletion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.EstimatedSecondsToCompletion'),
        outputPath: 'Snapshot.EstimatedSecondsToCompletion',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSnapshotAccess.Snapshot.EstimatedSecondsToCompletion', props);
    return resource.getResponseField('Snapshot.EstimatedSecondsToCompletion') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.ElapsedTimeInSeconds'),
        outputPath: 'Snapshot.ElapsedTimeInSeconds',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSnapshotAccess.Snapshot.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Snapshot.ElapsedTimeInSeconds') as unknown as number;
  }

  public get sourceRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.SourceRegion'),
        outputPath: 'Snapshot.SourceRegion',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSnapshotAccess.Snapshot.SourceRegion', props);
    return resource.getResponseField('Snapshot.SourceRegion') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.Tags'),
        outputPath: 'Snapshot.Tags',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSnapshotAccess.Snapshot.Tags', props);
    return resource.getResponseField('Snapshot.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get restorableNodeTypes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.RestorableNodeTypes'),
        outputPath: 'Snapshot.RestorableNodeTypes',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSnapshotAccess.Snapshot.RestorableNodeTypes', props);
    return resource.getResponseField('Snapshot.RestorableNodeTypes') as unknown as string[];
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.EnhancedVpcRouting'),
        outputPath: 'Snapshot.EnhancedVpcRouting',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSnapshotAccess.Snapshot.EnhancedVpcRouting', props);
    return resource.getResponseField('Snapshot.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.MaintenanceTrackName'),
        outputPath: 'Snapshot.MaintenanceTrackName',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSnapshotAccess.Snapshot.MaintenanceTrackName', props);
    return resource.getResponseField('Snapshot.MaintenanceTrackName') as unknown as string;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.ManualSnapshotRetentionPeriod'),
        outputPath: 'Snapshot.ManualSnapshotRetentionPeriod',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSnapshotAccess.Snapshot.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Snapshot.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRemainingDays(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.ManualSnapshotRemainingDays'),
        outputPath: 'Snapshot.ManualSnapshotRemainingDays',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSnapshotAccess.Snapshot.ManualSnapshotRemainingDays', props);
    return resource.getResponseField('Snapshot.ManualSnapshotRemainingDays') as unknown as number;
  }

  public get snapshotRetentionStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSnapshotAccess',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RevokeSnapshotAccess.Snapshot.SnapshotRetentionStartTime'),
        outputPath: 'Snapshot.SnapshotRetentionStartTime',
        parameters: {
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          SnapshotClusterIdentifier: this.__input.snapshotClusterIdentifier,
          AccountWithRestoreAccess: this.__input.accountWithRestoreAccess,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSnapshotAccess.Snapshot.SnapshotRetentionStartTime', props);
    return resource.getResponseField('Snapshot.SnapshotRetentionStartTime') as unknown as string;
  }

}

export class RedshiftResponsesRotateEncryptionKey {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRotateEncryptionKeyMessage) {
  }

  public get cluster(): RedshiftResponsesRotateEncryptionKeyCluster {
    return new RedshiftResponsesRotateEncryptionKeyCluster(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesRotateEncryptionKeyCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRotateEncryptionKeyMessage) {
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ClusterIdentifier'),
        outputPath: 'Cluster.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.ClusterIdentifier') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.NodeType'),
        outputPath: 'Cluster.NodeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.NodeType', props);
    return resource.getResponseField('Cluster.NodeType') as unknown as string;
  }

  public get clusterStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ClusterStatus'),
        outputPath: 'Cluster.ClusterStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.ClusterStatus', props);
    return resource.getResponseField('Cluster.ClusterStatus') as unknown as string;
  }

  public get clusterAvailabilityStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ClusterAvailabilityStatus'),
        outputPath: 'Cluster.ClusterAvailabilityStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.ClusterAvailabilityStatus', props);
    return resource.getResponseField('Cluster.ClusterAvailabilityStatus') as unknown as string;
  }

  public get modifyStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ModifyStatus'),
        outputPath: 'Cluster.ModifyStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.ModifyStatus', props);
    return resource.getResponseField('Cluster.ModifyStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.MasterUsername'),
        outputPath: 'Cluster.MasterUsername',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.MasterUsername', props);
    return resource.getResponseField('Cluster.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.DBName'),
        outputPath: 'Cluster.DBName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.DBName', props);
    return resource.getResponseField('Cluster.DBName') as unknown as string;
  }

  public get endpoint(): RedshiftResponsesRotateEncryptionKeyClusterEndpoint {
    return new RedshiftResponsesRotateEncryptionKeyClusterEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ClusterCreateTime'),
        outputPath: 'Cluster.ClusterCreateTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.ClusterCreateTime', props);
    return resource.getResponseField('Cluster.ClusterCreateTime') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterSecurityGroups(): shapes.RedshiftClusterSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ClusterSecurityGroups'),
        outputPath: 'Cluster.ClusterSecurityGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.ClusterSecurityGroups', props);
    return resource.getResponseField('Cluster.ClusterSecurityGroups') as unknown as shapes.RedshiftClusterSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RedshiftVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.VpcSecurityGroups'),
        outputPath: 'Cluster.VpcSecurityGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.VpcSecurityGroups', props);
    return resource.getResponseField('Cluster.VpcSecurityGroups') as unknown as shapes.RedshiftVpcSecurityGroupMembership[];
  }

  public get clusterParameterGroups(): shapes.RedshiftClusterParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ClusterParameterGroups'),
        outputPath: 'Cluster.ClusterParameterGroups',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.ClusterParameterGroups', props);
    return resource.getResponseField('Cluster.ClusterParameterGroups') as unknown as shapes.RedshiftClusterParameterGroupStatus[];
  }

  public get clusterSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ClusterSubnetGroupName'),
        outputPath: 'Cluster.ClusterSubnetGroupName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.ClusterSubnetGroupName', props);
    return resource.getResponseField('Cluster.ClusterSubnetGroupName') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.VpcId'),
        outputPath: 'Cluster.VpcId',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.VpcId', props);
    return resource.getResponseField('Cluster.VpcId') as unknown as string;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.AvailabilityZone'),
        outputPath: 'Cluster.AvailabilityZone',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.AvailabilityZone', props);
    return resource.getResponseField('Cluster.AvailabilityZone') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.PreferredMaintenanceWindow'),
        outputPath: 'Cluster.PreferredMaintenanceWindow',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('Cluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RedshiftResponsesRotateEncryptionKeyClusterPendingModifiedValues {
    return new RedshiftResponsesRotateEncryptionKeyClusterPendingModifiedValues(this.__scope, this.__resources, this.__input);
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ClusterVersion'),
        outputPath: 'Cluster.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.ClusterVersion', props);
    return resource.getResponseField('Cluster.ClusterVersion') as unknown as string;
  }

  public get allowVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.AllowVersionUpgrade'),
        outputPath: 'Cluster.AllowVersionUpgrade',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.AllowVersionUpgrade', props);
    return resource.getResponseField('Cluster.AllowVersionUpgrade') as unknown as boolean;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.NumberOfNodes'),
        outputPath: 'Cluster.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.NumberOfNodes', props);
    return resource.getResponseField('Cluster.NumberOfNodes') as unknown as number;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.PubliclyAccessible'),
        outputPath: 'Cluster.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PubliclyAccessible') as unknown as boolean;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.Encrypted'),
        outputPath: 'Cluster.Encrypted',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.Encrypted', props);
    return resource.getResponseField('Cluster.Encrypted') as unknown as boolean;
  }

  public get restoreStatus(): RedshiftResponsesRotateEncryptionKeyClusterRestoreStatus {
    return new RedshiftResponsesRotateEncryptionKeyClusterRestoreStatus(this.__scope, this.__resources, this.__input);
  }

  public get dataTransferProgress(): RedshiftResponsesRotateEncryptionKeyClusterDataTransferProgress {
    return new RedshiftResponsesRotateEncryptionKeyClusterDataTransferProgress(this.__scope, this.__resources, this.__input);
  }

  public get hsmStatus(): RedshiftResponsesRotateEncryptionKeyClusterHsmStatus {
    return new RedshiftResponsesRotateEncryptionKeyClusterHsmStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterSnapshotCopyStatus(): RedshiftResponsesRotateEncryptionKeyClusterClusterSnapshotCopyStatus {
    return new RedshiftResponsesRotateEncryptionKeyClusterClusterSnapshotCopyStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterPublicKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ClusterPublicKey'),
        outputPath: 'Cluster.ClusterPublicKey',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.ClusterPublicKey', props);
    return resource.getResponseField('Cluster.ClusterPublicKey') as unknown as string;
  }

  public get clusterNodes(): shapes.RedshiftClusterNode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ClusterNodes'),
        outputPath: 'Cluster.ClusterNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.ClusterNodes', props);
    return resource.getResponseField('Cluster.ClusterNodes') as unknown as shapes.RedshiftClusterNode[];
  }

  public get elasticIpStatus(): RedshiftResponsesRotateEncryptionKeyClusterElasticIpStatus {
    return new RedshiftResponsesRotateEncryptionKeyClusterElasticIpStatus(this.__scope, this.__resources, this.__input);
  }

  public get clusterRevisionNumber(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ClusterRevisionNumber'),
        outputPath: 'Cluster.ClusterRevisionNumber',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.ClusterRevisionNumber', props);
    return resource.getResponseField('Cluster.ClusterRevisionNumber') as unknown as string;
  }

  public get tags(): shapes.RedshiftTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.Tags'),
        outputPath: 'Cluster.Tags',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.Tags', props);
    return resource.getResponseField('Cluster.Tags') as unknown as shapes.RedshiftTag[];
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.KmsKeyId'),
        outputPath: 'Cluster.KmsKeyId',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.KmsKeyId', props);
    return resource.getResponseField('Cluster.KmsKeyId') as unknown as string;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.EnhancedVpcRouting'),
        outputPath: 'Cluster.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.EnhancedVpcRouting') as unknown as boolean;
  }

  public get iamRoles(): shapes.RedshiftClusterIamRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.IamRoles'),
        outputPath: 'Cluster.IamRoles',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.IamRoles', props);
    return resource.getResponseField('Cluster.IamRoles') as unknown as shapes.RedshiftClusterIamRole[];
  }

  public get pendingActions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.PendingActions'),
        outputPath: 'Cluster.PendingActions',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.PendingActions', props);
    return resource.getResponseField('Cluster.PendingActions') as unknown as string[];
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.MaintenanceTrackName'),
        outputPath: 'Cluster.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.MaintenanceTrackName') as unknown as string;
  }

  public get elasticResizeNumberOfNodeOptions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ElasticResizeNumberOfNodeOptions'),
        outputPath: 'Cluster.ElasticResizeNumberOfNodeOptions',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.ElasticResizeNumberOfNodeOptions', props);
    return resource.getResponseField('Cluster.ElasticResizeNumberOfNodeOptions') as unknown as string;
  }

  public get deferredMaintenanceWindows(): shapes.RedshiftDeferredMaintenanceWindow[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.DeferredMaintenanceWindows'),
        outputPath: 'Cluster.DeferredMaintenanceWindows',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.DeferredMaintenanceWindows', props);
    return resource.getResponseField('Cluster.DeferredMaintenanceWindows') as unknown as shapes.RedshiftDeferredMaintenanceWindow[];
  }

  public get snapshotScheduleIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.SnapshotScheduleIdentifier'),
        outputPath: 'Cluster.SnapshotScheduleIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.SnapshotScheduleIdentifier', props);
    return resource.getResponseField('Cluster.SnapshotScheduleIdentifier') as unknown as string;
  }

  public get snapshotScheduleState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.SnapshotScheduleState'),
        outputPath: 'Cluster.SnapshotScheduleState',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.SnapshotScheduleState', props);
    return resource.getResponseField('Cluster.SnapshotScheduleState') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ExpectedNextSnapshotScheduleTime'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.ExpectedNextSnapshotScheduleTime', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTime') as unknown as string;
  }

  public get expectedNextSnapshotScheduleTimeStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ExpectedNextSnapshotScheduleTimeStatus'),
        outputPath: 'Cluster.ExpectedNextSnapshotScheduleTimeStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.ExpectedNextSnapshotScheduleTimeStatus', props);
    return resource.getResponseField('Cluster.ExpectedNextSnapshotScheduleTimeStatus') as unknown as string;
  }

  public get nextMaintenanceWindowStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.NextMaintenanceWindowStartTime'),
        outputPath: 'Cluster.NextMaintenanceWindowStartTime',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.NextMaintenanceWindowStartTime', props);
    return resource.getResponseField('Cluster.NextMaintenanceWindowStartTime') as unknown as string;
  }

  public get resizeInfo(): RedshiftResponsesRotateEncryptionKeyClusterResizeInfo {
    return new RedshiftResponsesRotateEncryptionKeyClusterResizeInfo(this.__scope, this.__resources, this.__input);
  }

  public get availabilityZoneRelocationStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.AvailabilityZoneRelocationStatus'),
        outputPath: 'Cluster.AvailabilityZoneRelocationStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.AvailabilityZoneRelocationStatus', props);
    return resource.getResponseField('Cluster.AvailabilityZoneRelocationStatus') as unknown as string;
  }

  public get clusterNamespaceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ClusterNamespaceArn'),
        outputPath: 'Cluster.ClusterNamespaceArn',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.ClusterNamespaceArn', props);
    return resource.getResponseField('Cluster.ClusterNamespaceArn') as unknown as string;
  }

  public get totalStorageCapacityInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.TotalStorageCapacityInMegaBytes'),
        outputPath: 'Cluster.TotalStorageCapacityInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.TotalStorageCapacityInMegaBytes', props);
    return resource.getResponseField('Cluster.TotalStorageCapacityInMegaBytes') as unknown as number;
  }

  public get aquaConfiguration(): RedshiftResponsesRotateEncryptionKeyClusterAquaConfiguration {
    return new RedshiftResponsesRotateEncryptionKeyClusterAquaConfiguration(this.__scope, this.__resources, this.__input);
  }

}

export class RedshiftResponsesRotateEncryptionKeyClusterEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRotateEncryptionKeyMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.Endpoint.Address'),
        outputPath: 'Cluster.Endpoint.Address',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.Endpoint.Address', props);
    return resource.getResponseField('Cluster.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.Endpoint.Port'),
        outputPath: 'Cluster.Endpoint.Port',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.Endpoint.Port', props);
    return resource.getResponseField('Cluster.Endpoint.Port') as unknown as number;
  }

  public get vpcEndpoints(): shapes.RedshiftVpcEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.Endpoint.VpcEndpoints'),
        outputPath: 'Cluster.Endpoint.VpcEndpoints',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.Endpoint.VpcEndpoints', props);
    return resource.getResponseField('Cluster.Endpoint.VpcEndpoints') as unknown as shapes.RedshiftVpcEndpoint[];
  }

}

export class RedshiftResponsesRotateEncryptionKeyClusterPendingModifiedValues {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRotateEncryptionKeyMessage) {
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'Cluster.PendingModifiedValues.MasterUserPassword',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get nodeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.PendingModifiedValues.NodeType'),
        outputPath: 'Cluster.PendingModifiedValues.NodeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.PendingModifiedValues.NodeType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NodeType') as unknown as string;
  }

  public get numberOfNodes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.PendingModifiedValues.NumberOfNodes'),
        outputPath: 'Cluster.PendingModifiedValues.NumberOfNodes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.PendingModifiedValues.NumberOfNodes', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.NumberOfNodes') as unknown as number;
  }

  public get clusterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.PendingModifiedValues.ClusterType'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.PendingModifiedValues.ClusterType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterType') as unknown as string;
  }

  public get clusterVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.PendingModifiedValues.ClusterVersion'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterVersion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.PendingModifiedValues.ClusterVersion', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterVersion') as unknown as string;
  }

  public get automatedSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod'),
        outputPath: 'Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.AutomatedSnapshotRetentionPeriod') as unknown as number;
  }

  public get clusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.PendingModifiedValues.ClusterIdentifier'),
        outputPath: 'Cluster.PendingModifiedValues.ClusterIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.PendingModifiedValues.ClusterIdentifier', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.ClusterIdentifier') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.PendingModifiedValues.PubliclyAccessible'),
        outputPath: 'Cluster.PendingModifiedValues.PubliclyAccessible',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.PendingModifiedValues.PubliclyAccessible', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.PubliclyAccessible') as unknown as boolean;
  }

  public get enhancedVpcRouting(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.PendingModifiedValues.EnhancedVpcRouting'),
        outputPath: 'Cluster.PendingModifiedValues.EnhancedVpcRouting',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.PendingModifiedValues.EnhancedVpcRouting', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EnhancedVpcRouting') as unknown as boolean;
  }

  public get maintenanceTrackName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.PendingModifiedValues.MaintenanceTrackName'),
        outputPath: 'Cluster.PendingModifiedValues.MaintenanceTrackName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.PendingModifiedValues.MaintenanceTrackName', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.MaintenanceTrackName') as unknown as string;
  }

  public get encryptionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.PendingModifiedValues.EncryptionType'),
        outputPath: 'Cluster.PendingModifiedValues.EncryptionType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.PendingModifiedValues.EncryptionType', props);
    return resource.getResponseField('Cluster.PendingModifiedValues.EncryptionType') as unknown as string;
  }

}

export class RedshiftResponsesRotateEncryptionKeyClusterRestoreStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRotateEncryptionKeyMessage) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.RestoreStatus.Status'),
        outputPath: 'Cluster.RestoreStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.RestoreStatus.Status', props);
    return resource.getResponseField('Cluster.RestoreStatus.Status') as unknown as string;
  }

  public get currentRestoreRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.RestoreStatus.CurrentRestoreRateInMegaBytesPerSecond') as unknown as number;
  }

  public get snapshotSizeInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.RestoreStatus.SnapshotSizeInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.SnapshotSizeInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.RestoreStatus.SnapshotSizeInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.SnapshotSizeInMegaBytes') as unknown as number;
  }

  public get progressInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.RestoreStatus.ProgressInMegaBytes'),
        outputPath: 'Cluster.RestoreStatus.ProgressInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.RestoreStatus.ProgressInMegaBytes', props);
    return resource.getResponseField('Cluster.RestoreStatus.ProgressInMegaBytes') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.RestoreStatus.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.RestoreStatus.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.RestoreStatus.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.ElapsedTimeInSeconds') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.RestoreStatus.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

}

export class RedshiftResponsesRotateEncryptionKeyClusterDataTransferProgress {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRotateEncryptionKeyMessage) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.DataTransferProgress.Status'),
        outputPath: 'Cluster.DataTransferProgress.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.DataTransferProgress.Status', props);
    return resource.getResponseField('Cluster.DataTransferProgress.Status') as unknown as string;
  }

  public get currentRateInMegaBytesPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond'),
        outputPath: 'Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond', props);
    return resource.getResponseField('Cluster.DataTransferProgress.CurrentRateInMegaBytesPerSecond') as unknown as number;
  }

  public get totalDataInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.DataTransferProgress.TotalDataInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.TotalDataInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.DataTransferProgress.TotalDataInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.TotalDataInMegaBytes') as unknown as number;
  }

  public get dataTransferredInMegaBytes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.DataTransferProgress.DataTransferredInMegaBytes'),
        outputPath: 'Cluster.DataTransferProgress.DataTransferredInMegaBytes',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.DataTransferProgress.DataTransferredInMegaBytes', props);
    return resource.getResponseField('Cluster.DataTransferProgress.DataTransferredInMegaBytes') as unknown as number;
  }

  public get estimatedTimeToCompletionInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.EstimatedTimeToCompletionInSeconds') as unknown as number;
  }

  public get elapsedTimeInSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.DataTransferProgress.ElapsedTimeInSeconds'),
        outputPath: 'Cluster.DataTransferProgress.ElapsedTimeInSeconds',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.DataTransferProgress.ElapsedTimeInSeconds', props);
    return resource.getResponseField('Cluster.DataTransferProgress.ElapsedTimeInSeconds') as unknown as number;
  }

}

export class RedshiftResponsesRotateEncryptionKeyClusterHsmStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRotateEncryptionKeyMessage) {
  }

  public get hsmClientCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.HsmStatus.HsmClientCertificateIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmClientCertificateIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.HsmStatus.HsmClientCertificateIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmClientCertificateIdentifier') as unknown as string;
  }

  public get hsmConfigurationIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.HsmStatus.HsmConfigurationIdentifier'),
        outputPath: 'Cluster.HsmStatus.HsmConfigurationIdentifier',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.HsmStatus.HsmConfigurationIdentifier', props);
    return resource.getResponseField('Cluster.HsmStatus.HsmConfigurationIdentifier') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.HsmStatus.Status'),
        outputPath: 'Cluster.HsmStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.HsmStatus.Status', props);
    return resource.getResponseField('Cluster.HsmStatus.Status') as unknown as string;
  }

}

export class RedshiftResponsesRotateEncryptionKeyClusterClusterSnapshotCopyStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRotateEncryptionKeyMessage) {
  }

  public get destinationRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ClusterSnapshotCopyStatus.DestinationRegion'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.DestinationRegion',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.ClusterSnapshotCopyStatus.DestinationRegion', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.DestinationRegion') as unknown as string;
  }

  public get retentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.RetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.ClusterSnapshotCopyStatus.RetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.RetentionPeriod') as unknown as number;
  }

  public get manualSnapshotRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.ManualSnapshotRetentionPeriod') as unknown as number;
  }

  public get snapshotCopyGrantName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName'),
        outputPath: 'Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName', props);
    return resource.getResponseField('Cluster.ClusterSnapshotCopyStatus.SnapshotCopyGrantName') as unknown as string;
  }

}

export class RedshiftResponsesRotateEncryptionKeyClusterElasticIpStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRotateEncryptionKeyMessage) {
  }

  public get elasticIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ElasticIpStatus.ElasticIp'),
        outputPath: 'Cluster.ElasticIpStatus.ElasticIp',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.ElasticIpStatus.ElasticIp', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.ElasticIp') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ElasticIpStatus.Status'),
        outputPath: 'Cluster.ElasticIpStatus.Status',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.ElasticIpStatus.Status', props);
    return resource.getResponseField('Cluster.ElasticIpStatus.Status') as unknown as string;
  }

}

export class RedshiftResponsesRotateEncryptionKeyClusterResizeInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRotateEncryptionKeyMessage) {
  }

  public get resizeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ResizeInfo.ResizeType'),
        outputPath: 'Cluster.ResizeInfo.ResizeType',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.ResizeInfo.ResizeType', props);
    return resource.getResponseField('Cluster.ResizeInfo.ResizeType') as unknown as string;
  }

  public get allowCancelResize(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.ResizeInfo.AllowCancelResize'),
        outputPath: 'Cluster.ResizeInfo.AllowCancelResize',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.ResizeInfo.AllowCancelResize', props);
    return resource.getResponseField('Cluster.ResizeInfo.AllowCancelResize') as unknown as boolean;
  }

}

export class RedshiftResponsesRotateEncryptionKeyClusterAquaConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftRotateEncryptionKeyMessage) {
  }

  public get aquaStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.AquaConfiguration.AquaStatus'),
        outputPath: 'Cluster.AquaConfiguration.AquaStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.AquaConfiguration.AquaStatus', props);
    return resource.getResponseField('Cluster.AquaConfiguration.AquaStatus') as unknown as string;
  }

  public get aquaConfigurationStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateEncryptionKey',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.RotateEncryptionKey.Cluster.AquaConfiguration.AquaConfigurationStatus'),
        outputPath: 'Cluster.AquaConfiguration.AquaConfigurationStatus',
        parameters: {
          ClusterIdentifier: this.__input.clusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RotateEncryptionKey.Cluster.AquaConfiguration.AquaConfigurationStatus', props);
    return resource.getResponseField('Cluster.AquaConfiguration.AquaConfigurationStatus') as unknown as string;
  }

}

export class RedshiftResponsesUpdatePartnerStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RedshiftUpdatePartnerStatusInputMessage) {
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updatePartnerStatus',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.UpdatePartnerStatus.DatabaseName'),
        outputPath: 'DatabaseName',
        parameters: {
          AccountId: this.__input.accountId,
          ClusterIdentifier: this.__input.clusterIdentifier,
          DatabaseName: this.__input.databaseName,
          PartnerName: this.__input.partnerName,
          Status: this.__input.status,
          StatusMessage: this.__input.statusMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdatePartnerStatus.DatabaseName', props);
    return resource.getResponseField('DatabaseName') as unknown as string;
  }

  public get partnerName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updatePartnerStatus',
        service: 'Redshift',
        physicalResourceId: cr.PhysicalResourceId.of('Redshift.UpdatePartnerStatus.PartnerName'),
        outputPath: 'PartnerName',
        parameters: {
          AccountId: this.__input.accountId,
          ClusterIdentifier: this.__input.clusterIdentifier,
          DatabaseName: this.__input.databaseName,
          PartnerName: this.__input.partnerName,
          Status: this.__input.status,
          StatusMessage: this.__input.statusMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdatePartnerStatus.PartnerName', props);
    return resource.getResponseField('PartnerName') as unknown as string;
  }

}

