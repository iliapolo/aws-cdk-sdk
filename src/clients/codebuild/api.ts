import * as cdk from '@aws-cdk/core';
import * as cr from '@aws-cdk/custom-resources';
import * as shapes from './shapes';

export class CodeBuildClient extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[]) {
    super(scope, id);
  }

  public batchDeleteBuilds(input: shapes.CodeBuildBatchDeleteBuildsInput): CodeBuildBatchDeleteBuilds {
    return new CodeBuildBatchDeleteBuilds(this, 'BatchDeleteBuilds', this.__resources, input);
  }

  public batchGetBuildBatches(input: shapes.CodeBuildBatchGetBuildBatchesInput): CodeBuildBatchGetBuildBatches {
    return new CodeBuildBatchGetBuildBatches(this, 'BatchGetBuildBatches', this.__resources, input);
  }

  public batchGetBuilds(input: shapes.CodeBuildBatchGetBuildsInput): CodeBuildBatchGetBuilds {
    return new CodeBuildBatchGetBuilds(this, 'BatchGetBuilds', this.__resources, input);
  }

  public batchGetProjects(input: shapes.CodeBuildBatchGetProjectsInput): CodeBuildBatchGetProjects {
    return new CodeBuildBatchGetProjects(this, 'BatchGetProjects', this.__resources, input);
  }

  public batchGetReportGroups(input: shapes.CodeBuildBatchGetReportGroupsInput): CodeBuildBatchGetReportGroups {
    return new CodeBuildBatchGetReportGroups(this, 'BatchGetReportGroups', this.__resources, input);
  }

  public batchGetReports(input: shapes.CodeBuildBatchGetReportsInput): CodeBuildBatchGetReports {
    return new CodeBuildBatchGetReports(this, 'BatchGetReports', this.__resources, input);
  }

  public createProject(input: shapes.CodeBuildCreateProjectInput): CodeBuildCreateProject {
    return new CodeBuildCreateProject(this, 'CreateProject', this.__resources, input);
  }

  public createReportGroup(input: shapes.CodeBuildCreateReportGroupInput): CodeBuildCreateReportGroup {
    return new CodeBuildCreateReportGroup(this, 'CreateReportGroup', this.__resources, input);
  }

  public createWebhook(input: shapes.CodeBuildCreateWebhookInput): CodeBuildCreateWebhook {
    return new CodeBuildCreateWebhook(this, 'CreateWebhook', this.__resources, input);
  }

  public deleteBuildBatch(input: shapes.CodeBuildDeleteBuildBatchInput): CodeBuildDeleteBuildBatch {
    return new CodeBuildDeleteBuildBatch(this, 'DeleteBuildBatch', this.__resources, input);
  }

  public deleteProject(input: shapes.CodeBuildDeleteProjectInput): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.DeleteProject'),
        parameters: {
          name: input.name,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteProject', props);
  }

  public deleteReport(input: shapes.CodeBuildDeleteReportInput): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteReport',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.DeleteReport'),
        parameters: {
          arn: input.arn,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteReport', props);
  }

  public deleteReportGroup(input: shapes.CodeBuildDeleteReportGroupInput): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.DeleteReportGroup'),
        parameters: {
          arn: input.arn,
          deleteReports: input.deleteReports,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteReportGroup', props);
  }

  public deleteResourcePolicy(input: shapes.CodeBuildDeleteResourcePolicyInput): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteResourcePolicy',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.DeleteResourcePolicy'),
        parameters: {
          resourceArn: input.resourceArn,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteResourcePolicy', props);
  }

  public deleteSourceCredentials(input: shapes.CodeBuildDeleteSourceCredentialsInput): CodeBuildDeleteSourceCredentials {
    return new CodeBuildDeleteSourceCredentials(this, 'DeleteSourceCredentials', this.__resources, input);
  }

  public deleteWebhook(input: shapes.CodeBuildDeleteWebhookInput): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteWebhook',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.DeleteWebhook'),
        parameters: {
          projectName: input.projectName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteWebhook', props);
  }

  public describeCodeCoverages(input: shapes.CodeBuildDescribeCodeCoveragesInput): CodeBuildDescribeCodeCoverages {
    return new CodeBuildDescribeCodeCoverages(this, 'DescribeCodeCoverages', this.__resources, input);
  }

  public describeTestCases(input: shapes.CodeBuildDescribeTestCasesInput): CodeBuildDescribeTestCases {
    return new CodeBuildDescribeTestCases(this, 'DescribeTestCases', this.__resources, input);
  }

  public fetchReportGroupTrend(input: shapes.CodeBuildGetReportGroupTrendInput): CodeBuildFetchReportGroupTrend {
    return new CodeBuildFetchReportGroupTrend(this, 'FetchReportGroupTrend', this.__resources, input);
  }

  public fetchResourcePolicy(input: shapes.CodeBuildGetResourcePolicyInput): CodeBuildFetchResourcePolicy {
    return new CodeBuildFetchResourcePolicy(this, 'FetchResourcePolicy', this.__resources, input);
  }

  public importSourceCredentials(input: shapes.CodeBuildImportSourceCredentialsInput): CodeBuildImportSourceCredentials {
    return new CodeBuildImportSourceCredentials(this, 'ImportSourceCredentials', this.__resources, input);
  }

  public invalidateProjectCache(input: shapes.CodeBuildInvalidateProjectCacheInput): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'invalidateProjectCache',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.InvalidateProjectCache'),
        parameters: {
          projectName: input.projectName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'InvalidateProjectCache', props);
  }

  public listBuildBatches(input: shapes.CodeBuildListBuildBatchesInput): CodeBuildListBuildBatches {
    return new CodeBuildListBuildBatches(this, 'ListBuildBatches', this.__resources, input);
  }

  public listBuildBatchesForProject(input: shapes.CodeBuildListBuildBatchesForProjectInput): CodeBuildListBuildBatchesForProject {
    return new CodeBuildListBuildBatchesForProject(this, 'ListBuildBatchesForProject', this.__resources, input);
  }

  public listBuilds(input: shapes.CodeBuildListBuildsInput): CodeBuildListBuilds {
    return new CodeBuildListBuilds(this, 'ListBuilds', this.__resources, input);
  }

  public listBuildsForProject(input: shapes.CodeBuildListBuildsForProjectInput): CodeBuildListBuildsForProject {
    return new CodeBuildListBuildsForProject(this, 'ListBuildsForProject', this.__resources, input);
  }

  public listCuratedEnvironmentImages(): CodeBuildListCuratedEnvironmentImages {
    return new CodeBuildListCuratedEnvironmentImages(this, 'ListCuratedEnvironmentImages', this.__resources);
  }

  public listProjects(input: shapes.CodeBuildListProjectsInput): CodeBuildListProjects {
    return new CodeBuildListProjects(this, 'ListProjects', this.__resources, input);
  }

  public listReportGroups(input: shapes.CodeBuildListReportGroupsInput): CodeBuildListReportGroups {
    return new CodeBuildListReportGroups(this, 'ListReportGroups', this.__resources, input);
  }

  public listReports(input: shapes.CodeBuildListReportsInput): CodeBuildListReports {
    return new CodeBuildListReports(this, 'ListReports', this.__resources, input);
  }

  public listReportsForReportGroup(input: shapes.CodeBuildListReportsForReportGroupInput): CodeBuildListReportsForReportGroup {
    return new CodeBuildListReportsForReportGroup(this, 'ListReportsForReportGroup', this.__resources, input);
  }

  public listSharedProjects(input: shapes.CodeBuildListSharedProjectsInput): CodeBuildListSharedProjects {
    return new CodeBuildListSharedProjects(this, 'ListSharedProjects', this.__resources, input);
  }

  public listSharedReportGroups(input: shapes.CodeBuildListSharedReportGroupsInput): CodeBuildListSharedReportGroups {
    return new CodeBuildListSharedReportGroups(this, 'ListSharedReportGroups', this.__resources, input);
  }

  public listSourceCredentials(): CodeBuildListSourceCredentials {
    return new CodeBuildListSourceCredentials(this, 'ListSourceCredentials', this.__resources);
  }

  public putResourcePolicy(input: shapes.CodeBuildPutResourcePolicyInput): CodeBuildPutResourcePolicy {
    return new CodeBuildPutResourcePolicy(this, 'PutResourcePolicy', this.__resources, input);
  }

  public retryBuild(input: shapes.CodeBuildRetryBuildInput): CodeBuildRetryBuild {
    return new CodeBuildRetryBuild(this, 'RetryBuild', this.__resources, input);
  }

  public retryBuildBatch(input: shapes.CodeBuildRetryBuildBatchInput): CodeBuildRetryBuildBatch {
    return new CodeBuildRetryBuildBatch(this, 'RetryBuildBatch', this.__resources, input);
  }

  public startBuild(input: shapes.CodeBuildStartBuildInput): CodeBuildStartBuild {
    return new CodeBuildStartBuild(this, 'StartBuild', this.__resources, input);
  }

  public startBuildBatch(input: shapes.CodeBuildStartBuildBatchInput): CodeBuildStartBuildBatch {
    return new CodeBuildStartBuildBatch(this, 'StartBuildBatch', this.__resources, input);
  }

  public stopBuild(input: shapes.CodeBuildStopBuildInput): CodeBuildStopBuild {
    return new CodeBuildStopBuild(this, 'StopBuild', this.__resources, input);
  }

  public stopBuildBatch(input: shapes.CodeBuildStopBuildBatchInput): CodeBuildStopBuildBatch {
    return new CodeBuildStopBuildBatch(this, 'StopBuildBatch', this.__resources, input);
  }

  public updateProject(input: shapes.CodeBuildUpdateProjectInput): CodeBuildUpdateProject {
    return new CodeBuildUpdateProject(this, 'UpdateProject', this.__resources, input);
  }

  public updateReportGroup(input: shapes.CodeBuildUpdateReportGroupInput): CodeBuildUpdateReportGroup {
    return new CodeBuildUpdateReportGroup(this, 'UpdateReportGroup', this.__resources, input);
  }

  public updateWebhook(input: shapes.CodeBuildUpdateWebhookInput): CodeBuildUpdateWebhook {
    return new CodeBuildUpdateWebhook(this, 'UpdateWebhook', this.__resources, input);
  }

}

export class CodeBuildBatchDeleteBuilds extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildBatchDeleteBuildsInput) {
    super(scope, id);
  }

  public get buildsDeleted(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchDeleteBuilds',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.BatchDeleteBuilds.buildsDeleted'),
        outputPath: 'buildsDeleted',
        parameters: {
          ids: this.input.ids,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BatchDeleteBuilds.buildsDeleted', props);
    return resource.getResponseField('buildsDeleted') as unknown as string[];
  }

  public get buildsNotDeleted(): shapes.CodeBuildBuildNotDeleted[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchDeleteBuilds',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.BatchDeleteBuilds.buildsNotDeleted'),
        outputPath: 'buildsNotDeleted',
        parameters: {
          ids: this.input.ids,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BatchDeleteBuilds.buildsNotDeleted', props);
    return resource.getResponseField('buildsNotDeleted') as unknown as shapes.CodeBuildBuildNotDeleted[];
  }

}

export class CodeBuildBatchGetBuildBatches extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildBatchGetBuildBatchesInput) {
    super(scope, id);
  }

  public get buildBatches(): shapes.CodeBuildBuildBatch[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchGetBuildBatches',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.BatchGetBuildBatches.buildBatches'),
        outputPath: 'buildBatches',
        parameters: {
          ids: this.input.ids,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BatchGetBuildBatches.buildBatches', props);
    return resource.getResponseField('buildBatches') as unknown as shapes.CodeBuildBuildBatch[];
  }

  public get buildBatchesNotFound(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchGetBuildBatches',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.BatchGetBuildBatches.buildBatchesNotFound'),
        outputPath: 'buildBatchesNotFound',
        parameters: {
          ids: this.input.ids,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BatchGetBuildBatches.buildBatchesNotFound', props);
    return resource.getResponseField('buildBatchesNotFound') as unknown as string[];
  }

}

export class CodeBuildBatchGetBuilds extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildBatchGetBuildsInput) {
    super(scope, id);
  }

  public get builds(): shapes.CodeBuildBuild[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchGetBuilds',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.BatchGetBuilds.builds'),
        outputPath: 'builds',
        parameters: {
          ids: this.input.ids,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BatchGetBuilds.builds', props);
    return resource.getResponseField('builds') as unknown as shapes.CodeBuildBuild[];
  }

  public get buildsNotFound(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchGetBuilds',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.BatchGetBuilds.buildsNotFound'),
        outputPath: 'buildsNotFound',
        parameters: {
          ids: this.input.ids,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BatchGetBuilds.buildsNotFound', props);
    return resource.getResponseField('buildsNotFound') as unknown as string[];
  }

}

export class CodeBuildBatchGetProjects extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildBatchGetProjectsInput) {
    super(scope, id);
  }

  public get projects(): shapes.CodeBuildProject[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchGetProjects',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.BatchGetProjects.projects'),
        outputPath: 'projects',
        parameters: {
          names: this.input.names,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BatchGetProjects.projects', props);
    return resource.getResponseField('projects') as unknown as shapes.CodeBuildProject[];
  }

  public get projectsNotFound(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchGetProjects',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.BatchGetProjects.projectsNotFound'),
        outputPath: 'projectsNotFound',
        parameters: {
          names: this.input.names,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BatchGetProjects.projectsNotFound', props);
    return resource.getResponseField('projectsNotFound') as unknown as string[];
  }

}

export class CodeBuildBatchGetReportGroups extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildBatchGetReportGroupsInput) {
    super(scope, id);
  }

  public get reportGroups(): shapes.CodeBuildReportGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchGetReportGroups',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.BatchGetReportGroups.reportGroups'),
        outputPath: 'reportGroups',
        parameters: {
          reportGroupArns: this.input.reportGroupArns,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BatchGetReportGroups.reportGroups', props);
    return resource.getResponseField('reportGroups') as unknown as shapes.CodeBuildReportGroup[];
  }

  public get reportGroupsNotFound(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchGetReportGroups',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.BatchGetReportGroups.reportGroupsNotFound'),
        outputPath: 'reportGroupsNotFound',
        parameters: {
          reportGroupArns: this.input.reportGroupArns,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BatchGetReportGroups.reportGroupsNotFound', props);
    return resource.getResponseField('reportGroupsNotFound') as unknown as string[];
  }

}

export class CodeBuildBatchGetReports extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildBatchGetReportsInput) {
    super(scope, id);
  }

  public get reports(): shapes.CodeBuildReport[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchGetReports',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.BatchGetReports.reports'),
        outputPath: 'reports',
        parameters: {
          reportArns: this.input.reportArns,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BatchGetReports.reports', props);
    return resource.getResponseField('reports') as unknown as shapes.CodeBuildReport[];
  }

  public get reportsNotFound(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchGetReports',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.BatchGetReports.reportsNotFound'),
        outputPath: 'reportsNotFound',
        parameters: {
          reportArns: this.input.reportArns,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BatchGetReports.reportsNotFound', props);
    return resource.getResponseField('reportsNotFound') as unknown as string[];
  }

}

export class CodeBuildCreateProject extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildCreateProjectInput) {
    super(scope, id);
  }

  public get project(): CodeBuildCreateProjectProject {
    return new CodeBuildCreateProjectProject(this, 'Project', this.__resources, this.input);
  }

}

export class CodeBuildCreateProjectProject extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildCreateProjectInput) {
    super(scope, id);
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.name'),
        outputPath: 'project.name',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.name', props);
    return resource.getResponseField('project.name') as unknown as string;
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.arn'),
        outputPath: 'project.arn',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.arn', props);
    return resource.getResponseField('project.arn') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.description'),
        outputPath: 'project.description',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.description', props);
    return resource.getResponseField('project.description') as unknown as string;
  }

  public get source(): CodeBuildCreateProjectProjectSource {
    return new CodeBuildCreateProjectProjectSource(this, 'Source', this.__resources, this.input);
  }

  public get secondarySources(): shapes.CodeBuildProjectSource[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.secondarySources'),
        outputPath: 'project.secondarySources',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.secondarySources', props);
    return resource.getResponseField('project.secondarySources') as unknown as shapes.CodeBuildProjectSource[];
  }

  public get sourceVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.sourceVersion'),
        outputPath: 'project.sourceVersion',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.sourceVersion', props);
    return resource.getResponseField('project.sourceVersion') as unknown as string;
  }

  public get secondarySourceVersions(): shapes.CodeBuildProjectSourceVersion[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.secondarySourceVersions'),
        outputPath: 'project.secondarySourceVersions',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.secondarySourceVersions', props);
    return resource.getResponseField('project.secondarySourceVersions') as unknown as shapes.CodeBuildProjectSourceVersion[];
  }

  public get artifacts(): CodeBuildCreateProjectProjectArtifacts {
    return new CodeBuildCreateProjectProjectArtifacts(this, 'Artifacts', this.__resources, this.input);
  }

  public get secondaryArtifacts(): shapes.CodeBuildProjectArtifacts[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.secondaryArtifacts'),
        outputPath: 'project.secondaryArtifacts',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.secondaryArtifacts', props);
    return resource.getResponseField('project.secondaryArtifacts') as unknown as shapes.CodeBuildProjectArtifacts[];
  }

  public get cache(): CodeBuildCreateProjectProjectCache {
    return new CodeBuildCreateProjectProjectCache(this, 'Cache', this.__resources, this.input);
  }

  public get environment(): CodeBuildCreateProjectProjectEnvironment {
    return new CodeBuildCreateProjectProjectEnvironment(this, 'Environment', this.__resources, this.input);
  }

  public get serviceRole(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.serviceRole'),
        outputPath: 'project.serviceRole',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.serviceRole', props);
    return resource.getResponseField('project.serviceRole') as unknown as string;
  }

  public get timeoutInMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.timeoutInMinutes'),
        outputPath: 'project.timeoutInMinutes',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.timeoutInMinutes', props);
    return resource.getResponseField('project.timeoutInMinutes') as unknown as number;
  }

  public get queuedTimeoutInMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.queuedTimeoutInMinutes'),
        outputPath: 'project.queuedTimeoutInMinutes',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.queuedTimeoutInMinutes', props);
    return resource.getResponseField('project.queuedTimeoutInMinutes') as unknown as number;
  }

  public get encryptionKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.encryptionKey'),
        outputPath: 'project.encryptionKey',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.encryptionKey', props);
    return resource.getResponseField('project.encryptionKey') as unknown as string;
  }

  public get tags(): shapes.CodeBuildTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.tags'),
        outputPath: 'project.tags',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.tags', props);
    return resource.getResponseField('project.tags') as unknown as shapes.CodeBuildTag[];
  }

  public get created(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.created'),
        outputPath: 'project.created',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.created', props);
    return resource.getResponseField('project.created') as unknown as string;
  }

  public get lastModified(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.lastModified'),
        outputPath: 'project.lastModified',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.lastModified', props);
    return resource.getResponseField('project.lastModified') as unknown as string;
  }

  public get webhook(): CodeBuildCreateProjectProjectWebhook {
    return new CodeBuildCreateProjectProjectWebhook(this, 'Webhook', this.__resources, this.input);
  }

  public get vpcConfig(): CodeBuildCreateProjectProjectVpcConfig {
    return new CodeBuildCreateProjectProjectVpcConfig(this, 'VpcConfig', this.__resources, this.input);
  }

  public get badge(): CodeBuildCreateProjectProjectBadge {
    return new CodeBuildCreateProjectProjectBadge(this, 'Badge', this.__resources, this.input);
  }

  public get logsConfig(): CodeBuildCreateProjectProjectLogsConfig {
    return new CodeBuildCreateProjectProjectLogsConfig(this, 'LogsConfig', this.__resources, this.input);
  }

  public get fileSystemLocations(): shapes.CodeBuildProjectFileSystemLocation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.fileSystemLocations'),
        outputPath: 'project.fileSystemLocations',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.fileSystemLocations', props);
    return resource.getResponseField('project.fileSystemLocations') as unknown as shapes.CodeBuildProjectFileSystemLocation[];
  }

  public get buildBatchConfig(): CodeBuildCreateProjectProjectBuildBatchConfig {
    return new CodeBuildCreateProjectProjectBuildBatchConfig(this, 'BuildBatchConfig', this.__resources, this.input);
  }

}

export class CodeBuildCreateProjectProjectSource extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildCreateProjectInput) {
    super(scope, id);
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.source.type'),
        outputPath: 'project.source.type',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.source.type', props);
    return resource.getResponseField('project.source.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.source.location'),
        outputPath: 'project.source.location',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.source.location', props);
    return resource.getResponseField('project.source.location') as unknown as string;
  }

  public get gitCloneDepth(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.source.gitCloneDepth'),
        outputPath: 'project.source.gitCloneDepth',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.source.gitCloneDepth', props);
    return resource.getResponseField('project.source.gitCloneDepth') as unknown as number;
  }

  public get gitSubmodulesConfig(): CodeBuildCreateProjectProjectSourceGitSubmodulesConfig {
    return new CodeBuildCreateProjectProjectSourceGitSubmodulesConfig(this, 'GitSubmodulesConfig', this.__resources, this.input);
  }

  public get buildspec(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.source.buildspec'),
        outputPath: 'project.source.buildspec',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.source.buildspec', props);
    return resource.getResponseField('project.source.buildspec') as unknown as string;
  }

  public get auth(): CodeBuildCreateProjectProjectSourceAuth {
    return new CodeBuildCreateProjectProjectSourceAuth(this, 'Auth', this.__resources, this.input);
  }

  public get reportBuildStatus(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.source.reportBuildStatus'),
        outputPath: 'project.source.reportBuildStatus',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.source.reportBuildStatus', props);
    return resource.getResponseField('project.source.reportBuildStatus') as unknown as boolean;
  }

  public get buildStatusConfig(): CodeBuildCreateProjectProjectSourceBuildStatusConfig {
    return new CodeBuildCreateProjectProjectSourceBuildStatusConfig(this, 'BuildStatusConfig', this.__resources, this.input);
  }

  public get insecureSsl(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.source.insecureSsl'),
        outputPath: 'project.source.insecureSsl',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.source.insecureSsl', props);
    return resource.getResponseField('project.source.insecureSsl') as unknown as boolean;
  }

  public get sourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.source.sourceIdentifier'),
        outputPath: 'project.source.sourceIdentifier',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.source.sourceIdentifier', props);
    return resource.getResponseField('project.source.sourceIdentifier') as unknown as string;
  }

}

export class CodeBuildCreateProjectProjectSourceGitSubmodulesConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildCreateProjectInput) {
    super(scope, id);
  }

  public get fetchSubmodules(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.source.gitSubmodulesConfig.fetchSubmodules'),
        outputPath: 'project.source.gitSubmodulesConfig.fetchSubmodules',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.source.gitSubmodulesConfig.fetchSubmodules', props);
    return resource.getResponseField('project.source.gitSubmodulesConfig.fetchSubmodules') as unknown as boolean;
  }

}

export class CodeBuildCreateProjectProjectSourceAuth extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildCreateProjectInput) {
    super(scope, id);
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.source.auth.type'),
        outputPath: 'project.source.auth.type',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.source.auth.type', props);
    return resource.getResponseField('project.source.auth.type') as unknown as string;
  }

  public get resource(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.source.auth.resource'),
        outputPath: 'project.source.auth.resource',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.source.auth.resource', props);
    return resource.getResponseField('project.source.auth.resource') as unknown as string;
  }

}

export class CodeBuildCreateProjectProjectSourceBuildStatusConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildCreateProjectInput) {
    super(scope, id);
  }

  public get context(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.source.buildStatusConfig.context'),
        outputPath: 'project.source.buildStatusConfig.context',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.source.buildStatusConfig.context', props);
    return resource.getResponseField('project.source.buildStatusConfig.context') as unknown as string;
  }

  public get targetUrl(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.source.buildStatusConfig.targetUrl'),
        outputPath: 'project.source.buildStatusConfig.targetUrl',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.source.buildStatusConfig.targetUrl', props);
    return resource.getResponseField('project.source.buildStatusConfig.targetUrl') as unknown as string;
  }

}

export class CodeBuildCreateProjectProjectArtifacts extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildCreateProjectInput) {
    super(scope, id);
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.artifacts.type'),
        outputPath: 'project.artifacts.type',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.artifacts.type', props);
    return resource.getResponseField('project.artifacts.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.artifacts.location'),
        outputPath: 'project.artifacts.location',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.artifacts.location', props);
    return resource.getResponseField('project.artifacts.location') as unknown as string;
  }

  public get path(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.artifacts.path'),
        outputPath: 'project.artifacts.path',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.artifacts.path', props);
    return resource.getResponseField('project.artifacts.path') as unknown as string;
  }

  public get namespaceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.artifacts.namespaceType'),
        outputPath: 'project.artifacts.namespaceType',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.artifacts.namespaceType', props);
    return resource.getResponseField('project.artifacts.namespaceType') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.artifacts.name'),
        outputPath: 'project.artifacts.name',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.artifacts.name', props);
    return resource.getResponseField('project.artifacts.name') as unknown as string;
  }

  public get packaging(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.artifacts.packaging'),
        outputPath: 'project.artifacts.packaging',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.artifacts.packaging', props);
    return resource.getResponseField('project.artifacts.packaging') as unknown as string;
  }

  public get overrideArtifactName(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.artifacts.overrideArtifactName'),
        outputPath: 'project.artifacts.overrideArtifactName',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.artifacts.overrideArtifactName', props);
    return resource.getResponseField('project.artifacts.overrideArtifactName') as unknown as boolean;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.artifacts.encryptionDisabled'),
        outputPath: 'project.artifacts.encryptionDisabled',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.artifacts.encryptionDisabled', props);
    return resource.getResponseField('project.artifacts.encryptionDisabled') as unknown as boolean;
  }

  public get artifactIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.artifacts.artifactIdentifier'),
        outputPath: 'project.artifacts.artifactIdentifier',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.artifacts.artifactIdentifier', props);
    return resource.getResponseField('project.artifacts.artifactIdentifier') as unknown as string;
  }

}

export class CodeBuildCreateProjectProjectCache extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildCreateProjectInput) {
    super(scope, id);
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.cache.type'),
        outputPath: 'project.cache.type',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.cache.type', props);
    return resource.getResponseField('project.cache.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.cache.location'),
        outputPath: 'project.cache.location',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.cache.location', props);
    return resource.getResponseField('project.cache.location') as unknown as string;
  }

  public get modes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.cache.modes'),
        outputPath: 'project.cache.modes',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.cache.modes', props);
    return resource.getResponseField('project.cache.modes') as unknown as string[];
  }

}

export class CodeBuildCreateProjectProjectEnvironment extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildCreateProjectInput) {
    super(scope, id);
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.environment.type'),
        outputPath: 'project.environment.type',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.environment.type', props);
    return resource.getResponseField('project.environment.type') as unknown as string;
  }

  public get image(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.environment.image'),
        outputPath: 'project.environment.image',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.environment.image', props);
    return resource.getResponseField('project.environment.image') as unknown as string;
  }

  public get computeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.environment.computeType'),
        outputPath: 'project.environment.computeType',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.environment.computeType', props);
    return resource.getResponseField('project.environment.computeType') as unknown as string;
  }

  public get environmentVariables(): shapes.CodeBuildEnvironmentVariable[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.environment.environmentVariables'),
        outputPath: 'project.environment.environmentVariables',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.environment.environmentVariables', props);
    return resource.getResponseField('project.environment.environmentVariables') as unknown as shapes.CodeBuildEnvironmentVariable[];
  }

  public get privilegedMode(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.environment.privilegedMode'),
        outputPath: 'project.environment.privilegedMode',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.environment.privilegedMode', props);
    return resource.getResponseField('project.environment.privilegedMode') as unknown as boolean;
  }

  public get certificate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.environment.certificate'),
        outputPath: 'project.environment.certificate',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.environment.certificate', props);
    return resource.getResponseField('project.environment.certificate') as unknown as string;
  }

  public get registryCredential(): CodeBuildCreateProjectProjectEnvironmentRegistryCredential {
    return new CodeBuildCreateProjectProjectEnvironmentRegistryCredential(this, 'RegistryCredential', this.__resources, this.input);
  }

  public get imagePullCredentialsType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.environment.imagePullCredentialsType'),
        outputPath: 'project.environment.imagePullCredentialsType',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.environment.imagePullCredentialsType', props);
    return resource.getResponseField('project.environment.imagePullCredentialsType') as unknown as string;
  }

}

export class CodeBuildCreateProjectProjectEnvironmentRegistryCredential extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildCreateProjectInput) {
    super(scope, id);
  }

  public get credential(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.environment.registryCredential.credential'),
        outputPath: 'project.environment.registryCredential.credential',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.environment.registryCredential.credential', props);
    return resource.getResponseField('project.environment.registryCredential.credential') as unknown as string;
  }

  public get credentialProvider(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.environment.registryCredential.credentialProvider'),
        outputPath: 'project.environment.registryCredential.credentialProvider',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.environment.registryCredential.credentialProvider', props);
    return resource.getResponseField('project.environment.registryCredential.credentialProvider') as unknown as string;
  }

}

export class CodeBuildCreateProjectProjectWebhook extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildCreateProjectInput) {
    super(scope, id);
  }

  public get url(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.webhook.url'),
        outputPath: 'project.webhook.url',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.webhook.url', props);
    return resource.getResponseField('project.webhook.url') as unknown as string;
  }

  public get payloadUrl(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.webhook.payloadUrl'),
        outputPath: 'project.webhook.payloadUrl',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.webhook.payloadUrl', props);
    return resource.getResponseField('project.webhook.payloadUrl') as unknown as string;
  }

  public get secret(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.webhook.secret'),
        outputPath: 'project.webhook.secret',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.webhook.secret', props);
    return resource.getResponseField('project.webhook.secret') as unknown as string;
  }

  public get branchFilter(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.webhook.branchFilter'),
        outputPath: 'project.webhook.branchFilter',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.webhook.branchFilter', props);
    return resource.getResponseField('project.webhook.branchFilter') as unknown as string;
  }

  public get filterGroups(): shapes.CodeBuildWebhookFilter[][] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.webhook.filterGroups'),
        outputPath: 'project.webhook.filterGroups',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.webhook.filterGroups', props);
    return resource.getResponseField('project.webhook.filterGroups') as unknown as shapes.CodeBuildWebhookFilter[][];
  }

  public get buildType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.webhook.buildType'),
        outputPath: 'project.webhook.buildType',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.webhook.buildType', props);
    return resource.getResponseField('project.webhook.buildType') as unknown as string;
  }

  public get lastModifiedSecret(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.webhook.lastModifiedSecret'),
        outputPath: 'project.webhook.lastModifiedSecret',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.webhook.lastModifiedSecret', props);
    return resource.getResponseField('project.webhook.lastModifiedSecret') as unknown as string;
  }

}

export class CodeBuildCreateProjectProjectVpcConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildCreateProjectInput) {
    super(scope, id);
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.vpcConfig.vpcId'),
        outputPath: 'project.vpcConfig.vpcId',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.vpcConfig.vpcId', props);
    return resource.getResponseField('project.vpcConfig.vpcId') as unknown as string;
  }

  public get subnets(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.vpcConfig.subnets'),
        outputPath: 'project.vpcConfig.subnets',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.vpcConfig.subnets', props);
    return resource.getResponseField('project.vpcConfig.subnets') as unknown as string[];
  }

  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.vpcConfig.securityGroupIds'),
        outputPath: 'project.vpcConfig.securityGroupIds',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.vpcConfig.securityGroupIds', props);
    return resource.getResponseField('project.vpcConfig.securityGroupIds') as unknown as string[];
  }

}

export class CodeBuildCreateProjectProjectBadge extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildCreateProjectInput) {
    super(scope, id);
  }

  public get badgeEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.badge.badgeEnabled'),
        outputPath: 'project.badge.badgeEnabled',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.badge.badgeEnabled', props);
    return resource.getResponseField('project.badge.badgeEnabled') as unknown as boolean;
  }

  public get badgeRequestUrl(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.badge.badgeRequestUrl'),
        outputPath: 'project.badge.badgeRequestUrl',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.badge.badgeRequestUrl', props);
    return resource.getResponseField('project.badge.badgeRequestUrl') as unknown as string;
  }

}

export class CodeBuildCreateProjectProjectLogsConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildCreateProjectInput) {
    super(scope, id);
  }

  public get cloudWatchLogs(): CodeBuildCreateProjectProjectLogsConfigCloudWatchLogs {
    return new CodeBuildCreateProjectProjectLogsConfigCloudWatchLogs(this, 'CloudWatchLogs', this.__resources, this.input);
  }

  public get s3Logs(): CodeBuildCreateProjectProjectLogsConfigS3Logs {
    return new CodeBuildCreateProjectProjectLogsConfigS3Logs(this, 'S3Logs', this.__resources, this.input);
  }

}

export class CodeBuildCreateProjectProjectLogsConfigCloudWatchLogs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildCreateProjectInput) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.logsConfig.cloudWatchLogs.status'),
        outputPath: 'project.logsConfig.cloudWatchLogs.status',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.logsConfig.cloudWatchLogs.status', props);
    return resource.getResponseField('project.logsConfig.cloudWatchLogs.status') as unknown as string;
  }

  public get groupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.logsConfig.cloudWatchLogs.groupName'),
        outputPath: 'project.logsConfig.cloudWatchLogs.groupName',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.logsConfig.cloudWatchLogs.groupName', props);
    return resource.getResponseField('project.logsConfig.cloudWatchLogs.groupName') as unknown as string;
  }

  public get streamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.logsConfig.cloudWatchLogs.streamName'),
        outputPath: 'project.logsConfig.cloudWatchLogs.streamName',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.logsConfig.cloudWatchLogs.streamName', props);
    return resource.getResponseField('project.logsConfig.cloudWatchLogs.streamName') as unknown as string;
  }

}

export class CodeBuildCreateProjectProjectLogsConfigS3Logs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildCreateProjectInput) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.logsConfig.s3Logs.status'),
        outputPath: 'project.logsConfig.s3Logs.status',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.logsConfig.s3Logs.status', props);
    return resource.getResponseField('project.logsConfig.s3Logs.status') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.logsConfig.s3Logs.location'),
        outputPath: 'project.logsConfig.s3Logs.location',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.logsConfig.s3Logs.location', props);
    return resource.getResponseField('project.logsConfig.s3Logs.location') as unknown as string;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.logsConfig.s3Logs.encryptionDisabled'),
        outputPath: 'project.logsConfig.s3Logs.encryptionDisabled',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.logsConfig.s3Logs.encryptionDisabled', props);
    return resource.getResponseField('project.logsConfig.s3Logs.encryptionDisabled') as unknown as boolean;
  }

}

export class CodeBuildCreateProjectProjectBuildBatchConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildCreateProjectInput) {
    super(scope, id);
  }

  public get serviceRole(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.buildBatchConfig.serviceRole'),
        outputPath: 'project.buildBatchConfig.serviceRole',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.buildBatchConfig.serviceRole', props);
    return resource.getResponseField('project.buildBatchConfig.serviceRole') as unknown as string;
  }

  public get combineArtifacts(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.buildBatchConfig.combineArtifacts'),
        outputPath: 'project.buildBatchConfig.combineArtifacts',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.buildBatchConfig.combineArtifacts', props);
    return resource.getResponseField('project.buildBatchConfig.combineArtifacts') as unknown as boolean;
  }

  public get restrictions(): CodeBuildCreateProjectProjectBuildBatchConfigRestrictions {
    return new CodeBuildCreateProjectProjectBuildBatchConfigRestrictions(this, 'Restrictions', this.__resources, this.input);
  }

  public get timeoutInMins(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.buildBatchConfig.timeoutInMins'),
        outputPath: 'project.buildBatchConfig.timeoutInMins',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.buildBatchConfig.timeoutInMins', props);
    return resource.getResponseField('project.buildBatchConfig.timeoutInMins') as unknown as number;
  }

}

export class CodeBuildCreateProjectProjectBuildBatchConfigRestrictions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildCreateProjectInput) {
    super(scope, id);
  }

  public get maximumBuildsAllowed(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.buildBatchConfig.restrictions.maximumBuildsAllowed'),
        outputPath: 'project.buildBatchConfig.restrictions.maximumBuildsAllowed',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.buildBatchConfig.restrictions.maximumBuildsAllowed', props);
    return resource.getResponseField('project.buildBatchConfig.restrictions.maximumBuildsAllowed') as unknown as number;
  }

  public get computeTypesAllowed(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.buildBatchConfig.restrictions.computeTypesAllowed'),
        outputPath: 'project.buildBatchConfig.restrictions.computeTypesAllowed',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source.type,
            location: this.input.source.location,
            gitCloneDepth: this.input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source.buildspec,
            auth: {
              type: this.input.source.auth?.type,
              resource: this.input.source.auth?.resource,
            },
            reportBuildStatus: this.input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source.buildStatusConfig?.context,
              targetUrl: this.input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source.insecureSsl,
            sourceIdentifier: this.input.source.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts.type,
            location: this.input.artifacts.location,
            path: this.input.artifacts.path,
            namespaceType: this.input.artifacts.namespaceType,
            name: this.input.artifacts.name,
            packaging: this.input.artifacts.packaging,
            overrideArtifactName: this.input.artifacts.overrideArtifactName,
            encryptionDisabled: this.input.artifacts.encryptionDisabled,
            artifactIdentifier: this.input.artifacts.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment.type,
            image: this.input.environment.image,
            computeType: this.input.environment.computeType,
            environmentVariables: this.input.environment.environmentVariables,
            privilegedMode: this.input.environment.privilegedMode,
            certificate: this.input.environment.certificate,
            registryCredential: {
              credential: this.input.environment.registryCredential?.credential,
              credentialProvider: this.input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateProject.project.buildBatchConfig.restrictions.computeTypesAllowed', props);
    return resource.getResponseField('project.buildBatchConfig.restrictions.computeTypesAllowed') as unknown as string[];
  }

}

export class CodeBuildCreateReportGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildCreateReportGroupInput) {
    super(scope, id);
  }

  public get reportGroup(): CodeBuildCreateReportGroupReportGroup {
    return new CodeBuildCreateReportGroupReportGroup(this, 'ReportGroup', this.__resources, this.input);
  }

}

export class CodeBuildCreateReportGroupReportGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildCreateReportGroupInput) {
    super(scope, id);
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateReportGroup.reportGroup.arn'),
        outputPath: 'reportGroup.arn',
        parameters: {
          name: this.input.name,
          type: this.input.type,
          exportConfig: {
            exportConfigType: this.input.exportConfig.exportConfigType,
            s3Destination: {
              bucket: this.input.exportConfig.s3Destination?.bucket,
              path: this.input.exportConfig.s3Destination?.path,
              packaging: this.input.exportConfig.s3Destination?.packaging,
              encryptionKey: this.input.exportConfig.s3Destination?.encryptionKey,
              encryptionDisabled: this.input.exportConfig.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateReportGroup.reportGroup.arn', props);
    return resource.getResponseField('reportGroup.arn') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateReportGroup.reportGroup.name'),
        outputPath: 'reportGroup.name',
        parameters: {
          name: this.input.name,
          type: this.input.type,
          exportConfig: {
            exportConfigType: this.input.exportConfig.exportConfigType,
            s3Destination: {
              bucket: this.input.exportConfig.s3Destination?.bucket,
              path: this.input.exportConfig.s3Destination?.path,
              packaging: this.input.exportConfig.s3Destination?.packaging,
              encryptionKey: this.input.exportConfig.s3Destination?.encryptionKey,
              encryptionDisabled: this.input.exportConfig.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateReportGroup.reportGroup.name', props);
    return resource.getResponseField('reportGroup.name') as unknown as string;
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateReportGroup.reportGroup.type'),
        outputPath: 'reportGroup.type',
        parameters: {
          name: this.input.name,
          type: this.input.type,
          exportConfig: {
            exportConfigType: this.input.exportConfig.exportConfigType,
            s3Destination: {
              bucket: this.input.exportConfig.s3Destination?.bucket,
              path: this.input.exportConfig.s3Destination?.path,
              packaging: this.input.exportConfig.s3Destination?.packaging,
              encryptionKey: this.input.exportConfig.s3Destination?.encryptionKey,
              encryptionDisabled: this.input.exportConfig.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateReportGroup.reportGroup.type', props);
    return resource.getResponseField('reportGroup.type') as unknown as string;
  }

  public get exportConfig(): CodeBuildCreateReportGroupReportGroupExportConfig {
    return new CodeBuildCreateReportGroupReportGroupExportConfig(this, 'ExportConfig', this.__resources, this.input);
  }

  public get created(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateReportGroup.reportGroup.created'),
        outputPath: 'reportGroup.created',
        parameters: {
          name: this.input.name,
          type: this.input.type,
          exportConfig: {
            exportConfigType: this.input.exportConfig.exportConfigType,
            s3Destination: {
              bucket: this.input.exportConfig.s3Destination?.bucket,
              path: this.input.exportConfig.s3Destination?.path,
              packaging: this.input.exportConfig.s3Destination?.packaging,
              encryptionKey: this.input.exportConfig.s3Destination?.encryptionKey,
              encryptionDisabled: this.input.exportConfig.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateReportGroup.reportGroup.created', props);
    return resource.getResponseField('reportGroup.created') as unknown as string;
  }

  public get lastModified(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateReportGroup.reportGroup.lastModified'),
        outputPath: 'reportGroup.lastModified',
        parameters: {
          name: this.input.name,
          type: this.input.type,
          exportConfig: {
            exportConfigType: this.input.exportConfig.exportConfigType,
            s3Destination: {
              bucket: this.input.exportConfig.s3Destination?.bucket,
              path: this.input.exportConfig.s3Destination?.path,
              packaging: this.input.exportConfig.s3Destination?.packaging,
              encryptionKey: this.input.exportConfig.s3Destination?.encryptionKey,
              encryptionDisabled: this.input.exportConfig.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateReportGroup.reportGroup.lastModified', props);
    return resource.getResponseField('reportGroup.lastModified') as unknown as string;
  }

  public get tags(): shapes.CodeBuildTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateReportGroup.reportGroup.tags'),
        outputPath: 'reportGroup.tags',
        parameters: {
          name: this.input.name,
          type: this.input.type,
          exportConfig: {
            exportConfigType: this.input.exportConfig.exportConfigType,
            s3Destination: {
              bucket: this.input.exportConfig.s3Destination?.bucket,
              path: this.input.exportConfig.s3Destination?.path,
              packaging: this.input.exportConfig.s3Destination?.packaging,
              encryptionKey: this.input.exportConfig.s3Destination?.encryptionKey,
              encryptionDisabled: this.input.exportConfig.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateReportGroup.reportGroup.tags', props);
    return resource.getResponseField('reportGroup.tags') as unknown as shapes.CodeBuildTag[];
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateReportGroup.reportGroup.status'),
        outputPath: 'reportGroup.status',
        parameters: {
          name: this.input.name,
          type: this.input.type,
          exportConfig: {
            exportConfigType: this.input.exportConfig.exportConfigType,
            s3Destination: {
              bucket: this.input.exportConfig.s3Destination?.bucket,
              path: this.input.exportConfig.s3Destination?.path,
              packaging: this.input.exportConfig.s3Destination?.packaging,
              encryptionKey: this.input.exportConfig.s3Destination?.encryptionKey,
              encryptionDisabled: this.input.exportConfig.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateReportGroup.reportGroup.status', props);
    return resource.getResponseField('reportGroup.status') as unknown as string;
  }

}

export class CodeBuildCreateReportGroupReportGroupExportConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildCreateReportGroupInput) {
    super(scope, id);
  }

  public get exportConfigType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateReportGroup.reportGroup.exportConfig.exportConfigType'),
        outputPath: 'reportGroup.exportConfig.exportConfigType',
        parameters: {
          name: this.input.name,
          type: this.input.type,
          exportConfig: {
            exportConfigType: this.input.exportConfig.exportConfigType,
            s3Destination: {
              bucket: this.input.exportConfig.s3Destination?.bucket,
              path: this.input.exportConfig.s3Destination?.path,
              packaging: this.input.exportConfig.s3Destination?.packaging,
              encryptionKey: this.input.exportConfig.s3Destination?.encryptionKey,
              encryptionDisabled: this.input.exportConfig.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateReportGroup.reportGroup.exportConfig.exportConfigType', props);
    return resource.getResponseField('reportGroup.exportConfig.exportConfigType') as unknown as string;
  }

  public get s3Destination(): CodeBuildCreateReportGroupReportGroupExportConfigS3Destination {
    return new CodeBuildCreateReportGroupReportGroupExportConfigS3Destination(this, 'S3Destination', this.__resources, this.input);
  }

}

export class CodeBuildCreateReportGroupReportGroupExportConfigS3Destination extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildCreateReportGroupInput) {
    super(scope, id);
  }

  public get bucket(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateReportGroup.reportGroup.exportConfig.s3Destination.bucket'),
        outputPath: 'reportGroup.exportConfig.s3Destination.bucket',
        parameters: {
          name: this.input.name,
          type: this.input.type,
          exportConfig: {
            exportConfigType: this.input.exportConfig.exportConfigType,
            s3Destination: {
              bucket: this.input.exportConfig.s3Destination?.bucket,
              path: this.input.exportConfig.s3Destination?.path,
              packaging: this.input.exportConfig.s3Destination?.packaging,
              encryptionKey: this.input.exportConfig.s3Destination?.encryptionKey,
              encryptionDisabled: this.input.exportConfig.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateReportGroup.reportGroup.exportConfig.s3Destination.bucket', props);
    return resource.getResponseField('reportGroup.exportConfig.s3Destination.bucket') as unknown as string;
  }

  public get path(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateReportGroup.reportGroup.exportConfig.s3Destination.path'),
        outputPath: 'reportGroup.exportConfig.s3Destination.path',
        parameters: {
          name: this.input.name,
          type: this.input.type,
          exportConfig: {
            exportConfigType: this.input.exportConfig.exportConfigType,
            s3Destination: {
              bucket: this.input.exportConfig.s3Destination?.bucket,
              path: this.input.exportConfig.s3Destination?.path,
              packaging: this.input.exportConfig.s3Destination?.packaging,
              encryptionKey: this.input.exportConfig.s3Destination?.encryptionKey,
              encryptionDisabled: this.input.exportConfig.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateReportGroup.reportGroup.exportConfig.s3Destination.path', props);
    return resource.getResponseField('reportGroup.exportConfig.s3Destination.path') as unknown as string;
  }

  public get packaging(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateReportGroup.reportGroup.exportConfig.s3Destination.packaging'),
        outputPath: 'reportGroup.exportConfig.s3Destination.packaging',
        parameters: {
          name: this.input.name,
          type: this.input.type,
          exportConfig: {
            exportConfigType: this.input.exportConfig.exportConfigType,
            s3Destination: {
              bucket: this.input.exportConfig.s3Destination?.bucket,
              path: this.input.exportConfig.s3Destination?.path,
              packaging: this.input.exportConfig.s3Destination?.packaging,
              encryptionKey: this.input.exportConfig.s3Destination?.encryptionKey,
              encryptionDisabled: this.input.exportConfig.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateReportGroup.reportGroup.exportConfig.s3Destination.packaging', props);
    return resource.getResponseField('reportGroup.exportConfig.s3Destination.packaging') as unknown as string;
  }

  public get encryptionKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateReportGroup.reportGroup.exportConfig.s3Destination.encryptionKey'),
        outputPath: 'reportGroup.exportConfig.s3Destination.encryptionKey',
        parameters: {
          name: this.input.name,
          type: this.input.type,
          exportConfig: {
            exportConfigType: this.input.exportConfig.exportConfigType,
            s3Destination: {
              bucket: this.input.exportConfig.s3Destination?.bucket,
              path: this.input.exportConfig.s3Destination?.path,
              packaging: this.input.exportConfig.s3Destination?.packaging,
              encryptionKey: this.input.exportConfig.s3Destination?.encryptionKey,
              encryptionDisabled: this.input.exportConfig.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateReportGroup.reportGroup.exportConfig.s3Destination.encryptionKey', props);
    return resource.getResponseField('reportGroup.exportConfig.s3Destination.encryptionKey') as unknown as string;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateReportGroup.reportGroup.exportConfig.s3Destination.encryptionDisabled'),
        outputPath: 'reportGroup.exportConfig.s3Destination.encryptionDisabled',
        parameters: {
          name: this.input.name,
          type: this.input.type,
          exportConfig: {
            exportConfigType: this.input.exportConfig.exportConfigType,
            s3Destination: {
              bucket: this.input.exportConfig.s3Destination?.bucket,
              path: this.input.exportConfig.s3Destination?.path,
              packaging: this.input.exportConfig.s3Destination?.packaging,
              encryptionKey: this.input.exportConfig.s3Destination?.encryptionKey,
              encryptionDisabled: this.input.exportConfig.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateReportGroup.reportGroup.exportConfig.s3Destination.encryptionDisabled', props);
    return resource.getResponseField('reportGroup.exportConfig.s3Destination.encryptionDisabled') as unknown as boolean;
  }

}

export class CodeBuildCreateWebhook extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildCreateWebhookInput) {
    super(scope, id);
  }

  public get webhook(): CodeBuildCreateWebhookWebhook {
    return new CodeBuildCreateWebhookWebhook(this, 'Webhook', this.__resources, this.input);
  }

}

export class CodeBuildCreateWebhookWebhook extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildCreateWebhookInput) {
    super(scope, id);
  }

  public get url(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createWebhook',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateWebhook.webhook.url'),
        outputPath: 'webhook.url',
        parameters: {
          projectName: this.input.projectName,
          branchFilter: this.input.branchFilter,
          filterGroups: this.input.filterGroups,
          buildType: this.input.buildType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateWebhook.webhook.url', props);
    return resource.getResponseField('webhook.url') as unknown as string;
  }

  public get payloadUrl(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createWebhook',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateWebhook.webhook.payloadUrl'),
        outputPath: 'webhook.payloadUrl',
        parameters: {
          projectName: this.input.projectName,
          branchFilter: this.input.branchFilter,
          filterGroups: this.input.filterGroups,
          buildType: this.input.buildType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateWebhook.webhook.payloadUrl', props);
    return resource.getResponseField('webhook.payloadUrl') as unknown as string;
  }

  public get secret(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createWebhook',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateWebhook.webhook.secret'),
        outputPath: 'webhook.secret',
        parameters: {
          projectName: this.input.projectName,
          branchFilter: this.input.branchFilter,
          filterGroups: this.input.filterGroups,
          buildType: this.input.buildType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateWebhook.webhook.secret', props);
    return resource.getResponseField('webhook.secret') as unknown as string;
  }

  public get branchFilter(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createWebhook',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateWebhook.webhook.branchFilter'),
        outputPath: 'webhook.branchFilter',
        parameters: {
          projectName: this.input.projectName,
          branchFilter: this.input.branchFilter,
          filterGroups: this.input.filterGroups,
          buildType: this.input.buildType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateWebhook.webhook.branchFilter', props);
    return resource.getResponseField('webhook.branchFilter') as unknown as string;
  }

  public get filterGroups(): shapes.CodeBuildWebhookFilter[][] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createWebhook',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateWebhook.webhook.filterGroups'),
        outputPath: 'webhook.filterGroups',
        parameters: {
          projectName: this.input.projectName,
          branchFilter: this.input.branchFilter,
          filterGroups: this.input.filterGroups,
          buildType: this.input.buildType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateWebhook.webhook.filterGroups', props);
    return resource.getResponseField('webhook.filterGroups') as unknown as shapes.CodeBuildWebhookFilter[][];
  }

  public get buildType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createWebhook',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateWebhook.webhook.buildType'),
        outputPath: 'webhook.buildType',
        parameters: {
          projectName: this.input.projectName,
          branchFilter: this.input.branchFilter,
          filterGroups: this.input.filterGroups,
          buildType: this.input.buildType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateWebhook.webhook.buildType', props);
    return resource.getResponseField('webhook.buildType') as unknown as string;
  }

  public get lastModifiedSecret(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createWebhook',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateWebhook.webhook.lastModifiedSecret'),
        outputPath: 'webhook.lastModifiedSecret',
        parameters: {
          projectName: this.input.projectName,
          branchFilter: this.input.branchFilter,
          filterGroups: this.input.filterGroups,
          buildType: this.input.buildType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateWebhook.webhook.lastModifiedSecret', props);
    return resource.getResponseField('webhook.lastModifiedSecret') as unknown as string;
  }

}

export class CodeBuildDeleteBuildBatch extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildDeleteBuildBatchInput) {
    super(scope, id);
  }

  public get statusCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.DeleteBuildBatch.statusCode'),
        outputPath: 'statusCode',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteBuildBatch.statusCode', props);
    return resource.getResponseField('statusCode') as unknown as string;
  }

  public get buildsDeleted(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.DeleteBuildBatch.buildsDeleted'),
        outputPath: 'buildsDeleted',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteBuildBatch.buildsDeleted', props);
    return resource.getResponseField('buildsDeleted') as unknown as string[];
  }

  public get buildsNotDeleted(): shapes.CodeBuildBuildNotDeleted[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.DeleteBuildBatch.buildsNotDeleted'),
        outputPath: 'buildsNotDeleted',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteBuildBatch.buildsNotDeleted', props);
    return resource.getResponseField('buildsNotDeleted') as unknown as shapes.CodeBuildBuildNotDeleted[];
  }

}

export class CodeBuildDeleteSourceCredentials extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildDeleteSourceCredentialsInput) {
    super(scope, id);
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteSourceCredentials',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.DeleteSourceCredentials.arn'),
        outputPath: 'arn',
        parameters: {
          arn: this.input.arn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteSourceCredentials.arn', props);
    return resource.getResponseField('arn') as unknown as string;
  }

}

export class CodeBuildDescribeCodeCoverages extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildDescribeCodeCoveragesInput) {
    super(scope, id);
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeCodeCoverages',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.DescribeCodeCoverages.nextToken'),
        outputPath: 'nextToken',
        parameters: {
          reportArn: this.input.reportArn,
          nextToken: this.input.nextToken,
          maxResults: this.input.maxResults,
          sortOrder: this.input.sortOrder,
          sortBy: this.input.sortBy,
          minLineCoveragePercentage: this.input.minLineCoveragePercentage,
          maxLineCoveragePercentage: this.input.maxLineCoveragePercentage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeCodeCoverages.nextToken', props);
    return resource.getResponseField('nextToken') as unknown as string;
  }

  public get codeCoverages(): shapes.CodeBuildCodeCoverage[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeCodeCoverages',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.DescribeCodeCoverages.codeCoverages'),
        outputPath: 'codeCoverages',
        parameters: {
          reportArn: this.input.reportArn,
          nextToken: this.input.nextToken,
          maxResults: this.input.maxResults,
          sortOrder: this.input.sortOrder,
          sortBy: this.input.sortBy,
          minLineCoveragePercentage: this.input.minLineCoveragePercentage,
          maxLineCoveragePercentage: this.input.maxLineCoveragePercentage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeCodeCoverages.codeCoverages', props);
    return resource.getResponseField('codeCoverages') as unknown as shapes.CodeBuildCodeCoverage[];
  }

}

export class CodeBuildDescribeTestCases extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildDescribeTestCasesInput) {
    super(scope, id);
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTestCases',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.DescribeTestCases.nextToken'),
        outputPath: 'nextToken',
        parameters: {
          reportArn: this.input.reportArn,
          nextToken: this.input.nextToken,
          maxResults: this.input.maxResults,
          filter: {
            status: this.input.filter?.status,
            keyword: this.input.filter?.keyword,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeTestCases.nextToken', props);
    return resource.getResponseField('nextToken') as unknown as string;
  }

  public get testCases(): shapes.CodeBuildTestCase[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTestCases',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.DescribeTestCases.testCases'),
        outputPath: 'testCases',
        parameters: {
          reportArn: this.input.reportArn,
          nextToken: this.input.nextToken,
          maxResults: this.input.maxResults,
          filter: {
            status: this.input.filter?.status,
            keyword: this.input.filter?.keyword,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeTestCases.testCases', props);
    return resource.getResponseField('testCases') as unknown as shapes.CodeBuildTestCase[];
  }

}

export class CodeBuildFetchReportGroupTrend extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildGetReportGroupTrendInput) {
    super(scope, id);
  }

  public get stats(): CodeBuildFetchReportGroupTrendStats {
    return new CodeBuildFetchReportGroupTrendStats(this, 'Stats', this.__resources, this.input);
  }

  public get rawData(): shapes.CodeBuildReportWithRawData[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReportGroupTrend',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.GetReportGroupTrend.rawData'),
        outputPath: 'rawData',
        parameters: {
          reportGroupArn: this.input.reportGroupArn,
          numOfReports: this.input.numOfReports,
          trendField: this.input.trendField,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetReportGroupTrend.rawData', props);
    return resource.getResponseField('rawData') as unknown as shapes.CodeBuildReportWithRawData[];
  }

}

export class CodeBuildFetchReportGroupTrendStats extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildGetReportGroupTrendInput) {
    super(scope, id);
  }

  public get average(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReportGroupTrend',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.GetReportGroupTrend.stats.average'),
        outputPath: 'stats.average',
        parameters: {
          reportGroupArn: this.input.reportGroupArn,
          numOfReports: this.input.numOfReports,
          trendField: this.input.trendField,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetReportGroupTrend.stats.average', props);
    return resource.getResponseField('stats.average') as unknown as string;
  }

  public get max(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReportGroupTrend',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.GetReportGroupTrend.stats.max'),
        outputPath: 'stats.max',
        parameters: {
          reportGroupArn: this.input.reportGroupArn,
          numOfReports: this.input.numOfReports,
          trendField: this.input.trendField,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetReportGroupTrend.stats.max', props);
    return resource.getResponseField('stats.max') as unknown as string;
  }

  public get min(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReportGroupTrend',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.GetReportGroupTrend.stats.min'),
        outputPath: 'stats.min',
        parameters: {
          reportGroupArn: this.input.reportGroupArn,
          numOfReports: this.input.numOfReports,
          trendField: this.input.trendField,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetReportGroupTrend.stats.min', props);
    return resource.getResponseField('stats.min') as unknown as string;
  }

}

export class CodeBuildFetchResourcePolicy extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildGetResourcePolicyInput) {
    super(scope, id);
  }

  public get policy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getResourcePolicy',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.GetResourcePolicy.policy'),
        outputPath: 'policy',
        parameters: {
          resourceArn: this.input.resourceArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetResourcePolicy.policy', props);
    return resource.getResponseField('policy') as unknown as string;
  }

}

export class CodeBuildImportSourceCredentials extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildImportSourceCredentialsInput) {
    super(scope, id);
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importSourceCredentials',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ImportSourceCredentials.arn'),
        outputPath: 'arn',
        parameters: {
          username: this.input.username,
          token: this.input.token,
          serverType: this.input.serverType,
          authType: this.input.authType,
          shouldOverwrite: this.input.shouldOverwrite,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportSourceCredentials.arn', props);
    return resource.getResponseField('arn') as unknown as string;
  }

}

export class CodeBuildListBuildBatches extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildListBuildBatchesInput) {
    super(scope, id);
  }

  public get ids(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listBuildBatches',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListBuildBatches.ids'),
        outputPath: 'ids',
        parameters: {
          filter: {
            status: this.input.filter?.status,
          },
          maxResults: this.input.maxResults,
          sortOrder: this.input.sortOrder,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListBuildBatches.ids', props);
    return resource.getResponseField('ids') as unknown as string[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listBuildBatches',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListBuildBatches.nextToken'),
        outputPath: 'nextToken',
        parameters: {
          filter: {
            status: this.input.filter?.status,
          },
          maxResults: this.input.maxResults,
          sortOrder: this.input.sortOrder,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListBuildBatches.nextToken', props);
    return resource.getResponseField('nextToken') as unknown as string;
  }

}

export class CodeBuildListBuildBatchesForProject extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildListBuildBatchesForProjectInput) {
    super(scope, id);
  }

  public get ids(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listBuildBatchesForProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListBuildBatchesForProject.ids'),
        outputPath: 'ids',
        parameters: {
          projectName: this.input.projectName,
          filter: {
            status: this.input.filter?.status,
          },
          maxResults: this.input.maxResults,
          sortOrder: this.input.sortOrder,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListBuildBatchesForProject.ids', props);
    return resource.getResponseField('ids') as unknown as string[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listBuildBatchesForProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListBuildBatchesForProject.nextToken'),
        outputPath: 'nextToken',
        parameters: {
          projectName: this.input.projectName,
          filter: {
            status: this.input.filter?.status,
          },
          maxResults: this.input.maxResults,
          sortOrder: this.input.sortOrder,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListBuildBatchesForProject.nextToken', props);
    return resource.getResponseField('nextToken') as unknown as string;
  }

}

export class CodeBuildListBuilds extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildListBuildsInput) {
    super(scope, id);
  }

  public get ids(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listBuilds',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListBuilds.ids'),
        outputPath: 'ids',
        parameters: {
          sortOrder: this.input.sortOrder,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListBuilds.ids', props);
    return resource.getResponseField('ids') as unknown as string[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listBuilds',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListBuilds.nextToken'),
        outputPath: 'nextToken',
        parameters: {
          sortOrder: this.input.sortOrder,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListBuilds.nextToken', props);
    return resource.getResponseField('nextToken') as unknown as string;
  }

}

export class CodeBuildListBuildsForProject extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildListBuildsForProjectInput) {
    super(scope, id);
  }

  public get ids(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listBuildsForProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListBuildsForProject.ids'),
        outputPath: 'ids',
        parameters: {
          projectName: this.input.projectName,
          sortOrder: this.input.sortOrder,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListBuildsForProject.ids', props);
    return resource.getResponseField('ids') as unknown as string[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listBuildsForProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListBuildsForProject.nextToken'),
        outputPath: 'nextToken',
        parameters: {
          projectName: this.input.projectName,
          sortOrder: this.input.sortOrder,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListBuildsForProject.nextToken', props);
    return resource.getResponseField('nextToken') as unknown as string;
  }

}

export class CodeBuildListCuratedEnvironmentImages extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[]) {
    super(scope, id);
  }

  public get platforms(): shapes.CodeBuildEnvironmentPlatform[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listCuratedEnvironmentImages',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListCuratedEnvironmentImages.platforms'),
        outputPath: 'platforms',
        parameters: {
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListCuratedEnvironmentImages.platforms', props);
    return resource.getResponseField('platforms') as unknown as shapes.CodeBuildEnvironmentPlatform[];
  }

}

export class CodeBuildListProjects extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildListProjectsInput) {
    super(scope, id);
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listProjects',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListProjects.nextToken'),
        outputPath: 'nextToken',
        parameters: {
          sortBy: this.input.sortBy,
          sortOrder: this.input.sortOrder,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListProjects.nextToken', props);
    return resource.getResponseField('nextToken') as unknown as string;
  }

  public get projects(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listProjects',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListProjects.projects'),
        outputPath: 'projects',
        parameters: {
          sortBy: this.input.sortBy,
          sortOrder: this.input.sortOrder,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListProjects.projects', props);
    return resource.getResponseField('projects') as unknown as string[];
  }

}

export class CodeBuildListReportGroups extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildListReportGroupsInput) {
    super(scope, id);
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listReportGroups',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListReportGroups.nextToken'),
        outputPath: 'nextToken',
        parameters: {
          sortOrder: this.input.sortOrder,
          sortBy: this.input.sortBy,
          nextToken: this.input.nextToken,
          maxResults: this.input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListReportGroups.nextToken', props);
    return resource.getResponseField('nextToken') as unknown as string;
  }

  public get reportGroups(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listReportGroups',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListReportGroups.reportGroups'),
        outputPath: 'reportGroups',
        parameters: {
          sortOrder: this.input.sortOrder,
          sortBy: this.input.sortBy,
          nextToken: this.input.nextToken,
          maxResults: this.input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListReportGroups.reportGroups', props);
    return resource.getResponseField('reportGroups') as unknown as string[];
  }

}

export class CodeBuildListReports extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildListReportsInput) {
    super(scope, id);
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listReports',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListReports.nextToken'),
        outputPath: 'nextToken',
        parameters: {
          sortOrder: this.input.sortOrder,
          nextToken: this.input.nextToken,
          maxResults: this.input.maxResults,
          filter: {
            status: this.input.filter?.status,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListReports.nextToken', props);
    return resource.getResponseField('nextToken') as unknown as string;
  }

  public get reports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listReports',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListReports.reports'),
        outputPath: 'reports',
        parameters: {
          sortOrder: this.input.sortOrder,
          nextToken: this.input.nextToken,
          maxResults: this.input.maxResults,
          filter: {
            status: this.input.filter?.status,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListReports.reports', props);
    return resource.getResponseField('reports') as unknown as string[];
  }

}

export class CodeBuildListReportsForReportGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildListReportsForReportGroupInput) {
    super(scope, id);
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listReportsForReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListReportsForReportGroup.nextToken'),
        outputPath: 'nextToken',
        parameters: {
          reportGroupArn: this.input.reportGroupArn,
          nextToken: this.input.nextToken,
          sortOrder: this.input.sortOrder,
          maxResults: this.input.maxResults,
          filter: {
            status: this.input.filter?.status,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListReportsForReportGroup.nextToken', props);
    return resource.getResponseField('nextToken') as unknown as string;
  }

  public get reports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listReportsForReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListReportsForReportGroup.reports'),
        outputPath: 'reports',
        parameters: {
          reportGroupArn: this.input.reportGroupArn,
          nextToken: this.input.nextToken,
          sortOrder: this.input.sortOrder,
          maxResults: this.input.maxResults,
          filter: {
            status: this.input.filter?.status,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListReportsForReportGroup.reports', props);
    return resource.getResponseField('reports') as unknown as string[];
  }

}

export class CodeBuildListSharedProjects extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildListSharedProjectsInput) {
    super(scope, id);
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listSharedProjects',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListSharedProjects.nextToken'),
        outputPath: 'nextToken',
        parameters: {
          sortBy: this.input.sortBy,
          sortOrder: this.input.sortOrder,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListSharedProjects.nextToken', props);
    return resource.getResponseField('nextToken') as unknown as string;
  }

  public get projects(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listSharedProjects',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListSharedProjects.projects'),
        outputPath: 'projects',
        parameters: {
          sortBy: this.input.sortBy,
          sortOrder: this.input.sortOrder,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListSharedProjects.projects', props);
    return resource.getResponseField('projects') as unknown as string[];
  }

}

export class CodeBuildListSharedReportGroups extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildListSharedReportGroupsInput) {
    super(scope, id);
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listSharedReportGroups',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListSharedReportGroups.nextToken'),
        outputPath: 'nextToken',
        parameters: {
          sortOrder: this.input.sortOrder,
          sortBy: this.input.sortBy,
          nextToken: this.input.nextToken,
          maxResults: this.input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListSharedReportGroups.nextToken', props);
    return resource.getResponseField('nextToken') as unknown as string;
  }

  public get reportGroups(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listSharedReportGroups',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListSharedReportGroups.reportGroups'),
        outputPath: 'reportGroups',
        parameters: {
          sortOrder: this.input.sortOrder,
          sortBy: this.input.sortBy,
          nextToken: this.input.nextToken,
          maxResults: this.input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListSharedReportGroups.reportGroups', props);
    return resource.getResponseField('reportGroups') as unknown as string[];
  }

}

export class CodeBuildListSourceCredentials extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[]) {
    super(scope, id);
  }

  public get sourceCredentialsInfos(): shapes.CodeBuildSourceCredentialsInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listSourceCredentials',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListSourceCredentials.sourceCredentialsInfos'),
        outputPath: 'sourceCredentialsInfos',
        parameters: {
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListSourceCredentials.sourceCredentialsInfos', props);
    return resource.getResponseField('sourceCredentialsInfos') as unknown as shapes.CodeBuildSourceCredentialsInfo[];
  }

}

export class CodeBuildPutResourcePolicy extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildPutResourcePolicyInput) {
    super(scope, id);
  }

  public get resourceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'putResourcePolicy',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.PutResourcePolicy.resourceArn'),
        outputPath: 'resourceArn',
        parameters: {
          policy: this.input.policy,
          resourceArn: this.input.resourceArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PutResourcePolicy.resourceArn', props);
    return resource.getResponseField('resourceArn') as unknown as string;
  }

}

export class CodeBuildRetryBuild extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildRetryBuildInput) {
    super(scope, id);
  }

  public get build(): CodeBuildRetryBuildBuild {
    return new CodeBuildRetryBuildBuild(this, 'Build', this.__resources, this.input);
  }

}

export class CodeBuildRetryBuildBuild extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildRetryBuildInput) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.id'),
        outputPath: 'build.id',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.id', props);
    return resource.getResponseField('build.id') as unknown as string;
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.arn'),
        outputPath: 'build.arn',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.arn', props);
    return resource.getResponseField('build.arn') as unknown as string;
  }

  public get buildNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.buildNumber'),
        outputPath: 'build.buildNumber',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.buildNumber', props);
    return resource.getResponseField('build.buildNumber') as unknown as number;
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.startTime'),
        outputPath: 'build.startTime',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.startTime', props);
    return resource.getResponseField('build.startTime') as unknown as string;
  }

  public get endTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.endTime'),
        outputPath: 'build.endTime',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.endTime', props);
    return resource.getResponseField('build.endTime') as unknown as string;
  }

  public get currentPhase(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.currentPhase'),
        outputPath: 'build.currentPhase',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.currentPhase', props);
    return resource.getResponseField('build.currentPhase') as unknown as string;
  }

  public get buildStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.buildStatus'),
        outputPath: 'build.buildStatus',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.buildStatus', props);
    return resource.getResponseField('build.buildStatus') as unknown as string;
  }

  public get sourceVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.sourceVersion'),
        outputPath: 'build.sourceVersion',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.sourceVersion', props);
    return resource.getResponseField('build.sourceVersion') as unknown as string;
  }

  public get resolvedSourceVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.resolvedSourceVersion'),
        outputPath: 'build.resolvedSourceVersion',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.resolvedSourceVersion', props);
    return resource.getResponseField('build.resolvedSourceVersion') as unknown as string;
  }

  public get projectName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.projectName'),
        outputPath: 'build.projectName',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.projectName', props);
    return resource.getResponseField('build.projectName') as unknown as string;
  }

  public get phases(): shapes.CodeBuildBuildPhase[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.phases'),
        outputPath: 'build.phases',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.phases', props);
    return resource.getResponseField('build.phases') as unknown as shapes.CodeBuildBuildPhase[];
  }

  public get source(): CodeBuildRetryBuildBuildSource {
    return new CodeBuildRetryBuildBuildSource(this, 'Source', this.__resources, this.input);
  }

  public get secondarySources(): shapes.CodeBuildProjectSource[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.secondarySources'),
        outputPath: 'build.secondarySources',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.secondarySources', props);
    return resource.getResponseField('build.secondarySources') as unknown as shapes.CodeBuildProjectSource[];
  }

  public get secondarySourceVersions(): shapes.CodeBuildProjectSourceVersion[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.secondarySourceVersions'),
        outputPath: 'build.secondarySourceVersions',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.secondarySourceVersions', props);
    return resource.getResponseField('build.secondarySourceVersions') as unknown as shapes.CodeBuildProjectSourceVersion[];
  }

  public get artifacts(): CodeBuildRetryBuildBuildArtifacts {
    return new CodeBuildRetryBuildBuildArtifacts(this, 'Artifacts', this.__resources, this.input);
  }

  public get secondaryArtifacts(): shapes.CodeBuildBuildArtifacts[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.secondaryArtifacts'),
        outputPath: 'build.secondaryArtifacts',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.secondaryArtifacts', props);
    return resource.getResponseField('build.secondaryArtifacts') as unknown as shapes.CodeBuildBuildArtifacts[];
  }

  public get cache(): CodeBuildRetryBuildBuildCache {
    return new CodeBuildRetryBuildBuildCache(this, 'Cache', this.__resources, this.input);
  }

  public get environment(): CodeBuildRetryBuildBuildEnvironment {
    return new CodeBuildRetryBuildBuildEnvironment(this, 'Environment', this.__resources, this.input);
  }

  public get serviceRole(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.serviceRole'),
        outputPath: 'build.serviceRole',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.serviceRole', props);
    return resource.getResponseField('build.serviceRole') as unknown as string;
  }

  public get logs(): CodeBuildRetryBuildBuildLogs {
    return new CodeBuildRetryBuildBuildLogs(this, 'Logs', this.__resources, this.input);
  }

  public get timeoutInMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.timeoutInMinutes'),
        outputPath: 'build.timeoutInMinutes',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.timeoutInMinutes', props);
    return resource.getResponseField('build.timeoutInMinutes') as unknown as number;
  }

  public get queuedTimeoutInMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.queuedTimeoutInMinutes'),
        outputPath: 'build.queuedTimeoutInMinutes',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.queuedTimeoutInMinutes', props);
    return resource.getResponseField('build.queuedTimeoutInMinutes') as unknown as number;
  }

  public get buildComplete(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.buildComplete'),
        outputPath: 'build.buildComplete',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.buildComplete', props);
    return resource.getResponseField('build.buildComplete') as unknown as boolean;
  }

  public get initiator(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.initiator'),
        outputPath: 'build.initiator',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.initiator', props);
    return resource.getResponseField('build.initiator') as unknown as string;
  }

  public get vpcConfig(): CodeBuildRetryBuildBuildVpcConfig {
    return new CodeBuildRetryBuildBuildVpcConfig(this, 'VpcConfig', this.__resources, this.input);
  }

  public get networkInterface(): CodeBuildRetryBuildBuildNetworkInterface {
    return new CodeBuildRetryBuildBuildNetworkInterface(this, 'NetworkInterface', this.__resources, this.input);
  }

  public get encryptionKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.encryptionKey'),
        outputPath: 'build.encryptionKey',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.encryptionKey', props);
    return resource.getResponseField('build.encryptionKey') as unknown as string;
  }

  public get exportedEnvironmentVariables(): shapes.CodeBuildExportedEnvironmentVariable[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.exportedEnvironmentVariables'),
        outputPath: 'build.exportedEnvironmentVariables',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.exportedEnvironmentVariables', props);
    return resource.getResponseField('build.exportedEnvironmentVariables') as unknown as shapes.CodeBuildExportedEnvironmentVariable[];
  }

  public get reportArns(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.reportArns'),
        outputPath: 'build.reportArns',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.reportArns', props);
    return resource.getResponseField('build.reportArns') as unknown as string[];
  }

  public get fileSystemLocations(): shapes.CodeBuildProjectFileSystemLocation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.fileSystemLocations'),
        outputPath: 'build.fileSystemLocations',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.fileSystemLocations', props);
    return resource.getResponseField('build.fileSystemLocations') as unknown as shapes.CodeBuildProjectFileSystemLocation[];
  }

  public get debugSession(): CodeBuildRetryBuildBuildDebugSession {
    return new CodeBuildRetryBuildBuildDebugSession(this, 'DebugSession', this.__resources, this.input);
  }

  public get buildBatchArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.buildBatchArn'),
        outputPath: 'build.buildBatchArn',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.buildBatchArn', props);
    return resource.getResponseField('build.buildBatchArn') as unknown as string;
  }

}

export class CodeBuildRetryBuildBuildSource extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildRetryBuildInput) {
    super(scope, id);
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.source.type'),
        outputPath: 'build.source.type',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.source.type', props);
    return resource.getResponseField('build.source.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.source.location'),
        outputPath: 'build.source.location',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.source.location', props);
    return resource.getResponseField('build.source.location') as unknown as string;
  }

  public get gitCloneDepth(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.source.gitCloneDepth'),
        outputPath: 'build.source.gitCloneDepth',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.source.gitCloneDepth', props);
    return resource.getResponseField('build.source.gitCloneDepth') as unknown as number;
  }

  public get gitSubmodulesConfig(): CodeBuildRetryBuildBuildSourceGitSubmodulesConfig {
    return new CodeBuildRetryBuildBuildSourceGitSubmodulesConfig(this, 'GitSubmodulesConfig', this.__resources, this.input);
  }

  public get buildspec(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.source.buildspec'),
        outputPath: 'build.source.buildspec',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.source.buildspec', props);
    return resource.getResponseField('build.source.buildspec') as unknown as string;
  }

  public get auth(): CodeBuildRetryBuildBuildSourceAuth {
    return new CodeBuildRetryBuildBuildSourceAuth(this, 'Auth', this.__resources, this.input);
  }

  public get reportBuildStatus(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.source.reportBuildStatus'),
        outputPath: 'build.source.reportBuildStatus',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.source.reportBuildStatus', props);
    return resource.getResponseField('build.source.reportBuildStatus') as unknown as boolean;
  }

  public get buildStatusConfig(): CodeBuildRetryBuildBuildSourceBuildStatusConfig {
    return new CodeBuildRetryBuildBuildSourceBuildStatusConfig(this, 'BuildStatusConfig', this.__resources, this.input);
  }

  public get insecureSsl(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.source.insecureSsl'),
        outputPath: 'build.source.insecureSsl',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.source.insecureSsl', props);
    return resource.getResponseField('build.source.insecureSsl') as unknown as boolean;
  }

  public get sourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.source.sourceIdentifier'),
        outputPath: 'build.source.sourceIdentifier',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.source.sourceIdentifier', props);
    return resource.getResponseField('build.source.sourceIdentifier') as unknown as string;
  }

}

export class CodeBuildRetryBuildBuildSourceGitSubmodulesConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildRetryBuildInput) {
    super(scope, id);
  }

  public get fetchSubmodules(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.source.gitSubmodulesConfig.fetchSubmodules'),
        outputPath: 'build.source.gitSubmodulesConfig.fetchSubmodules',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.source.gitSubmodulesConfig.fetchSubmodules', props);
    return resource.getResponseField('build.source.gitSubmodulesConfig.fetchSubmodules') as unknown as boolean;
  }

}

export class CodeBuildRetryBuildBuildSourceAuth extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildRetryBuildInput) {
    super(scope, id);
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.source.auth.type'),
        outputPath: 'build.source.auth.type',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.source.auth.type', props);
    return resource.getResponseField('build.source.auth.type') as unknown as string;
  }

  public get resource(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.source.auth.resource'),
        outputPath: 'build.source.auth.resource',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.source.auth.resource', props);
    return resource.getResponseField('build.source.auth.resource') as unknown as string;
  }

}

export class CodeBuildRetryBuildBuildSourceBuildStatusConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildRetryBuildInput) {
    super(scope, id);
  }

  public get context(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.source.buildStatusConfig.context'),
        outputPath: 'build.source.buildStatusConfig.context',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.source.buildStatusConfig.context', props);
    return resource.getResponseField('build.source.buildStatusConfig.context') as unknown as string;
  }

  public get targetUrl(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.source.buildStatusConfig.targetUrl'),
        outputPath: 'build.source.buildStatusConfig.targetUrl',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.source.buildStatusConfig.targetUrl', props);
    return resource.getResponseField('build.source.buildStatusConfig.targetUrl') as unknown as string;
  }

}

export class CodeBuildRetryBuildBuildArtifacts extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildRetryBuildInput) {
    super(scope, id);
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.artifacts.location'),
        outputPath: 'build.artifacts.location',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.artifacts.location', props);
    return resource.getResponseField('build.artifacts.location') as unknown as string;
  }

  public get sha256Sum(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.artifacts.sha256sum'),
        outputPath: 'build.artifacts.sha256sum',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.artifacts.sha256sum', props);
    return resource.getResponseField('build.artifacts.sha256sum') as unknown as string;
  }

  public get md5Sum(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.artifacts.md5sum'),
        outputPath: 'build.artifacts.md5sum',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.artifacts.md5sum', props);
    return resource.getResponseField('build.artifacts.md5sum') as unknown as string;
  }

  public get overrideArtifactName(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.artifacts.overrideArtifactName'),
        outputPath: 'build.artifacts.overrideArtifactName',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.artifacts.overrideArtifactName', props);
    return resource.getResponseField('build.artifacts.overrideArtifactName') as unknown as boolean;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.artifacts.encryptionDisabled'),
        outputPath: 'build.artifacts.encryptionDisabled',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.artifacts.encryptionDisabled', props);
    return resource.getResponseField('build.artifacts.encryptionDisabled') as unknown as boolean;
  }

  public get artifactIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.artifacts.artifactIdentifier'),
        outputPath: 'build.artifacts.artifactIdentifier',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.artifacts.artifactIdentifier', props);
    return resource.getResponseField('build.artifacts.artifactIdentifier') as unknown as string;
  }

}

export class CodeBuildRetryBuildBuildCache extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildRetryBuildInput) {
    super(scope, id);
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.cache.type'),
        outputPath: 'build.cache.type',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.cache.type', props);
    return resource.getResponseField('build.cache.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.cache.location'),
        outputPath: 'build.cache.location',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.cache.location', props);
    return resource.getResponseField('build.cache.location') as unknown as string;
  }

  public get modes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.cache.modes'),
        outputPath: 'build.cache.modes',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.cache.modes', props);
    return resource.getResponseField('build.cache.modes') as unknown as string[];
  }

}

export class CodeBuildRetryBuildBuildEnvironment extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildRetryBuildInput) {
    super(scope, id);
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.environment.type'),
        outputPath: 'build.environment.type',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.environment.type', props);
    return resource.getResponseField('build.environment.type') as unknown as string;
  }

  public get image(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.environment.image'),
        outputPath: 'build.environment.image',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.environment.image', props);
    return resource.getResponseField('build.environment.image') as unknown as string;
  }

  public get computeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.environment.computeType'),
        outputPath: 'build.environment.computeType',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.environment.computeType', props);
    return resource.getResponseField('build.environment.computeType') as unknown as string;
  }

  public get environmentVariables(): shapes.CodeBuildEnvironmentVariable[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.environment.environmentVariables'),
        outputPath: 'build.environment.environmentVariables',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.environment.environmentVariables', props);
    return resource.getResponseField('build.environment.environmentVariables') as unknown as shapes.CodeBuildEnvironmentVariable[];
  }

  public get privilegedMode(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.environment.privilegedMode'),
        outputPath: 'build.environment.privilegedMode',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.environment.privilegedMode', props);
    return resource.getResponseField('build.environment.privilegedMode') as unknown as boolean;
  }

  public get certificate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.environment.certificate'),
        outputPath: 'build.environment.certificate',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.environment.certificate', props);
    return resource.getResponseField('build.environment.certificate') as unknown as string;
  }

  public get registryCredential(): CodeBuildRetryBuildBuildEnvironmentRegistryCredential {
    return new CodeBuildRetryBuildBuildEnvironmentRegistryCredential(this, 'RegistryCredential', this.__resources, this.input);
  }

  public get imagePullCredentialsType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.environment.imagePullCredentialsType'),
        outputPath: 'build.environment.imagePullCredentialsType',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.environment.imagePullCredentialsType', props);
    return resource.getResponseField('build.environment.imagePullCredentialsType') as unknown as string;
  }

}

export class CodeBuildRetryBuildBuildEnvironmentRegistryCredential extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildRetryBuildInput) {
    super(scope, id);
  }

  public get credential(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.environment.registryCredential.credential'),
        outputPath: 'build.environment.registryCredential.credential',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.environment.registryCredential.credential', props);
    return resource.getResponseField('build.environment.registryCredential.credential') as unknown as string;
  }

  public get credentialProvider(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.environment.registryCredential.credentialProvider'),
        outputPath: 'build.environment.registryCredential.credentialProvider',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.environment.registryCredential.credentialProvider', props);
    return resource.getResponseField('build.environment.registryCredential.credentialProvider') as unknown as string;
  }

}

export class CodeBuildRetryBuildBuildLogs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildRetryBuildInput) {
    super(scope, id);
  }

  public get groupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.logs.groupName'),
        outputPath: 'build.logs.groupName',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.logs.groupName', props);
    return resource.getResponseField('build.logs.groupName') as unknown as string;
  }

  public get streamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.logs.streamName'),
        outputPath: 'build.logs.streamName',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.logs.streamName', props);
    return resource.getResponseField('build.logs.streamName') as unknown as string;
  }

  public get deepLink(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.logs.deepLink'),
        outputPath: 'build.logs.deepLink',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.logs.deepLink', props);
    return resource.getResponseField('build.logs.deepLink') as unknown as string;
  }

  public get s3DeepLink(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.logs.s3DeepLink'),
        outputPath: 'build.logs.s3DeepLink',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.logs.s3DeepLink', props);
    return resource.getResponseField('build.logs.s3DeepLink') as unknown as string;
  }

  public get cloudWatchLogsArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.logs.cloudWatchLogsArn'),
        outputPath: 'build.logs.cloudWatchLogsArn',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.logs.cloudWatchLogsArn', props);
    return resource.getResponseField('build.logs.cloudWatchLogsArn') as unknown as string;
  }

  public get s3LogsArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.logs.s3LogsArn'),
        outputPath: 'build.logs.s3LogsArn',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.logs.s3LogsArn', props);
    return resource.getResponseField('build.logs.s3LogsArn') as unknown as string;
  }

  public get cloudWatchLogs(): CodeBuildRetryBuildBuildLogsCloudWatchLogs {
    return new CodeBuildRetryBuildBuildLogsCloudWatchLogs(this, 'CloudWatchLogs', this.__resources, this.input);
  }

  public get s3Logs(): CodeBuildRetryBuildBuildLogsS3Logs {
    return new CodeBuildRetryBuildBuildLogsS3Logs(this, 'S3Logs', this.__resources, this.input);
  }

}

export class CodeBuildRetryBuildBuildLogsCloudWatchLogs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildRetryBuildInput) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.logs.cloudWatchLogs.status'),
        outputPath: 'build.logs.cloudWatchLogs.status',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.logs.cloudWatchLogs.status', props);
    return resource.getResponseField('build.logs.cloudWatchLogs.status') as unknown as string;
  }

  public get groupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.logs.cloudWatchLogs.groupName'),
        outputPath: 'build.logs.cloudWatchLogs.groupName',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.logs.cloudWatchLogs.groupName', props);
    return resource.getResponseField('build.logs.cloudWatchLogs.groupName') as unknown as string;
  }

  public get streamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.logs.cloudWatchLogs.streamName'),
        outputPath: 'build.logs.cloudWatchLogs.streamName',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.logs.cloudWatchLogs.streamName', props);
    return resource.getResponseField('build.logs.cloudWatchLogs.streamName') as unknown as string;
  }

}

export class CodeBuildRetryBuildBuildLogsS3Logs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildRetryBuildInput) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.logs.s3Logs.status'),
        outputPath: 'build.logs.s3Logs.status',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.logs.s3Logs.status', props);
    return resource.getResponseField('build.logs.s3Logs.status') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.logs.s3Logs.location'),
        outputPath: 'build.logs.s3Logs.location',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.logs.s3Logs.location', props);
    return resource.getResponseField('build.logs.s3Logs.location') as unknown as string;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.logs.s3Logs.encryptionDisabled'),
        outputPath: 'build.logs.s3Logs.encryptionDisabled',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.logs.s3Logs.encryptionDisabled', props);
    return resource.getResponseField('build.logs.s3Logs.encryptionDisabled') as unknown as boolean;
  }

}

export class CodeBuildRetryBuildBuildVpcConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildRetryBuildInput) {
    super(scope, id);
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.vpcConfig.vpcId'),
        outputPath: 'build.vpcConfig.vpcId',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.vpcConfig.vpcId', props);
    return resource.getResponseField('build.vpcConfig.vpcId') as unknown as string;
  }

  public get subnets(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.vpcConfig.subnets'),
        outputPath: 'build.vpcConfig.subnets',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.vpcConfig.subnets', props);
    return resource.getResponseField('build.vpcConfig.subnets') as unknown as string[];
  }

  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.vpcConfig.securityGroupIds'),
        outputPath: 'build.vpcConfig.securityGroupIds',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.vpcConfig.securityGroupIds', props);
    return resource.getResponseField('build.vpcConfig.securityGroupIds') as unknown as string[];
  }

}

export class CodeBuildRetryBuildBuildNetworkInterface extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildRetryBuildInput) {
    super(scope, id);
  }

  public get subnetId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.networkInterface.subnetId'),
        outputPath: 'build.networkInterface.subnetId',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.networkInterface.subnetId', props);
    return resource.getResponseField('build.networkInterface.subnetId') as unknown as string;
  }

  public get networkInterfaceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.networkInterface.networkInterfaceId'),
        outputPath: 'build.networkInterface.networkInterfaceId',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.networkInterface.networkInterfaceId', props);
    return resource.getResponseField('build.networkInterface.networkInterfaceId') as unknown as string;
  }

}

export class CodeBuildRetryBuildBuildDebugSession extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildRetryBuildInput) {
    super(scope, id);
  }

  public get sessionEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.debugSession.sessionEnabled'),
        outputPath: 'build.debugSession.sessionEnabled',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.debugSession.sessionEnabled', props);
    return resource.getResponseField('build.debugSession.sessionEnabled') as unknown as boolean;
  }

  public get sessionTarget(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.debugSession.sessionTarget'),
        outputPath: 'build.debugSession.sessionTarget',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuild.build.debugSession.sessionTarget', props);
    return resource.getResponseField('build.debugSession.sessionTarget') as unknown as string;
  }

}

export class CodeBuildRetryBuildBatch extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildRetryBuildBatchInput) {
    super(scope, id);
  }

  public get buildBatch(): CodeBuildRetryBuildBatchBuildBatch {
    return new CodeBuildRetryBuildBatchBuildBatch(this, 'BuildBatch', this.__resources, this.input);
  }

}

export class CodeBuildRetryBuildBatchBuildBatch extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildRetryBuildBatchInput) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.id'),
        outputPath: 'buildBatch.id',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.id', props);
    return resource.getResponseField('buildBatch.id') as unknown as string;
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.arn'),
        outputPath: 'buildBatch.arn',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.arn', props);
    return resource.getResponseField('buildBatch.arn') as unknown as string;
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.startTime'),
        outputPath: 'buildBatch.startTime',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.startTime', props);
    return resource.getResponseField('buildBatch.startTime') as unknown as string;
  }

  public get endTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.endTime'),
        outputPath: 'buildBatch.endTime',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.endTime', props);
    return resource.getResponseField('buildBatch.endTime') as unknown as string;
  }

  public get currentPhase(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.currentPhase'),
        outputPath: 'buildBatch.currentPhase',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.currentPhase', props);
    return resource.getResponseField('buildBatch.currentPhase') as unknown as string;
  }

  public get buildBatchStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.buildBatchStatus'),
        outputPath: 'buildBatch.buildBatchStatus',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.buildBatchStatus', props);
    return resource.getResponseField('buildBatch.buildBatchStatus') as unknown as string;
  }

  public get sourceVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.sourceVersion'),
        outputPath: 'buildBatch.sourceVersion',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.sourceVersion', props);
    return resource.getResponseField('buildBatch.sourceVersion') as unknown as string;
  }

  public get resolvedSourceVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.resolvedSourceVersion'),
        outputPath: 'buildBatch.resolvedSourceVersion',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.resolvedSourceVersion', props);
    return resource.getResponseField('buildBatch.resolvedSourceVersion') as unknown as string;
  }

  public get projectName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.projectName'),
        outputPath: 'buildBatch.projectName',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.projectName', props);
    return resource.getResponseField('buildBatch.projectName') as unknown as string;
  }

  public get phases(): shapes.CodeBuildBuildBatchPhase[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.phases'),
        outputPath: 'buildBatch.phases',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.phases', props);
    return resource.getResponseField('buildBatch.phases') as unknown as shapes.CodeBuildBuildBatchPhase[];
  }

  public get source(): CodeBuildRetryBuildBatchBuildBatchSource {
    return new CodeBuildRetryBuildBatchBuildBatchSource(this, 'Source', this.__resources, this.input);
  }

  public get secondarySources(): shapes.CodeBuildProjectSource[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.secondarySources'),
        outputPath: 'buildBatch.secondarySources',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.secondarySources', props);
    return resource.getResponseField('buildBatch.secondarySources') as unknown as shapes.CodeBuildProjectSource[];
  }

  public get secondarySourceVersions(): shapes.CodeBuildProjectSourceVersion[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.secondarySourceVersions'),
        outputPath: 'buildBatch.secondarySourceVersions',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.secondarySourceVersions', props);
    return resource.getResponseField('buildBatch.secondarySourceVersions') as unknown as shapes.CodeBuildProjectSourceVersion[];
  }

  public get artifacts(): CodeBuildRetryBuildBatchBuildBatchArtifacts {
    return new CodeBuildRetryBuildBatchBuildBatchArtifacts(this, 'Artifacts', this.__resources, this.input);
  }

  public get secondaryArtifacts(): shapes.CodeBuildBuildArtifacts[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.secondaryArtifacts'),
        outputPath: 'buildBatch.secondaryArtifacts',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.secondaryArtifacts', props);
    return resource.getResponseField('buildBatch.secondaryArtifacts') as unknown as shapes.CodeBuildBuildArtifacts[];
  }

  public get cache(): CodeBuildRetryBuildBatchBuildBatchCache {
    return new CodeBuildRetryBuildBatchBuildBatchCache(this, 'Cache', this.__resources, this.input);
  }

  public get environment(): CodeBuildRetryBuildBatchBuildBatchEnvironment {
    return new CodeBuildRetryBuildBatchBuildBatchEnvironment(this, 'Environment', this.__resources, this.input);
  }

  public get serviceRole(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.serviceRole'),
        outputPath: 'buildBatch.serviceRole',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.serviceRole', props);
    return resource.getResponseField('buildBatch.serviceRole') as unknown as string;
  }

  public get logConfig(): CodeBuildRetryBuildBatchBuildBatchLogConfig {
    return new CodeBuildRetryBuildBatchBuildBatchLogConfig(this, 'LogConfig', this.__resources, this.input);
  }

  public get buildTimeoutInMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.buildTimeoutInMinutes'),
        outputPath: 'buildBatch.buildTimeoutInMinutes',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.buildTimeoutInMinutes', props);
    return resource.getResponseField('buildBatch.buildTimeoutInMinutes') as unknown as number;
  }

  public get queuedTimeoutInMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.queuedTimeoutInMinutes'),
        outputPath: 'buildBatch.queuedTimeoutInMinutes',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.queuedTimeoutInMinutes', props);
    return resource.getResponseField('buildBatch.queuedTimeoutInMinutes') as unknown as number;
  }

  public get complete(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.complete'),
        outputPath: 'buildBatch.complete',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.complete', props);
    return resource.getResponseField('buildBatch.complete') as unknown as boolean;
  }

  public get initiator(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.initiator'),
        outputPath: 'buildBatch.initiator',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.initiator', props);
    return resource.getResponseField('buildBatch.initiator') as unknown as string;
  }

  public get vpcConfig(): CodeBuildRetryBuildBatchBuildBatchVpcConfig {
    return new CodeBuildRetryBuildBatchBuildBatchVpcConfig(this, 'VpcConfig', this.__resources, this.input);
  }

  public get encryptionKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.encryptionKey'),
        outputPath: 'buildBatch.encryptionKey',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.encryptionKey', props);
    return resource.getResponseField('buildBatch.encryptionKey') as unknown as string;
  }

  public get buildBatchNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.buildBatchNumber'),
        outputPath: 'buildBatch.buildBatchNumber',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.buildBatchNumber', props);
    return resource.getResponseField('buildBatch.buildBatchNumber') as unknown as number;
  }

  public get fileSystemLocations(): shapes.CodeBuildProjectFileSystemLocation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.fileSystemLocations'),
        outputPath: 'buildBatch.fileSystemLocations',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.fileSystemLocations', props);
    return resource.getResponseField('buildBatch.fileSystemLocations') as unknown as shapes.CodeBuildProjectFileSystemLocation[];
  }

  public get buildBatchConfig(): CodeBuildRetryBuildBatchBuildBatchBuildBatchConfig {
    return new CodeBuildRetryBuildBatchBuildBatchBuildBatchConfig(this, 'BuildBatchConfig', this.__resources, this.input);
  }

  public get buildGroups(): shapes.CodeBuildBuildGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.buildGroups'),
        outputPath: 'buildBatch.buildGroups',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.buildGroups', props);
    return resource.getResponseField('buildBatch.buildGroups') as unknown as shapes.CodeBuildBuildGroup[];
  }

}

export class CodeBuildRetryBuildBatchBuildBatchSource extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildRetryBuildBatchInput) {
    super(scope, id);
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.source.type'),
        outputPath: 'buildBatch.source.type',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.source.type', props);
    return resource.getResponseField('buildBatch.source.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.source.location'),
        outputPath: 'buildBatch.source.location',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.source.location', props);
    return resource.getResponseField('buildBatch.source.location') as unknown as string;
  }

  public get gitCloneDepth(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.source.gitCloneDepth'),
        outputPath: 'buildBatch.source.gitCloneDepth',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.source.gitCloneDepth', props);
    return resource.getResponseField('buildBatch.source.gitCloneDepth') as unknown as number;
  }

  public get gitSubmodulesConfig(): CodeBuildRetryBuildBatchBuildBatchSourceGitSubmodulesConfig {
    return new CodeBuildRetryBuildBatchBuildBatchSourceGitSubmodulesConfig(this, 'GitSubmodulesConfig', this.__resources, this.input);
  }

  public get buildspec(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.source.buildspec'),
        outputPath: 'buildBatch.source.buildspec',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.source.buildspec', props);
    return resource.getResponseField('buildBatch.source.buildspec') as unknown as string;
  }

  public get auth(): CodeBuildRetryBuildBatchBuildBatchSourceAuth {
    return new CodeBuildRetryBuildBatchBuildBatchSourceAuth(this, 'Auth', this.__resources, this.input);
  }

  public get reportBuildStatus(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.source.reportBuildStatus'),
        outputPath: 'buildBatch.source.reportBuildStatus',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.source.reportBuildStatus', props);
    return resource.getResponseField('buildBatch.source.reportBuildStatus') as unknown as boolean;
  }

  public get buildStatusConfig(): CodeBuildRetryBuildBatchBuildBatchSourceBuildStatusConfig {
    return new CodeBuildRetryBuildBatchBuildBatchSourceBuildStatusConfig(this, 'BuildStatusConfig', this.__resources, this.input);
  }

  public get insecureSsl(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.source.insecureSsl'),
        outputPath: 'buildBatch.source.insecureSsl',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.source.insecureSsl', props);
    return resource.getResponseField('buildBatch.source.insecureSsl') as unknown as boolean;
  }

  public get sourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.source.sourceIdentifier'),
        outputPath: 'buildBatch.source.sourceIdentifier',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.source.sourceIdentifier', props);
    return resource.getResponseField('buildBatch.source.sourceIdentifier') as unknown as string;
  }

}

export class CodeBuildRetryBuildBatchBuildBatchSourceGitSubmodulesConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildRetryBuildBatchInput) {
    super(scope, id);
  }

  public get fetchSubmodules(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.source.gitSubmodulesConfig.fetchSubmodules'),
        outputPath: 'buildBatch.source.gitSubmodulesConfig.fetchSubmodules',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.source.gitSubmodulesConfig.fetchSubmodules', props);
    return resource.getResponseField('buildBatch.source.gitSubmodulesConfig.fetchSubmodules') as unknown as boolean;
  }

}

export class CodeBuildRetryBuildBatchBuildBatchSourceAuth extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildRetryBuildBatchInput) {
    super(scope, id);
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.source.auth.type'),
        outputPath: 'buildBatch.source.auth.type',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.source.auth.type', props);
    return resource.getResponseField('buildBatch.source.auth.type') as unknown as string;
  }

  public get resource(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.source.auth.resource'),
        outputPath: 'buildBatch.source.auth.resource',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.source.auth.resource', props);
    return resource.getResponseField('buildBatch.source.auth.resource') as unknown as string;
  }

}

export class CodeBuildRetryBuildBatchBuildBatchSourceBuildStatusConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildRetryBuildBatchInput) {
    super(scope, id);
  }

  public get context(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.source.buildStatusConfig.context'),
        outputPath: 'buildBatch.source.buildStatusConfig.context',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.source.buildStatusConfig.context', props);
    return resource.getResponseField('buildBatch.source.buildStatusConfig.context') as unknown as string;
  }

  public get targetUrl(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.source.buildStatusConfig.targetUrl'),
        outputPath: 'buildBatch.source.buildStatusConfig.targetUrl',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.source.buildStatusConfig.targetUrl', props);
    return resource.getResponseField('buildBatch.source.buildStatusConfig.targetUrl') as unknown as string;
  }

}

export class CodeBuildRetryBuildBatchBuildBatchArtifacts extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildRetryBuildBatchInput) {
    super(scope, id);
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.artifacts.location'),
        outputPath: 'buildBatch.artifacts.location',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.artifacts.location', props);
    return resource.getResponseField('buildBatch.artifacts.location') as unknown as string;
  }

  public get sha256Sum(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.artifacts.sha256sum'),
        outputPath: 'buildBatch.artifacts.sha256sum',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.artifacts.sha256sum', props);
    return resource.getResponseField('buildBatch.artifacts.sha256sum') as unknown as string;
  }

  public get md5Sum(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.artifacts.md5sum'),
        outputPath: 'buildBatch.artifacts.md5sum',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.artifacts.md5sum', props);
    return resource.getResponseField('buildBatch.artifacts.md5sum') as unknown as string;
  }

  public get overrideArtifactName(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.artifacts.overrideArtifactName'),
        outputPath: 'buildBatch.artifacts.overrideArtifactName',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.artifacts.overrideArtifactName', props);
    return resource.getResponseField('buildBatch.artifacts.overrideArtifactName') as unknown as boolean;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.artifacts.encryptionDisabled'),
        outputPath: 'buildBatch.artifacts.encryptionDisabled',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.artifacts.encryptionDisabled', props);
    return resource.getResponseField('buildBatch.artifacts.encryptionDisabled') as unknown as boolean;
  }

  public get artifactIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.artifacts.artifactIdentifier'),
        outputPath: 'buildBatch.artifacts.artifactIdentifier',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.artifacts.artifactIdentifier', props);
    return resource.getResponseField('buildBatch.artifacts.artifactIdentifier') as unknown as string;
  }

}

export class CodeBuildRetryBuildBatchBuildBatchCache extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildRetryBuildBatchInput) {
    super(scope, id);
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.cache.type'),
        outputPath: 'buildBatch.cache.type',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.cache.type', props);
    return resource.getResponseField('buildBatch.cache.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.cache.location'),
        outputPath: 'buildBatch.cache.location',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.cache.location', props);
    return resource.getResponseField('buildBatch.cache.location') as unknown as string;
  }

  public get modes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.cache.modes'),
        outputPath: 'buildBatch.cache.modes',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.cache.modes', props);
    return resource.getResponseField('buildBatch.cache.modes') as unknown as string[];
  }

}

export class CodeBuildRetryBuildBatchBuildBatchEnvironment extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildRetryBuildBatchInput) {
    super(scope, id);
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.environment.type'),
        outputPath: 'buildBatch.environment.type',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.environment.type', props);
    return resource.getResponseField('buildBatch.environment.type') as unknown as string;
  }

  public get image(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.environment.image'),
        outputPath: 'buildBatch.environment.image',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.environment.image', props);
    return resource.getResponseField('buildBatch.environment.image') as unknown as string;
  }

  public get computeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.environment.computeType'),
        outputPath: 'buildBatch.environment.computeType',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.environment.computeType', props);
    return resource.getResponseField('buildBatch.environment.computeType') as unknown as string;
  }

  public get environmentVariables(): shapes.CodeBuildEnvironmentVariable[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.environment.environmentVariables'),
        outputPath: 'buildBatch.environment.environmentVariables',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.environment.environmentVariables', props);
    return resource.getResponseField('buildBatch.environment.environmentVariables') as unknown as shapes.CodeBuildEnvironmentVariable[];
  }

  public get privilegedMode(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.environment.privilegedMode'),
        outputPath: 'buildBatch.environment.privilegedMode',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.environment.privilegedMode', props);
    return resource.getResponseField('buildBatch.environment.privilegedMode') as unknown as boolean;
  }

  public get certificate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.environment.certificate'),
        outputPath: 'buildBatch.environment.certificate',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.environment.certificate', props);
    return resource.getResponseField('buildBatch.environment.certificate') as unknown as string;
  }

  public get registryCredential(): CodeBuildRetryBuildBatchBuildBatchEnvironmentRegistryCredential {
    return new CodeBuildRetryBuildBatchBuildBatchEnvironmentRegistryCredential(this, 'RegistryCredential', this.__resources, this.input);
  }

  public get imagePullCredentialsType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.environment.imagePullCredentialsType'),
        outputPath: 'buildBatch.environment.imagePullCredentialsType',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.environment.imagePullCredentialsType', props);
    return resource.getResponseField('buildBatch.environment.imagePullCredentialsType') as unknown as string;
  }

}

export class CodeBuildRetryBuildBatchBuildBatchEnvironmentRegistryCredential extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildRetryBuildBatchInput) {
    super(scope, id);
  }

  public get credential(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.environment.registryCredential.credential'),
        outputPath: 'buildBatch.environment.registryCredential.credential',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.environment.registryCredential.credential', props);
    return resource.getResponseField('buildBatch.environment.registryCredential.credential') as unknown as string;
  }

  public get credentialProvider(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.environment.registryCredential.credentialProvider'),
        outputPath: 'buildBatch.environment.registryCredential.credentialProvider',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.environment.registryCredential.credentialProvider', props);
    return resource.getResponseField('buildBatch.environment.registryCredential.credentialProvider') as unknown as string;
  }

}

export class CodeBuildRetryBuildBatchBuildBatchLogConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildRetryBuildBatchInput) {
    super(scope, id);
  }

  public get cloudWatchLogs(): CodeBuildRetryBuildBatchBuildBatchLogConfigCloudWatchLogs {
    return new CodeBuildRetryBuildBatchBuildBatchLogConfigCloudWatchLogs(this, 'CloudWatchLogs', this.__resources, this.input);
  }

  public get s3Logs(): CodeBuildRetryBuildBatchBuildBatchLogConfigS3Logs {
    return new CodeBuildRetryBuildBatchBuildBatchLogConfigS3Logs(this, 'S3Logs', this.__resources, this.input);
  }

}

export class CodeBuildRetryBuildBatchBuildBatchLogConfigCloudWatchLogs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildRetryBuildBatchInput) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.logConfig.cloudWatchLogs.status'),
        outputPath: 'buildBatch.logConfig.cloudWatchLogs.status',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.logConfig.cloudWatchLogs.status', props);
    return resource.getResponseField('buildBatch.logConfig.cloudWatchLogs.status') as unknown as string;
  }

  public get groupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.logConfig.cloudWatchLogs.groupName'),
        outputPath: 'buildBatch.logConfig.cloudWatchLogs.groupName',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.logConfig.cloudWatchLogs.groupName', props);
    return resource.getResponseField('buildBatch.logConfig.cloudWatchLogs.groupName') as unknown as string;
  }

  public get streamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.logConfig.cloudWatchLogs.streamName'),
        outputPath: 'buildBatch.logConfig.cloudWatchLogs.streamName',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.logConfig.cloudWatchLogs.streamName', props);
    return resource.getResponseField('buildBatch.logConfig.cloudWatchLogs.streamName') as unknown as string;
  }

}

export class CodeBuildRetryBuildBatchBuildBatchLogConfigS3Logs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildRetryBuildBatchInput) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.logConfig.s3Logs.status'),
        outputPath: 'buildBatch.logConfig.s3Logs.status',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.logConfig.s3Logs.status', props);
    return resource.getResponseField('buildBatch.logConfig.s3Logs.status') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.logConfig.s3Logs.location'),
        outputPath: 'buildBatch.logConfig.s3Logs.location',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.logConfig.s3Logs.location', props);
    return resource.getResponseField('buildBatch.logConfig.s3Logs.location') as unknown as string;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.logConfig.s3Logs.encryptionDisabled'),
        outputPath: 'buildBatch.logConfig.s3Logs.encryptionDisabled',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.logConfig.s3Logs.encryptionDisabled', props);
    return resource.getResponseField('buildBatch.logConfig.s3Logs.encryptionDisabled') as unknown as boolean;
  }

}

export class CodeBuildRetryBuildBatchBuildBatchVpcConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildRetryBuildBatchInput) {
    super(scope, id);
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.vpcConfig.vpcId'),
        outputPath: 'buildBatch.vpcConfig.vpcId',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.vpcConfig.vpcId', props);
    return resource.getResponseField('buildBatch.vpcConfig.vpcId') as unknown as string;
  }

  public get subnets(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.vpcConfig.subnets'),
        outputPath: 'buildBatch.vpcConfig.subnets',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.vpcConfig.subnets', props);
    return resource.getResponseField('buildBatch.vpcConfig.subnets') as unknown as string[];
  }

  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.vpcConfig.securityGroupIds'),
        outputPath: 'buildBatch.vpcConfig.securityGroupIds',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.vpcConfig.securityGroupIds', props);
    return resource.getResponseField('buildBatch.vpcConfig.securityGroupIds') as unknown as string[];
  }

}

export class CodeBuildRetryBuildBatchBuildBatchBuildBatchConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildRetryBuildBatchInput) {
    super(scope, id);
  }

  public get serviceRole(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.buildBatchConfig.serviceRole'),
        outputPath: 'buildBatch.buildBatchConfig.serviceRole',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.buildBatchConfig.serviceRole', props);
    return resource.getResponseField('buildBatch.buildBatchConfig.serviceRole') as unknown as string;
  }

  public get combineArtifacts(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.buildBatchConfig.combineArtifacts'),
        outputPath: 'buildBatch.buildBatchConfig.combineArtifacts',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.buildBatchConfig.combineArtifacts', props);
    return resource.getResponseField('buildBatch.buildBatchConfig.combineArtifacts') as unknown as boolean;
  }

  public get restrictions(): CodeBuildRetryBuildBatchBuildBatchBuildBatchConfigRestrictions {
    return new CodeBuildRetryBuildBatchBuildBatchBuildBatchConfigRestrictions(this, 'Restrictions', this.__resources, this.input);
  }

  public get timeoutInMins(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.buildBatchConfig.timeoutInMins'),
        outputPath: 'buildBatch.buildBatchConfig.timeoutInMins',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.buildBatchConfig.timeoutInMins', props);
    return resource.getResponseField('buildBatch.buildBatchConfig.timeoutInMins') as unknown as number;
  }

}

export class CodeBuildRetryBuildBatchBuildBatchBuildBatchConfigRestrictions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildRetryBuildBatchInput) {
    super(scope, id);
  }

  public get maximumBuildsAllowed(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.buildBatchConfig.restrictions.maximumBuildsAllowed'),
        outputPath: 'buildBatch.buildBatchConfig.restrictions.maximumBuildsAllowed',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.buildBatchConfig.restrictions.maximumBuildsAllowed', props);
    return resource.getResponseField('buildBatch.buildBatchConfig.restrictions.maximumBuildsAllowed') as unknown as number;
  }

  public get computeTypesAllowed(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.buildBatchConfig.restrictions.computeTypesAllowed'),
        outputPath: 'buildBatch.buildBatchConfig.restrictions.computeTypesAllowed',
        parameters: {
          id: this.input.id,
          idempotencyToken: this.input.idempotencyToken,
          retryType: this.input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RetryBuildBatch.buildBatch.buildBatchConfig.restrictions.computeTypesAllowed', props);
    return resource.getResponseField('buildBatch.buildBatchConfig.restrictions.computeTypesAllowed') as unknown as string[];
  }

}

export class CodeBuildStartBuild extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStartBuildInput) {
    super(scope, id);
  }

  public get build(): CodeBuildStartBuildBuild {
    return new CodeBuildStartBuildBuild(this, 'Build', this.__resources, this.input);
  }

}

export class CodeBuildStartBuildBuild extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStartBuildInput) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.id'),
        outputPath: 'build.id',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.id', props);
    return resource.getResponseField('build.id') as unknown as string;
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.arn'),
        outputPath: 'build.arn',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.arn', props);
    return resource.getResponseField('build.arn') as unknown as string;
  }

  public get buildNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.buildNumber'),
        outputPath: 'build.buildNumber',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.buildNumber', props);
    return resource.getResponseField('build.buildNumber') as unknown as number;
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.startTime'),
        outputPath: 'build.startTime',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.startTime', props);
    return resource.getResponseField('build.startTime') as unknown as string;
  }

  public get endTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.endTime'),
        outputPath: 'build.endTime',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.endTime', props);
    return resource.getResponseField('build.endTime') as unknown as string;
  }

  public get currentPhase(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.currentPhase'),
        outputPath: 'build.currentPhase',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.currentPhase', props);
    return resource.getResponseField('build.currentPhase') as unknown as string;
  }

  public get buildStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.buildStatus'),
        outputPath: 'build.buildStatus',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.buildStatus', props);
    return resource.getResponseField('build.buildStatus') as unknown as string;
  }

  public get sourceVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.sourceVersion'),
        outputPath: 'build.sourceVersion',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.sourceVersion', props);
    return resource.getResponseField('build.sourceVersion') as unknown as string;
  }

  public get resolvedSourceVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.resolvedSourceVersion'),
        outputPath: 'build.resolvedSourceVersion',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.resolvedSourceVersion', props);
    return resource.getResponseField('build.resolvedSourceVersion') as unknown as string;
  }

  public get projectName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.projectName'),
        outputPath: 'build.projectName',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.projectName', props);
    return resource.getResponseField('build.projectName') as unknown as string;
  }

  public get phases(): shapes.CodeBuildBuildPhase[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.phases'),
        outputPath: 'build.phases',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.phases', props);
    return resource.getResponseField('build.phases') as unknown as shapes.CodeBuildBuildPhase[];
  }

  public get source(): CodeBuildStartBuildBuildSource {
    return new CodeBuildStartBuildBuildSource(this, 'Source', this.__resources, this.input);
  }

  public get secondarySources(): shapes.CodeBuildProjectSource[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.secondarySources'),
        outputPath: 'build.secondarySources',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.secondarySources', props);
    return resource.getResponseField('build.secondarySources') as unknown as shapes.CodeBuildProjectSource[];
  }

  public get secondarySourceVersions(): shapes.CodeBuildProjectSourceVersion[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.secondarySourceVersions'),
        outputPath: 'build.secondarySourceVersions',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.secondarySourceVersions', props);
    return resource.getResponseField('build.secondarySourceVersions') as unknown as shapes.CodeBuildProjectSourceVersion[];
  }

  public get artifacts(): CodeBuildStartBuildBuildArtifacts {
    return new CodeBuildStartBuildBuildArtifacts(this, 'Artifacts', this.__resources, this.input);
  }

  public get secondaryArtifacts(): shapes.CodeBuildBuildArtifacts[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.secondaryArtifacts'),
        outputPath: 'build.secondaryArtifacts',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.secondaryArtifacts', props);
    return resource.getResponseField('build.secondaryArtifacts') as unknown as shapes.CodeBuildBuildArtifacts[];
  }

  public get cache(): CodeBuildStartBuildBuildCache {
    return new CodeBuildStartBuildBuildCache(this, 'Cache', this.__resources, this.input);
  }

  public get environment(): CodeBuildStartBuildBuildEnvironment {
    return new CodeBuildStartBuildBuildEnvironment(this, 'Environment', this.__resources, this.input);
  }

  public get serviceRole(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.serviceRole'),
        outputPath: 'build.serviceRole',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.serviceRole', props);
    return resource.getResponseField('build.serviceRole') as unknown as string;
  }

  public get logs(): CodeBuildStartBuildBuildLogs {
    return new CodeBuildStartBuildBuildLogs(this, 'Logs', this.__resources, this.input);
  }

  public get timeoutInMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.timeoutInMinutes'),
        outputPath: 'build.timeoutInMinutes',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.timeoutInMinutes', props);
    return resource.getResponseField('build.timeoutInMinutes') as unknown as number;
  }

  public get queuedTimeoutInMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.queuedTimeoutInMinutes'),
        outputPath: 'build.queuedTimeoutInMinutes',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.queuedTimeoutInMinutes', props);
    return resource.getResponseField('build.queuedTimeoutInMinutes') as unknown as number;
  }

  public get buildComplete(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.buildComplete'),
        outputPath: 'build.buildComplete',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.buildComplete', props);
    return resource.getResponseField('build.buildComplete') as unknown as boolean;
  }

  public get initiator(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.initiator'),
        outputPath: 'build.initiator',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.initiator', props);
    return resource.getResponseField('build.initiator') as unknown as string;
  }

  public get vpcConfig(): CodeBuildStartBuildBuildVpcConfig {
    return new CodeBuildStartBuildBuildVpcConfig(this, 'VpcConfig', this.__resources, this.input);
  }

  public get networkInterface(): CodeBuildStartBuildBuildNetworkInterface {
    return new CodeBuildStartBuildBuildNetworkInterface(this, 'NetworkInterface', this.__resources, this.input);
  }

  public get encryptionKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.encryptionKey'),
        outputPath: 'build.encryptionKey',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.encryptionKey', props);
    return resource.getResponseField('build.encryptionKey') as unknown as string;
  }

  public get exportedEnvironmentVariables(): shapes.CodeBuildExportedEnvironmentVariable[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.exportedEnvironmentVariables'),
        outputPath: 'build.exportedEnvironmentVariables',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.exportedEnvironmentVariables', props);
    return resource.getResponseField('build.exportedEnvironmentVariables') as unknown as shapes.CodeBuildExportedEnvironmentVariable[];
  }

  public get reportArns(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.reportArns'),
        outputPath: 'build.reportArns',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.reportArns', props);
    return resource.getResponseField('build.reportArns') as unknown as string[];
  }

  public get fileSystemLocations(): shapes.CodeBuildProjectFileSystemLocation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.fileSystemLocations'),
        outputPath: 'build.fileSystemLocations',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.fileSystemLocations', props);
    return resource.getResponseField('build.fileSystemLocations') as unknown as shapes.CodeBuildProjectFileSystemLocation[];
  }

  public get debugSession(): CodeBuildStartBuildBuildDebugSession {
    return new CodeBuildStartBuildBuildDebugSession(this, 'DebugSession', this.__resources, this.input);
  }

  public get buildBatchArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.buildBatchArn'),
        outputPath: 'build.buildBatchArn',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.buildBatchArn', props);
    return resource.getResponseField('build.buildBatchArn') as unknown as string;
  }

}

export class CodeBuildStartBuildBuildSource extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStartBuildInput) {
    super(scope, id);
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.source.type'),
        outputPath: 'build.source.type',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.source.type', props);
    return resource.getResponseField('build.source.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.source.location'),
        outputPath: 'build.source.location',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.source.location', props);
    return resource.getResponseField('build.source.location') as unknown as string;
  }

  public get gitCloneDepth(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.source.gitCloneDepth'),
        outputPath: 'build.source.gitCloneDepth',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.source.gitCloneDepth', props);
    return resource.getResponseField('build.source.gitCloneDepth') as unknown as number;
  }

  public get gitSubmodulesConfig(): CodeBuildStartBuildBuildSourceGitSubmodulesConfig {
    return new CodeBuildStartBuildBuildSourceGitSubmodulesConfig(this, 'GitSubmodulesConfig', this.__resources, this.input);
  }

  public get buildspec(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.source.buildspec'),
        outputPath: 'build.source.buildspec',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.source.buildspec', props);
    return resource.getResponseField('build.source.buildspec') as unknown as string;
  }

  public get auth(): CodeBuildStartBuildBuildSourceAuth {
    return new CodeBuildStartBuildBuildSourceAuth(this, 'Auth', this.__resources, this.input);
  }

  public get reportBuildStatus(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.source.reportBuildStatus'),
        outputPath: 'build.source.reportBuildStatus',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.source.reportBuildStatus', props);
    return resource.getResponseField('build.source.reportBuildStatus') as unknown as boolean;
  }

  public get buildStatusConfig(): CodeBuildStartBuildBuildSourceBuildStatusConfig {
    return new CodeBuildStartBuildBuildSourceBuildStatusConfig(this, 'BuildStatusConfig', this.__resources, this.input);
  }

  public get insecureSsl(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.source.insecureSsl'),
        outputPath: 'build.source.insecureSsl',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.source.insecureSsl', props);
    return resource.getResponseField('build.source.insecureSsl') as unknown as boolean;
  }

  public get sourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.source.sourceIdentifier'),
        outputPath: 'build.source.sourceIdentifier',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.source.sourceIdentifier', props);
    return resource.getResponseField('build.source.sourceIdentifier') as unknown as string;
  }

}

export class CodeBuildStartBuildBuildSourceGitSubmodulesConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStartBuildInput) {
    super(scope, id);
  }

  public get fetchSubmodules(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.source.gitSubmodulesConfig.fetchSubmodules'),
        outputPath: 'build.source.gitSubmodulesConfig.fetchSubmodules',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.source.gitSubmodulesConfig.fetchSubmodules', props);
    return resource.getResponseField('build.source.gitSubmodulesConfig.fetchSubmodules') as unknown as boolean;
  }

}

export class CodeBuildStartBuildBuildSourceAuth extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStartBuildInput) {
    super(scope, id);
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.source.auth.type'),
        outputPath: 'build.source.auth.type',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.source.auth.type', props);
    return resource.getResponseField('build.source.auth.type') as unknown as string;
  }

  public get resource(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.source.auth.resource'),
        outputPath: 'build.source.auth.resource',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.source.auth.resource', props);
    return resource.getResponseField('build.source.auth.resource') as unknown as string;
  }

}

export class CodeBuildStartBuildBuildSourceBuildStatusConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStartBuildInput) {
    super(scope, id);
  }

  public get context(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.source.buildStatusConfig.context'),
        outputPath: 'build.source.buildStatusConfig.context',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.source.buildStatusConfig.context', props);
    return resource.getResponseField('build.source.buildStatusConfig.context') as unknown as string;
  }

  public get targetUrl(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.source.buildStatusConfig.targetUrl'),
        outputPath: 'build.source.buildStatusConfig.targetUrl',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.source.buildStatusConfig.targetUrl', props);
    return resource.getResponseField('build.source.buildStatusConfig.targetUrl') as unknown as string;
  }

}

export class CodeBuildStartBuildBuildArtifacts extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStartBuildInput) {
    super(scope, id);
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.artifacts.location'),
        outputPath: 'build.artifacts.location',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.artifacts.location', props);
    return resource.getResponseField('build.artifacts.location') as unknown as string;
  }

  public get sha256Sum(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.artifacts.sha256sum'),
        outputPath: 'build.artifacts.sha256sum',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.artifacts.sha256sum', props);
    return resource.getResponseField('build.artifacts.sha256sum') as unknown as string;
  }

  public get md5Sum(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.artifacts.md5sum'),
        outputPath: 'build.artifacts.md5sum',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.artifacts.md5sum', props);
    return resource.getResponseField('build.artifacts.md5sum') as unknown as string;
  }

  public get overrideArtifactName(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.artifacts.overrideArtifactName'),
        outputPath: 'build.artifacts.overrideArtifactName',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.artifacts.overrideArtifactName', props);
    return resource.getResponseField('build.artifacts.overrideArtifactName') as unknown as boolean;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.artifacts.encryptionDisabled'),
        outputPath: 'build.artifacts.encryptionDisabled',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.artifacts.encryptionDisabled', props);
    return resource.getResponseField('build.artifacts.encryptionDisabled') as unknown as boolean;
  }

  public get artifactIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.artifacts.artifactIdentifier'),
        outputPath: 'build.artifacts.artifactIdentifier',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.artifacts.artifactIdentifier', props);
    return resource.getResponseField('build.artifacts.artifactIdentifier') as unknown as string;
  }

}

export class CodeBuildStartBuildBuildCache extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStartBuildInput) {
    super(scope, id);
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.cache.type'),
        outputPath: 'build.cache.type',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.cache.type', props);
    return resource.getResponseField('build.cache.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.cache.location'),
        outputPath: 'build.cache.location',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.cache.location', props);
    return resource.getResponseField('build.cache.location') as unknown as string;
  }

  public get modes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.cache.modes'),
        outputPath: 'build.cache.modes',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.cache.modes', props);
    return resource.getResponseField('build.cache.modes') as unknown as string[];
  }

}

export class CodeBuildStartBuildBuildEnvironment extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStartBuildInput) {
    super(scope, id);
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.environment.type'),
        outputPath: 'build.environment.type',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.environment.type', props);
    return resource.getResponseField('build.environment.type') as unknown as string;
  }

  public get image(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.environment.image'),
        outputPath: 'build.environment.image',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.environment.image', props);
    return resource.getResponseField('build.environment.image') as unknown as string;
  }

  public get computeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.environment.computeType'),
        outputPath: 'build.environment.computeType',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.environment.computeType', props);
    return resource.getResponseField('build.environment.computeType') as unknown as string;
  }

  public get environmentVariables(): shapes.CodeBuildEnvironmentVariable[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.environment.environmentVariables'),
        outputPath: 'build.environment.environmentVariables',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.environment.environmentVariables', props);
    return resource.getResponseField('build.environment.environmentVariables') as unknown as shapes.CodeBuildEnvironmentVariable[];
  }

  public get privilegedMode(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.environment.privilegedMode'),
        outputPath: 'build.environment.privilegedMode',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.environment.privilegedMode', props);
    return resource.getResponseField('build.environment.privilegedMode') as unknown as boolean;
  }

  public get certificate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.environment.certificate'),
        outputPath: 'build.environment.certificate',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.environment.certificate', props);
    return resource.getResponseField('build.environment.certificate') as unknown as string;
  }

  public get registryCredential(): CodeBuildStartBuildBuildEnvironmentRegistryCredential {
    return new CodeBuildStartBuildBuildEnvironmentRegistryCredential(this, 'RegistryCredential', this.__resources, this.input);
  }

  public get imagePullCredentialsType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.environment.imagePullCredentialsType'),
        outputPath: 'build.environment.imagePullCredentialsType',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.environment.imagePullCredentialsType', props);
    return resource.getResponseField('build.environment.imagePullCredentialsType') as unknown as string;
  }

}

export class CodeBuildStartBuildBuildEnvironmentRegistryCredential extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStartBuildInput) {
    super(scope, id);
  }

  public get credential(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.environment.registryCredential.credential'),
        outputPath: 'build.environment.registryCredential.credential',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.environment.registryCredential.credential', props);
    return resource.getResponseField('build.environment.registryCredential.credential') as unknown as string;
  }

  public get credentialProvider(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.environment.registryCredential.credentialProvider'),
        outputPath: 'build.environment.registryCredential.credentialProvider',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.environment.registryCredential.credentialProvider', props);
    return resource.getResponseField('build.environment.registryCredential.credentialProvider') as unknown as string;
  }

}

export class CodeBuildStartBuildBuildLogs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStartBuildInput) {
    super(scope, id);
  }

  public get groupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.logs.groupName'),
        outputPath: 'build.logs.groupName',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.logs.groupName', props);
    return resource.getResponseField('build.logs.groupName') as unknown as string;
  }

  public get streamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.logs.streamName'),
        outputPath: 'build.logs.streamName',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.logs.streamName', props);
    return resource.getResponseField('build.logs.streamName') as unknown as string;
  }

  public get deepLink(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.logs.deepLink'),
        outputPath: 'build.logs.deepLink',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.logs.deepLink', props);
    return resource.getResponseField('build.logs.deepLink') as unknown as string;
  }

  public get s3DeepLink(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.logs.s3DeepLink'),
        outputPath: 'build.logs.s3DeepLink',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.logs.s3DeepLink', props);
    return resource.getResponseField('build.logs.s3DeepLink') as unknown as string;
  }

  public get cloudWatchLogsArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.logs.cloudWatchLogsArn'),
        outputPath: 'build.logs.cloudWatchLogsArn',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.logs.cloudWatchLogsArn', props);
    return resource.getResponseField('build.logs.cloudWatchLogsArn') as unknown as string;
  }

  public get s3LogsArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.logs.s3LogsArn'),
        outputPath: 'build.logs.s3LogsArn',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.logs.s3LogsArn', props);
    return resource.getResponseField('build.logs.s3LogsArn') as unknown as string;
  }

  public get cloudWatchLogs(): CodeBuildStartBuildBuildLogsCloudWatchLogs {
    return new CodeBuildStartBuildBuildLogsCloudWatchLogs(this, 'CloudWatchLogs', this.__resources, this.input);
  }

  public get s3Logs(): CodeBuildStartBuildBuildLogsS3Logs {
    return new CodeBuildStartBuildBuildLogsS3Logs(this, 'S3Logs', this.__resources, this.input);
  }

}

export class CodeBuildStartBuildBuildLogsCloudWatchLogs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStartBuildInput) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.logs.cloudWatchLogs.status'),
        outputPath: 'build.logs.cloudWatchLogs.status',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.logs.cloudWatchLogs.status', props);
    return resource.getResponseField('build.logs.cloudWatchLogs.status') as unknown as string;
  }

  public get groupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.logs.cloudWatchLogs.groupName'),
        outputPath: 'build.logs.cloudWatchLogs.groupName',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.logs.cloudWatchLogs.groupName', props);
    return resource.getResponseField('build.logs.cloudWatchLogs.groupName') as unknown as string;
  }

  public get streamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.logs.cloudWatchLogs.streamName'),
        outputPath: 'build.logs.cloudWatchLogs.streamName',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.logs.cloudWatchLogs.streamName', props);
    return resource.getResponseField('build.logs.cloudWatchLogs.streamName') as unknown as string;
  }

}

export class CodeBuildStartBuildBuildLogsS3Logs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStartBuildInput) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.logs.s3Logs.status'),
        outputPath: 'build.logs.s3Logs.status',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.logs.s3Logs.status', props);
    return resource.getResponseField('build.logs.s3Logs.status') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.logs.s3Logs.location'),
        outputPath: 'build.logs.s3Logs.location',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.logs.s3Logs.location', props);
    return resource.getResponseField('build.logs.s3Logs.location') as unknown as string;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.logs.s3Logs.encryptionDisabled'),
        outputPath: 'build.logs.s3Logs.encryptionDisabled',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.logs.s3Logs.encryptionDisabled', props);
    return resource.getResponseField('build.logs.s3Logs.encryptionDisabled') as unknown as boolean;
  }

}

export class CodeBuildStartBuildBuildVpcConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStartBuildInput) {
    super(scope, id);
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.vpcConfig.vpcId'),
        outputPath: 'build.vpcConfig.vpcId',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.vpcConfig.vpcId', props);
    return resource.getResponseField('build.vpcConfig.vpcId') as unknown as string;
  }

  public get subnets(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.vpcConfig.subnets'),
        outputPath: 'build.vpcConfig.subnets',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.vpcConfig.subnets', props);
    return resource.getResponseField('build.vpcConfig.subnets') as unknown as string[];
  }

  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.vpcConfig.securityGroupIds'),
        outputPath: 'build.vpcConfig.securityGroupIds',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.vpcConfig.securityGroupIds', props);
    return resource.getResponseField('build.vpcConfig.securityGroupIds') as unknown as string[];
  }

}

export class CodeBuildStartBuildBuildNetworkInterface extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStartBuildInput) {
    super(scope, id);
  }

  public get subnetId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.networkInterface.subnetId'),
        outputPath: 'build.networkInterface.subnetId',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.networkInterface.subnetId', props);
    return resource.getResponseField('build.networkInterface.subnetId') as unknown as string;
  }

  public get networkInterfaceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.networkInterface.networkInterfaceId'),
        outputPath: 'build.networkInterface.networkInterfaceId',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.networkInterface.networkInterfaceId', props);
    return resource.getResponseField('build.networkInterface.networkInterfaceId') as unknown as string;
  }

}

export class CodeBuildStartBuildBuildDebugSession extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStartBuildInput) {
    super(scope, id);
  }

  public get sessionEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.debugSession.sessionEnabled'),
        outputPath: 'build.debugSession.sessionEnabled',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.debugSession.sessionEnabled', props);
    return resource.getResponseField('build.debugSession.sessionEnabled') as unknown as boolean;
  }

  public get sessionTarget(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.debugSession.sessionTarget'),
        outputPath: 'build.debugSession.sessionTarget',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildStatusOverride: this.input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.input.buildStatusConfigOverride?.context,
            targetUrl: this.input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          timeoutInMinutesOverride: this.input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuild.build.debugSession.sessionTarget', props);
    return resource.getResponseField('build.debugSession.sessionTarget') as unknown as string;
  }

}

export class CodeBuildStartBuildBatch extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStartBuildBatchInput) {
    super(scope, id);
  }

  public get buildBatch(): CodeBuildStartBuildBatchBuildBatch {
    return new CodeBuildStartBuildBatchBuildBatch(this, 'BuildBatch', this.__resources, this.input);
  }

}

export class CodeBuildStartBuildBatchBuildBatch extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStartBuildBatchInput) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.id'),
        outputPath: 'buildBatch.id',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.id', props);
    return resource.getResponseField('buildBatch.id') as unknown as string;
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.arn'),
        outputPath: 'buildBatch.arn',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.arn', props);
    return resource.getResponseField('buildBatch.arn') as unknown as string;
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.startTime'),
        outputPath: 'buildBatch.startTime',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.startTime', props);
    return resource.getResponseField('buildBatch.startTime') as unknown as string;
  }

  public get endTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.endTime'),
        outputPath: 'buildBatch.endTime',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.endTime', props);
    return resource.getResponseField('buildBatch.endTime') as unknown as string;
  }

  public get currentPhase(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.currentPhase'),
        outputPath: 'buildBatch.currentPhase',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.currentPhase', props);
    return resource.getResponseField('buildBatch.currentPhase') as unknown as string;
  }

  public get buildBatchStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.buildBatchStatus'),
        outputPath: 'buildBatch.buildBatchStatus',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.buildBatchStatus', props);
    return resource.getResponseField('buildBatch.buildBatchStatus') as unknown as string;
  }

  public get sourceVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.sourceVersion'),
        outputPath: 'buildBatch.sourceVersion',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.sourceVersion', props);
    return resource.getResponseField('buildBatch.sourceVersion') as unknown as string;
  }

  public get resolvedSourceVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.resolvedSourceVersion'),
        outputPath: 'buildBatch.resolvedSourceVersion',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.resolvedSourceVersion', props);
    return resource.getResponseField('buildBatch.resolvedSourceVersion') as unknown as string;
  }

  public get projectName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.projectName'),
        outputPath: 'buildBatch.projectName',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.projectName', props);
    return resource.getResponseField('buildBatch.projectName') as unknown as string;
  }

  public get phases(): shapes.CodeBuildBuildBatchPhase[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.phases'),
        outputPath: 'buildBatch.phases',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.phases', props);
    return resource.getResponseField('buildBatch.phases') as unknown as shapes.CodeBuildBuildBatchPhase[];
  }

  public get source(): CodeBuildStartBuildBatchBuildBatchSource {
    return new CodeBuildStartBuildBatchBuildBatchSource(this, 'Source', this.__resources, this.input);
  }

  public get secondarySources(): shapes.CodeBuildProjectSource[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.secondarySources'),
        outputPath: 'buildBatch.secondarySources',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.secondarySources', props);
    return resource.getResponseField('buildBatch.secondarySources') as unknown as shapes.CodeBuildProjectSource[];
  }

  public get secondarySourceVersions(): shapes.CodeBuildProjectSourceVersion[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.secondarySourceVersions'),
        outputPath: 'buildBatch.secondarySourceVersions',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.secondarySourceVersions', props);
    return resource.getResponseField('buildBatch.secondarySourceVersions') as unknown as shapes.CodeBuildProjectSourceVersion[];
  }

  public get artifacts(): CodeBuildStartBuildBatchBuildBatchArtifacts {
    return new CodeBuildStartBuildBatchBuildBatchArtifacts(this, 'Artifacts', this.__resources, this.input);
  }

  public get secondaryArtifacts(): shapes.CodeBuildBuildArtifacts[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.secondaryArtifacts'),
        outputPath: 'buildBatch.secondaryArtifacts',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.secondaryArtifacts', props);
    return resource.getResponseField('buildBatch.secondaryArtifacts') as unknown as shapes.CodeBuildBuildArtifacts[];
  }

  public get cache(): CodeBuildStartBuildBatchBuildBatchCache {
    return new CodeBuildStartBuildBatchBuildBatchCache(this, 'Cache', this.__resources, this.input);
  }

  public get environment(): CodeBuildStartBuildBatchBuildBatchEnvironment {
    return new CodeBuildStartBuildBatchBuildBatchEnvironment(this, 'Environment', this.__resources, this.input);
  }

  public get serviceRole(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.serviceRole'),
        outputPath: 'buildBatch.serviceRole',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.serviceRole', props);
    return resource.getResponseField('buildBatch.serviceRole') as unknown as string;
  }

  public get logConfig(): CodeBuildStartBuildBatchBuildBatchLogConfig {
    return new CodeBuildStartBuildBatchBuildBatchLogConfig(this, 'LogConfig', this.__resources, this.input);
  }

  public get buildTimeoutInMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.buildTimeoutInMinutes'),
        outputPath: 'buildBatch.buildTimeoutInMinutes',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.buildTimeoutInMinutes', props);
    return resource.getResponseField('buildBatch.buildTimeoutInMinutes') as unknown as number;
  }

  public get queuedTimeoutInMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.queuedTimeoutInMinutes'),
        outputPath: 'buildBatch.queuedTimeoutInMinutes',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.queuedTimeoutInMinutes', props);
    return resource.getResponseField('buildBatch.queuedTimeoutInMinutes') as unknown as number;
  }

  public get complete(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.complete'),
        outputPath: 'buildBatch.complete',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.complete', props);
    return resource.getResponseField('buildBatch.complete') as unknown as boolean;
  }

  public get initiator(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.initiator'),
        outputPath: 'buildBatch.initiator',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.initiator', props);
    return resource.getResponseField('buildBatch.initiator') as unknown as string;
  }

  public get vpcConfig(): CodeBuildStartBuildBatchBuildBatchVpcConfig {
    return new CodeBuildStartBuildBatchBuildBatchVpcConfig(this, 'VpcConfig', this.__resources, this.input);
  }

  public get encryptionKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.encryptionKey'),
        outputPath: 'buildBatch.encryptionKey',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.encryptionKey', props);
    return resource.getResponseField('buildBatch.encryptionKey') as unknown as string;
  }

  public get buildBatchNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.buildBatchNumber'),
        outputPath: 'buildBatch.buildBatchNumber',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.buildBatchNumber', props);
    return resource.getResponseField('buildBatch.buildBatchNumber') as unknown as number;
  }

  public get fileSystemLocations(): shapes.CodeBuildProjectFileSystemLocation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.fileSystemLocations'),
        outputPath: 'buildBatch.fileSystemLocations',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.fileSystemLocations', props);
    return resource.getResponseField('buildBatch.fileSystemLocations') as unknown as shapes.CodeBuildProjectFileSystemLocation[];
  }

  public get buildBatchConfig(): CodeBuildStartBuildBatchBuildBatchBuildBatchConfig {
    return new CodeBuildStartBuildBatchBuildBatchBuildBatchConfig(this, 'BuildBatchConfig', this.__resources, this.input);
  }

  public get buildGroups(): shapes.CodeBuildBuildGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.buildGroups'),
        outputPath: 'buildBatch.buildGroups',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.buildGroups', props);
    return resource.getResponseField('buildBatch.buildGroups') as unknown as shapes.CodeBuildBuildGroup[];
  }

}

export class CodeBuildStartBuildBatchBuildBatchSource extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStartBuildBatchInput) {
    super(scope, id);
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.source.type'),
        outputPath: 'buildBatch.source.type',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.source.type', props);
    return resource.getResponseField('buildBatch.source.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.source.location'),
        outputPath: 'buildBatch.source.location',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.source.location', props);
    return resource.getResponseField('buildBatch.source.location') as unknown as string;
  }

  public get gitCloneDepth(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.source.gitCloneDepth'),
        outputPath: 'buildBatch.source.gitCloneDepth',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.source.gitCloneDepth', props);
    return resource.getResponseField('buildBatch.source.gitCloneDepth') as unknown as number;
  }

  public get gitSubmodulesConfig(): CodeBuildStartBuildBatchBuildBatchSourceGitSubmodulesConfig {
    return new CodeBuildStartBuildBatchBuildBatchSourceGitSubmodulesConfig(this, 'GitSubmodulesConfig', this.__resources, this.input);
  }

  public get buildspec(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.source.buildspec'),
        outputPath: 'buildBatch.source.buildspec',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.source.buildspec', props);
    return resource.getResponseField('buildBatch.source.buildspec') as unknown as string;
  }

  public get auth(): CodeBuildStartBuildBatchBuildBatchSourceAuth {
    return new CodeBuildStartBuildBatchBuildBatchSourceAuth(this, 'Auth', this.__resources, this.input);
  }

  public get reportBuildStatus(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.source.reportBuildStatus'),
        outputPath: 'buildBatch.source.reportBuildStatus',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.source.reportBuildStatus', props);
    return resource.getResponseField('buildBatch.source.reportBuildStatus') as unknown as boolean;
  }

  public get buildStatusConfig(): CodeBuildStartBuildBatchBuildBatchSourceBuildStatusConfig {
    return new CodeBuildStartBuildBatchBuildBatchSourceBuildStatusConfig(this, 'BuildStatusConfig', this.__resources, this.input);
  }

  public get insecureSsl(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.source.insecureSsl'),
        outputPath: 'buildBatch.source.insecureSsl',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.source.insecureSsl', props);
    return resource.getResponseField('buildBatch.source.insecureSsl') as unknown as boolean;
  }

  public get sourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.source.sourceIdentifier'),
        outputPath: 'buildBatch.source.sourceIdentifier',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.source.sourceIdentifier', props);
    return resource.getResponseField('buildBatch.source.sourceIdentifier') as unknown as string;
  }

}

export class CodeBuildStartBuildBatchBuildBatchSourceGitSubmodulesConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStartBuildBatchInput) {
    super(scope, id);
  }

  public get fetchSubmodules(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.source.gitSubmodulesConfig.fetchSubmodules'),
        outputPath: 'buildBatch.source.gitSubmodulesConfig.fetchSubmodules',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.source.gitSubmodulesConfig.fetchSubmodules', props);
    return resource.getResponseField('buildBatch.source.gitSubmodulesConfig.fetchSubmodules') as unknown as boolean;
  }

}

export class CodeBuildStartBuildBatchBuildBatchSourceAuth extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStartBuildBatchInput) {
    super(scope, id);
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.source.auth.type'),
        outputPath: 'buildBatch.source.auth.type',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.source.auth.type', props);
    return resource.getResponseField('buildBatch.source.auth.type') as unknown as string;
  }

  public get resource(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.source.auth.resource'),
        outputPath: 'buildBatch.source.auth.resource',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.source.auth.resource', props);
    return resource.getResponseField('buildBatch.source.auth.resource') as unknown as string;
  }

}

export class CodeBuildStartBuildBatchBuildBatchSourceBuildStatusConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStartBuildBatchInput) {
    super(scope, id);
  }

  public get context(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.source.buildStatusConfig.context'),
        outputPath: 'buildBatch.source.buildStatusConfig.context',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.source.buildStatusConfig.context', props);
    return resource.getResponseField('buildBatch.source.buildStatusConfig.context') as unknown as string;
  }

  public get targetUrl(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.source.buildStatusConfig.targetUrl'),
        outputPath: 'buildBatch.source.buildStatusConfig.targetUrl',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.source.buildStatusConfig.targetUrl', props);
    return resource.getResponseField('buildBatch.source.buildStatusConfig.targetUrl') as unknown as string;
  }

}

export class CodeBuildStartBuildBatchBuildBatchArtifacts extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStartBuildBatchInput) {
    super(scope, id);
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.artifacts.location'),
        outputPath: 'buildBatch.artifacts.location',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.artifacts.location', props);
    return resource.getResponseField('buildBatch.artifacts.location') as unknown as string;
  }

  public get sha256Sum(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.artifacts.sha256sum'),
        outputPath: 'buildBatch.artifacts.sha256sum',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.artifacts.sha256sum', props);
    return resource.getResponseField('buildBatch.artifacts.sha256sum') as unknown as string;
  }

  public get md5Sum(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.artifacts.md5sum'),
        outputPath: 'buildBatch.artifacts.md5sum',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.artifacts.md5sum', props);
    return resource.getResponseField('buildBatch.artifacts.md5sum') as unknown as string;
  }

  public get overrideArtifactName(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.artifacts.overrideArtifactName'),
        outputPath: 'buildBatch.artifacts.overrideArtifactName',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.artifacts.overrideArtifactName', props);
    return resource.getResponseField('buildBatch.artifacts.overrideArtifactName') as unknown as boolean;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.artifacts.encryptionDisabled'),
        outputPath: 'buildBatch.artifacts.encryptionDisabled',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.artifacts.encryptionDisabled', props);
    return resource.getResponseField('buildBatch.artifacts.encryptionDisabled') as unknown as boolean;
  }

  public get artifactIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.artifacts.artifactIdentifier'),
        outputPath: 'buildBatch.artifacts.artifactIdentifier',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.artifacts.artifactIdentifier', props);
    return resource.getResponseField('buildBatch.artifacts.artifactIdentifier') as unknown as string;
  }

}

export class CodeBuildStartBuildBatchBuildBatchCache extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStartBuildBatchInput) {
    super(scope, id);
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.cache.type'),
        outputPath: 'buildBatch.cache.type',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.cache.type', props);
    return resource.getResponseField('buildBatch.cache.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.cache.location'),
        outputPath: 'buildBatch.cache.location',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.cache.location', props);
    return resource.getResponseField('buildBatch.cache.location') as unknown as string;
  }

  public get modes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.cache.modes'),
        outputPath: 'buildBatch.cache.modes',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.cache.modes', props);
    return resource.getResponseField('buildBatch.cache.modes') as unknown as string[];
  }

}

export class CodeBuildStartBuildBatchBuildBatchEnvironment extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStartBuildBatchInput) {
    super(scope, id);
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.environment.type'),
        outputPath: 'buildBatch.environment.type',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.environment.type', props);
    return resource.getResponseField('buildBatch.environment.type') as unknown as string;
  }

  public get image(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.environment.image'),
        outputPath: 'buildBatch.environment.image',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.environment.image', props);
    return resource.getResponseField('buildBatch.environment.image') as unknown as string;
  }

  public get computeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.environment.computeType'),
        outputPath: 'buildBatch.environment.computeType',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.environment.computeType', props);
    return resource.getResponseField('buildBatch.environment.computeType') as unknown as string;
  }

  public get environmentVariables(): shapes.CodeBuildEnvironmentVariable[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.environment.environmentVariables'),
        outputPath: 'buildBatch.environment.environmentVariables',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.environment.environmentVariables', props);
    return resource.getResponseField('buildBatch.environment.environmentVariables') as unknown as shapes.CodeBuildEnvironmentVariable[];
  }

  public get privilegedMode(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.environment.privilegedMode'),
        outputPath: 'buildBatch.environment.privilegedMode',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.environment.privilegedMode', props);
    return resource.getResponseField('buildBatch.environment.privilegedMode') as unknown as boolean;
  }

  public get certificate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.environment.certificate'),
        outputPath: 'buildBatch.environment.certificate',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.environment.certificate', props);
    return resource.getResponseField('buildBatch.environment.certificate') as unknown as string;
  }

  public get registryCredential(): CodeBuildStartBuildBatchBuildBatchEnvironmentRegistryCredential {
    return new CodeBuildStartBuildBatchBuildBatchEnvironmentRegistryCredential(this, 'RegistryCredential', this.__resources, this.input);
  }

  public get imagePullCredentialsType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.environment.imagePullCredentialsType'),
        outputPath: 'buildBatch.environment.imagePullCredentialsType',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.environment.imagePullCredentialsType', props);
    return resource.getResponseField('buildBatch.environment.imagePullCredentialsType') as unknown as string;
  }

}

export class CodeBuildStartBuildBatchBuildBatchEnvironmentRegistryCredential extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStartBuildBatchInput) {
    super(scope, id);
  }

  public get credential(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.environment.registryCredential.credential'),
        outputPath: 'buildBatch.environment.registryCredential.credential',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.environment.registryCredential.credential', props);
    return resource.getResponseField('buildBatch.environment.registryCredential.credential') as unknown as string;
  }

  public get credentialProvider(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.environment.registryCredential.credentialProvider'),
        outputPath: 'buildBatch.environment.registryCredential.credentialProvider',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.environment.registryCredential.credentialProvider', props);
    return resource.getResponseField('buildBatch.environment.registryCredential.credentialProvider') as unknown as string;
  }

}

export class CodeBuildStartBuildBatchBuildBatchLogConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStartBuildBatchInput) {
    super(scope, id);
  }

  public get cloudWatchLogs(): CodeBuildStartBuildBatchBuildBatchLogConfigCloudWatchLogs {
    return new CodeBuildStartBuildBatchBuildBatchLogConfigCloudWatchLogs(this, 'CloudWatchLogs', this.__resources, this.input);
  }

  public get s3Logs(): CodeBuildStartBuildBatchBuildBatchLogConfigS3Logs {
    return new CodeBuildStartBuildBatchBuildBatchLogConfigS3Logs(this, 'S3Logs', this.__resources, this.input);
  }

}

export class CodeBuildStartBuildBatchBuildBatchLogConfigCloudWatchLogs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStartBuildBatchInput) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.logConfig.cloudWatchLogs.status'),
        outputPath: 'buildBatch.logConfig.cloudWatchLogs.status',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.logConfig.cloudWatchLogs.status', props);
    return resource.getResponseField('buildBatch.logConfig.cloudWatchLogs.status') as unknown as string;
  }

  public get groupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.logConfig.cloudWatchLogs.groupName'),
        outputPath: 'buildBatch.logConfig.cloudWatchLogs.groupName',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.logConfig.cloudWatchLogs.groupName', props);
    return resource.getResponseField('buildBatch.logConfig.cloudWatchLogs.groupName') as unknown as string;
  }

  public get streamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.logConfig.cloudWatchLogs.streamName'),
        outputPath: 'buildBatch.logConfig.cloudWatchLogs.streamName',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.logConfig.cloudWatchLogs.streamName', props);
    return resource.getResponseField('buildBatch.logConfig.cloudWatchLogs.streamName') as unknown as string;
  }

}

export class CodeBuildStartBuildBatchBuildBatchLogConfigS3Logs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStartBuildBatchInput) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.logConfig.s3Logs.status'),
        outputPath: 'buildBatch.logConfig.s3Logs.status',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.logConfig.s3Logs.status', props);
    return resource.getResponseField('buildBatch.logConfig.s3Logs.status') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.logConfig.s3Logs.location'),
        outputPath: 'buildBatch.logConfig.s3Logs.location',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.logConfig.s3Logs.location', props);
    return resource.getResponseField('buildBatch.logConfig.s3Logs.location') as unknown as string;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.logConfig.s3Logs.encryptionDisabled'),
        outputPath: 'buildBatch.logConfig.s3Logs.encryptionDisabled',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.logConfig.s3Logs.encryptionDisabled', props);
    return resource.getResponseField('buildBatch.logConfig.s3Logs.encryptionDisabled') as unknown as boolean;
  }

}

export class CodeBuildStartBuildBatchBuildBatchVpcConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStartBuildBatchInput) {
    super(scope, id);
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.vpcConfig.vpcId'),
        outputPath: 'buildBatch.vpcConfig.vpcId',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.vpcConfig.vpcId', props);
    return resource.getResponseField('buildBatch.vpcConfig.vpcId') as unknown as string;
  }

  public get subnets(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.vpcConfig.subnets'),
        outputPath: 'buildBatch.vpcConfig.subnets',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.vpcConfig.subnets', props);
    return resource.getResponseField('buildBatch.vpcConfig.subnets') as unknown as string[];
  }

  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.vpcConfig.securityGroupIds'),
        outputPath: 'buildBatch.vpcConfig.securityGroupIds',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.vpcConfig.securityGroupIds', props);
    return resource.getResponseField('buildBatch.vpcConfig.securityGroupIds') as unknown as string[];
  }

}

export class CodeBuildStartBuildBatchBuildBatchBuildBatchConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStartBuildBatchInput) {
    super(scope, id);
  }

  public get serviceRole(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.buildBatchConfig.serviceRole'),
        outputPath: 'buildBatch.buildBatchConfig.serviceRole',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.buildBatchConfig.serviceRole', props);
    return resource.getResponseField('buildBatch.buildBatchConfig.serviceRole') as unknown as string;
  }

  public get combineArtifacts(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.buildBatchConfig.combineArtifacts'),
        outputPath: 'buildBatch.buildBatchConfig.combineArtifacts',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.buildBatchConfig.combineArtifacts', props);
    return resource.getResponseField('buildBatch.buildBatchConfig.combineArtifacts') as unknown as boolean;
  }

  public get restrictions(): CodeBuildStartBuildBatchBuildBatchBuildBatchConfigRestrictions {
    return new CodeBuildStartBuildBatchBuildBatchBuildBatchConfigRestrictions(this, 'Restrictions', this.__resources, this.input);
  }

  public get timeoutInMins(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.buildBatchConfig.timeoutInMins'),
        outputPath: 'buildBatch.buildBatchConfig.timeoutInMins',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.buildBatchConfig.timeoutInMins', props);
    return resource.getResponseField('buildBatch.buildBatchConfig.timeoutInMins') as unknown as number;
  }

}

export class CodeBuildStartBuildBatchBuildBatchBuildBatchConfigRestrictions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStartBuildBatchInput) {
    super(scope, id);
  }

  public get maximumBuildsAllowed(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.buildBatchConfig.restrictions.maximumBuildsAllowed'),
        outputPath: 'buildBatch.buildBatchConfig.restrictions.maximumBuildsAllowed',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.buildBatchConfig.restrictions.maximumBuildsAllowed', props);
    return resource.getResponseField('buildBatch.buildBatchConfig.restrictions.maximumBuildsAllowed') as unknown as number;
  }

  public get computeTypesAllowed(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.buildBatchConfig.restrictions.computeTypesAllowed'),
        outputPath: 'buildBatch.buildBatchConfig.restrictions.computeTypesAllowed',
        parameters: {
          projectName: this.input.projectName,
          secondarySourcesOverride: this.input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.input.secondarySourcesVersionOverride,
          sourceVersion: this.input.sourceVersion,
          artifactsOverride: {
            type: this.input.artifactsOverride?.type,
            location: this.input.artifactsOverride?.location,
            path: this.input.artifactsOverride?.path,
            namespaceType: this.input.artifactsOverride?.namespaceType,
            name: this.input.artifactsOverride?.name,
            packaging: this.input.artifactsOverride?.packaging,
            overrideArtifactName: this.input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.input.artifactsOverride?.artifactIdentifier,
          },
          secondaryArtifactsOverride: this.input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.input.environmentVariablesOverride,
          sourceTypeOverride: this.input.sourceTypeOverride,
          sourceLocationOverride: this.input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.input.sourceAuthOverride?.type,
            resource: this.input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.input.buildspecOverride,
          insecureSslOverride: this.input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.input.environmentTypeOverride,
          imageOverride: this.input.imageOverride,
          computeTypeOverride: this.input.computeTypeOverride,
          certificateOverride: this.input.certificateOverride,
          cacheOverride: {
            type: this.input.cacheOverride?.type,
            location: this.input.cacheOverride?.location,
            modes: this.input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.input.serviceRoleOverride,
          privilegedModeOverride: this.input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.input.encryptionKeyOverride,
          idempotencyToken: this.input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfigOverride?.s3Logs?.status,
              location: this.input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfigOverride?.s3Logs?.encryptionDisabled,
            },
          },
          registryCredentialOverride: {
            credential: this.input.registryCredentialOverride?.credential,
            credentialProvider: this.input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfigOverride?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartBuildBatch.buildBatch.buildBatchConfig.restrictions.computeTypesAllowed', props);
    return resource.getResponseField('buildBatch.buildBatchConfig.restrictions.computeTypesAllowed') as unknown as string[];
  }

}

export class CodeBuildStopBuild extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStopBuildInput) {
    super(scope, id);
  }

  public get build(): CodeBuildStopBuildBuild {
    return new CodeBuildStopBuildBuild(this, 'Build', this.__resources, this.input);
  }

}

export class CodeBuildStopBuildBuild extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStopBuildInput) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.id'),
        outputPath: 'build.id',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.id', props);
    return resource.getResponseField('build.id') as unknown as string;
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.arn'),
        outputPath: 'build.arn',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.arn', props);
    return resource.getResponseField('build.arn') as unknown as string;
  }

  public get buildNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.buildNumber'),
        outputPath: 'build.buildNumber',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.buildNumber', props);
    return resource.getResponseField('build.buildNumber') as unknown as number;
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.startTime'),
        outputPath: 'build.startTime',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.startTime', props);
    return resource.getResponseField('build.startTime') as unknown as string;
  }

  public get endTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.endTime'),
        outputPath: 'build.endTime',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.endTime', props);
    return resource.getResponseField('build.endTime') as unknown as string;
  }

  public get currentPhase(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.currentPhase'),
        outputPath: 'build.currentPhase',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.currentPhase', props);
    return resource.getResponseField('build.currentPhase') as unknown as string;
  }

  public get buildStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.buildStatus'),
        outputPath: 'build.buildStatus',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.buildStatus', props);
    return resource.getResponseField('build.buildStatus') as unknown as string;
  }

  public get sourceVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.sourceVersion'),
        outputPath: 'build.sourceVersion',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.sourceVersion', props);
    return resource.getResponseField('build.sourceVersion') as unknown as string;
  }

  public get resolvedSourceVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.resolvedSourceVersion'),
        outputPath: 'build.resolvedSourceVersion',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.resolvedSourceVersion', props);
    return resource.getResponseField('build.resolvedSourceVersion') as unknown as string;
  }

  public get projectName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.projectName'),
        outputPath: 'build.projectName',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.projectName', props);
    return resource.getResponseField('build.projectName') as unknown as string;
  }

  public get phases(): shapes.CodeBuildBuildPhase[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.phases'),
        outputPath: 'build.phases',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.phases', props);
    return resource.getResponseField('build.phases') as unknown as shapes.CodeBuildBuildPhase[];
  }

  public get source(): CodeBuildStopBuildBuildSource {
    return new CodeBuildStopBuildBuildSource(this, 'Source', this.__resources, this.input);
  }

  public get secondarySources(): shapes.CodeBuildProjectSource[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.secondarySources'),
        outputPath: 'build.secondarySources',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.secondarySources', props);
    return resource.getResponseField('build.secondarySources') as unknown as shapes.CodeBuildProjectSource[];
  }

  public get secondarySourceVersions(): shapes.CodeBuildProjectSourceVersion[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.secondarySourceVersions'),
        outputPath: 'build.secondarySourceVersions',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.secondarySourceVersions', props);
    return resource.getResponseField('build.secondarySourceVersions') as unknown as shapes.CodeBuildProjectSourceVersion[];
  }

  public get artifacts(): CodeBuildStopBuildBuildArtifacts {
    return new CodeBuildStopBuildBuildArtifacts(this, 'Artifacts', this.__resources, this.input);
  }

  public get secondaryArtifacts(): shapes.CodeBuildBuildArtifacts[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.secondaryArtifacts'),
        outputPath: 'build.secondaryArtifacts',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.secondaryArtifacts', props);
    return resource.getResponseField('build.secondaryArtifacts') as unknown as shapes.CodeBuildBuildArtifacts[];
  }

  public get cache(): CodeBuildStopBuildBuildCache {
    return new CodeBuildStopBuildBuildCache(this, 'Cache', this.__resources, this.input);
  }

  public get environment(): CodeBuildStopBuildBuildEnvironment {
    return new CodeBuildStopBuildBuildEnvironment(this, 'Environment', this.__resources, this.input);
  }

  public get serviceRole(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.serviceRole'),
        outputPath: 'build.serviceRole',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.serviceRole', props);
    return resource.getResponseField('build.serviceRole') as unknown as string;
  }

  public get logs(): CodeBuildStopBuildBuildLogs {
    return new CodeBuildStopBuildBuildLogs(this, 'Logs', this.__resources, this.input);
  }

  public get timeoutInMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.timeoutInMinutes'),
        outputPath: 'build.timeoutInMinutes',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.timeoutInMinutes', props);
    return resource.getResponseField('build.timeoutInMinutes') as unknown as number;
  }

  public get queuedTimeoutInMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.queuedTimeoutInMinutes'),
        outputPath: 'build.queuedTimeoutInMinutes',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.queuedTimeoutInMinutes', props);
    return resource.getResponseField('build.queuedTimeoutInMinutes') as unknown as number;
  }

  public get buildComplete(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.buildComplete'),
        outputPath: 'build.buildComplete',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.buildComplete', props);
    return resource.getResponseField('build.buildComplete') as unknown as boolean;
  }

  public get initiator(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.initiator'),
        outputPath: 'build.initiator',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.initiator', props);
    return resource.getResponseField('build.initiator') as unknown as string;
  }

  public get vpcConfig(): CodeBuildStopBuildBuildVpcConfig {
    return new CodeBuildStopBuildBuildVpcConfig(this, 'VpcConfig', this.__resources, this.input);
  }

  public get networkInterface(): CodeBuildStopBuildBuildNetworkInterface {
    return new CodeBuildStopBuildBuildNetworkInterface(this, 'NetworkInterface', this.__resources, this.input);
  }

  public get encryptionKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.encryptionKey'),
        outputPath: 'build.encryptionKey',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.encryptionKey', props);
    return resource.getResponseField('build.encryptionKey') as unknown as string;
  }

  public get exportedEnvironmentVariables(): shapes.CodeBuildExportedEnvironmentVariable[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.exportedEnvironmentVariables'),
        outputPath: 'build.exportedEnvironmentVariables',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.exportedEnvironmentVariables', props);
    return resource.getResponseField('build.exportedEnvironmentVariables') as unknown as shapes.CodeBuildExportedEnvironmentVariable[];
  }

  public get reportArns(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.reportArns'),
        outputPath: 'build.reportArns',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.reportArns', props);
    return resource.getResponseField('build.reportArns') as unknown as string[];
  }

  public get fileSystemLocations(): shapes.CodeBuildProjectFileSystemLocation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.fileSystemLocations'),
        outputPath: 'build.fileSystemLocations',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.fileSystemLocations', props);
    return resource.getResponseField('build.fileSystemLocations') as unknown as shapes.CodeBuildProjectFileSystemLocation[];
  }

  public get debugSession(): CodeBuildStopBuildBuildDebugSession {
    return new CodeBuildStopBuildBuildDebugSession(this, 'DebugSession', this.__resources, this.input);
  }

  public get buildBatchArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.buildBatchArn'),
        outputPath: 'build.buildBatchArn',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.buildBatchArn', props);
    return resource.getResponseField('build.buildBatchArn') as unknown as string;
  }

}

export class CodeBuildStopBuildBuildSource extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStopBuildInput) {
    super(scope, id);
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.source.type'),
        outputPath: 'build.source.type',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.source.type', props);
    return resource.getResponseField('build.source.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.source.location'),
        outputPath: 'build.source.location',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.source.location', props);
    return resource.getResponseField('build.source.location') as unknown as string;
  }

  public get gitCloneDepth(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.source.gitCloneDepth'),
        outputPath: 'build.source.gitCloneDepth',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.source.gitCloneDepth', props);
    return resource.getResponseField('build.source.gitCloneDepth') as unknown as number;
  }

  public get gitSubmodulesConfig(): CodeBuildStopBuildBuildSourceGitSubmodulesConfig {
    return new CodeBuildStopBuildBuildSourceGitSubmodulesConfig(this, 'GitSubmodulesConfig', this.__resources, this.input);
  }

  public get buildspec(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.source.buildspec'),
        outputPath: 'build.source.buildspec',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.source.buildspec', props);
    return resource.getResponseField('build.source.buildspec') as unknown as string;
  }

  public get auth(): CodeBuildStopBuildBuildSourceAuth {
    return new CodeBuildStopBuildBuildSourceAuth(this, 'Auth', this.__resources, this.input);
  }

  public get reportBuildStatus(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.source.reportBuildStatus'),
        outputPath: 'build.source.reportBuildStatus',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.source.reportBuildStatus', props);
    return resource.getResponseField('build.source.reportBuildStatus') as unknown as boolean;
  }

  public get buildStatusConfig(): CodeBuildStopBuildBuildSourceBuildStatusConfig {
    return new CodeBuildStopBuildBuildSourceBuildStatusConfig(this, 'BuildStatusConfig', this.__resources, this.input);
  }

  public get insecureSsl(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.source.insecureSsl'),
        outputPath: 'build.source.insecureSsl',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.source.insecureSsl', props);
    return resource.getResponseField('build.source.insecureSsl') as unknown as boolean;
  }

  public get sourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.source.sourceIdentifier'),
        outputPath: 'build.source.sourceIdentifier',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.source.sourceIdentifier', props);
    return resource.getResponseField('build.source.sourceIdentifier') as unknown as string;
  }

}

export class CodeBuildStopBuildBuildSourceGitSubmodulesConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStopBuildInput) {
    super(scope, id);
  }

  public get fetchSubmodules(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.source.gitSubmodulesConfig.fetchSubmodules'),
        outputPath: 'build.source.gitSubmodulesConfig.fetchSubmodules',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.source.gitSubmodulesConfig.fetchSubmodules', props);
    return resource.getResponseField('build.source.gitSubmodulesConfig.fetchSubmodules') as unknown as boolean;
  }

}

export class CodeBuildStopBuildBuildSourceAuth extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStopBuildInput) {
    super(scope, id);
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.source.auth.type'),
        outputPath: 'build.source.auth.type',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.source.auth.type', props);
    return resource.getResponseField('build.source.auth.type') as unknown as string;
  }

  public get resource(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.source.auth.resource'),
        outputPath: 'build.source.auth.resource',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.source.auth.resource', props);
    return resource.getResponseField('build.source.auth.resource') as unknown as string;
  }

}

export class CodeBuildStopBuildBuildSourceBuildStatusConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStopBuildInput) {
    super(scope, id);
  }

  public get context(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.source.buildStatusConfig.context'),
        outputPath: 'build.source.buildStatusConfig.context',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.source.buildStatusConfig.context', props);
    return resource.getResponseField('build.source.buildStatusConfig.context') as unknown as string;
  }

  public get targetUrl(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.source.buildStatusConfig.targetUrl'),
        outputPath: 'build.source.buildStatusConfig.targetUrl',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.source.buildStatusConfig.targetUrl', props);
    return resource.getResponseField('build.source.buildStatusConfig.targetUrl') as unknown as string;
  }

}

export class CodeBuildStopBuildBuildArtifacts extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStopBuildInput) {
    super(scope, id);
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.artifacts.location'),
        outputPath: 'build.artifacts.location',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.artifacts.location', props);
    return resource.getResponseField('build.artifacts.location') as unknown as string;
  }

  public get sha256Sum(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.artifacts.sha256sum'),
        outputPath: 'build.artifacts.sha256sum',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.artifacts.sha256sum', props);
    return resource.getResponseField('build.artifacts.sha256sum') as unknown as string;
  }

  public get md5Sum(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.artifacts.md5sum'),
        outputPath: 'build.artifacts.md5sum',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.artifacts.md5sum', props);
    return resource.getResponseField('build.artifacts.md5sum') as unknown as string;
  }

  public get overrideArtifactName(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.artifacts.overrideArtifactName'),
        outputPath: 'build.artifacts.overrideArtifactName',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.artifacts.overrideArtifactName', props);
    return resource.getResponseField('build.artifacts.overrideArtifactName') as unknown as boolean;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.artifacts.encryptionDisabled'),
        outputPath: 'build.artifacts.encryptionDisabled',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.artifacts.encryptionDisabled', props);
    return resource.getResponseField('build.artifacts.encryptionDisabled') as unknown as boolean;
  }

  public get artifactIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.artifacts.artifactIdentifier'),
        outputPath: 'build.artifacts.artifactIdentifier',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.artifacts.artifactIdentifier', props);
    return resource.getResponseField('build.artifacts.artifactIdentifier') as unknown as string;
  }

}

export class CodeBuildStopBuildBuildCache extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStopBuildInput) {
    super(scope, id);
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.cache.type'),
        outputPath: 'build.cache.type',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.cache.type', props);
    return resource.getResponseField('build.cache.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.cache.location'),
        outputPath: 'build.cache.location',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.cache.location', props);
    return resource.getResponseField('build.cache.location') as unknown as string;
  }

  public get modes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.cache.modes'),
        outputPath: 'build.cache.modes',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.cache.modes', props);
    return resource.getResponseField('build.cache.modes') as unknown as string[];
  }

}

export class CodeBuildStopBuildBuildEnvironment extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStopBuildInput) {
    super(scope, id);
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.environment.type'),
        outputPath: 'build.environment.type',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.environment.type', props);
    return resource.getResponseField('build.environment.type') as unknown as string;
  }

  public get image(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.environment.image'),
        outputPath: 'build.environment.image',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.environment.image', props);
    return resource.getResponseField('build.environment.image') as unknown as string;
  }

  public get computeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.environment.computeType'),
        outputPath: 'build.environment.computeType',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.environment.computeType', props);
    return resource.getResponseField('build.environment.computeType') as unknown as string;
  }

  public get environmentVariables(): shapes.CodeBuildEnvironmentVariable[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.environment.environmentVariables'),
        outputPath: 'build.environment.environmentVariables',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.environment.environmentVariables', props);
    return resource.getResponseField('build.environment.environmentVariables') as unknown as shapes.CodeBuildEnvironmentVariable[];
  }

  public get privilegedMode(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.environment.privilegedMode'),
        outputPath: 'build.environment.privilegedMode',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.environment.privilegedMode', props);
    return resource.getResponseField('build.environment.privilegedMode') as unknown as boolean;
  }

  public get certificate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.environment.certificate'),
        outputPath: 'build.environment.certificate',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.environment.certificate', props);
    return resource.getResponseField('build.environment.certificate') as unknown as string;
  }

  public get registryCredential(): CodeBuildStopBuildBuildEnvironmentRegistryCredential {
    return new CodeBuildStopBuildBuildEnvironmentRegistryCredential(this, 'RegistryCredential', this.__resources, this.input);
  }

  public get imagePullCredentialsType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.environment.imagePullCredentialsType'),
        outputPath: 'build.environment.imagePullCredentialsType',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.environment.imagePullCredentialsType', props);
    return resource.getResponseField('build.environment.imagePullCredentialsType') as unknown as string;
  }

}

export class CodeBuildStopBuildBuildEnvironmentRegistryCredential extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStopBuildInput) {
    super(scope, id);
  }

  public get credential(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.environment.registryCredential.credential'),
        outputPath: 'build.environment.registryCredential.credential',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.environment.registryCredential.credential', props);
    return resource.getResponseField('build.environment.registryCredential.credential') as unknown as string;
  }

  public get credentialProvider(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.environment.registryCredential.credentialProvider'),
        outputPath: 'build.environment.registryCredential.credentialProvider',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.environment.registryCredential.credentialProvider', props);
    return resource.getResponseField('build.environment.registryCredential.credentialProvider') as unknown as string;
  }

}

export class CodeBuildStopBuildBuildLogs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStopBuildInput) {
    super(scope, id);
  }

  public get groupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.logs.groupName'),
        outputPath: 'build.logs.groupName',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.logs.groupName', props);
    return resource.getResponseField('build.logs.groupName') as unknown as string;
  }

  public get streamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.logs.streamName'),
        outputPath: 'build.logs.streamName',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.logs.streamName', props);
    return resource.getResponseField('build.logs.streamName') as unknown as string;
  }

  public get deepLink(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.logs.deepLink'),
        outputPath: 'build.logs.deepLink',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.logs.deepLink', props);
    return resource.getResponseField('build.logs.deepLink') as unknown as string;
  }

  public get s3DeepLink(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.logs.s3DeepLink'),
        outputPath: 'build.logs.s3DeepLink',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.logs.s3DeepLink', props);
    return resource.getResponseField('build.logs.s3DeepLink') as unknown as string;
  }

  public get cloudWatchLogsArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.logs.cloudWatchLogsArn'),
        outputPath: 'build.logs.cloudWatchLogsArn',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.logs.cloudWatchLogsArn', props);
    return resource.getResponseField('build.logs.cloudWatchLogsArn') as unknown as string;
  }

  public get s3LogsArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.logs.s3LogsArn'),
        outputPath: 'build.logs.s3LogsArn',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.logs.s3LogsArn', props);
    return resource.getResponseField('build.logs.s3LogsArn') as unknown as string;
  }

  public get cloudWatchLogs(): CodeBuildStopBuildBuildLogsCloudWatchLogs {
    return new CodeBuildStopBuildBuildLogsCloudWatchLogs(this, 'CloudWatchLogs', this.__resources, this.input);
  }

  public get s3Logs(): CodeBuildStopBuildBuildLogsS3Logs {
    return new CodeBuildStopBuildBuildLogsS3Logs(this, 'S3Logs', this.__resources, this.input);
  }

}

export class CodeBuildStopBuildBuildLogsCloudWatchLogs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStopBuildInput) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.logs.cloudWatchLogs.status'),
        outputPath: 'build.logs.cloudWatchLogs.status',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.logs.cloudWatchLogs.status', props);
    return resource.getResponseField('build.logs.cloudWatchLogs.status') as unknown as string;
  }

  public get groupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.logs.cloudWatchLogs.groupName'),
        outputPath: 'build.logs.cloudWatchLogs.groupName',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.logs.cloudWatchLogs.groupName', props);
    return resource.getResponseField('build.logs.cloudWatchLogs.groupName') as unknown as string;
  }

  public get streamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.logs.cloudWatchLogs.streamName'),
        outputPath: 'build.logs.cloudWatchLogs.streamName',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.logs.cloudWatchLogs.streamName', props);
    return resource.getResponseField('build.logs.cloudWatchLogs.streamName') as unknown as string;
  }

}

export class CodeBuildStopBuildBuildLogsS3Logs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStopBuildInput) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.logs.s3Logs.status'),
        outputPath: 'build.logs.s3Logs.status',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.logs.s3Logs.status', props);
    return resource.getResponseField('build.logs.s3Logs.status') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.logs.s3Logs.location'),
        outputPath: 'build.logs.s3Logs.location',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.logs.s3Logs.location', props);
    return resource.getResponseField('build.logs.s3Logs.location') as unknown as string;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.logs.s3Logs.encryptionDisabled'),
        outputPath: 'build.logs.s3Logs.encryptionDisabled',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.logs.s3Logs.encryptionDisabled', props);
    return resource.getResponseField('build.logs.s3Logs.encryptionDisabled') as unknown as boolean;
  }

}

export class CodeBuildStopBuildBuildVpcConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStopBuildInput) {
    super(scope, id);
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.vpcConfig.vpcId'),
        outputPath: 'build.vpcConfig.vpcId',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.vpcConfig.vpcId', props);
    return resource.getResponseField('build.vpcConfig.vpcId') as unknown as string;
  }

  public get subnets(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.vpcConfig.subnets'),
        outputPath: 'build.vpcConfig.subnets',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.vpcConfig.subnets', props);
    return resource.getResponseField('build.vpcConfig.subnets') as unknown as string[];
  }

  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.vpcConfig.securityGroupIds'),
        outputPath: 'build.vpcConfig.securityGroupIds',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.vpcConfig.securityGroupIds', props);
    return resource.getResponseField('build.vpcConfig.securityGroupIds') as unknown as string[];
  }

}

export class CodeBuildStopBuildBuildNetworkInterface extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStopBuildInput) {
    super(scope, id);
  }

  public get subnetId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.networkInterface.subnetId'),
        outputPath: 'build.networkInterface.subnetId',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.networkInterface.subnetId', props);
    return resource.getResponseField('build.networkInterface.subnetId') as unknown as string;
  }

  public get networkInterfaceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.networkInterface.networkInterfaceId'),
        outputPath: 'build.networkInterface.networkInterfaceId',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.networkInterface.networkInterfaceId', props);
    return resource.getResponseField('build.networkInterface.networkInterfaceId') as unknown as string;
  }

}

export class CodeBuildStopBuildBuildDebugSession extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStopBuildInput) {
    super(scope, id);
  }

  public get sessionEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.debugSession.sessionEnabled'),
        outputPath: 'build.debugSession.sessionEnabled',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.debugSession.sessionEnabled', props);
    return resource.getResponseField('build.debugSession.sessionEnabled') as unknown as boolean;
  }

  public get sessionTarget(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.debugSession.sessionTarget'),
        outputPath: 'build.debugSession.sessionTarget',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuild.build.debugSession.sessionTarget', props);
    return resource.getResponseField('build.debugSession.sessionTarget') as unknown as string;
  }

}

export class CodeBuildStopBuildBatch extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStopBuildBatchInput) {
    super(scope, id);
  }

  public get buildBatch(): CodeBuildStopBuildBatchBuildBatch {
    return new CodeBuildStopBuildBatchBuildBatch(this, 'BuildBatch', this.__resources, this.input);
  }

}

export class CodeBuildStopBuildBatchBuildBatch extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStopBuildBatchInput) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.id'),
        outputPath: 'buildBatch.id',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.id', props);
    return resource.getResponseField('buildBatch.id') as unknown as string;
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.arn'),
        outputPath: 'buildBatch.arn',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.arn', props);
    return resource.getResponseField('buildBatch.arn') as unknown as string;
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.startTime'),
        outputPath: 'buildBatch.startTime',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.startTime', props);
    return resource.getResponseField('buildBatch.startTime') as unknown as string;
  }

  public get endTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.endTime'),
        outputPath: 'buildBatch.endTime',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.endTime', props);
    return resource.getResponseField('buildBatch.endTime') as unknown as string;
  }

  public get currentPhase(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.currentPhase'),
        outputPath: 'buildBatch.currentPhase',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.currentPhase', props);
    return resource.getResponseField('buildBatch.currentPhase') as unknown as string;
  }

  public get buildBatchStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.buildBatchStatus'),
        outputPath: 'buildBatch.buildBatchStatus',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.buildBatchStatus', props);
    return resource.getResponseField('buildBatch.buildBatchStatus') as unknown as string;
  }

  public get sourceVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.sourceVersion'),
        outputPath: 'buildBatch.sourceVersion',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.sourceVersion', props);
    return resource.getResponseField('buildBatch.sourceVersion') as unknown as string;
  }

  public get resolvedSourceVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.resolvedSourceVersion'),
        outputPath: 'buildBatch.resolvedSourceVersion',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.resolvedSourceVersion', props);
    return resource.getResponseField('buildBatch.resolvedSourceVersion') as unknown as string;
  }

  public get projectName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.projectName'),
        outputPath: 'buildBatch.projectName',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.projectName', props);
    return resource.getResponseField('buildBatch.projectName') as unknown as string;
  }

  public get phases(): shapes.CodeBuildBuildBatchPhase[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.phases'),
        outputPath: 'buildBatch.phases',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.phases', props);
    return resource.getResponseField('buildBatch.phases') as unknown as shapes.CodeBuildBuildBatchPhase[];
  }

  public get source(): CodeBuildStopBuildBatchBuildBatchSource {
    return new CodeBuildStopBuildBatchBuildBatchSource(this, 'Source', this.__resources, this.input);
  }

  public get secondarySources(): shapes.CodeBuildProjectSource[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.secondarySources'),
        outputPath: 'buildBatch.secondarySources',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.secondarySources', props);
    return resource.getResponseField('buildBatch.secondarySources') as unknown as shapes.CodeBuildProjectSource[];
  }

  public get secondarySourceVersions(): shapes.CodeBuildProjectSourceVersion[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.secondarySourceVersions'),
        outputPath: 'buildBatch.secondarySourceVersions',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.secondarySourceVersions', props);
    return resource.getResponseField('buildBatch.secondarySourceVersions') as unknown as shapes.CodeBuildProjectSourceVersion[];
  }

  public get artifacts(): CodeBuildStopBuildBatchBuildBatchArtifacts {
    return new CodeBuildStopBuildBatchBuildBatchArtifacts(this, 'Artifacts', this.__resources, this.input);
  }

  public get secondaryArtifacts(): shapes.CodeBuildBuildArtifacts[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.secondaryArtifacts'),
        outputPath: 'buildBatch.secondaryArtifacts',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.secondaryArtifacts', props);
    return resource.getResponseField('buildBatch.secondaryArtifacts') as unknown as shapes.CodeBuildBuildArtifacts[];
  }

  public get cache(): CodeBuildStopBuildBatchBuildBatchCache {
    return new CodeBuildStopBuildBatchBuildBatchCache(this, 'Cache', this.__resources, this.input);
  }

  public get environment(): CodeBuildStopBuildBatchBuildBatchEnvironment {
    return new CodeBuildStopBuildBatchBuildBatchEnvironment(this, 'Environment', this.__resources, this.input);
  }

  public get serviceRole(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.serviceRole'),
        outputPath: 'buildBatch.serviceRole',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.serviceRole', props);
    return resource.getResponseField('buildBatch.serviceRole') as unknown as string;
  }

  public get logConfig(): CodeBuildStopBuildBatchBuildBatchLogConfig {
    return new CodeBuildStopBuildBatchBuildBatchLogConfig(this, 'LogConfig', this.__resources, this.input);
  }

  public get buildTimeoutInMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.buildTimeoutInMinutes'),
        outputPath: 'buildBatch.buildTimeoutInMinutes',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.buildTimeoutInMinutes', props);
    return resource.getResponseField('buildBatch.buildTimeoutInMinutes') as unknown as number;
  }

  public get queuedTimeoutInMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.queuedTimeoutInMinutes'),
        outputPath: 'buildBatch.queuedTimeoutInMinutes',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.queuedTimeoutInMinutes', props);
    return resource.getResponseField('buildBatch.queuedTimeoutInMinutes') as unknown as number;
  }

  public get complete(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.complete'),
        outputPath: 'buildBatch.complete',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.complete', props);
    return resource.getResponseField('buildBatch.complete') as unknown as boolean;
  }

  public get initiator(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.initiator'),
        outputPath: 'buildBatch.initiator',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.initiator', props);
    return resource.getResponseField('buildBatch.initiator') as unknown as string;
  }

  public get vpcConfig(): CodeBuildStopBuildBatchBuildBatchVpcConfig {
    return new CodeBuildStopBuildBatchBuildBatchVpcConfig(this, 'VpcConfig', this.__resources, this.input);
  }

  public get encryptionKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.encryptionKey'),
        outputPath: 'buildBatch.encryptionKey',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.encryptionKey', props);
    return resource.getResponseField('buildBatch.encryptionKey') as unknown as string;
  }

  public get buildBatchNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.buildBatchNumber'),
        outputPath: 'buildBatch.buildBatchNumber',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.buildBatchNumber', props);
    return resource.getResponseField('buildBatch.buildBatchNumber') as unknown as number;
  }

  public get fileSystemLocations(): shapes.CodeBuildProjectFileSystemLocation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.fileSystemLocations'),
        outputPath: 'buildBatch.fileSystemLocations',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.fileSystemLocations', props);
    return resource.getResponseField('buildBatch.fileSystemLocations') as unknown as shapes.CodeBuildProjectFileSystemLocation[];
  }

  public get buildBatchConfig(): CodeBuildStopBuildBatchBuildBatchBuildBatchConfig {
    return new CodeBuildStopBuildBatchBuildBatchBuildBatchConfig(this, 'BuildBatchConfig', this.__resources, this.input);
  }

  public get buildGroups(): shapes.CodeBuildBuildGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.buildGroups'),
        outputPath: 'buildBatch.buildGroups',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.buildGroups', props);
    return resource.getResponseField('buildBatch.buildGroups') as unknown as shapes.CodeBuildBuildGroup[];
  }

}

export class CodeBuildStopBuildBatchBuildBatchSource extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStopBuildBatchInput) {
    super(scope, id);
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.source.type'),
        outputPath: 'buildBatch.source.type',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.source.type', props);
    return resource.getResponseField('buildBatch.source.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.source.location'),
        outputPath: 'buildBatch.source.location',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.source.location', props);
    return resource.getResponseField('buildBatch.source.location') as unknown as string;
  }

  public get gitCloneDepth(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.source.gitCloneDepth'),
        outputPath: 'buildBatch.source.gitCloneDepth',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.source.gitCloneDepth', props);
    return resource.getResponseField('buildBatch.source.gitCloneDepth') as unknown as number;
  }

  public get gitSubmodulesConfig(): CodeBuildStopBuildBatchBuildBatchSourceGitSubmodulesConfig {
    return new CodeBuildStopBuildBatchBuildBatchSourceGitSubmodulesConfig(this, 'GitSubmodulesConfig', this.__resources, this.input);
  }

  public get buildspec(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.source.buildspec'),
        outputPath: 'buildBatch.source.buildspec',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.source.buildspec', props);
    return resource.getResponseField('buildBatch.source.buildspec') as unknown as string;
  }

  public get auth(): CodeBuildStopBuildBatchBuildBatchSourceAuth {
    return new CodeBuildStopBuildBatchBuildBatchSourceAuth(this, 'Auth', this.__resources, this.input);
  }

  public get reportBuildStatus(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.source.reportBuildStatus'),
        outputPath: 'buildBatch.source.reportBuildStatus',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.source.reportBuildStatus', props);
    return resource.getResponseField('buildBatch.source.reportBuildStatus') as unknown as boolean;
  }

  public get buildStatusConfig(): CodeBuildStopBuildBatchBuildBatchSourceBuildStatusConfig {
    return new CodeBuildStopBuildBatchBuildBatchSourceBuildStatusConfig(this, 'BuildStatusConfig', this.__resources, this.input);
  }

  public get insecureSsl(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.source.insecureSsl'),
        outputPath: 'buildBatch.source.insecureSsl',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.source.insecureSsl', props);
    return resource.getResponseField('buildBatch.source.insecureSsl') as unknown as boolean;
  }

  public get sourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.source.sourceIdentifier'),
        outputPath: 'buildBatch.source.sourceIdentifier',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.source.sourceIdentifier', props);
    return resource.getResponseField('buildBatch.source.sourceIdentifier') as unknown as string;
  }

}

export class CodeBuildStopBuildBatchBuildBatchSourceGitSubmodulesConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStopBuildBatchInput) {
    super(scope, id);
  }

  public get fetchSubmodules(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.source.gitSubmodulesConfig.fetchSubmodules'),
        outputPath: 'buildBatch.source.gitSubmodulesConfig.fetchSubmodules',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.source.gitSubmodulesConfig.fetchSubmodules', props);
    return resource.getResponseField('buildBatch.source.gitSubmodulesConfig.fetchSubmodules') as unknown as boolean;
  }

}

export class CodeBuildStopBuildBatchBuildBatchSourceAuth extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStopBuildBatchInput) {
    super(scope, id);
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.source.auth.type'),
        outputPath: 'buildBatch.source.auth.type',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.source.auth.type', props);
    return resource.getResponseField('buildBatch.source.auth.type') as unknown as string;
  }

  public get resource(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.source.auth.resource'),
        outputPath: 'buildBatch.source.auth.resource',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.source.auth.resource', props);
    return resource.getResponseField('buildBatch.source.auth.resource') as unknown as string;
  }

}

export class CodeBuildStopBuildBatchBuildBatchSourceBuildStatusConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStopBuildBatchInput) {
    super(scope, id);
  }

  public get context(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.source.buildStatusConfig.context'),
        outputPath: 'buildBatch.source.buildStatusConfig.context',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.source.buildStatusConfig.context', props);
    return resource.getResponseField('buildBatch.source.buildStatusConfig.context') as unknown as string;
  }

  public get targetUrl(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.source.buildStatusConfig.targetUrl'),
        outputPath: 'buildBatch.source.buildStatusConfig.targetUrl',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.source.buildStatusConfig.targetUrl', props);
    return resource.getResponseField('buildBatch.source.buildStatusConfig.targetUrl') as unknown as string;
  }

}

export class CodeBuildStopBuildBatchBuildBatchArtifacts extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStopBuildBatchInput) {
    super(scope, id);
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.artifacts.location'),
        outputPath: 'buildBatch.artifacts.location',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.artifacts.location', props);
    return resource.getResponseField('buildBatch.artifacts.location') as unknown as string;
  }

  public get sha256Sum(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.artifacts.sha256sum'),
        outputPath: 'buildBatch.artifacts.sha256sum',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.artifacts.sha256sum', props);
    return resource.getResponseField('buildBatch.artifacts.sha256sum') as unknown as string;
  }

  public get md5Sum(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.artifacts.md5sum'),
        outputPath: 'buildBatch.artifacts.md5sum',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.artifacts.md5sum', props);
    return resource.getResponseField('buildBatch.artifacts.md5sum') as unknown as string;
  }

  public get overrideArtifactName(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.artifacts.overrideArtifactName'),
        outputPath: 'buildBatch.artifacts.overrideArtifactName',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.artifacts.overrideArtifactName', props);
    return resource.getResponseField('buildBatch.artifacts.overrideArtifactName') as unknown as boolean;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.artifacts.encryptionDisabled'),
        outputPath: 'buildBatch.artifacts.encryptionDisabled',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.artifacts.encryptionDisabled', props);
    return resource.getResponseField('buildBatch.artifacts.encryptionDisabled') as unknown as boolean;
  }

  public get artifactIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.artifacts.artifactIdentifier'),
        outputPath: 'buildBatch.artifacts.artifactIdentifier',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.artifacts.artifactIdentifier', props);
    return resource.getResponseField('buildBatch.artifacts.artifactIdentifier') as unknown as string;
  }

}

export class CodeBuildStopBuildBatchBuildBatchCache extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStopBuildBatchInput) {
    super(scope, id);
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.cache.type'),
        outputPath: 'buildBatch.cache.type',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.cache.type', props);
    return resource.getResponseField('buildBatch.cache.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.cache.location'),
        outputPath: 'buildBatch.cache.location',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.cache.location', props);
    return resource.getResponseField('buildBatch.cache.location') as unknown as string;
  }

  public get modes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.cache.modes'),
        outputPath: 'buildBatch.cache.modes',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.cache.modes', props);
    return resource.getResponseField('buildBatch.cache.modes') as unknown as string[];
  }

}

export class CodeBuildStopBuildBatchBuildBatchEnvironment extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStopBuildBatchInput) {
    super(scope, id);
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.environment.type'),
        outputPath: 'buildBatch.environment.type',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.environment.type', props);
    return resource.getResponseField('buildBatch.environment.type') as unknown as string;
  }

  public get image(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.environment.image'),
        outputPath: 'buildBatch.environment.image',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.environment.image', props);
    return resource.getResponseField('buildBatch.environment.image') as unknown as string;
  }

  public get computeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.environment.computeType'),
        outputPath: 'buildBatch.environment.computeType',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.environment.computeType', props);
    return resource.getResponseField('buildBatch.environment.computeType') as unknown as string;
  }

  public get environmentVariables(): shapes.CodeBuildEnvironmentVariable[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.environment.environmentVariables'),
        outputPath: 'buildBatch.environment.environmentVariables',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.environment.environmentVariables', props);
    return resource.getResponseField('buildBatch.environment.environmentVariables') as unknown as shapes.CodeBuildEnvironmentVariable[];
  }

  public get privilegedMode(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.environment.privilegedMode'),
        outputPath: 'buildBatch.environment.privilegedMode',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.environment.privilegedMode', props);
    return resource.getResponseField('buildBatch.environment.privilegedMode') as unknown as boolean;
  }

  public get certificate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.environment.certificate'),
        outputPath: 'buildBatch.environment.certificate',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.environment.certificate', props);
    return resource.getResponseField('buildBatch.environment.certificate') as unknown as string;
  }

  public get registryCredential(): CodeBuildStopBuildBatchBuildBatchEnvironmentRegistryCredential {
    return new CodeBuildStopBuildBatchBuildBatchEnvironmentRegistryCredential(this, 'RegistryCredential', this.__resources, this.input);
  }

  public get imagePullCredentialsType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.environment.imagePullCredentialsType'),
        outputPath: 'buildBatch.environment.imagePullCredentialsType',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.environment.imagePullCredentialsType', props);
    return resource.getResponseField('buildBatch.environment.imagePullCredentialsType') as unknown as string;
  }

}

export class CodeBuildStopBuildBatchBuildBatchEnvironmentRegistryCredential extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStopBuildBatchInput) {
    super(scope, id);
  }

  public get credential(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.environment.registryCredential.credential'),
        outputPath: 'buildBatch.environment.registryCredential.credential',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.environment.registryCredential.credential', props);
    return resource.getResponseField('buildBatch.environment.registryCredential.credential') as unknown as string;
  }

  public get credentialProvider(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.environment.registryCredential.credentialProvider'),
        outputPath: 'buildBatch.environment.registryCredential.credentialProvider',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.environment.registryCredential.credentialProvider', props);
    return resource.getResponseField('buildBatch.environment.registryCredential.credentialProvider') as unknown as string;
  }

}

export class CodeBuildStopBuildBatchBuildBatchLogConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStopBuildBatchInput) {
    super(scope, id);
  }

  public get cloudWatchLogs(): CodeBuildStopBuildBatchBuildBatchLogConfigCloudWatchLogs {
    return new CodeBuildStopBuildBatchBuildBatchLogConfigCloudWatchLogs(this, 'CloudWatchLogs', this.__resources, this.input);
  }

  public get s3Logs(): CodeBuildStopBuildBatchBuildBatchLogConfigS3Logs {
    return new CodeBuildStopBuildBatchBuildBatchLogConfigS3Logs(this, 'S3Logs', this.__resources, this.input);
  }

}

export class CodeBuildStopBuildBatchBuildBatchLogConfigCloudWatchLogs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStopBuildBatchInput) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.logConfig.cloudWatchLogs.status'),
        outputPath: 'buildBatch.logConfig.cloudWatchLogs.status',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.logConfig.cloudWatchLogs.status', props);
    return resource.getResponseField('buildBatch.logConfig.cloudWatchLogs.status') as unknown as string;
  }

  public get groupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.logConfig.cloudWatchLogs.groupName'),
        outputPath: 'buildBatch.logConfig.cloudWatchLogs.groupName',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.logConfig.cloudWatchLogs.groupName', props);
    return resource.getResponseField('buildBatch.logConfig.cloudWatchLogs.groupName') as unknown as string;
  }

  public get streamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.logConfig.cloudWatchLogs.streamName'),
        outputPath: 'buildBatch.logConfig.cloudWatchLogs.streamName',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.logConfig.cloudWatchLogs.streamName', props);
    return resource.getResponseField('buildBatch.logConfig.cloudWatchLogs.streamName') as unknown as string;
  }

}

export class CodeBuildStopBuildBatchBuildBatchLogConfigS3Logs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStopBuildBatchInput) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.logConfig.s3Logs.status'),
        outputPath: 'buildBatch.logConfig.s3Logs.status',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.logConfig.s3Logs.status', props);
    return resource.getResponseField('buildBatch.logConfig.s3Logs.status') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.logConfig.s3Logs.location'),
        outputPath: 'buildBatch.logConfig.s3Logs.location',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.logConfig.s3Logs.location', props);
    return resource.getResponseField('buildBatch.logConfig.s3Logs.location') as unknown as string;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.logConfig.s3Logs.encryptionDisabled'),
        outputPath: 'buildBatch.logConfig.s3Logs.encryptionDisabled',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.logConfig.s3Logs.encryptionDisabled', props);
    return resource.getResponseField('buildBatch.logConfig.s3Logs.encryptionDisabled') as unknown as boolean;
  }

}

export class CodeBuildStopBuildBatchBuildBatchVpcConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStopBuildBatchInput) {
    super(scope, id);
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.vpcConfig.vpcId'),
        outputPath: 'buildBatch.vpcConfig.vpcId',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.vpcConfig.vpcId', props);
    return resource.getResponseField('buildBatch.vpcConfig.vpcId') as unknown as string;
  }

  public get subnets(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.vpcConfig.subnets'),
        outputPath: 'buildBatch.vpcConfig.subnets',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.vpcConfig.subnets', props);
    return resource.getResponseField('buildBatch.vpcConfig.subnets') as unknown as string[];
  }

  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.vpcConfig.securityGroupIds'),
        outputPath: 'buildBatch.vpcConfig.securityGroupIds',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.vpcConfig.securityGroupIds', props);
    return resource.getResponseField('buildBatch.vpcConfig.securityGroupIds') as unknown as string[];
  }

}

export class CodeBuildStopBuildBatchBuildBatchBuildBatchConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStopBuildBatchInput) {
    super(scope, id);
  }

  public get serviceRole(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.buildBatchConfig.serviceRole'),
        outputPath: 'buildBatch.buildBatchConfig.serviceRole',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.buildBatchConfig.serviceRole', props);
    return resource.getResponseField('buildBatch.buildBatchConfig.serviceRole') as unknown as string;
  }

  public get combineArtifacts(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.buildBatchConfig.combineArtifacts'),
        outputPath: 'buildBatch.buildBatchConfig.combineArtifacts',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.buildBatchConfig.combineArtifacts', props);
    return resource.getResponseField('buildBatch.buildBatchConfig.combineArtifacts') as unknown as boolean;
  }

  public get restrictions(): CodeBuildStopBuildBatchBuildBatchBuildBatchConfigRestrictions {
    return new CodeBuildStopBuildBatchBuildBatchBuildBatchConfigRestrictions(this, 'Restrictions', this.__resources, this.input);
  }

  public get timeoutInMins(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.buildBatchConfig.timeoutInMins'),
        outputPath: 'buildBatch.buildBatchConfig.timeoutInMins',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.buildBatchConfig.timeoutInMins', props);
    return resource.getResponseField('buildBatch.buildBatchConfig.timeoutInMins') as unknown as number;
  }

}

export class CodeBuildStopBuildBatchBuildBatchBuildBatchConfigRestrictions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildStopBuildBatchInput) {
    super(scope, id);
  }

  public get maximumBuildsAllowed(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.buildBatchConfig.restrictions.maximumBuildsAllowed'),
        outputPath: 'buildBatch.buildBatchConfig.restrictions.maximumBuildsAllowed',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.buildBatchConfig.restrictions.maximumBuildsAllowed', props);
    return resource.getResponseField('buildBatch.buildBatchConfig.restrictions.maximumBuildsAllowed') as unknown as number;
  }

  public get computeTypesAllowed(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.buildBatchConfig.restrictions.computeTypesAllowed'),
        outputPath: 'buildBatch.buildBatchConfig.restrictions.computeTypesAllowed',
        parameters: {
          id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopBuildBatch.buildBatch.buildBatchConfig.restrictions.computeTypesAllowed', props);
    return resource.getResponseField('buildBatch.buildBatchConfig.restrictions.computeTypesAllowed') as unknown as string[];
  }

}

export class CodeBuildUpdateProject extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildUpdateProjectInput) {
    super(scope, id);
  }

  public get project(): CodeBuildUpdateProjectProject {
    return new CodeBuildUpdateProjectProject(this, 'Project', this.__resources, this.input);
  }

}

export class CodeBuildUpdateProjectProject extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildUpdateProjectInput) {
    super(scope, id);
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.name'),
        outputPath: 'project.name',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.name', props);
    return resource.getResponseField('project.name') as unknown as string;
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.arn'),
        outputPath: 'project.arn',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.arn', props);
    return resource.getResponseField('project.arn') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.description'),
        outputPath: 'project.description',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.description', props);
    return resource.getResponseField('project.description') as unknown as string;
  }

  public get source(): CodeBuildUpdateProjectProjectSource {
    return new CodeBuildUpdateProjectProjectSource(this, 'Source', this.__resources, this.input);
  }

  public get secondarySources(): shapes.CodeBuildProjectSource[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.secondarySources'),
        outputPath: 'project.secondarySources',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.secondarySources', props);
    return resource.getResponseField('project.secondarySources') as unknown as shapes.CodeBuildProjectSource[];
  }

  public get sourceVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.sourceVersion'),
        outputPath: 'project.sourceVersion',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.sourceVersion', props);
    return resource.getResponseField('project.sourceVersion') as unknown as string;
  }

  public get secondarySourceVersions(): shapes.CodeBuildProjectSourceVersion[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.secondarySourceVersions'),
        outputPath: 'project.secondarySourceVersions',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.secondarySourceVersions', props);
    return resource.getResponseField('project.secondarySourceVersions') as unknown as shapes.CodeBuildProjectSourceVersion[];
  }

  public get artifacts(): CodeBuildUpdateProjectProjectArtifacts {
    return new CodeBuildUpdateProjectProjectArtifacts(this, 'Artifacts', this.__resources, this.input);
  }

  public get secondaryArtifacts(): shapes.CodeBuildProjectArtifacts[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.secondaryArtifacts'),
        outputPath: 'project.secondaryArtifacts',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.secondaryArtifacts', props);
    return resource.getResponseField('project.secondaryArtifacts') as unknown as shapes.CodeBuildProjectArtifacts[];
  }

  public get cache(): CodeBuildUpdateProjectProjectCache {
    return new CodeBuildUpdateProjectProjectCache(this, 'Cache', this.__resources, this.input);
  }

  public get environment(): CodeBuildUpdateProjectProjectEnvironment {
    return new CodeBuildUpdateProjectProjectEnvironment(this, 'Environment', this.__resources, this.input);
  }

  public get serviceRole(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.serviceRole'),
        outputPath: 'project.serviceRole',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.serviceRole', props);
    return resource.getResponseField('project.serviceRole') as unknown as string;
  }

  public get timeoutInMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.timeoutInMinutes'),
        outputPath: 'project.timeoutInMinutes',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.timeoutInMinutes', props);
    return resource.getResponseField('project.timeoutInMinutes') as unknown as number;
  }

  public get queuedTimeoutInMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.queuedTimeoutInMinutes'),
        outputPath: 'project.queuedTimeoutInMinutes',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.queuedTimeoutInMinutes', props);
    return resource.getResponseField('project.queuedTimeoutInMinutes') as unknown as number;
  }

  public get encryptionKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.encryptionKey'),
        outputPath: 'project.encryptionKey',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.encryptionKey', props);
    return resource.getResponseField('project.encryptionKey') as unknown as string;
  }

  public get tags(): shapes.CodeBuildTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.tags'),
        outputPath: 'project.tags',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.tags', props);
    return resource.getResponseField('project.tags') as unknown as shapes.CodeBuildTag[];
  }

  public get created(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.created'),
        outputPath: 'project.created',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.created', props);
    return resource.getResponseField('project.created') as unknown as string;
  }

  public get lastModified(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.lastModified'),
        outputPath: 'project.lastModified',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.lastModified', props);
    return resource.getResponseField('project.lastModified') as unknown as string;
  }

  public get webhook(): CodeBuildUpdateProjectProjectWebhook {
    return new CodeBuildUpdateProjectProjectWebhook(this, 'Webhook', this.__resources, this.input);
  }

  public get vpcConfig(): CodeBuildUpdateProjectProjectVpcConfig {
    return new CodeBuildUpdateProjectProjectVpcConfig(this, 'VpcConfig', this.__resources, this.input);
  }

  public get badge(): CodeBuildUpdateProjectProjectBadge {
    return new CodeBuildUpdateProjectProjectBadge(this, 'Badge', this.__resources, this.input);
  }

  public get logsConfig(): CodeBuildUpdateProjectProjectLogsConfig {
    return new CodeBuildUpdateProjectProjectLogsConfig(this, 'LogsConfig', this.__resources, this.input);
  }

  public get fileSystemLocations(): shapes.CodeBuildProjectFileSystemLocation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.fileSystemLocations'),
        outputPath: 'project.fileSystemLocations',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.fileSystemLocations', props);
    return resource.getResponseField('project.fileSystemLocations') as unknown as shapes.CodeBuildProjectFileSystemLocation[];
  }

  public get buildBatchConfig(): CodeBuildUpdateProjectProjectBuildBatchConfig {
    return new CodeBuildUpdateProjectProjectBuildBatchConfig(this, 'BuildBatchConfig', this.__resources, this.input);
  }

}

export class CodeBuildUpdateProjectProjectSource extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildUpdateProjectInput) {
    super(scope, id);
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.source.type'),
        outputPath: 'project.source.type',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.source.type', props);
    return resource.getResponseField('project.source.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.source.location'),
        outputPath: 'project.source.location',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.source.location', props);
    return resource.getResponseField('project.source.location') as unknown as string;
  }

  public get gitCloneDepth(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.source.gitCloneDepth'),
        outputPath: 'project.source.gitCloneDepth',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.source.gitCloneDepth', props);
    return resource.getResponseField('project.source.gitCloneDepth') as unknown as number;
  }

  public get gitSubmodulesConfig(): CodeBuildUpdateProjectProjectSourceGitSubmodulesConfig {
    return new CodeBuildUpdateProjectProjectSourceGitSubmodulesConfig(this, 'GitSubmodulesConfig', this.__resources, this.input);
  }

  public get buildspec(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.source.buildspec'),
        outputPath: 'project.source.buildspec',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.source.buildspec', props);
    return resource.getResponseField('project.source.buildspec') as unknown as string;
  }

  public get auth(): CodeBuildUpdateProjectProjectSourceAuth {
    return new CodeBuildUpdateProjectProjectSourceAuth(this, 'Auth', this.__resources, this.input);
  }

  public get reportBuildStatus(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.source.reportBuildStatus'),
        outputPath: 'project.source.reportBuildStatus',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.source.reportBuildStatus', props);
    return resource.getResponseField('project.source.reportBuildStatus') as unknown as boolean;
  }

  public get buildStatusConfig(): CodeBuildUpdateProjectProjectSourceBuildStatusConfig {
    return new CodeBuildUpdateProjectProjectSourceBuildStatusConfig(this, 'BuildStatusConfig', this.__resources, this.input);
  }

  public get insecureSsl(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.source.insecureSsl'),
        outputPath: 'project.source.insecureSsl',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.source.insecureSsl', props);
    return resource.getResponseField('project.source.insecureSsl') as unknown as boolean;
  }

  public get sourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.source.sourceIdentifier'),
        outputPath: 'project.source.sourceIdentifier',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.source.sourceIdentifier', props);
    return resource.getResponseField('project.source.sourceIdentifier') as unknown as string;
  }

}

export class CodeBuildUpdateProjectProjectSourceGitSubmodulesConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildUpdateProjectInput) {
    super(scope, id);
  }

  public get fetchSubmodules(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.source.gitSubmodulesConfig.fetchSubmodules'),
        outputPath: 'project.source.gitSubmodulesConfig.fetchSubmodules',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.source.gitSubmodulesConfig.fetchSubmodules', props);
    return resource.getResponseField('project.source.gitSubmodulesConfig.fetchSubmodules') as unknown as boolean;
  }

}

export class CodeBuildUpdateProjectProjectSourceAuth extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildUpdateProjectInput) {
    super(scope, id);
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.source.auth.type'),
        outputPath: 'project.source.auth.type',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.source.auth.type', props);
    return resource.getResponseField('project.source.auth.type') as unknown as string;
  }

  public get resource(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.source.auth.resource'),
        outputPath: 'project.source.auth.resource',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.source.auth.resource', props);
    return resource.getResponseField('project.source.auth.resource') as unknown as string;
  }

}

export class CodeBuildUpdateProjectProjectSourceBuildStatusConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildUpdateProjectInput) {
    super(scope, id);
  }

  public get context(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.source.buildStatusConfig.context'),
        outputPath: 'project.source.buildStatusConfig.context',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.source.buildStatusConfig.context', props);
    return resource.getResponseField('project.source.buildStatusConfig.context') as unknown as string;
  }

  public get targetUrl(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.source.buildStatusConfig.targetUrl'),
        outputPath: 'project.source.buildStatusConfig.targetUrl',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.source.buildStatusConfig.targetUrl', props);
    return resource.getResponseField('project.source.buildStatusConfig.targetUrl') as unknown as string;
  }

}

export class CodeBuildUpdateProjectProjectArtifacts extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildUpdateProjectInput) {
    super(scope, id);
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.artifacts.type'),
        outputPath: 'project.artifacts.type',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.artifacts.type', props);
    return resource.getResponseField('project.artifacts.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.artifacts.location'),
        outputPath: 'project.artifacts.location',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.artifacts.location', props);
    return resource.getResponseField('project.artifacts.location') as unknown as string;
  }

  public get path(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.artifacts.path'),
        outputPath: 'project.artifacts.path',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.artifacts.path', props);
    return resource.getResponseField('project.artifacts.path') as unknown as string;
  }

  public get namespaceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.artifacts.namespaceType'),
        outputPath: 'project.artifacts.namespaceType',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.artifacts.namespaceType', props);
    return resource.getResponseField('project.artifacts.namespaceType') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.artifacts.name'),
        outputPath: 'project.artifacts.name',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.artifacts.name', props);
    return resource.getResponseField('project.artifacts.name') as unknown as string;
  }

  public get packaging(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.artifacts.packaging'),
        outputPath: 'project.artifacts.packaging',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.artifacts.packaging', props);
    return resource.getResponseField('project.artifacts.packaging') as unknown as string;
  }

  public get overrideArtifactName(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.artifacts.overrideArtifactName'),
        outputPath: 'project.artifacts.overrideArtifactName',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.artifacts.overrideArtifactName', props);
    return resource.getResponseField('project.artifacts.overrideArtifactName') as unknown as boolean;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.artifacts.encryptionDisabled'),
        outputPath: 'project.artifacts.encryptionDisabled',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.artifacts.encryptionDisabled', props);
    return resource.getResponseField('project.artifacts.encryptionDisabled') as unknown as boolean;
  }

  public get artifactIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.artifacts.artifactIdentifier'),
        outputPath: 'project.artifacts.artifactIdentifier',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.artifacts.artifactIdentifier', props);
    return resource.getResponseField('project.artifacts.artifactIdentifier') as unknown as string;
  }

}

export class CodeBuildUpdateProjectProjectCache extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildUpdateProjectInput) {
    super(scope, id);
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.cache.type'),
        outputPath: 'project.cache.type',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.cache.type', props);
    return resource.getResponseField('project.cache.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.cache.location'),
        outputPath: 'project.cache.location',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.cache.location', props);
    return resource.getResponseField('project.cache.location') as unknown as string;
  }

  public get modes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.cache.modes'),
        outputPath: 'project.cache.modes',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.cache.modes', props);
    return resource.getResponseField('project.cache.modes') as unknown as string[];
  }

}

export class CodeBuildUpdateProjectProjectEnvironment extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildUpdateProjectInput) {
    super(scope, id);
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.environment.type'),
        outputPath: 'project.environment.type',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.environment.type', props);
    return resource.getResponseField('project.environment.type') as unknown as string;
  }

  public get image(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.environment.image'),
        outputPath: 'project.environment.image',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.environment.image', props);
    return resource.getResponseField('project.environment.image') as unknown as string;
  }

  public get computeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.environment.computeType'),
        outputPath: 'project.environment.computeType',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.environment.computeType', props);
    return resource.getResponseField('project.environment.computeType') as unknown as string;
  }

  public get environmentVariables(): shapes.CodeBuildEnvironmentVariable[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.environment.environmentVariables'),
        outputPath: 'project.environment.environmentVariables',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.environment.environmentVariables', props);
    return resource.getResponseField('project.environment.environmentVariables') as unknown as shapes.CodeBuildEnvironmentVariable[];
  }

  public get privilegedMode(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.environment.privilegedMode'),
        outputPath: 'project.environment.privilegedMode',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.environment.privilegedMode', props);
    return resource.getResponseField('project.environment.privilegedMode') as unknown as boolean;
  }

  public get certificate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.environment.certificate'),
        outputPath: 'project.environment.certificate',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.environment.certificate', props);
    return resource.getResponseField('project.environment.certificate') as unknown as string;
  }

  public get registryCredential(): CodeBuildUpdateProjectProjectEnvironmentRegistryCredential {
    return new CodeBuildUpdateProjectProjectEnvironmentRegistryCredential(this, 'RegistryCredential', this.__resources, this.input);
  }

  public get imagePullCredentialsType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.environment.imagePullCredentialsType'),
        outputPath: 'project.environment.imagePullCredentialsType',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.environment.imagePullCredentialsType', props);
    return resource.getResponseField('project.environment.imagePullCredentialsType') as unknown as string;
  }

}

export class CodeBuildUpdateProjectProjectEnvironmentRegistryCredential extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildUpdateProjectInput) {
    super(scope, id);
  }

  public get credential(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.environment.registryCredential.credential'),
        outputPath: 'project.environment.registryCredential.credential',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.environment.registryCredential.credential', props);
    return resource.getResponseField('project.environment.registryCredential.credential') as unknown as string;
  }

  public get credentialProvider(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.environment.registryCredential.credentialProvider'),
        outputPath: 'project.environment.registryCredential.credentialProvider',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.environment.registryCredential.credentialProvider', props);
    return resource.getResponseField('project.environment.registryCredential.credentialProvider') as unknown as string;
  }

}

export class CodeBuildUpdateProjectProjectWebhook extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildUpdateProjectInput) {
    super(scope, id);
  }

  public get url(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.webhook.url'),
        outputPath: 'project.webhook.url',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.webhook.url', props);
    return resource.getResponseField('project.webhook.url') as unknown as string;
  }

  public get payloadUrl(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.webhook.payloadUrl'),
        outputPath: 'project.webhook.payloadUrl',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.webhook.payloadUrl', props);
    return resource.getResponseField('project.webhook.payloadUrl') as unknown as string;
  }

  public get secret(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.webhook.secret'),
        outputPath: 'project.webhook.secret',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.webhook.secret', props);
    return resource.getResponseField('project.webhook.secret') as unknown as string;
  }

  public get branchFilter(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.webhook.branchFilter'),
        outputPath: 'project.webhook.branchFilter',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.webhook.branchFilter', props);
    return resource.getResponseField('project.webhook.branchFilter') as unknown as string;
  }

  public get filterGroups(): shapes.CodeBuildWebhookFilter[][] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.webhook.filterGroups'),
        outputPath: 'project.webhook.filterGroups',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.webhook.filterGroups', props);
    return resource.getResponseField('project.webhook.filterGroups') as unknown as shapes.CodeBuildWebhookFilter[][];
  }

  public get buildType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.webhook.buildType'),
        outputPath: 'project.webhook.buildType',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.webhook.buildType', props);
    return resource.getResponseField('project.webhook.buildType') as unknown as string;
  }

  public get lastModifiedSecret(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.webhook.lastModifiedSecret'),
        outputPath: 'project.webhook.lastModifiedSecret',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.webhook.lastModifiedSecret', props);
    return resource.getResponseField('project.webhook.lastModifiedSecret') as unknown as string;
  }

}

export class CodeBuildUpdateProjectProjectVpcConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildUpdateProjectInput) {
    super(scope, id);
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.vpcConfig.vpcId'),
        outputPath: 'project.vpcConfig.vpcId',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.vpcConfig.vpcId', props);
    return resource.getResponseField('project.vpcConfig.vpcId') as unknown as string;
  }

  public get subnets(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.vpcConfig.subnets'),
        outputPath: 'project.vpcConfig.subnets',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.vpcConfig.subnets', props);
    return resource.getResponseField('project.vpcConfig.subnets') as unknown as string[];
  }

  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.vpcConfig.securityGroupIds'),
        outputPath: 'project.vpcConfig.securityGroupIds',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.vpcConfig.securityGroupIds', props);
    return resource.getResponseField('project.vpcConfig.securityGroupIds') as unknown as string[];
  }

}

export class CodeBuildUpdateProjectProjectBadge extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildUpdateProjectInput) {
    super(scope, id);
  }

  public get badgeEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.badge.badgeEnabled'),
        outputPath: 'project.badge.badgeEnabled',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.badge.badgeEnabled', props);
    return resource.getResponseField('project.badge.badgeEnabled') as unknown as boolean;
  }

  public get badgeRequestUrl(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.badge.badgeRequestUrl'),
        outputPath: 'project.badge.badgeRequestUrl',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.badge.badgeRequestUrl', props);
    return resource.getResponseField('project.badge.badgeRequestUrl') as unknown as string;
  }

}

export class CodeBuildUpdateProjectProjectLogsConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildUpdateProjectInput) {
    super(scope, id);
  }

  public get cloudWatchLogs(): CodeBuildUpdateProjectProjectLogsConfigCloudWatchLogs {
    return new CodeBuildUpdateProjectProjectLogsConfigCloudWatchLogs(this, 'CloudWatchLogs', this.__resources, this.input);
  }

  public get s3Logs(): CodeBuildUpdateProjectProjectLogsConfigS3Logs {
    return new CodeBuildUpdateProjectProjectLogsConfigS3Logs(this, 'S3Logs', this.__resources, this.input);
  }

}

export class CodeBuildUpdateProjectProjectLogsConfigCloudWatchLogs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildUpdateProjectInput) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.logsConfig.cloudWatchLogs.status'),
        outputPath: 'project.logsConfig.cloudWatchLogs.status',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.logsConfig.cloudWatchLogs.status', props);
    return resource.getResponseField('project.logsConfig.cloudWatchLogs.status') as unknown as string;
  }

  public get groupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.logsConfig.cloudWatchLogs.groupName'),
        outputPath: 'project.logsConfig.cloudWatchLogs.groupName',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.logsConfig.cloudWatchLogs.groupName', props);
    return resource.getResponseField('project.logsConfig.cloudWatchLogs.groupName') as unknown as string;
  }

  public get streamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.logsConfig.cloudWatchLogs.streamName'),
        outputPath: 'project.logsConfig.cloudWatchLogs.streamName',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.logsConfig.cloudWatchLogs.streamName', props);
    return resource.getResponseField('project.logsConfig.cloudWatchLogs.streamName') as unknown as string;
  }

}

export class CodeBuildUpdateProjectProjectLogsConfigS3Logs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildUpdateProjectInput) {
    super(scope, id);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.logsConfig.s3Logs.status'),
        outputPath: 'project.logsConfig.s3Logs.status',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.logsConfig.s3Logs.status', props);
    return resource.getResponseField('project.logsConfig.s3Logs.status') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.logsConfig.s3Logs.location'),
        outputPath: 'project.logsConfig.s3Logs.location',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.logsConfig.s3Logs.location', props);
    return resource.getResponseField('project.logsConfig.s3Logs.location') as unknown as string;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.logsConfig.s3Logs.encryptionDisabled'),
        outputPath: 'project.logsConfig.s3Logs.encryptionDisabled',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.logsConfig.s3Logs.encryptionDisabled', props);
    return resource.getResponseField('project.logsConfig.s3Logs.encryptionDisabled') as unknown as boolean;
  }

}

export class CodeBuildUpdateProjectProjectBuildBatchConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildUpdateProjectInput) {
    super(scope, id);
  }

  public get serviceRole(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.buildBatchConfig.serviceRole'),
        outputPath: 'project.buildBatchConfig.serviceRole',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.buildBatchConfig.serviceRole', props);
    return resource.getResponseField('project.buildBatchConfig.serviceRole') as unknown as string;
  }

  public get combineArtifacts(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.buildBatchConfig.combineArtifacts'),
        outputPath: 'project.buildBatchConfig.combineArtifacts',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.buildBatchConfig.combineArtifacts', props);
    return resource.getResponseField('project.buildBatchConfig.combineArtifacts') as unknown as boolean;
  }

  public get restrictions(): CodeBuildUpdateProjectProjectBuildBatchConfigRestrictions {
    return new CodeBuildUpdateProjectProjectBuildBatchConfigRestrictions(this, 'Restrictions', this.__resources, this.input);
  }

  public get timeoutInMins(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.buildBatchConfig.timeoutInMins'),
        outputPath: 'project.buildBatchConfig.timeoutInMins',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.buildBatchConfig.timeoutInMins', props);
    return resource.getResponseField('project.buildBatchConfig.timeoutInMins') as unknown as number;
  }

}

export class CodeBuildUpdateProjectProjectBuildBatchConfigRestrictions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildUpdateProjectInput) {
    super(scope, id);
  }

  public get maximumBuildsAllowed(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.buildBatchConfig.restrictions.maximumBuildsAllowed'),
        outputPath: 'project.buildBatchConfig.restrictions.maximumBuildsAllowed',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.buildBatchConfig.restrictions.maximumBuildsAllowed', props);
    return resource.getResponseField('project.buildBatchConfig.restrictions.maximumBuildsAllowed') as unknown as number;
  }

  public get computeTypesAllowed(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.buildBatchConfig.restrictions.computeTypesAllowed'),
        outputPath: 'project.buildBatchConfig.restrictions.computeTypesAllowed',
        parameters: {
          name: this.input.name,
          description: this.input.description,
          source: {
            type: this.input.source?.type,
            location: this.input.source?.location,
            gitCloneDepth: this.input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.input.source?.buildspec,
            auth: {
              type: this.input.source?.auth?.type,
              resource: this.input.source?.auth?.resource,
            },
            reportBuildStatus: this.input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.input.source?.buildStatusConfig?.context,
              targetUrl: this.input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.input.source?.insecureSsl,
            sourceIdentifier: this.input.source?.sourceIdentifier,
          },
          secondarySources: this.input.secondarySources,
          sourceVersion: this.input.sourceVersion,
          secondarySourceVersions: this.input.secondarySourceVersions,
          artifacts: {
            type: this.input.artifacts?.type,
            location: this.input.artifacts?.location,
            path: this.input.artifacts?.path,
            namespaceType: this.input.artifacts?.namespaceType,
            name: this.input.artifacts?.name,
            packaging: this.input.artifacts?.packaging,
            overrideArtifactName: this.input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.input.artifacts?.artifactIdentifier,
          },
          secondaryArtifacts: this.input.secondaryArtifacts,
          cache: {
            type: this.input.cache?.type,
            location: this.input.cache?.location,
            modes: this.input.cache?.modes,
          },
          environment: {
            type: this.input.environment?.type,
            image: this.input.environment?.image,
            computeType: this.input.environment?.computeType,
            environmentVariables: this.input.environment?.environmentVariables,
            privilegedMode: this.input.environment?.privilegedMode,
            certificate: this.input.environment?.certificate,
            registryCredential: {
              credential: this.input.environment?.registryCredential?.credential,
              credentialProvider: this.input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.input.serviceRole,
          timeoutInMinutes: this.input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.input.queuedTimeoutInMinutes,
          encryptionKey: this.input.encryptionKey,
          tags: this.input.tags,
          vpcConfig: {
            vpcId: this.input.vpcConfig?.vpcId,
            subnets: this.input.vpcConfig?.subnets,
            securityGroupIds: this.input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.input.logsConfig?.s3Logs?.status,
              location: this.input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.input.logsConfig?.s3Logs?.encryptionDisabled,
            },
          },
          fileSystemLocations: this.input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.input.buildBatchConfig?.timeoutInMins,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateProject.project.buildBatchConfig.restrictions.computeTypesAllowed', props);
    return resource.getResponseField('project.buildBatchConfig.restrictions.computeTypesAllowed') as unknown as string[];
  }

}

export class CodeBuildUpdateReportGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildUpdateReportGroupInput) {
    super(scope, id);
  }

  public get reportGroup(): CodeBuildUpdateReportGroupReportGroup {
    return new CodeBuildUpdateReportGroupReportGroup(this, 'ReportGroup', this.__resources, this.input);
  }

}

export class CodeBuildUpdateReportGroupReportGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildUpdateReportGroupInput) {
    super(scope, id);
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateReportGroup.reportGroup.arn'),
        outputPath: 'reportGroup.arn',
        parameters: {
          arn: this.input.arn,
          exportConfig: {
            exportConfigType: this.input.exportConfig?.exportConfigType,
            s3Destination: {
              bucket: this.input.exportConfig?.s3Destination?.bucket,
              path: this.input.exportConfig?.s3Destination?.path,
              packaging: this.input.exportConfig?.s3Destination?.packaging,
              encryptionKey: this.input.exportConfig?.s3Destination?.encryptionKey,
              encryptionDisabled: this.input.exportConfig?.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateReportGroup.reportGroup.arn', props);
    return resource.getResponseField('reportGroup.arn') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateReportGroup.reportGroup.name'),
        outputPath: 'reportGroup.name',
        parameters: {
          arn: this.input.arn,
          exportConfig: {
            exportConfigType: this.input.exportConfig?.exportConfigType,
            s3Destination: {
              bucket: this.input.exportConfig?.s3Destination?.bucket,
              path: this.input.exportConfig?.s3Destination?.path,
              packaging: this.input.exportConfig?.s3Destination?.packaging,
              encryptionKey: this.input.exportConfig?.s3Destination?.encryptionKey,
              encryptionDisabled: this.input.exportConfig?.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateReportGroup.reportGroup.name', props);
    return resource.getResponseField('reportGroup.name') as unknown as string;
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateReportGroup.reportGroup.type'),
        outputPath: 'reportGroup.type',
        parameters: {
          arn: this.input.arn,
          exportConfig: {
            exportConfigType: this.input.exportConfig?.exportConfigType,
            s3Destination: {
              bucket: this.input.exportConfig?.s3Destination?.bucket,
              path: this.input.exportConfig?.s3Destination?.path,
              packaging: this.input.exportConfig?.s3Destination?.packaging,
              encryptionKey: this.input.exportConfig?.s3Destination?.encryptionKey,
              encryptionDisabled: this.input.exportConfig?.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateReportGroup.reportGroup.type', props);
    return resource.getResponseField('reportGroup.type') as unknown as string;
  }

  public get exportConfig(): CodeBuildUpdateReportGroupReportGroupExportConfig {
    return new CodeBuildUpdateReportGroupReportGroupExportConfig(this, 'ExportConfig', this.__resources, this.input);
  }

  public get created(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateReportGroup.reportGroup.created'),
        outputPath: 'reportGroup.created',
        parameters: {
          arn: this.input.arn,
          exportConfig: {
            exportConfigType: this.input.exportConfig?.exportConfigType,
            s3Destination: {
              bucket: this.input.exportConfig?.s3Destination?.bucket,
              path: this.input.exportConfig?.s3Destination?.path,
              packaging: this.input.exportConfig?.s3Destination?.packaging,
              encryptionKey: this.input.exportConfig?.s3Destination?.encryptionKey,
              encryptionDisabled: this.input.exportConfig?.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateReportGroup.reportGroup.created', props);
    return resource.getResponseField('reportGroup.created') as unknown as string;
  }

  public get lastModified(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateReportGroup.reportGroup.lastModified'),
        outputPath: 'reportGroup.lastModified',
        parameters: {
          arn: this.input.arn,
          exportConfig: {
            exportConfigType: this.input.exportConfig?.exportConfigType,
            s3Destination: {
              bucket: this.input.exportConfig?.s3Destination?.bucket,
              path: this.input.exportConfig?.s3Destination?.path,
              packaging: this.input.exportConfig?.s3Destination?.packaging,
              encryptionKey: this.input.exportConfig?.s3Destination?.encryptionKey,
              encryptionDisabled: this.input.exportConfig?.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateReportGroup.reportGroup.lastModified', props);
    return resource.getResponseField('reportGroup.lastModified') as unknown as string;
  }

  public get tags(): shapes.CodeBuildTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateReportGroup.reportGroup.tags'),
        outputPath: 'reportGroup.tags',
        parameters: {
          arn: this.input.arn,
          exportConfig: {
            exportConfigType: this.input.exportConfig?.exportConfigType,
            s3Destination: {
              bucket: this.input.exportConfig?.s3Destination?.bucket,
              path: this.input.exportConfig?.s3Destination?.path,
              packaging: this.input.exportConfig?.s3Destination?.packaging,
              encryptionKey: this.input.exportConfig?.s3Destination?.encryptionKey,
              encryptionDisabled: this.input.exportConfig?.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateReportGroup.reportGroup.tags', props);
    return resource.getResponseField('reportGroup.tags') as unknown as shapes.CodeBuildTag[];
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateReportGroup.reportGroup.status'),
        outputPath: 'reportGroup.status',
        parameters: {
          arn: this.input.arn,
          exportConfig: {
            exportConfigType: this.input.exportConfig?.exportConfigType,
            s3Destination: {
              bucket: this.input.exportConfig?.s3Destination?.bucket,
              path: this.input.exportConfig?.s3Destination?.path,
              packaging: this.input.exportConfig?.s3Destination?.packaging,
              encryptionKey: this.input.exportConfig?.s3Destination?.encryptionKey,
              encryptionDisabled: this.input.exportConfig?.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateReportGroup.reportGroup.status', props);
    return resource.getResponseField('reportGroup.status') as unknown as string;
  }

}

export class CodeBuildUpdateReportGroupReportGroupExportConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildUpdateReportGroupInput) {
    super(scope, id);
  }

  public get exportConfigType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateReportGroup.reportGroup.exportConfig.exportConfigType'),
        outputPath: 'reportGroup.exportConfig.exportConfigType',
        parameters: {
          arn: this.input.arn,
          exportConfig: {
            exportConfigType: this.input.exportConfig?.exportConfigType,
            s3Destination: {
              bucket: this.input.exportConfig?.s3Destination?.bucket,
              path: this.input.exportConfig?.s3Destination?.path,
              packaging: this.input.exportConfig?.s3Destination?.packaging,
              encryptionKey: this.input.exportConfig?.s3Destination?.encryptionKey,
              encryptionDisabled: this.input.exportConfig?.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateReportGroup.reportGroup.exportConfig.exportConfigType', props);
    return resource.getResponseField('reportGroup.exportConfig.exportConfigType') as unknown as string;
  }

  public get s3Destination(): CodeBuildUpdateReportGroupReportGroupExportConfigS3Destination {
    return new CodeBuildUpdateReportGroupReportGroupExportConfigS3Destination(this, 'S3Destination', this.__resources, this.input);
  }

}

export class CodeBuildUpdateReportGroupReportGroupExportConfigS3Destination extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildUpdateReportGroupInput) {
    super(scope, id);
  }

  public get bucket(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateReportGroup.reportGroup.exportConfig.s3Destination.bucket'),
        outputPath: 'reportGroup.exportConfig.s3Destination.bucket',
        parameters: {
          arn: this.input.arn,
          exportConfig: {
            exportConfigType: this.input.exportConfig?.exportConfigType,
            s3Destination: {
              bucket: this.input.exportConfig?.s3Destination?.bucket,
              path: this.input.exportConfig?.s3Destination?.path,
              packaging: this.input.exportConfig?.s3Destination?.packaging,
              encryptionKey: this.input.exportConfig?.s3Destination?.encryptionKey,
              encryptionDisabled: this.input.exportConfig?.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateReportGroup.reportGroup.exportConfig.s3Destination.bucket', props);
    return resource.getResponseField('reportGroup.exportConfig.s3Destination.bucket') as unknown as string;
  }

  public get path(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateReportGroup.reportGroup.exportConfig.s3Destination.path'),
        outputPath: 'reportGroup.exportConfig.s3Destination.path',
        parameters: {
          arn: this.input.arn,
          exportConfig: {
            exportConfigType: this.input.exportConfig?.exportConfigType,
            s3Destination: {
              bucket: this.input.exportConfig?.s3Destination?.bucket,
              path: this.input.exportConfig?.s3Destination?.path,
              packaging: this.input.exportConfig?.s3Destination?.packaging,
              encryptionKey: this.input.exportConfig?.s3Destination?.encryptionKey,
              encryptionDisabled: this.input.exportConfig?.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateReportGroup.reportGroup.exportConfig.s3Destination.path', props);
    return resource.getResponseField('reportGroup.exportConfig.s3Destination.path') as unknown as string;
  }

  public get packaging(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateReportGroup.reportGroup.exportConfig.s3Destination.packaging'),
        outputPath: 'reportGroup.exportConfig.s3Destination.packaging',
        parameters: {
          arn: this.input.arn,
          exportConfig: {
            exportConfigType: this.input.exportConfig?.exportConfigType,
            s3Destination: {
              bucket: this.input.exportConfig?.s3Destination?.bucket,
              path: this.input.exportConfig?.s3Destination?.path,
              packaging: this.input.exportConfig?.s3Destination?.packaging,
              encryptionKey: this.input.exportConfig?.s3Destination?.encryptionKey,
              encryptionDisabled: this.input.exportConfig?.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateReportGroup.reportGroup.exportConfig.s3Destination.packaging', props);
    return resource.getResponseField('reportGroup.exportConfig.s3Destination.packaging') as unknown as string;
  }

  public get encryptionKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateReportGroup.reportGroup.exportConfig.s3Destination.encryptionKey'),
        outputPath: 'reportGroup.exportConfig.s3Destination.encryptionKey',
        parameters: {
          arn: this.input.arn,
          exportConfig: {
            exportConfigType: this.input.exportConfig?.exportConfigType,
            s3Destination: {
              bucket: this.input.exportConfig?.s3Destination?.bucket,
              path: this.input.exportConfig?.s3Destination?.path,
              packaging: this.input.exportConfig?.s3Destination?.packaging,
              encryptionKey: this.input.exportConfig?.s3Destination?.encryptionKey,
              encryptionDisabled: this.input.exportConfig?.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateReportGroup.reportGroup.exportConfig.s3Destination.encryptionKey', props);
    return resource.getResponseField('reportGroup.exportConfig.s3Destination.encryptionKey') as unknown as string;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateReportGroup.reportGroup.exportConfig.s3Destination.encryptionDisabled'),
        outputPath: 'reportGroup.exportConfig.s3Destination.encryptionDisabled',
        parameters: {
          arn: this.input.arn,
          exportConfig: {
            exportConfigType: this.input.exportConfig?.exportConfigType,
            s3Destination: {
              bucket: this.input.exportConfig?.s3Destination?.bucket,
              path: this.input.exportConfig?.s3Destination?.path,
              packaging: this.input.exportConfig?.s3Destination?.packaging,
              encryptionKey: this.input.exportConfig?.s3Destination?.encryptionKey,
              encryptionDisabled: this.input.exportConfig?.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateReportGroup.reportGroup.exportConfig.s3Destination.encryptionDisabled', props);
    return resource.getResponseField('reportGroup.exportConfig.s3Destination.encryptionDisabled') as unknown as boolean;
  }

}

export class CodeBuildUpdateWebhook extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildUpdateWebhookInput) {
    super(scope, id);
  }

  public get webhook(): CodeBuildUpdateWebhookWebhook {
    return new CodeBuildUpdateWebhookWebhook(this, 'Webhook', this.__resources, this.input);
  }

}

export class CodeBuildUpdateWebhookWebhook extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CodeBuildUpdateWebhookInput) {
    super(scope, id);
  }

  public get url(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateWebhook',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateWebhook.webhook.url'),
        outputPath: 'webhook.url',
        parameters: {
          projectName: this.input.projectName,
          branchFilter: this.input.branchFilter,
          rotateSecret: this.input.rotateSecret,
          filterGroups: this.input.filterGroups,
          buildType: this.input.buildType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateWebhook.webhook.url', props);
    return resource.getResponseField('webhook.url') as unknown as string;
  }

  public get payloadUrl(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateWebhook',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateWebhook.webhook.payloadUrl'),
        outputPath: 'webhook.payloadUrl',
        parameters: {
          projectName: this.input.projectName,
          branchFilter: this.input.branchFilter,
          rotateSecret: this.input.rotateSecret,
          filterGroups: this.input.filterGroups,
          buildType: this.input.buildType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateWebhook.webhook.payloadUrl', props);
    return resource.getResponseField('webhook.payloadUrl') as unknown as string;
  }

  public get secret(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateWebhook',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateWebhook.webhook.secret'),
        outputPath: 'webhook.secret',
        parameters: {
          projectName: this.input.projectName,
          branchFilter: this.input.branchFilter,
          rotateSecret: this.input.rotateSecret,
          filterGroups: this.input.filterGroups,
          buildType: this.input.buildType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateWebhook.webhook.secret', props);
    return resource.getResponseField('webhook.secret') as unknown as string;
  }

  public get branchFilter(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateWebhook',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateWebhook.webhook.branchFilter'),
        outputPath: 'webhook.branchFilter',
        parameters: {
          projectName: this.input.projectName,
          branchFilter: this.input.branchFilter,
          rotateSecret: this.input.rotateSecret,
          filterGroups: this.input.filterGroups,
          buildType: this.input.buildType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateWebhook.webhook.branchFilter', props);
    return resource.getResponseField('webhook.branchFilter') as unknown as string;
  }

  public get filterGroups(): shapes.CodeBuildWebhookFilter[][] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateWebhook',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateWebhook.webhook.filterGroups'),
        outputPath: 'webhook.filterGroups',
        parameters: {
          projectName: this.input.projectName,
          branchFilter: this.input.branchFilter,
          rotateSecret: this.input.rotateSecret,
          filterGroups: this.input.filterGroups,
          buildType: this.input.buildType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateWebhook.webhook.filterGroups', props);
    return resource.getResponseField('webhook.filterGroups') as unknown as shapes.CodeBuildWebhookFilter[][];
  }

  public get buildType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateWebhook',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateWebhook.webhook.buildType'),
        outputPath: 'webhook.buildType',
        parameters: {
          projectName: this.input.projectName,
          branchFilter: this.input.branchFilter,
          rotateSecret: this.input.rotateSecret,
          filterGroups: this.input.filterGroups,
          buildType: this.input.buildType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateWebhook.webhook.buildType', props);
    return resource.getResponseField('webhook.buildType') as unknown as string;
  }

  public get lastModifiedSecret(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateWebhook',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateWebhook.webhook.lastModifiedSecret'),
        outputPath: 'webhook.lastModifiedSecret',
        parameters: {
          projectName: this.input.projectName,
          branchFilter: this.input.branchFilter,
          rotateSecret: this.input.rotateSecret,
          filterGroups: this.input.filterGroups,
          buildType: this.input.buildType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateWebhook.webhook.lastModifiedSecret', props);
    return resource.getResponseField('webhook.lastModifiedSecret') as unknown as string;
  }

}

