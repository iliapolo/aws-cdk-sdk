import * as cdk from '@aws-cdk/core';
import * as cr from '@aws-cdk/custom-resources';
import * as shapes from './shapes';

export class CodeBuildClient extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[]) {
    super(scope, id);
  }

  public batchDeleteBuilds(input: shapes.CodeBuildBatchDeleteBuildsInput): CodeBuildResponsesBatchDeleteBuilds {
    return new CodeBuildResponsesBatchDeleteBuilds(this, this.__resources, input);
  }

  public batchGetBuildBatches(input: shapes.CodeBuildBatchGetBuildBatchesInput): CodeBuildResponsesBatchGetBuildBatches {
    return new CodeBuildResponsesBatchGetBuildBatches(this, this.__resources, input);
  }

  public batchGetBuilds(input: shapes.CodeBuildBatchGetBuildsInput): CodeBuildResponsesBatchGetBuilds {
    return new CodeBuildResponsesBatchGetBuilds(this, this.__resources, input);
  }

  public batchGetProjects(input: shapes.CodeBuildBatchGetProjectsInput): CodeBuildResponsesBatchGetProjects {
    return new CodeBuildResponsesBatchGetProjects(this, this.__resources, input);
  }

  public batchGetReportGroups(input: shapes.CodeBuildBatchGetReportGroupsInput): CodeBuildResponsesBatchGetReportGroups {
    return new CodeBuildResponsesBatchGetReportGroups(this, this.__resources, input);
  }

  public batchGetReports(input: shapes.CodeBuildBatchGetReportsInput): CodeBuildResponsesBatchGetReports {
    return new CodeBuildResponsesBatchGetReports(this, this.__resources, input);
  }

  public createProject(input: shapes.CodeBuildCreateProjectInput): CodeBuildResponsesCreateProject {
    return new CodeBuildResponsesCreateProject(this, this.__resources, input);
  }

  public createReportGroup(input: shapes.CodeBuildCreateReportGroupInput): CodeBuildResponsesCreateReportGroup {
    return new CodeBuildResponsesCreateReportGroup(this, this.__resources, input);
  }

  public createWebhook(input: shapes.CodeBuildCreateWebhookInput): CodeBuildResponsesCreateWebhook {
    return new CodeBuildResponsesCreateWebhook(this, this.__resources, input);
  }

  public deleteBuildBatch(input: shapes.CodeBuildDeleteBuildBatchInput): CodeBuildResponsesDeleteBuildBatch {
    return new CodeBuildResponsesDeleteBuildBatch(this, this.__resources, input);
  }

  public deleteProject(input: shapes.CodeBuildDeleteProjectInput): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.DeleteProject'),
        parameters: {
          name: input.name,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteProject', props);
  }

  public deleteReport(input: shapes.CodeBuildDeleteReportInput): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteReport',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.DeleteReport'),
        parameters: {
          arn: input.arn,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteReport', props);
  }

  public deleteReportGroup(input: shapes.CodeBuildDeleteReportGroupInput): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.DeleteReportGroup'),
        parameters: {
          arn: input.arn,
          deleteReports: input.deleteReports,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteReportGroup', props);
  }

  public deleteResourcePolicy(input: shapes.CodeBuildDeleteResourcePolicyInput): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteResourcePolicy',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.DeleteResourcePolicy'),
        parameters: {
          resourceArn: input.resourceArn,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteResourcePolicy', props);
  }

  public deleteSourceCredentials(input: shapes.CodeBuildDeleteSourceCredentialsInput): CodeBuildResponsesDeleteSourceCredentials {
    return new CodeBuildResponsesDeleteSourceCredentials(this, this.__resources, input);
  }

  public deleteWebhook(input: shapes.CodeBuildDeleteWebhookInput): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteWebhook',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.DeleteWebhook'),
        parameters: {
          projectName: input.projectName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteWebhook', props);
  }

  public describeCodeCoverages(input: shapes.CodeBuildDescribeCodeCoveragesInput): CodeBuildResponsesDescribeCodeCoverages {
    return new CodeBuildResponsesDescribeCodeCoverages(this, this.__resources, input);
  }

  public describeTestCases(input: shapes.CodeBuildDescribeTestCasesInput): CodeBuildResponsesDescribeTestCases {
    return new CodeBuildResponsesDescribeTestCases(this, this.__resources, input);
  }

  public fetchReportGroupTrend(input: shapes.CodeBuildGetReportGroupTrendInput): CodeBuildResponsesFetchReportGroupTrend {
    return new CodeBuildResponsesFetchReportGroupTrend(this, this.__resources, input);
  }

  public fetchResourcePolicy(input: shapes.CodeBuildGetResourcePolicyInput): CodeBuildResponsesFetchResourcePolicy {
    return new CodeBuildResponsesFetchResourcePolicy(this, this.__resources, input);
  }

  public importSourceCredentials(input: shapes.CodeBuildImportSourceCredentialsInput): CodeBuildResponsesImportSourceCredentials {
    return new CodeBuildResponsesImportSourceCredentials(this, this.__resources, input);
  }

  public invalidateProjectCache(input: shapes.CodeBuildInvalidateProjectCacheInput): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'invalidateProjectCache',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.InvalidateProjectCache'),
        parameters: {
          projectName: input.projectName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'InvalidateProjectCache', props);
  }

  public listBuildBatches(input: shapes.CodeBuildListBuildBatchesInput): CodeBuildResponsesListBuildBatches {
    return new CodeBuildResponsesListBuildBatches(this, this.__resources, input);
  }

  public listBuildBatchesForProject(input: shapes.CodeBuildListBuildBatchesForProjectInput): CodeBuildResponsesListBuildBatchesForProject {
    return new CodeBuildResponsesListBuildBatchesForProject(this, this.__resources, input);
  }

  public listBuilds(input: shapes.CodeBuildListBuildsInput): CodeBuildResponsesListBuilds {
    return new CodeBuildResponsesListBuilds(this, this.__resources, input);
  }

  public listBuildsForProject(input: shapes.CodeBuildListBuildsForProjectInput): CodeBuildResponsesListBuildsForProject {
    return new CodeBuildResponsesListBuildsForProject(this, this.__resources, input);
  }

  public listCuratedEnvironmentImages(): CodeBuildResponsesListCuratedEnvironmentImages {
    return new CodeBuildResponsesListCuratedEnvironmentImages(this, this.__resources);
  }

  public listProjects(input: shapes.CodeBuildListProjectsInput): CodeBuildResponsesListProjects {
    return new CodeBuildResponsesListProjects(this, this.__resources, input);
  }

  public listReportGroups(input: shapes.CodeBuildListReportGroupsInput): CodeBuildResponsesListReportGroups {
    return new CodeBuildResponsesListReportGroups(this, this.__resources, input);
  }

  public listReports(input: shapes.CodeBuildListReportsInput): CodeBuildResponsesListReports {
    return new CodeBuildResponsesListReports(this, this.__resources, input);
  }

  public listReportsForReportGroup(input: shapes.CodeBuildListReportsForReportGroupInput): CodeBuildResponsesListReportsForReportGroup {
    return new CodeBuildResponsesListReportsForReportGroup(this, this.__resources, input);
  }

  public listSharedProjects(input: shapes.CodeBuildListSharedProjectsInput): CodeBuildResponsesListSharedProjects {
    return new CodeBuildResponsesListSharedProjects(this, this.__resources, input);
  }

  public listSharedReportGroups(input: shapes.CodeBuildListSharedReportGroupsInput): CodeBuildResponsesListSharedReportGroups {
    return new CodeBuildResponsesListSharedReportGroups(this, this.__resources, input);
  }

  public listSourceCredentials(): CodeBuildResponsesListSourceCredentials {
    return new CodeBuildResponsesListSourceCredentials(this, this.__resources);
  }

  public putResourcePolicy(input: shapes.CodeBuildPutResourcePolicyInput): CodeBuildResponsesPutResourcePolicy {
    return new CodeBuildResponsesPutResourcePolicy(this, this.__resources, input);
  }

  public retryBuild(input: shapes.CodeBuildRetryBuildInput): CodeBuildResponsesRetryBuild {
    return new CodeBuildResponsesRetryBuild(this, this.__resources, input);
  }

  public retryBuildBatch(input: shapes.CodeBuildRetryBuildBatchInput): CodeBuildResponsesRetryBuildBatch {
    return new CodeBuildResponsesRetryBuildBatch(this, this.__resources, input);
  }

  public startBuild(input: shapes.CodeBuildStartBuildInput): CodeBuildResponsesStartBuild {
    return new CodeBuildResponsesStartBuild(this, this.__resources, input);
  }

  public startBuildBatch(input: shapes.CodeBuildStartBuildBatchInput): CodeBuildResponsesStartBuildBatch {
    return new CodeBuildResponsesStartBuildBatch(this, this.__resources, input);
  }

  public stopBuild(input: shapes.CodeBuildStopBuildInput): CodeBuildResponsesStopBuild {
    return new CodeBuildResponsesStopBuild(this, this.__resources, input);
  }

  public stopBuildBatch(input: shapes.CodeBuildStopBuildBatchInput): CodeBuildResponsesStopBuildBatch {
    return new CodeBuildResponsesStopBuildBatch(this, this.__resources, input);
  }

  public updateProject(input: shapes.CodeBuildUpdateProjectInput): CodeBuildResponsesUpdateProject {
    return new CodeBuildResponsesUpdateProject(this, this.__resources, input);
  }

  public updateReportGroup(input: shapes.CodeBuildUpdateReportGroupInput): CodeBuildResponsesUpdateReportGroup {
    return new CodeBuildResponsesUpdateReportGroup(this, this.__resources, input);
  }

  public updateWebhook(input: shapes.CodeBuildUpdateWebhookInput): CodeBuildResponsesUpdateWebhook {
    return new CodeBuildResponsesUpdateWebhook(this, this.__resources, input);
  }

}

export class CodeBuildResponsesBatchDeleteBuilds {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildBatchDeleteBuildsInput) {
  }

  public get buildsDeleted(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchDeleteBuilds',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.BatchDeleteBuilds.buildsDeleted'),
        outputPath: 'buildsDeleted',
        parameters: {
          ids: this.__input.ids,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BatchDeleteBuilds.buildsDeleted', props);
    return resource.getResponseField('buildsDeleted') as unknown as string[];
  }

  public get buildsNotDeleted(): shapes.CodeBuildBuildNotDeleted[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchDeleteBuilds',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.BatchDeleteBuilds.buildsNotDeleted'),
        outputPath: 'buildsNotDeleted',
        parameters: {
          ids: this.__input.ids,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BatchDeleteBuilds.buildsNotDeleted', props);
    return resource.getResponseField('buildsNotDeleted') as unknown as shapes.CodeBuildBuildNotDeleted[];
  }

}

export class CodeBuildResponsesBatchGetBuildBatches {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildBatchGetBuildBatchesInput) {
  }

  public get buildBatches(): shapes.CodeBuildBuildBatch[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchGetBuildBatches',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.BatchGetBuildBatches.buildBatches'),
        outputPath: 'buildBatches',
        parameters: {
          ids: this.__input.ids,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BatchGetBuildBatches.buildBatches', props);
    return resource.getResponseField('buildBatches') as unknown as shapes.CodeBuildBuildBatch[];
  }

  public get buildBatchesNotFound(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchGetBuildBatches',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.BatchGetBuildBatches.buildBatchesNotFound'),
        outputPath: 'buildBatchesNotFound',
        parameters: {
          ids: this.__input.ids,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BatchGetBuildBatches.buildBatchesNotFound', props);
    return resource.getResponseField('buildBatchesNotFound') as unknown as string[];
  }

}

export class CodeBuildResponsesBatchGetBuilds {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildBatchGetBuildsInput) {
  }

  public get builds(): shapes.CodeBuildBuild[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchGetBuilds',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.BatchGetBuilds.builds'),
        outputPath: 'builds',
        parameters: {
          ids: this.__input.ids,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BatchGetBuilds.builds', props);
    return resource.getResponseField('builds') as unknown as shapes.CodeBuildBuild[];
  }

  public get buildsNotFound(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchGetBuilds',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.BatchGetBuilds.buildsNotFound'),
        outputPath: 'buildsNotFound',
        parameters: {
          ids: this.__input.ids,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BatchGetBuilds.buildsNotFound', props);
    return resource.getResponseField('buildsNotFound') as unknown as string[];
  }

}

export class CodeBuildResponsesBatchGetProjects {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildBatchGetProjectsInput) {
  }

  public get projects(): shapes.CodeBuildProject[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchGetProjects',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.BatchGetProjects.projects'),
        outputPath: 'projects',
        parameters: {
          names: this.__input.names,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BatchGetProjects.projects', props);
    return resource.getResponseField('projects') as unknown as shapes.CodeBuildProject[];
  }

  public get projectsNotFound(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchGetProjects',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.BatchGetProjects.projectsNotFound'),
        outputPath: 'projectsNotFound',
        parameters: {
          names: this.__input.names,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BatchGetProjects.projectsNotFound', props);
    return resource.getResponseField('projectsNotFound') as unknown as string[];
  }

}

export class CodeBuildResponsesBatchGetReportGroups {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildBatchGetReportGroupsInput) {
  }

  public get reportGroups(): shapes.CodeBuildReportGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchGetReportGroups',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.BatchGetReportGroups.reportGroups'),
        outputPath: 'reportGroups',
        parameters: {
          reportGroupArns: this.__input.reportGroupArns,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BatchGetReportGroups.reportGroups', props);
    return resource.getResponseField('reportGroups') as unknown as shapes.CodeBuildReportGroup[];
  }

  public get reportGroupsNotFound(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchGetReportGroups',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.BatchGetReportGroups.reportGroupsNotFound'),
        outputPath: 'reportGroupsNotFound',
        parameters: {
          reportGroupArns: this.__input.reportGroupArns,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BatchGetReportGroups.reportGroupsNotFound', props);
    return resource.getResponseField('reportGroupsNotFound') as unknown as string[];
  }

}

export class CodeBuildResponsesBatchGetReports {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildBatchGetReportsInput) {
  }

  public get reports(): shapes.CodeBuildReport[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchGetReports',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.BatchGetReports.reports'),
        outputPath: 'reports',
        parameters: {
          reportArns: this.__input.reportArns,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BatchGetReports.reports', props);
    return resource.getResponseField('reports') as unknown as shapes.CodeBuildReport[];
  }

  public get reportsNotFound(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchGetReports',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.BatchGetReports.reportsNotFound'),
        outputPath: 'reportsNotFound',
        parameters: {
          reportArns: this.__input.reportArns,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BatchGetReports.reportsNotFound', props);
    return resource.getResponseField('reportsNotFound') as unknown as string[];
  }

}

export class CodeBuildResponsesCreateProject {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildCreateProjectInput) {
  }

  public get project(): CodeBuildResponsesCreateProjectProject {
    return new CodeBuildResponsesCreateProjectProject(this.__scope, this.__resources, this.__input);
  }

}

export class CodeBuildResponsesCreateProjectProject {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildCreateProjectInput) {
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.name'),
        outputPath: 'project.name',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.name', props);
    return resource.getResponseField('project.name') as unknown as string;
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.arn'),
        outputPath: 'project.arn',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.arn', props);
    return resource.getResponseField('project.arn') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.description'),
        outputPath: 'project.description',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.description', props);
    return resource.getResponseField('project.description') as unknown as string;
  }

  public get source(): CodeBuildResponsesCreateProjectProjectSource {
    return new CodeBuildResponsesCreateProjectProjectSource(this.__scope, this.__resources, this.__input);
  }

  public get secondarySources(): shapes.CodeBuildProjectSource[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.secondarySources'),
        outputPath: 'project.secondarySources',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.secondarySources', props);
    return resource.getResponseField('project.secondarySources') as unknown as shapes.CodeBuildProjectSource[];
  }

  public get sourceVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.sourceVersion'),
        outputPath: 'project.sourceVersion',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.sourceVersion', props);
    return resource.getResponseField('project.sourceVersion') as unknown as string;
  }

  public get secondarySourceVersions(): shapes.CodeBuildProjectSourceVersion[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.secondarySourceVersions'),
        outputPath: 'project.secondarySourceVersions',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.secondarySourceVersions', props);
    return resource.getResponseField('project.secondarySourceVersions') as unknown as shapes.CodeBuildProjectSourceVersion[];
  }

  public get artifacts(): CodeBuildResponsesCreateProjectProjectArtifacts {
    return new CodeBuildResponsesCreateProjectProjectArtifacts(this.__scope, this.__resources, this.__input);
  }

  public get secondaryArtifacts(): shapes.CodeBuildProjectArtifacts[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.secondaryArtifacts'),
        outputPath: 'project.secondaryArtifacts',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.secondaryArtifacts', props);
    return resource.getResponseField('project.secondaryArtifacts') as unknown as shapes.CodeBuildProjectArtifacts[];
  }

  public get cache(): CodeBuildResponsesCreateProjectProjectCache {
    return new CodeBuildResponsesCreateProjectProjectCache(this.__scope, this.__resources, this.__input);
  }

  public get environment(): CodeBuildResponsesCreateProjectProjectEnvironment {
    return new CodeBuildResponsesCreateProjectProjectEnvironment(this.__scope, this.__resources, this.__input);
  }

  public get serviceRole(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.serviceRole'),
        outputPath: 'project.serviceRole',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.serviceRole', props);
    return resource.getResponseField('project.serviceRole') as unknown as string;
  }

  public get timeoutInMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.timeoutInMinutes'),
        outputPath: 'project.timeoutInMinutes',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.timeoutInMinutes', props);
    return resource.getResponseField('project.timeoutInMinutes') as unknown as number;
  }

  public get queuedTimeoutInMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.queuedTimeoutInMinutes'),
        outputPath: 'project.queuedTimeoutInMinutes',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.queuedTimeoutInMinutes', props);
    return resource.getResponseField('project.queuedTimeoutInMinutes') as unknown as number;
  }

  public get encryptionKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.encryptionKey'),
        outputPath: 'project.encryptionKey',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.encryptionKey', props);
    return resource.getResponseField('project.encryptionKey') as unknown as string;
  }

  public get tags(): shapes.CodeBuildTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.tags'),
        outputPath: 'project.tags',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.tags', props);
    return resource.getResponseField('project.tags') as unknown as shapes.CodeBuildTag[];
  }

  public get created(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.created'),
        outputPath: 'project.created',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.created', props);
    return resource.getResponseField('project.created') as unknown as string;
  }

  public get lastModified(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.lastModified'),
        outputPath: 'project.lastModified',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.lastModified', props);
    return resource.getResponseField('project.lastModified') as unknown as string;
  }

  public get webhook(): CodeBuildResponsesCreateProjectProjectWebhook {
    return new CodeBuildResponsesCreateProjectProjectWebhook(this.__scope, this.__resources, this.__input);
  }

  public get vpcConfig(): CodeBuildResponsesCreateProjectProjectVpcConfig {
    return new CodeBuildResponsesCreateProjectProjectVpcConfig(this.__scope, this.__resources, this.__input);
  }

  public get badge(): CodeBuildResponsesCreateProjectProjectBadge {
    return new CodeBuildResponsesCreateProjectProjectBadge(this.__scope, this.__resources, this.__input);
  }

  public get logsConfig(): CodeBuildResponsesCreateProjectProjectLogsConfig {
    return new CodeBuildResponsesCreateProjectProjectLogsConfig(this.__scope, this.__resources, this.__input);
  }

  public get fileSystemLocations(): shapes.CodeBuildProjectFileSystemLocation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.fileSystemLocations'),
        outputPath: 'project.fileSystemLocations',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.fileSystemLocations', props);
    return resource.getResponseField('project.fileSystemLocations') as unknown as shapes.CodeBuildProjectFileSystemLocation[];
  }

  public get buildBatchConfig(): CodeBuildResponsesCreateProjectProjectBuildBatchConfig {
    return new CodeBuildResponsesCreateProjectProjectBuildBatchConfig(this.__scope, this.__resources, this.__input);
  }

  public get concurrentBuildLimit(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.concurrentBuildLimit'),
        outputPath: 'project.concurrentBuildLimit',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.concurrentBuildLimit', props);
    return resource.getResponseField('project.concurrentBuildLimit') as unknown as number;
  }

}

export class CodeBuildResponsesCreateProjectProjectSource {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildCreateProjectInput) {
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.source.type'),
        outputPath: 'project.source.type',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.source.type', props);
    return resource.getResponseField('project.source.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.source.location'),
        outputPath: 'project.source.location',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.source.location', props);
    return resource.getResponseField('project.source.location') as unknown as string;
  }

  public get gitCloneDepth(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.source.gitCloneDepth'),
        outputPath: 'project.source.gitCloneDepth',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.source.gitCloneDepth', props);
    return resource.getResponseField('project.source.gitCloneDepth') as unknown as number;
  }

  public get gitSubmodulesConfig(): CodeBuildResponsesCreateProjectProjectSourceGitSubmodulesConfig {
    return new CodeBuildResponsesCreateProjectProjectSourceGitSubmodulesConfig(this.__scope, this.__resources, this.__input);
  }

  public get buildspec(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.source.buildspec'),
        outputPath: 'project.source.buildspec',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.source.buildspec', props);
    return resource.getResponseField('project.source.buildspec') as unknown as string;
  }

  public get auth(): CodeBuildResponsesCreateProjectProjectSourceAuth {
    return new CodeBuildResponsesCreateProjectProjectSourceAuth(this.__scope, this.__resources, this.__input);
  }

  public get reportBuildStatus(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.source.reportBuildStatus'),
        outputPath: 'project.source.reportBuildStatus',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.source.reportBuildStatus', props);
    return resource.getResponseField('project.source.reportBuildStatus') as unknown as boolean;
  }

  public get buildStatusConfig(): CodeBuildResponsesCreateProjectProjectSourceBuildStatusConfig {
    return new CodeBuildResponsesCreateProjectProjectSourceBuildStatusConfig(this.__scope, this.__resources, this.__input);
  }

  public get insecureSsl(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.source.insecureSsl'),
        outputPath: 'project.source.insecureSsl',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.source.insecureSsl', props);
    return resource.getResponseField('project.source.insecureSsl') as unknown as boolean;
  }

  public get sourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.source.sourceIdentifier'),
        outputPath: 'project.source.sourceIdentifier',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.source.sourceIdentifier', props);
    return resource.getResponseField('project.source.sourceIdentifier') as unknown as string;
  }

}

export class CodeBuildResponsesCreateProjectProjectSourceGitSubmodulesConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildCreateProjectInput) {
  }

  public get fetchSubmodules(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.source.gitSubmodulesConfig.fetchSubmodules'),
        outputPath: 'project.source.gitSubmodulesConfig.fetchSubmodules',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.source.gitSubmodulesConfig.fetchSubmodules', props);
    return resource.getResponseField('project.source.gitSubmodulesConfig.fetchSubmodules') as unknown as boolean;
  }

}

export class CodeBuildResponsesCreateProjectProjectSourceAuth {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildCreateProjectInput) {
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.source.auth.type'),
        outputPath: 'project.source.auth.type',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.source.auth.type', props);
    return resource.getResponseField('project.source.auth.type') as unknown as string;
  }

  public get resource(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.source.auth.resource'),
        outputPath: 'project.source.auth.resource',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.source.auth.resource', props);
    return resource.getResponseField('project.source.auth.resource') as unknown as string;
  }

}

export class CodeBuildResponsesCreateProjectProjectSourceBuildStatusConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildCreateProjectInput) {
  }

  public get context(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.source.buildStatusConfig.context'),
        outputPath: 'project.source.buildStatusConfig.context',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.source.buildStatusConfig.context', props);
    return resource.getResponseField('project.source.buildStatusConfig.context') as unknown as string;
  }

  public get targetUrl(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.source.buildStatusConfig.targetUrl'),
        outputPath: 'project.source.buildStatusConfig.targetUrl',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.source.buildStatusConfig.targetUrl', props);
    return resource.getResponseField('project.source.buildStatusConfig.targetUrl') as unknown as string;
  }

}

export class CodeBuildResponsesCreateProjectProjectArtifacts {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildCreateProjectInput) {
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.artifacts.type'),
        outputPath: 'project.artifacts.type',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.artifacts.type', props);
    return resource.getResponseField('project.artifacts.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.artifacts.location'),
        outputPath: 'project.artifacts.location',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.artifacts.location', props);
    return resource.getResponseField('project.artifacts.location') as unknown as string;
  }

  public get path(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.artifacts.path'),
        outputPath: 'project.artifacts.path',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.artifacts.path', props);
    return resource.getResponseField('project.artifacts.path') as unknown as string;
  }

  public get namespaceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.artifacts.namespaceType'),
        outputPath: 'project.artifacts.namespaceType',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.artifacts.namespaceType', props);
    return resource.getResponseField('project.artifacts.namespaceType') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.artifacts.name'),
        outputPath: 'project.artifacts.name',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.artifacts.name', props);
    return resource.getResponseField('project.artifacts.name') as unknown as string;
  }

  public get packaging(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.artifacts.packaging'),
        outputPath: 'project.artifacts.packaging',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.artifacts.packaging', props);
    return resource.getResponseField('project.artifacts.packaging') as unknown as string;
  }

  public get overrideArtifactName(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.artifacts.overrideArtifactName'),
        outputPath: 'project.artifacts.overrideArtifactName',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.artifacts.overrideArtifactName', props);
    return resource.getResponseField('project.artifacts.overrideArtifactName') as unknown as boolean;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.artifacts.encryptionDisabled'),
        outputPath: 'project.artifacts.encryptionDisabled',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.artifacts.encryptionDisabled', props);
    return resource.getResponseField('project.artifacts.encryptionDisabled') as unknown as boolean;
  }

  public get artifactIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.artifacts.artifactIdentifier'),
        outputPath: 'project.artifacts.artifactIdentifier',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.artifacts.artifactIdentifier', props);
    return resource.getResponseField('project.artifacts.artifactIdentifier') as unknown as string;
  }

  public get bucketOwnerAccess(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.artifacts.bucketOwnerAccess'),
        outputPath: 'project.artifacts.bucketOwnerAccess',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.artifacts.bucketOwnerAccess', props);
    return resource.getResponseField('project.artifacts.bucketOwnerAccess') as unknown as string;
  }

}

export class CodeBuildResponsesCreateProjectProjectCache {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildCreateProjectInput) {
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.cache.type'),
        outputPath: 'project.cache.type',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.cache.type', props);
    return resource.getResponseField('project.cache.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.cache.location'),
        outputPath: 'project.cache.location',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.cache.location', props);
    return resource.getResponseField('project.cache.location') as unknown as string;
  }

  public get modes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.cache.modes'),
        outputPath: 'project.cache.modes',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.cache.modes', props);
    return resource.getResponseField('project.cache.modes') as unknown as string[];
  }

}

export class CodeBuildResponsesCreateProjectProjectEnvironment {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildCreateProjectInput) {
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.environment.type'),
        outputPath: 'project.environment.type',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.environment.type', props);
    return resource.getResponseField('project.environment.type') as unknown as string;
  }

  public get image(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.environment.image'),
        outputPath: 'project.environment.image',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.environment.image', props);
    return resource.getResponseField('project.environment.image') as unknown as string;
  }

  public get computeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.environment.computeType'),
        outputPath: 'project.environment.computeType',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.environment.computeType', props);
    return resource.getResponseField('project.environment.computeType') as unknown as string;
  }

  public get environmentVariables(): shapes.CodeBuildEnvironmentVariable[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.environment.environmentVariables'),
        outputPath: 'project.environment.environmentVariables',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.environment.environmentVariables', props);
    return resource.getResponseField('project.environment.environmentVariables') as unknown as shapes.CodeBuildEnvironmentVariable[];
  }

  public get privilegedMode(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.environment.privilegedMode'),
        outputPath: 'project.environment.privilegedMode',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.environment.privilegedMode', props);
    return resource.getResponseField('project.environment.privilegedMode') as unknown as boolean;
  }

  public get certificate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.environment.certificate'),
        outputPath: 'project.environment.certificate',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.environment.certificate', props);
    return resource.getResponseField('project.environment.certificate') as unknown as string;
  }

  public get registryCredential(): CodeBuildResponsesCreateProjectProjectEnvironmentRegistryCredential {
    return new CodeBuildResponsesCreateProjectProjectEnvironmentRegistryCredential(this.__scope, this.__resources, this.__input);
  }

  public get imagePullCredentialsType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.environment.imagePullCredentialsType'),
        outputPath: 'project.environment.imagePullCredentialsType',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.environment.imagePullCredentialsType', props);
    return resource.getResponseField('project.environment.imagePullCredentialsType') as unknown as string;
  }

}

export class CodeBuildResponsesCreateProjectProjectEnvironmentRegistryCredential {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildCreateProjectInput) {
  }

  public get credential(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.environment.registryCredential.credential'),
        outputPath: 'project.environment.registryCredential.credential',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.environment.registryCredential.credential', props);
    return resource.getResponseField('project.environment.registryCredential.credential') as unknown as string;
  }

  public get credentialProvider(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.environment.registryCredential.credentialProvider'),
        outputPath: 'project.environment.registryCredential.credentialProvider',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.environment.registryCredential.credentialProvider', props);
    return resource.getResponseField('project.environment.registryCredential.credentialProvider') as unknown as string;
  }

}

export class CodeBuildResponsesCreateProjectProjectWebhook {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildCreateProjectInput) {
  }

  public get url(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.webhook.url'),
        outputPath: 'project.webhook.url',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.webhook.url', props);
    return resource.getResponseField('project.webhook.url') as unknown as string;
  }

  public get payloadUrl(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.webhook.payloadUrl'),
        outputPath: 'project.webhook.payloadUrl',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.webhook.payloadUrl', props);
    return resource.getResponseField('project.webhook.payloadUrl') as unknown as string;
  }

  public get secret(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.webhook.secret'),
        outputPath: 'project.webhook.secret',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.webhook.secret', props);
    return resource.getResponseField('project.webhook.secret') as unknown as string;
  }

  public get branchFilter(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.webhook.branchFilter'),
        outputPath: 'project.webhook.branchFilter',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.webhook.branchFilter', props);
    return resource.getResponseField('project.webhook.branchFilter') as unknown as string;
  }

  public get filterGroups(): shapes.CodeBuildWebhookFilter[][] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.webhook.filterGroups'),
        outputPath: 'project.webhook.filterGroups',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.webhook.filterGroups', props);
    return resource.getResponseField('project.webhook.filterGroups') as unknown as shapes.CodeBuildWebhookFilter[][];
  }

  public get buildType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.webhook.buildType'),
        outputPath: 'project.webhook.buildType',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.webhook.buildType', props);
    return resource.getResponseField('project.webhook.buildType') as unknown as string;
  }

  public get lastModifiedSecret(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.webhook.lastModifiedSecret'),
        outputPath: 'project.webhook.lastModifiedSecret',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.webhook.lastModifiedSecret', props);
    return resource.getResponseField('project.webhook.lastModifiedSecret') as unknown as string;
  }

}

export class CodeBuildResponsesCreateProjectProjectVpcConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildCreateProjectInput) {
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.vpcConfig.vpcId'),
        outputPath: 'project.vpcConfig.vpcId',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.vpcConfig.vpcId', props);
    return resource.getResponseField('project.vpcConfig.vpcId') as unknown as string;
  }

  public get subnets(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.vpcConfig.subnets'),
        outputPath: 'project.vpcConfig.subnets',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.vpcConfig.subnets', props);
    return resource.getResponseField('project.vpcConfig.subnets') as unknown as string[];
  }

  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.vpcConfig.securityGroupIds'),
        outputPath: 'project.vpcConfig.securityGroupIds',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.vpcConfig.securityGroupIds', props);
    return resource.getResponseField('project.vpcConfig.securityGroupIds') as unknown as string[];
  }

}

export class CodeBuildResponsesCreateProjectProjectBadge {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildCreateProjectInput) {
  }

  public get badgeEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.badge.badgeEnabled'),
        outputPath: 'project.badge.badgeEnabled',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.badge.badgeEnabled', props);
    return resource.getResponseField('project.badge.badgeEnabled') as unknown as boolean;
  }

  public get badgeRequestUrl(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.badge.badgeRequestUrl'),
        outputPath: 'project.badge.badgeRequestUrl',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.badge.badgeRequestUrl', props);
    return resource.getResponseField('project.badge.badgeRequestUrl') as unknown as string;
  }

}

export class CodeBuildResponsesCreateProjectProjectLogsConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildCreateProjectInput) {
  }

  public get cloudWatchLogs(): CodeBuildResponsesCreateProjectProjectLogsConfigCloudWatchLogs {
    return new CodeBuildResponsesCreateProjectProjectLogsConfigCloudWatchLogs(this.__scope, this.__resources, this.__input);
  }

  public get s3Logs(): CodeBuildResponsesCreateProjectProjectLogsConfigS3Logs {
    return new CodeBuildResponsesCreateProjectProjectLogsConfigS3Logs(this.__scope, this.__resources, this.__input);
  }

}

export class CodeBuildResponsesCreateProjectProjectLogsConfigCloudWatchLogs {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildCreateProjectInput) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.logsConfig.cloudWatchLogs.status'),
        outputPath: 'project.logsConfig.cloudWatchLogs.status',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.logsConfig.cloudWatchLogs.status', props);
    return resource.getResponseField('project.logsConfig.cloudWatchLogs.status') as unknown as string;
  }

  public get groupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.logsConfig.cloudWatchLogs.groupName'),
        outputPath: 'project.logsConfig.cloudWatchLogs.groupName',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.logsConfig.cloudWatchLogs.groupName', props);
    return resource.getResponseField('project.logsConfig.cloudWatchLogs.groupName') as unknown as string;
  }

  public get streamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.logsConfig.cloudWatchLogs.streamName'),
        outputPath: 'project.logsConfig.cloudWatchLogs.streamName',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.logsConfig.cloudWatchLogs.streamName', props);
    return resource.getResponseField('project.logsConfig.cloudWatchLogs.streamName') as unknown as string;
  }

}

export class CodeBuildResponsesCreateProjectProjectLogsConfigS3Logs {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildCreateProjectInput) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.logsConfig.s3Logs.status'),
        outputPath: 'project.logsConfig.s3Logs.status',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.logsConfig.s3Logs.status', props);
    return resource.getResponseField('project.logsConfig.s3Logs.status') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.logsConfig.s3Logs.location'),
        outputPath: 'project.logsConfig.s3Logs.location',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.logsConfig.s3Logs.location', props);
    return resource.getResponseField('project.logsConfig.s3Logs.location') as unknown as string;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.logsConfig.s3Logs.encryptionDisabled'),
        outputPath: 'project.logsConfig.s3Logs.encryptionDisabled',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.logsConfig.s3Logs.encryptionDisabled', props);
    return resource.getResponseField('project.logsConfig.s3Logs.encryptionDisabled') as unknown as boolean;
  }

  public get bucketOwnerAccess(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.logsConfig.s3Logs.bucketOwnerAccess'),
        outputPath: 'project.logsConfig.s3Logs.bucketOwnerAccess',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.logsConfig.s3Logs.bucketOwnerAccess', props);
    return resource.getResponseField('project.logsConfig.s3Logs.bucketOwnerAccess') as unknown as string;
  }

}

export class CodeBuildResponsesCreateProjectProjectBuildBatchConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildCreateProjectInput) {
  }

  public get serviceRole(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.buildBatchConfig.serviceRole'),
        outputPath: 'project.buildBatchConfig.serviceRole',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.buildBatchConfig.serviceRole', props);
    return resource.getResponseField('project.buildBatchConfig.serviceRole') as unknown as string;
  }

  public get combineArtifacts(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.buildBatchConfig.combineArtifacts'),
        outputPath: 'project.buildBatchConfig.combineArtifacts',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.buildBatchConfig.combineArtifacts', props);
    return resource.getResponseField('project.buildBatchConfig.combineArtifacts') as unknown as boolean;
  }

  public get restrictions(): CodeBuildResponsesCreateProjectProjectBuildBatchConfigRestrictions {
    return new CodeBuildResponsesCreateProjectProjectBuildBatchConfigRestrictions(this.__scope, this.__resources, this.__input);
  }

  public get timeoutInMins(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.buildBatchConfig.timeoutInMins'),
        outputPath: 'project.buildBatchConfig.timeoutInMins',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.buildBatchConfig.timeoutInMins', props);
    return resource.getResponseField('project.buildBatchConfig.timeoutInMins') as unknown as number;
  }

}

export class CodeBuildResponsesCreateProjectProjectBuildBatchConfigRestrictions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildCreateProjectInput) {
  }

  public get maximumBuildsAllowed(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.buildBatchConfig.restrictions.maximumBuildsAllowed'),
        outputPath: 'project.buildBatchConfig.restrictions.maximumBuildsAllowed',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.buildBatchConfig.restrictions.maximumBuildsAllowed', props);
    return resource.getResponseField('project.buildBatchConfig.restrictions.maximumBuildsAllowed') as unknown as number;
  }

  public get computeTypesAllowed(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateProject.project.buildBatchConfig.restrictions.computeTypesAllowed'),
        outputPath: 'project.buildBatchConfig.restrictions.computeTypesAllowed',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source.type,
            location: this.__input.source.location,
            gitCloneDepth: this.__input.source.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source.buildspec,
            auth: {
              type: this.__input.source.auth?.type,
              resource: this.__input.source.auth?.resource,
            },
            reportBuildStatus: this.__input.source.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source.buildStatusConfig?.context,
              targetUrl: this.__input.source.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source.insecureSsl,
            sourceIdentifier: this.__input.source.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts.type,
            location: this.__input.artifacts.location,
            path: this.__input.artifacts.path,
            namespaceType: this.__input.artifacts.namespaceType,
            name: this.__input.artifacts.name,
            packaging: this.__input.artifacts.packaging,
            overrideArtifactName: this.__input.artifacts.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment.type,
            image: this.__input.environment.image,
            computeType: this.__input.environment.computeType,
            environmentVariables: this.__input.environment.environmentVariables,
            privilegedMode: this.__input.environment.privilegedMode,
            certificate: this.__input.environment.certificate,
            registryCredential: {
              credential: this.__input.environment.registryCredential?.credential,
              credentialProvider: this.__input.environment.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateProject.project.buildBatchConfig.restrictions.computeTypesAllowed', props);
    return resource.getResponseField('project.buildBatchConfig.restrictions.computeTypesAllowed') as unknown as string[];
  }

}

export class CodeBuildResponsesCreateReportGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildCreateReportGroupInput) {
  }

  public get reportGroup(): CodeBuildResponsesCreateReportGroupReportGroup {
    return new CodeBuildResponsesCreateReportGroupReportGroup(this.__scope, this.__resources, this.__input);
  }

}

export class CodeBuildResponsesCreateReportGroupReportGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildCreateReportGroupInput) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateReportGroup.reportGroup.arn'),
        outputPath: 'reportGroup.arn',
        parameters: {
          name: this.__input.name,
          type: this.__input.type,
          exportConfig: {
            exportConfigType: this.__input.exportConfig.exportConfigType,
            s3Destination: {
              bucket: this.__input.exportConfig.s3Destination?.bucket,
              bucketOwner: this.__input.exportConfig.s3Destination?.bucketOwner,
              path: this.__input.exportConfig.s3Destination?.path,
              packaging: this.__input.exportConfig.s3Destination?.packaging,
              encryptionKey: this.__input.exportConfig.s3Destination?.encryptionKey,
              encryptionDisabled: this.__input.exportConfig.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateReportGroup.reportGroup.arn', props);
    return resource.getResponseField('reportGroup.arn') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateReportGroup.reportGroup.name'),
        outputPath: 'reportGroup.name',
        parameters: {
          name: this.__input.name,
          type: this.__input.type,
          exportConfig: {
            exportConfigType: this.__input.exportConfig.exportConfigType,
            s3Destination: {
              bucket: this.__input.exportConfig.s3Destination?.bucket,
              bucketOwner: this.__input.exportConfig.s3Destination?.bucketOwner,
              path: this.__input.exportConfig.s3Destination?.path,
              packaging: this.__input.exportConfig.s3Destination?.packaging,
              encryptionKey: this.__input.exportConfig.s3Destination?.encryptionKey,
              encryptionDisabled: this.__input.exportConfig.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateReportGroup.reportGroup.name', props);
    return resource.getResponseField('reportGroup.name') as unknown as string;
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateReportGroup.reportGroup.type'),
        outputPath: 'reportGroup.type',
        parameters: {
          name: this.__input.name,
          type: this.__input.type,
          exportConfig: {
            exportConfigType: this.__input.exportConfig.exportConfigType,
            s3Destination: {
              bucket: this.__input.exportConfig.s3Destination?.bucket,
              bucketOwner: this.__input.exportConfig.s3Destination?.bucketOwner,
              path: this.__input.exportConfig.s3Destination?.path,
              packaging: this.__input.exportConfig.s3Destination?.packaging,
              encryptionKey: this.__input.exportConfig.s3Destination?.encryptionKey,
              encryptionDisabled: this.__input.exportConfig.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateReportGroup.reportGroup.type', props);
    return resource.getResponseField('reportGroup.type') as unknown as string;
  }

  public get exportConfig(): CodeBuildResponsesCreateReportGroupReportGroupExportConfig {
    return new CodeBuildResponsesCreateReportGroupReportGroupExportConfig(this.__scope, this.__resources, this.__input);
  }

  public get created(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateReportGroup.reportGroup.created'),
        outputPath: 'reportGroup.created',
        parameters: {
          name: this.__input.name,
          type: this.__input.type,
          exportConfig: {
            exportConfigType: this.__input.exportConfig.exportConfigType,
            s3Destination: {
              bucket: this.__input.exportConfig.s3Destination?.bucket,
              bucketOwner: this.__input.exportConfig.s3Destination?.bucketOwner,
              path: this.__input.exportConfig.s3Destination?.path,
              packaging: this.__input.exportConfig.s3Destination?.packaging,
              encryptionKey: this.__input.exportConfig.s3Destination?.encryptionKey,
              encryptionDisabled: this.__input.exportConfig.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateReportGroup.reportGroup.created', props);
    return resource.getResponseField('reportGroup.created') as unknown as string;
  }

  public get lastModified(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateReportGroup.reportGroup.lastModified'),
        outputPath: 'reportGroup.lastModified',
        parameters: {
          name: this.__input.name,
          type: this.__input.type,
          exportConfig: {
            exportConfigType: this.__input.exportConfig.exportConfigType,
            s3Destination: {
              bucket: this.__input.exportConfig.s3Destination?.bucket,
              bucketOwner: this.__input.exportConfig.s3Destination?.bucketOwner,
              path: this.__input.exportConfig.s3Destination?.path,
              packaging: this.__input.exportConfig.s3Destination?.packaging,
              encryptionKey: this.__input.exportConfig.s3Destination?.encryptionKey,
              encryptionDisabled: this.__input.exportConfig.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateReportGroup.reportGroup.lastModified', props);
    return resource.getResponseField('reportGroup.lastModified') as unknown as string;
  }

  public get tags(): shapes.CodeBuildTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateReportGroup.reportGroup.tags'),
        outputPath: 'reportGroup.tags',
        parameters: {
          name: this.__input.name,
          type: this.__input.type,
          exportConfig: {
            exportConfigType: this.__input.exportConfig.exportConfigType,
            s3Destination: {
              bucket: this.__input.exportConfig.s3Destination?.bucket,
              bucketOwner: this.__input.exportConfig.s3Destination?.bucketOwner,
              path: this.__input.exportConfig.s3Destination?.path,
              packaging: this.__input.exportConfig.s3Destination?.packaging,
              encryptionKey: this.__input.exportConfig.s3Destination?.encryptionKey,
              encryptionDisabled: this.__input.exportConfig.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateReportGroup.reportGroup.tags', props);
    return resource.getResponseField('reportGroup.tags') as unknown as shapes.CodeBuildTag[];
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateReportGroup.reportGroup.status'),
        outputPath: 'reportGroup.status',
        parameters: {
          name: this.__input.name,
          type: this.__input.type,
          exportConfig: {
            exportConfigType: this.__input.exportConfig.exportConfigType,
            s3Destination: {
              bucket: this.__input.exportConfig.s3Destination?.bucket,
              bucketOwner: this.__input.exportConfig.s3Destination?.bucketOwner,
              path: this.__input.exportConfig.s3Destination?.path,
              packaging: this.__input.exportConfig.s3Destination?.packaging,
              encryptionKey: this.__input.exportConfig.s3Destination?.encryptionKey,
              encryptionDisabled: this.__input.exportConfig.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateReportGroup.reportGroup.status', props);
    return resource.getResponseField('reportGroup.status') as unknown as string;
  }

}

export class CodeBuildResponsesCreateReportGroupReportGroupExportConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildCreateReportGroupInput) {
  }

  public get exportConfigType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateReportGroup.reportGroup.exportConfig.exportConfigType'),
        outputPath: 'reportGroup.exportConfig.exportConfigType',
        parameters: {
          name: this.__input.name,
          type: this.__input.type,
          exportConfig: {
            exportConfigType: this.__input.exportConfig.exportConfigType,
            s3Destination: {
              bucket: this.__input.exportConfig.s3Destination?.bucket,
              bucketOwner: this.__input.exportConfig.s3Destination?.bucketOwner,
              path: this.__input.exportConfig.s3Destination?.path,
              packaging: this.__input.exportConfig.s3Destination?.packaging,
              encryptionKey: this.__input.exportConfig.s3Destination?.encryptionKey,
              encryptionDisabled: this.__input.exportConfig.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateReportGroup.reportGroup.exportConfig.exportConfigType', props);
    return resource.getResponseField('reportGroup.exportConfig.exportConfigType') as unknown as string;
  }

  public get s3Destination(): CodeBuildResponsesCreateReportGroupReportGroupExportConfigS3Destination {
    return new CodeBuildResponsesCreateReportGroupReportGroupExportConfigS3Destination(this.__scope, this.__resources, this.__input);
  }

}

export class CodeBuildResponsesCreateReportGroupReportGroupExportConfigS3Destination {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildCreateReportGroupInput) {
  }

  public get bucket(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateReportGroup.reportGroup.exportConfig.s3Destination.bucket'),
        outputPath: 'reportGroup.exportConfig.s3Destination.bucket',
        parameters: {
          name: this.__input.name,
          type: this.__input.type,
          exportConfig: {
            exportConfigType: this.__input.exportConfig.exportConfigType,
            s3Destination: {
              bucket: this.__input.exportConfig.s3Destination?.bucket,
              bucketOwner: this.__input.exportConfig.s3Destination?.bucketOwner,
              path: this.__input.exportConfig.s3Destination?.path,
              packaging: this.__input.exportConfig.s3Destination?.packaging,
              encryptionKey: this.__input.exportConfig.s3Destination?.encryptionKey,
              encryptionDisabled: this.__input.exportConfig.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateReportGroup.reportGroup.exportConfig.s3Destination.bucket', props);
    return resource.getResponseField('reportGroup.exportConfig.s3Destination.bucket') as unknown as string;
  }

  public get bucketOwner(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateReportGroup.reportGroup.exportConfig.s3Destination.bucketOwner'),
        outputPath: 'reportGroup.exportConfig.s3Destination.bucketOwner',
        parameters: {
          name: this.__input.name,
          type: this.__input.type,
          exportConfig: {
            exportConfigType: this.__input.exportConfig.exportConfigType,
            s3Destination: {
              bucket: this.__input.exportConfig.s3Destination?.bucket,
              bucketOwner: this.__input.exportConfig.s3Destination?.bucketOwner,
              path: this.__input.exportConfig.s3Destination?.path,
              packaging: this.__input.exportConfig.s3Destination?.packaging,
              encryptionKey: this.__input.exportConfig.s3Destination?.encryptionKey,
              encryptionDisabled: this.__input.exportConfig.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateReportGroup.reportGroup.exportConfig.s3Destination.bucketOwner', props);
    return resource.getResponseField('reportGroup.exportConfig.s3Destination.bucketOwner') as unknown as string;
  }

  public get path(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateReportGroup.reportGroup.exportConfig.s3Destination.path'),
        outputPath: 'reportGroup.exportConfig.s3Destination.path',
        parameters: {
          name: this.__input.name,
          type: this.__input.type,
          exportConfig: {
            exportConfigType: this.__input.exportConfig.exportConfigType,
            s3Destination: {
              bucket: this.__input.exportConfig.s3Destination?.bucket,
              bucketOwner: this.__input.exportConfig.s3Destination?.bucketOwner,
              path: this.__input.exportConfig.s3Destination?.path,
              packaging: this.__input.exportConfig.s3Destination?.packaging,
              encryptionKey: this.__input.exportConfig.s3Destination?.encryptionKey,
              encryptionDisabled: this.__input.exportConfig.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateReportGroup.reportGroup.exportConfig.s3Destination.path', props);
    return resource.getResponseField('reportGroup.exportConfig.s3Destination.path') as unknown as string;
  }

  public get packaging(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateReportGroup.reportGroup.exportConfig.s3Destination.packaging'),
        outputPath: 'reportGroup.exportConfig.s3Destination.packaging',
        parameters: {
          name: this.__input.name,
          type: this.__input.type,
          exportConfig: {
            exportConfigType: this.__input.exportConfig.exportConfigType,
            s3Destination: {
              bucket: this.__input.exportConfig.s3Destination?.bucket,
              bucketOwner: this.__input.exportConfig.s3Destination?.bucketOwner,
              path: this.__input.exportConfig.s3Destination?.path,
              packaging: this.__input.exportConfig.s3Destination?.packaging,
              encryptionKey: this.__input.exportConfig.s3Destination?.encryptionKey,
              encryptionDisabled: this.__input.exportConfig.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateReportGroup.reportGroup.exportConfig.s3Destination.packaging', props);
    return resource.getResponseField('reportGroup.exportConfig.s3Destination.packaging') as unknown as string;
  }

  public get encryptionKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateReportGroup.reportGroup.exportConfig.s3Destination.encryptionKey'),
        outputPath: 'reportGroup.exportConfig.s3Destination.encryptionKey',
        parameters: {
          name: this.__input.name,
          type: this.__input.type,
          exportConfig: {
            exportConfigType: this.__input.exportConfig.exportConfigType,
            s3Destination: {
              bucket: this.__input.exportConfig.s3Destination?.bucket,
              bucketOwner: this.__input.exportConfig.s3Destination?.bucketOwner,
              path: this.__input.exportConfig.s3Destination?.path,
              packaging: this.__input.exportConfig.s3Destination?.packaging,
              encryptionKey: this.__input.exportConfig.s3Destination?.encryptionKey,
              encryptionDisabled: this.__input.exportConfig.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateReportGroup.reportGroup.exportConfig.s3Destination.encryptionKey', props);
    return resource.getResponseField('reportGroup.exportConfig.s3Destination.encryptionKey') as unknown as string;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateReportGroup.reportGroup.exportConfig.s3Destination.encryptionDisabled'),
        outputPath: 'reportGroup.exportConfig.s3Destination.encryptionDisabled',
        parameters: {
          name: this.__input.name,
          type: this.__input.type,
          exportConfig: {
            exportConfigType: this.__input.exportConfig.exportConfigType,
            s3Destination: {
              bucket: this.__input.exportConfig.s3Destination?.bucket,
              bucketOwner: this.__input.exportConfig.s3Destination?.bucketOwner,
              path: this.__input.exportConfig.s3Destination?.path,
              packaging: this.__input.exportConfig.s3Destination?.packaging,
              encryptionKey: this.__input.exportConfig.s3Destination?.encryptionKey,
              encryptionDisabled: this.__input.exportConfig.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateReportGroup.reportGroup.exportConfig.s3Destination.encryptionDisabled', props);
    return resource.getResponseField('reportGroup.exportConfig.s3Destination.encryptionDisabled') as unknown as boolean;
  }

}

export class CodeBuildResponsesCreateWebhook {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildCreateWebhookInput) {
  }

  public get webhook(): CodeBuildResponsesCreateWebhookWebhook {
    return new CodeBuildResponsesCreateWebhookWebhook(this.__scope, this.__resources, this.__input);
  }

}

export class CodeBuildResponsesCreateWebhookWebhook {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildCreateWebhookInput) {
  }

  public get url(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createWebhook',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateWebhook.webhook.url'),
        outputPath: 'webhook.url',
        parameters: {
          projectName: this.__input.projectName,
          branchFilter: this.__input.branchFilter,
          filterGroups: this.__input.filterGroups,
          buildType: this.__input.buildType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateWebhook.webhook.url', props);
    return resource.getResponseField('webhook.url') as unknown as string;
  }

  public get payloadUrl(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createWebhook',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateWebhook.webhook.payloadUrl'),
        outputPath: 'webhook.payloadUrl',
        parameters: {
          projectName: this.__input.projectName,
          branchFilter: this.__input.branchFilter,
          filterGroups: this.__input.filterGroups,
          buildType: this.__input.buildType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateWebhook.webhook.payloadUrl', props);
    return resource.getResponseField('webhook.payloadUrl') as unknown as string;
  }

  public get secret(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createWebhook',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateWebhook.webhook.secret'),
        outputPath: 'webhook.secret',
        parameters: {
          projectName: this.__input.projectName,
          branchFilter: this.__input.branchFilter,
          filterGroups: this.__input.filterGroups,
          buildType: this.__input.buildType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateWebhook.webhook.secret', props);
    return resource.getResponseField('webhook.secret') as unknown as string;
  }

  public get branchFilter(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createWebhook',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateWebhook.webhook.branchFilter'),
        outputPath: 'webhook.branchFilter',
        parameters: {
          projectName: this.__input.projectName,
          branchFilter: this.__input.branchFilter,
          filterGroups: this.__input.filterGroups,
          buildType: this.__input.buildType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateWebhook.webhook.branchFilter', props);
    return resource.getResponseField('webhook.branchFilter') as unknown as string;
  }

  public get filterGroups(): shapes.CodeBuildWebhookFilter[][] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createWebhook',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateWebhook.webhook.filterGroups'),
        outputPath: 'webhook.filterGroups',
        parameters: {
          projectName: this.__input.projectName,
          branchFilter: this.__input.branchFilter,
          filterGroups: this.__input.filterGroups,
          buildType: this.__input.buildType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateWebhook.webhook.filterGroups', props);
    return resource.getResponseField('webhook.filterGroups') as unknown as shapes.CodeBuildWebhookFilter[][];
  }

  public get buildType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createWebhook',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateWebhook.webhook.buildType'),
        outputPath: 'webhook.buildType',
        parameters: {
          projectName: this.__input.projectName,
          branchFilter: this.__input.branchFilter,
          filterGroups: this.__input.filterGroups,
          buildType: this.__input.buildType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateWebhook.webhook.buildType', props);
    return resource.getResponseField('webhook.buildType') as unknown as string;
  }

  public get lastModifiedSecret(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createWebhook',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.CreateWebhook.webhook.lastModifiedSecret'),
        outputPath: 'webhook.lastModifiedSecret',
        parameters: {
          projectName: this.__input.projectName,
          branchFilter: this.__input.branchFilter,
          filterGroups: this.__input.filterGroups,
          buildType: this.__input.buildType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateWebhook.webhook.lastModifiedSecret', props);
    return resource.getResponseField('webhook.lastModifiedSecret') as unknown as string;
  }

}

export class CodeBuildResponsesDeleteBuildBatch {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildDeleteBuildBatchInput) {
  }

  public get statusCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.DeleteBuildBatch.statusCode'),
        outputPath: 'statusCode',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteBuildBatch.statusCode', props);
    return resource.getResponseField('statusCode') as unknown as string;
  }

  public get buildsDeleted(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.DeleteBuildBatch.buildsDeleted'),
        outputPath: 'buildsDeleted',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteBuildBatch.buildsDeleted', props);
    return resource.getResponseField('buildsDeleted') as unknown as string[];
  }

  public get buildsNotDeleted(): shapes.CodeBuildBuildNotDeleted[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.DeleteBuildBatch.buildsNotDeleted'),
        outputPath: 'buildsNotDeleted',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteBuildBatch.buildsNotDeleted', props);
    return resource.getResponseField('buildsNotDeleted') as unknown as shapes.CodeBuildBuildNotDeleted[];
  }

}

export class CodeBuildResponsesDeleteSourceCredentials {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildDeleteSourceCredentialsInput) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteSourceCredentials',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.DeleteSourceCredentials.arn'),
        outputPath: 'arn',
        parameters: {
          arn: this.__input.arn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteSourceCredentials.arn', props);
    return resource.getResponseField('arn') as unknown as string;
  }

}

export class CodeBuildResponsesDescribeCodeCoverages {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildDescribeCodeCoveragesInput) {
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeCodeCoverages',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.DescribeCodeCoverages.nextToken'),
        outputPath: 'nextToken',
        parameters: {
          reportArn: this.__input.reportArn,
          nextToken: this.__input.nextToken,
          maxResults: this.__input.maxResults,
          sortOrder: this.__input.sortOrder,
          sortBy: this.__input.sortBy,
          minLineCoveragePercentage: this.__input.minLineCoveragePercentage,
          maxLineCoveragePercentage: this.__input.maxLineCoveragePercentage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeCodeCoverages.nextToken', props);
    return resource.getResponseField('nextToken') as unknown as string;
  }

  public get codeCoverages(): shapes.CodeBuildCodeCoverage[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeCodeCoverages',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.DescribeCodeCoverages.codeCoverages'),
        outputPath: 'codeCoverages',
        parameters: {
          reportArn: this.__input.reportArn,
          nextToken: this.__input.nextToken,
          maxResults: this.__input.maxResults,
          sortOrder: this.__input.sortOrder,
          sortBy: this.__input.sortBy,
          minLineCoveragePercentage: this.__input.minLineCoveragePercentage,
          maxLineCoveragePercentage: this.__input.maxLineCoveragePercentage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeCodeCoverages.codeCoverages', props);
    return resource.getResponseField('codeCoverages') as unknown as shapes.CodeBuildCodeCoverage[];
  }

}

export class CodeBuildResponsesDescribeTestCases {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildDescribeTestCasesInput) {
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTestCases',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.DescribeTestCases.nextToken'),
        outputPath: 'nextToken',
        parameters: {
          reportArn: this.__input.reportArn,
          nextToken: this.__input.nextToken,
          maxResults: this.__input.maxResults,
          filter: {
            status: this.__input.filter?.status,
            keyword: this.__input.filter?.keyword,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeTestCases.nextToken', props);
    return resource.getResponseField('nextToken') as unknown as string;
  }

  public get testCases(): shapes.CodeBuildTestCase[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTestCases',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.DescribeTestCases.testCases'),
        outputPath: 'testCases',
        parameters: {
          reportArn: this.__input.reportArn,
          nextToken: this.__input.nextToken,
          maxResults: this.__input.maxResults,
          filter: {
            status: this.__input.filter?.status,
            keyword: this.__input.filter?.keyword,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeTestCases.testCases', props);
    return resource.getResponseField('testCases') as unknown as shapes.CodeBuildTestCase[];
  }

}

export class CodeBuildResponsesFetchReportGroupTrend {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildGetReportGroupTrendInput) {
  }

  public get stats(): CodeBuildResponsesFetchReportGroupTrendStats {
    return new CodeBuildResponsesFetchReportGroupTrendStats(this.__scope, this.__resources, this.__input);
  }

  public get rawData(): shapes.CodeBuildReportWithRawData[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReportGroupTrend',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.GetReportGroupTrend.rawData'),
        outputPath: 'rawData',
        parameters: {
          reportGroupArn: this.__input.reportGroupArn,
          numOfReports: this.__input.numOfReports,
          trendField: this.__input.trendField,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetReportGroupTrend.rawData', props);
    return resource.getResponseField('rawData') as unknown as shapes.CodeBuildReportWithRawData[];
  }

}

export class CodeBuildResponsesFetchReportGroupTrendStats {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildGetReportGroupTrendInput) {
  }

  public get average(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReportGroupTrend',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.GetReportGroupTrend.stats.average'),
        outputPath: 'stats.average',
        parameters: {
          reportGroupArn: this.__input.reportGroupArn,
          numOfReports: this.__input.numOfReports,
          trendField: this.__input.trendField,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetReportGroupTrend.stats.average', props);
    return resource.getResponseField('stats.average') as unknown as string;
  }

  public get max(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReportGroupTrend',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.GetReportGroupTrend.stats.max'),
        outputPath: 'stats.max',
        parameters: {
          reportGroupArn: this.__input.reportGroupArn,
          numOfReports: this.__input.numOfReports,
          trendField: this.__input.trendField,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetReportGroupTrend.stats.max', props);
    return resource.getResponseField('stats.max') as unknown as string;
  }

  public get min(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReportGroupTrend',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.GetReportGroupTrend.stats.min'),
        outputPath: 'stats.min',
        parameters: {
          reportGroupArn: this.__input.reportGroupArn,
          numOfReports: this.__input.numOfReports,
          trendField: this.__input.trendField,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetReportGroupTrend.stats.min', props);
    return resource.getResponseField('stats.min') as unknown as string;
  }

}

export class CodeBuildResponsesFetchResourcePolicy {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildGetResourcePolicyInput) {
  }

  public get policy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getResourcePolicy',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.GetResourcePolicy.policy'),
        outputPath: 'policy',
        parameters: {
          resourceArn: this.__input.resourceArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetResourcePolicy.policy', props);
    return resource.getResponseField('policy') as unknown as string;
  }

}

export class CodeBuildResponsesImportSourceCredentials {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildImportSourceCredentialsInput) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importSourceCredentials',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ImportSourceCredentials.arn'),
        outputPath: 'arn',
        parameters: {
          username: this.__input.username,
          token: this.__input.token,
          serverType: this.__input.serverType,
          authType: this.__input.authType,
          shouldOverwrite: this.__input.shouldOverwrite,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportSourceCredentials.arn', props);
    return resource.getResponseField('arn') as unknown as string;
  }

}

export class CodeBuildResponsesListBuildBatches {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildListBuildBatchesInput) {
  }

  public get ids(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listBuildBatches',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListBuildBatches.ids'),
        outputPath: 'ids',
        parameters: {
          filter: {
            status: this.__input.filter?.status,
          },
          maxResults: this.__input.maxResults,
          sortOrder: this.__input.sortOrder,
          nextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListBuildBatches.ids', props);
    return resource.getResponseField('ids') as unknown as string[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listBuildBatches',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListBuildBatches.nextToken'),
        outputPath: 'nextToken',
        parameters: {
          filter: {
            status: this.__input.filter?.status,
          },
          maxResults: this.__input.maxResults,
          sortOrder: this.__input.sortOrder,
          nextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListBuildBatches.nextToken', props);
    return resource.getResponseField('nextToken') as unknown as string;
  }

}

export class CodeBuildResponsesListBuildBatchesForProject {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildListBuildBatchesForProjectInput) {
  }

  public get ids(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listBuildBatchesForProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListBuildBatchesForProject.ids'),
        outputPath: 'ids',
        parameters: {
          projectName: this.__input.projectName,
          filter: {
            status: this.__input.filter?.status,
          },
          maxResults: this.__input.maxResults,
          sortOrder: this.__input.sortOrder,
          nextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListBuildBatchesForProject.ids', props);
    return resource.getResponseField('ids') as unknown as string[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listBuildBatchesForProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListBuildBatchesForProject.nextToken'),
        outputPath: 'nextToken',
        parameters: {
          projectName: this.__input.projectName,
          filter: {
            status: this.__input.filter?.status,
          },
          maxResults: this.__input.maxResults,
          sortOrder: this.__input.sortOrder,
          nextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListBuildBatchesForProject.nextToken', props);
    return resource.getResponseField('nextToken') as unknown as string;
  }

}

export class CodeBuildResponsesListBuilds {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildListBuildsInput) {
  }

  public get ids(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listBuilds',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListBuilds.ids'),
        outputPath: 'ids',
        parameters: {
          sortOrder: this.__input.sortOrder,
          nextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListBuilds.ids', props);
    return resource.getResponseField('ids') as unknown as string[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listBuilds',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListBuilds.nextToken'),
        outputPath: 'nextToken',
        parameters: {
          sortOrder: this.__input.sortOrder,
          nextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListBuilds.nextToken', props);
    return resource.getResponseField('nextToken') as unknown as string;
  }

}

export class CodeBuildResponsesListBuildsForProject {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildListBuildsForProjectInput) {
  }

  public get ids(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listBuildsForProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListBuildsForProject.ids'),
        outputPath: 'ids',
        parameters: {
          projectName: this.__input.projectName,
          sortOrder: this.__input.sortOrder,
          nextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListBuildsForProject.ids', props);
    return resource.getResponseField('ids') as unknown as string[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listBuildsForProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListBuildsForProject.nextToken'),
        outputPath: 'nextToken',
        parameters: {
          projectName: this.__input.projectName,
          sortOrder: this.__input.sortOrder,
          nextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListBuildsForProject.nextToken', props);
    return resource.getResponseField('nextToken') as unknown as string;
  }

}

export class CodeBuildResponsesListCuratedEnvironmentImages {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[]) {
  }

  public get platforms(): shapes.CodeBuildEnvironmentPlatform[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listCuratedEnvironmentImages',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListCuratedEnvironmentImages.platforms'),
        outputPath: 'platforms',
        parameters: {
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListCuratedEnvironmentImages.platforms', props);
    return resource.getResponseField('platforms') as unknown as shapes.CodeBuildEnvironmentPlatform[];
  }

}

export class CodeBuildResponsesListProjects {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildListProjectsInput) {
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listProjects',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListProjects.nextToken'),
        outputPath: 'nextToken',
        parameters: {
          sortBy: this.__input.sortBy,
          sortOrder: this.__input.sortOrder,
          nextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListProjects.nextToken', props);
    return resource.getResponseField('nextToken') as unknown as string;
  }

  public get projects(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listProjects',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListProjects.projects'),
        outputPath: 'projects',
        parameters: {
          sortBy: this.__input.sortBy,
          sortOrder: this.__input.sortOrder,
          nextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListProjects.projects', props);
    return resource.getResponseField('projects') as unknown as string[];
  }

}

export class CodeBuildResponsesListReportGroups {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildListReportGroupsInput) {
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listReportGroups',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListReportGroups.nextToken'),
        outputPath: 'nextToken',
        parameters: {
          sortOrder: this.__input.sortOrder,
          sortBy: this.__input.sortBy,
          nextToken: this.__input.nextToken,
          maxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListReportGroups.nextToken', props);
    return resource.getResponseField('nextToken') as unknown as string;
  }

  public get reportGroups(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listReportGroups',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListReportGroups.reportGroups'),
        outputPath: 'reportGroups',
        parameters: {
          sortOrder: this.__input.sortOrder,
          sortBy: this.__input.sortBy,
          nextToken: this.__input.nextToken,
          maxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListReportGroups.reportGroups', props);
    return resource.getResponseField('reportGroups') as unknown as string[];
  }

}

export class CodeBuildResponsesListReports {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildListReportsInput) {
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listReports',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListReports.nextToken'),
        outputPath: 'nextToken',
        parameters: {
          sortOrder: this.__input.sortOrder,
          nextToken: this.__input.nextToken,
          maxResults: this.__input.maxResults,
          filter: {
            status: this.__input.filter?.status,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListReports.nextToken', props);
    return resource.getResponseField('nextToken') as unknown as string;
  }

  public get reports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listReports',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListReports.reports'),
        outputPath: 'reports',
        parameters: {
          sortOrder: this.__input.sortOrder,
          nextToken: this.__input.nextToken,
          maxResults: this.__input.maxResults,
          filter: {
            status: this.__input.filter?.status,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListReports.reports', props);
    return resource.getResponseField('reports') as unknown as string[];
  }

}

export class CodeBuildResponsesListReportsForReportGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildListReportsForReportGroupInput) {
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listReportsForReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListReportsForReportGroup.nextToken'),
        outputPath: 'nextToken',
        parameters: {
          reportGroupArn: this.__input.reportGroupArn,
          nextToken: this.__input.nextToken,
          sortOrder: this.__input.sortOrder,
          maxResults: this.__input.maxResults,
          filter: {
            status: this.__input.filter?.status,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListReportsForReportGroup.nextToken', props);
    return resource.getResponseField('nextToken') as unknown as string;
  }

  public get reports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listReportsForReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListReportsForReportGroup.reports'),
        outputPath: 'reports',
        parameters: {
          reportGroupArn: this.__input.reportGroupArn,
          nextToken: this.__input.nextToken,
          sortOrder: this.__input.sortOrder,
          maxResults: this.__input.maxResults,
          filter: {
            status: this.__input.filter?.status,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListReportsForReportGroup.reports', props);
    return resource.getResponseField('reports') as unknown as string[];
  }

}

export class CodeBuildResponsesListSharedProjects {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildListSharedProjectsInput) {
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listSharedProjects',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListSharedProjects.nextToken'),
        outputPath: 'nextToken',
        parameters: {
          sortBy: this.__input.sortBy,
          sortOrder: this.__input.sortOrder,
          maxResults: this.__input.maxResults,
          nextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListSharedProjects.nextToken', props);
    return resource.getResponseField('nextToken') as unknown as string;
  }

  public get projects(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listSharedProjects',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListSharedProjects.projects'),
        outputPath: 'projects',
        parameters: {
          sortBy: this.__input.sortBy,
          sortOrder: this.__input.sortOrder,
          maxResults: this.__input.maxResults,
          nextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListSharedProjects.projects', props);
    return resource.getResponseField('projects') as unknown as string[];
  }

}

export class CodeBuildResponsesListSharedReportGroups {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildListSharedReportGroupsInput) {
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listSharedReportGroups',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListSharedReportGroups.nextToken'),
        outputPath: 'nextToken',
        parameters: {
          sortOrder: this.__input.sortOrder,
          sortBy: this.__input.sortBy,
          nextToken: this.__input.nextToken,
          maxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListSharedReportGroups.nextToken', props);
    return resource.getResponseField('nextToken') as unknown as string;
  }

  public get reportGroups(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listSharedReportGroups',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListSharedReportGroups.reportGroups'),
        outputPath: 'reportGroups',
        parameters: {
          sortOrder: this.__input.sortOrder,
          sortBy: this.__input.sortBy,
          nextToken: this.__input.nextToken,
          maxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListSharedReportGroups.reportGroups', props);
    return resource.getResponseField('reportGroups') as unknown as string[];
  }

}

export class CodeBuildResponsesListSourceCredentials {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[]) {
  }

  public get sourceCredentialsInfos(): shapes.CodeBuildSourceCredentialsInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listSourceCredentials',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.ListSourceCredentials.sourceCredentialsInfos'),
        outputPath: 'sourceCredentialsInfos',
        parameters: {
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListSourceCredentials.sourceCredentialsInfos', props);
    return resource.getResponseField('sourceCredentialsInfos') as unknown as shapes.CodeBuildSourceCredentialsInfo[];
  }

}

export class CodeBuildResponsesPutResourcePolicy {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildPutResourcePolicyInput) {
  }

  public get resourceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'putResourcePolicy',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.PutResourcePolicy.resourceArn'),
        outputPath: 'resourceArn',
        parameters: {
          policy: this.__input.policy,
          resourceArn: this.__input.resourceArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PutResourcePolicy.resourceArn', props);
    return resource.getResponseField('resourceArn') as unknown as string;
  }

}

export class CodeBuildResponsesRetryBuild {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildRetryBuildInput) {
  }

  public get build2(): CodeBuildResponsesRetryBuildBuild2 {
    return new CodeBuildResponsesRetryBuildBuild2(this.__scope, this.__resources, this.__input);
  }

}

export class CodeBuildResponsesRetryBuildBuild2 {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildRetryBuildInput) {
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.id'),
        outputPath: 'build.id',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.id', props);
    return resource.getResponseField('build.id') as unknown as string;
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.arn'),
        outputPath: 'build.arn',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.arn', props);
    return resource.getResponseField('build.arn') as unknown as string;
  }

  public get buildNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.buildNumber'),
        outputPath: 'build.buildNumber',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.buildNumber', props);
    return resource.getResponseField('build.buildNumber') as unknown as number;
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.startTime'),
        outputPath: 'build.startTime',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.startTime', props);
    return resource.getResponseField('build.startTime') as unknown as string;
  }

  public get endTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.endTime'),
        outputPath: 'build.endTime',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.endTime', props);
    return resource.getResponseField('build.endTime') as unknown as string;
  }

  public get currentPhase(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.currentPhase'),
        outputPath: 'build.currentPhase',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.currentPhase', props);
    return resource.getResponseField('build.currentPhase') as unknown as string;
  }

  public get buildStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.buildStatus'),
        outputPath: 'build.buildStatus',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.buildStatus', props);
    return resource.getResponseField('build.buildStatus') as unknown as string;
  }

  public get sourceVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.sourceVersion'),
        outputPath: 'build.sourceVersion',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.sourceVersion', props);
    return resource.getResponseField('build.sourceVersion') as unknown as string;
  }

  public get resolvedSourceVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.resolvedSourceVersion'),
        outputPath: 'build.resolvedSourceVersion',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.resolvedSourceVersion', props);
    return resource.getResponseField('build.resolvedSourceVersion') as unknown as string;
  }

  public get projectName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.projectName'),
        outputPath: 'build.projectName',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.projectName', props);
    return resource.getResponseField('build.projectName') as unknown as string;
  }

  public get phases(): shapes.CodeBuildBuildPhase[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.phases'),
        outputPath: 'build.phases',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.phases', props);
    return resource.getResponseField('build.phases') as unknown as shapes.CodeBuildBuildPhase[];
  }

  public get source(): CodeBuildResponsesRetryBuildBuild2Source {
    return new CodeBuildResponsesRetryBuildBuild2Source(this.__scope, this.__resources, this.__input);
  }

  public get secondarySources(): shapes.CodeBuildProjectSource[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.secondarySources'),
        outputPath: 'build.secondarySources',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.secondarySources', props);
    return resource.getResponseField('build.secondarySources') as unknown as shapes.CodeBuildProjectSource[];
  }

  public get secondarySourceVersions(): shapes.CodeBuildProjectSourceVersion[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.secondarySourceVersions'),
        outputPath: 'build.secondarySourceVersions',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.secondarySourceVersions', props);
    return resource.getResponseField('build.secondarySourceVersions') as unknown as shapes.CodeBuildProjectSourceVersion[];
  }

  public get artifacts(): CodeBuildResponsesRetryBuildBuild2Artifacts {
    return new CodeBuildResponsesRetryBuildBuild2Artifacts(this.__scope, this.__resources, this.__input);
  }

  public get secondaryArtifacts(): shapes.CodeBuildBuildArtifacts[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.secondaryArtifacts'),
        outputPath: 'build.secondaryArtifacts',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.secondaryArtifacts', props);
    return resource.getResponseField('build.secondaryArtifacts') as unknown as shapes.CodeBuildBuildArtifacts[];
  }

  public get cache(): CodeBuildResponsesRetryBuildBuild2Cache {
    return new CodeBuildResponsesRetryBuildBuild2Cache(this.__scope, this.__resources, this.__input);
  }

  public get environment(): CodeBuildResponsesRetryBuildBuild2Environment {
    return new CodeBuildResponsesRetryBuildBuild2Environment(this.__scope, this.__resources, this.__input);
  }

  public get serviceRole(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.serviceRole'),
        outputPath: 'build.serviceRole',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.serviceRole', props);
    return resource.getResponseField('build.serviceRole') as unknown as string;
  }

  public get logs(): CodeBuildResponsesRetryBuildBuild2Logs {
    return new CodeBuildResponsesRetryBuildBuild2Logs(this.__scope, this.__resources, this.__input);
  }

  public get timeoutInMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.timeoutInMinutes'),
        outputPath: 'build.timeoutInMinutes',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.timeoutInMinutes', props);
    return resource.getResponseField('build.timeoutInMinutes') as unknown as number;
  }

  public get queuedTimeoutInMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.queuedTimeoutInMinutes'),
        outputPath: 'build.queuedTimeoutInMinutes',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.queuedTimeoutInMinutes', props);
    return resource.getResponseField('build.queuedTimeoutInMinutes') as unknown as number;
  }

  public get buildComplete(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.buildComplete'),
        outputPath: 'build.buildComplete',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.buildComplete', props);
    return resource.getResponseField('build.buildComplete') as unknown as boolean;
  }

  public get initiator(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.initiator'),
        outputPath: 'build.initiator',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.initiator', props);
    return resource.getResponseField('build.initiator') as unknown as string;
  }

  public get vpcConfig(): CodeBuildResponsesRetryBuildBuild2VpcConfig {
    return new CodeBuildResponsesRetryBuildBuild2VpcConfig(this.__scope, this.__resources, this.__input);
  }

  public get networkInterface(): CodeBuildResponsesRetryBuildBuild2NetworkInterface {
    return new CodeBuildResponsesRetryBuildBuild2NetworkInterface(this.__scope, this.__resources, this.__input);
  }

  public get encryptionKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.encryptionKey'),
        outputPath: 'build.encryptionKey',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.encryptionKey', props);
    return resource.getResponseField('build.encryptionKey') as unknown as string;
  }

  public get exportedEnvironmentVariables(): shapes.CodeBuildExportedEnvironmentVariable[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.exportedEnvironmentVariables'),
        outputPath: 'build.exportedEnvironmentVariables',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.exportedEnvironmentVariables', props);
    return resource.getResponseField('build.exportedEnvironmentVariables') as unknown as shapes.CodeBuildExportedEnvironmentVariable[];
  }

  public get reportArns(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.reportArns'),
        outputPath: 'build.reportArns',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.reportArns', props);
    return resource.getResponseField('build.reportArns') as unknown as string[];
  }

  public get fileSystemLocations(): shapes.CodeBuildProjectFileSystemLocation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.fileSystemLocations'),
        outputPath: 'build.fileSystemLocations',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.fileSystemLocations', props);
    return resource.getResponseField('build.fileSystemLocations') as unknown as shapes.CodeBuildProjectFileSystemLocation[];
  }

  public get debugSession(): CodeBuildResponsesRetryBuildBuild2DebugSession {
    return new CodeBuildResponsesRetryBuildBuild2DebugSession(this.__scope, this.__resources, this.__input);
  }

  public get buildBatchArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.buildBatchArn'),
        outputPath: 'build.buildBatchArn',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.buildBatchArn', props);
    return resource.getResponseField('build.buildBatchArn') as unknown as string;
  }

}

export class CodeBuildResponsesRetryBuildBuild2Source {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildRetryBuildInput) {
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.source.type'),
        outputPath: 'build.source.type',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.source.type', props);
    return resource.getResponseField('build.source.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.source.location'),
        outputPath: 'build.source.location',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.source.location', props);
    return resource.getResponseField('build.source.location') as unknown as string;
  }

  public get gitCloneDepth(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.source.gitCloneDepth'),
        outputPath: 'build.source.gitCloneDepth',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.source.gitCloneDepth', props);
    return resource.getResponseField('build.source.gitCloneDepth') as unknown as number;
  }

  public get gitSubmodulesConfig(): CodeBuildResponsesRetryBuildBuild2SourceGitSubmodulesConfig {
    return new CodeBuildResponsesRetryBuildBuild2SourceGitSubmodulesConfig(this.__scope, this.__resources, this.__input);
  }

  public get buildspec(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.source.buildspec'),
        outputPath: 'build.source.buildspec',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.source.buildspec', props);
    return resource.getResponseField('build.source.buildspec') as unknown as string;
  }

  public get auth(): CodeBuildResponsesRetryBuildBuild2SourceAuth {
    return new CodeBuildResponsesRetryBuildBuild2SourceAuth(this.__scope, this.__resources, this.__input);
  }

  public get reportBuildStatus(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.source.reportBuildStatus'),
        outputPath: 'build.source.reportBuildStatus',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.source.reportBuildStatus', props);
    return resource.getResponseField('build.source.reportBuildStatus') as unknown as boolean;
  }

  public get buildStatusConfig(): CodeBuildResponsesRetryBuildBuild2SourceBuildStatusConfig {
    return new CodeBuildResponsesRetryBuildBuild2SourceBuildStatusConfig(this.__scope, this.__resources, this.__input);
  }

  public get insecureSsl(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.source.insecureSsl'),
        outputPath: 'build.source.insecureSsl',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.source.insecureSsl', props);
    return resource.getResponseField('build.source.insecureSsl') as unknown as boolean;
  }

  public get sourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.source.sourceIdentifier'),
        outputPath: 'build.source.sourceIdentifier',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.source.sourceIdentifier', props);
    return resource.getResponseField('build.source.sourceIdentifier') as unknown as string;
  }

}

export class CodeBuildResponsesRetryBuildBuild2SourceGitSubmodulesConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildRetryBuildInput) {
  }

  public get fetchSubmodules(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.source.gitSubmodulesConfig.fetchSubmodules'),
        outputPath: 'build.source.gitSubmodulesConfig.fetchSubmodules',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.source.gitSubmodulesConfig.fetchSubmodules', props);
    return resource.getResponseField('build.source.gitSubmodulesConfig.fetchSubmodules') as unknown as boolean;
  }

}

export class CodeBuildResponsesRetryBuildBuild2SourceAuth {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildRetryBuildInput) {
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.source.auth.type'),
        outputPath: 'build.source.auth.type',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.source.auth.type', props);
    return resource.getResponseField('build.source.auth.type') as unknown as string;
  }

  public get resource(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.source.auth.resource'),
        outputPath: 'build.source.auth.resource',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.source.auth.resource', props);
    return resource.getResponseField('build.source.auth.resource') as unknown as string;
  }

}

export class CodeBuildResponsesRetryBuildBuild2SourceBuildStatusConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildRetryBuildInput) {
  }

  public get context(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.source.buildStatusConfig.context'),
        outputPath: 'build.source.buildStatusConfig.context',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.source.buildStatusConfig.context', props);
    return resource.getResponseField('build.source.buildStatusConfig.context') as unknown as string;
  }

  public get targetUrl(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.source.buildStatusConfig.targetUrl'),
        outputPath: 'build.source.buildStatusConfig.targetUrl',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.source.buildStatusConfig.targetUrl', props);
    return resource.getResponseField('build.source.buildStatusConfig.targetUrl') as unknown as string;
  }

}

export class CodeBuildResponsesRetryBuildBuild2Artifacts {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildRetryBuildInput) {
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.artifacts.location'),
        outputPath: 'build.artifacts.location',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.artifacts.location', props);
    return resource.getResponseField('build.artifacts.location') as unknown as string;
  }

  public get sha256Sum(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.artifacts.sha256sum'),
        outputPath: 'build.artifacts.sha256sum',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.artifacts.sha256sum', props);
    return resource.getResponseField('build.artifacts.sha256sum') as unknown as string;
  }

  public get md5Sum(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.artifacts.md5sum'),
        outputPath: 'build.artifacts.md5sum',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.artifacts.md5sum', props);
    return resource.getResponseField('build.artifacts.md5sum') as unknown as string;
  }

  public get overrideArtifactName(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.artifacts.overrideArtifactName'),
        outputPath: 'build.artifacts.overrideArtifactName',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.artifacts.overrideArtifactName', props);
    return resource.getResponseField('build.artifacts.overrideArtifactName') as unknown as boolean;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.artifacts.encryptionDisabled'),
        outputPath: 'build.artifacts.encryptionDisabled',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.artifacts.encryptionDisabled', props);
    return resource.getResponseField('build.artifacts.encryptionDisabled') as unknown as boolean;
  }

  public get artifactIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.artifacts.artifactIdentifier'),
        outputPath: 'build.artifacts.artifactIdentifier',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.artifacts.artifactIdentifier', props);
    return resource.getResponseField('build.artifacts.artifactIdentifier') as unknown as string;
  }

  public get bucketOwnerAccess(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.artifacts.bucketOwnerAccess'),
        outputPath: 'build.artifacts.bucketOwnerAccess',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.artifacts.bucketOwnerAccess', props);
    return resource.getResponseField('build.artifacts.bucketOwnerAccess') as unknown as string;
  }

}

export class CodeBuildResponsesRetryBuildBuild2Cache {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildRetryBuildInput) {
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.cache.type'),
        outputPath: 'build.cache.type',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.cache.type', props);
    return resource.getResponseField('build.cache.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.cache.location'),
        outputPath: 'build.cache.location',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.cache.location', props);
    return resource.getResponseField('build.cache.location') as unknown as string;
  }

  public get modes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.cache.modes'),
        outputPath: 'build.cache.modes',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.cache.modes', props);
    return resource.getResponseField('build.cache.modes') as unknown as string[];
  }

}

export class CodeBuildResponsesRetryBuildBuild2Environment {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildRetryBuildInput) {
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.environment.type'),
        outputPath: 'build.environment.type',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.environment.type', props);
    return resource.getResponseField('build.environment.type') as unknown as string;
  }

  public get image(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.environment.image'),
        outputPath: 'build.environment.image',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.environment.image', props);
    return resource.getResponseField('build.environment.image') as unknown as string;
  }

  public get computeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.environment.computeType'),
        outputPath: 'build.environment.computeType',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.environment.computeType', props);
    return resource.getResponseField('build.environment.computeType') as unknown as string;
  }

  public get environmentVariables(): shapes.CodeBuildEnvironmentVariable[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.environment.environmentVariables'),
        outputPath: 'build.environment.environmentVariables',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.environment.environmentVariables', props);
    return resource.getResponseField('build.environment.environmentVariables') as unknown as shapes.CodeBuildEnvironmentVariable[];
  }

  public get privilegedMode(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.environment.privilegedMode'),
        outputPath: 'build.environment.privilegedMode',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.environment.privilegedMode', props);
    return resource.getResponseField('build.environment.privilegedMode') as unknown as boolean;
  }

  public get certificate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.environment.certificate'),
        outputPath: 'build.environment.certificate',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.environment.certificate', props);
    return resource.getResponseField('build.environment.certificate') as unknown as string;
  }

  public get registryCredential(): CodeBuildResponsesRetryBuildBuild2EnvironmentRegistryCredential {
    return new CodeBuildResponsesRetryBuildBuild2EnvironmentRegistryCredential(this.__scope, this.__resources, this.__input);
  }

  public get imagePullCredentialsType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.environment.imagePullCredentialsType'),
        outputPath: 'build.environment.imagePullCredentialsType',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.environment.imagePullCredentialsType', props);
    return resource.getResponseField('build.environment.imagePullCredentialsType') as unknown as string;
  }

}

export class CodeBuildResponsesRetryBuildBuild2EnvironmentRegistryCredential {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildRetryBuildInput) {
  }

  public get credential(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.environment.registryCredential.credential'),
        outputPath: 'build.environment.registryCredential.credential',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.environment.registryCredential.credential', props);
    return resource.getResponseField('build.environment.registryCredential.credential') as unknown as string;
  }

  public get credentialProvider(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.environment.registryCredential.credentialProvider'),
        outputPath: 'build.environment.registryCredential.credentialProvider',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.environment.registryCredential.credentialProvider', props);
    return resource.getResponseField('build.environment.registryCredential.credentialProvider') as unknown as string;
  }

}

export class CodeBuildResponsesRetryBuildBuild2Logs {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildRetryBuildInput) {
  }

  public get groupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.logs.groupName'),
        outputPath: 'build.logs.groupName',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.logs.groupName', props);
    return resource.getResponseField('build.logs.groupName') as unknown as string;
  }

  public get streamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.logs.streamName'),
        outputPath: 'build.logs.streamName',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.logs.streamName', props);
    return resource.getResponseField('build.logs.streamName') as unknown as string;
  }

  public get deepLink(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.logs.deepLink'),
        outputPath: 'build.logs.deepLink',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.logs.deepLink', props);
    return resource.getResponseField('build.logs.deepLink') as unknown as string;
  }

  public get s3DeepLink(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.logs.s3DeepLink'),
        outputPath: 'build.logs.s3DeepLink',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.logs.s3DeepLink', props);
    return resource.getResponseField('build.logs.s3DeepLink') as unknown as string;
  }

  public get cloudWatchLogsArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.logs.cloudWatchLogsArn'),
        outputPath: 'build.logs.cloudWatchLogsArn',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.logs.cloudWatchLogsArn', props);
    return resource.getResponseField('build.logs.cloudWatchLogsArn') as unknown as string;
  }

  public get s3LogsArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.logs.s3LogsArn'),
        outputPath: 'build.logs.s3LogsArn',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.logs.s3LogsArn', props);
    return resource.getResponseField('build.logs.s3LogsArn') as unknown as string;
  }

  public get cloudWatchLogs(): CodeBuildResponsesRetryBuildBuild2LogsCloudWatchLogs {
    return new CodeBuildResponsesRetryBuildBuild2LogsCloudWatchLogs(this.__scope, this.__resources, this.__input);
  }

  public get s3Logs(): CodeBuildResponsesRetryBuildBuild2LogsS3Logs {
    return new CodeBuildResponsesRetryBuildBuild2LogsS3Logs(this.__scope, this.__resources, this.__input);
  }

}

export class CodeBuildResponsesRetryBuildBuild2LogsCloudWatchLogs {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildRetryBuildInput) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.logs.cloudWatchLogs.status'),
        outputPath: 'build.logs.cloudWatchLogs.status',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.logs.cloudWatchLogs.status', props);
    return resource.getResponseField('build.logs.cloudWatchLogs.status') as unknown as string;
  }

  public get groupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.logs.cloudWatchLogs.groupName'),
        outputPath: 'build.logs.cloudWatchLogs.groupName',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.logs.cloudWatchLogs.groupName', props);
    return resource.getResponseField('build.logs.cloudWatchLogs.groupName') as unknown as string;
  }

  public get streamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.logs.cloudWatchLogs.streamName'),
        outputPath: 'build.logs.cloudWatchLogs.streamName',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.logs.cloudWatchLogs.streamName', props);
    return resource.getResponseField('build.logs.cloudWatchLogs.streamName') as unknown as string;
  }

}

export class CodeBuildResponsesRetryBuildBuild2LogsS3Logs {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildRetryBuildInput) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.logs.s3Logs.status'),
        outputPath: 'build.logs.s3Logs.status',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.logs.s3Logs.status', props);
    return resource.getResponseField('build.logs.s3Logs.status') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.logs.s3Logs.location'),
        outputPath: 'build.logs.s3Logs.location',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.logs.s3Logs.location', props);
    return resource.getResponseField('build.logs.s3Logs.location') as unknown as string;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.logs.s3Logs.encryptionDisabled'),
        outputPath: 'build.logs.s3Logs.encryptionDisabled',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.logs.s3Logs.encryptionDisabled', props);
    return resource.getResponseField('build.logs.s3Logs.encryptionDisabled') as unknown as boolean;
  }

  public get bucketOwnerAccess(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.logs.s3Logs.bucketOwnerAccess'),
        outputPath: 'build.logs.s3Logs.bucketOwnerAccess',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.logs.s3Logs.bucketOwnerAccess', props);
    return resource.getResponseField('build.logs.s3Logs.bucketOwnerAccess') as unknown as string;
  }

}

export class CodeBuildResponsesRetryBuildBuild2VpcConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildRetryBuildInput) {
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.vpcConfig.vpcId'),
        outputPath: 'build.vpcConfig.vpcId',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.vpcConfig.vpcId', props);
    return resource.getResponseField('build.vpcConfig.vpcId') as unknown as string;
  }

  public get subnets(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.vpcConfig.subnets'),
        outputPath: 'build.vpcConfig.subnets',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.vpcConfig.subnets', props);
    return resource.getResponseField('build.vpcConfig.subnets') as unknown as string[];
  }

  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.vpcConfig.securityGroupIds'),
        outputPath: 'build.vpcConfig.securityGroupIds',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.vpcConfig.securityGroupIds', props);
    return resource.getResponseField('build.vpcConfig.securityGroupIds') as unknown as string[];
  }

}

export class CodeBuildResponsesRetryBuildBuild2NetworkInterface {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildRetryBuildInput) {
  }

  public get subnetId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.networkInterface.subnetId'),
        outputPath: 'build.networkInterface.subnetId',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.networkInterface.subnetId', props);
    return resource.getResponseField('build.networkInterface.subnetId') as unknown as string;
  }

  public get networkInterfaceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.networkInterface.networkInterfaceId'),
        outputPath: 'build.networkInterface.networkInterfaceId',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.networkInterface.networkInterfaceId', props);
    return resource.getResponseField('build.networkInterface.networkInterfaceId') as unknown as string;
  }

}

export class CodeBuildResponsesRetryBuildBuild2DebugSession {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildRetryBuildInput) {
  }

  public get sessionEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.debugSession.sessionEnabled'),
        outputPath: 'build.debugSession.sessionEnabled',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.debugSession.sessionEnabled', props);
    return resource.getResponseField('build.debugSession.sessionEnabled') as unknown as boolean;
  }

  public get sessionTarget(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuild.build.debugSession.sessionTarget'),
        outputPath: 'build.debugSession.sessionTarget',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuild.build.debugSession.sessionTarget', props);
    return resource.getResponseField('build.debugSession.sessionTarget') as unknown as string;
  }

}

export class CodeBuildResponsesRetryBuildBatch {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildRetryBuildBatchInput) {
  }

  public get buildBatch(): CodeBuildResponsesRetryBuildBatchBuildBatch {
    return new CodeBuildResponsesRetryBuildBatchBuildBatch(this.__scope, this.__resources, this.__input);
  }

}

export class CodeBuildResponsesRetryBuildBatchBuildBatch {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildRetryBuildBatchInput) {
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.id'),
        outputPath: 'buildBatch.id',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.id', props);
    return resource.getResponseField('buildBatch.id') as unknown as string;
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.arn'),
        outputPath: 'buildBatch.arn',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.arn', props);
    return resource.getResponseField('buildBatch.arn') as unknown as string;
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.startTime'),
        outputPath: 'buildBatch.startTime',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.startTime', props);
    return resource.getResponseField('buildBatch.startTime') as unknown as string;
  }

  public get endTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.endTime'),
        outputPath: 'buildBatch.endTime',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.endTime', props);
    return resource.getResponseField('buildBatch.endTime') as unknown as string;
  }

  public get currentPhase(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.currentPhase'),
        outputPath: 'buildBatch.currentPhase',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.currentPhase', props);
    return resource.getResponseField('buildBatch.currentPhase') as unknown as string;
  }

  public get buildBatchStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.buildBatchStatus'),
        outputPath: 'buildBatch.buildBatchStatus',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.buildBatchStatus', props);
    return resource.getResponseField('buildBatch.buildBatchStatus') as unknown as string;
  }

  public get sourceVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.sourceVersion'),
        outputPath: 'buildBatch.sourceVersion',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.sourceVersion', props);
    return resource.getResponseField('buildBatch.sourceVersion') as unknown as string;
  }

  public get resolvedSourceVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.resolvedSourceVersion'),
        outputPath: 'buildBatch.resolvedSourceVersion',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.resolvedSourceVersion', props);
    return resource.getResponseField('buildBatch.resolvedSourceVersion') as unknown as string;
  }

  public get projectName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.projectName'),
        outputPath: 'buildBatch.projectName',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.projectName', props);
    return resource.getResponseField('buildBatch.projectName') as unknown as string;
  }

  public get phases(): shapes.CodeBuildBuildBatchPhase[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.phases'),
        outputPath: 'buildBatch.phases',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.phases', props);
    return resource.getResponseField('buildBatch.phases') as unknown as shapes.CodeBuildBuildBatchPhase[];
  }

  public get source(): CodeBuildResponsesRetryBuildBatchBuildBatchSource {
    return new CodeBuildResponsesRetryBuildBatchBuildBatchSource(this.__scope, this.__resources, this.__input);
  }

  public get secondarySources(): shapes.CodeBuildProjectSource[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.secondarySources'),
        outputPath: 'buildBatch.secondarySources',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.secondarySources', props);
    return resource.getResponseField('buildBatch.secondarySources') as unknown as shapes.CodeBuildProjectSource[];
  }

  public get secondarySourceVersions(): shapes.CodeBuildProjectSourceVersion[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.secondarySourceVersions'),
        outputPath: 'buildBatch.secondarySourceVersions',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.secondarySourceVersions', props);
    return resource.getResponseField('buildBatch.secondarySourceVersions') as unknown as shapes.CodeBuildProjectSourceVersion[];
  }

  public get artifacts(): CodeBuildResponsesRetryBuildBatchBuildBatchArtifacts {
    return new CodeBuildResponsesRetryBuildBatchBuildBatchArtifacts(this.__scope, this.__resources, this.__input);
  }

  public get secondaryArtifacts(): shapes.CodeBuildBuildArtifacts[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.secondaryArtifacts'),
        outputPath: 'buildBatch.secondaryArtifacts',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.secondaryArtifacts', props);
    return resource.getResponseField('buildBatch.secondaryArtifacts') as unknown as shapes.CodeBuildBuildArtifacts[];
  }

  public get cache(): CodeBuildResponsesRetryBuildBatchBuildBatchCache {
    return new CodeBuildResponsesRetryBuildBatchBuildBatchCache(this.__scope, this.__resources, this.__input);
  }

  public get environment(): CodeBuildResponsesRetryBuildBatchBuildBatchEnvironment {
    return new CodeBuildResponsesRetryBuildBatchBuildBatchEnvironment(this.__scope, this.__resources, this.__input);
  }

  public get serviceRole(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.serviceRole'),
        outputPath: 'buildBatch.serviceRole',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.serviceRole', props);
    return resource.getResponseField('buildBatch.serviceRole') as unknown as string;
  }

  public get logConfig(): CodeBuildResponsesRetryBuildBatchBuildBatchLogConfig {
    return new CodeBuildResponsesRetryBuildBatchBuildBatchLogConfig(this.__scope, this.__resources, this.__input);
  }

  public get buildTimeoutInMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.buildTimeoutInMinutes'),
        outputPath: 'buildBatch.buildTimeoutInMinutes',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.buildTimeoutInMinutes', props);
    return resource.getResponseField('buildBatch.buildTimeoutInMinutes') as unknown as number;
  }

  public get queuedTimeoutInMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.queuedTimeoutInMinutes'),
        outputPath: 'buildBatch.queuedTimeoutInMinutes',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.queuedTimeoutInMinutes', props);
    return resource.getResponseField('buildBatch.queuedTimeoutInMinutes') as unknown as number;
  }

  public get complete(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.complete'),
        outputPath: 'buildBatch.complete',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.complete', props);
    return resource.getResponseField('buildBatch.complete') as unknown as boolean;
  }

  public get initiator(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.initiator'),
        outputPath: 'buildBatch.initiator',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.initiator', props);
    return resource.getResponseField('buildBatch.initiator') as unknown as string;
  }

  public get vpcConfig(): CodeBuildResponsesRetryBuildBatchBuildBatchVpcConfig {
    return new CodeBuildResponsesRetryBuildBatchBuildBatchVpcConfig(this.__scope, this.__resources, this.__input);
  }

  public get encryptionKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.encryptionKey'),
        outputPath: 'buildBatch.encryptionKey',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.encryptionKey', props);
    return resource.getResponseField('buildBatch.encryptionKey') as unknown as string;
  }

  public get buildBatchNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.buildBatchNumber'),
        outputPath: 'buildBatch.buildBatchNumber',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.buildBatchNumber', props);
    return resource.getResponseField('buildBatch.buildBatchNumber') as unknown as number;
  }

  public get fileSystemLocations(): shapes.CodeBuildProjectFileSystemLocation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.fileSystemLocations'),
        outputPath: 'buildBatch.fileSystemLocations',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.fileSystemLocations', props);
    return resource.getResponseField('buildBatch.fileSystemLocations') as unknown as shapes.CodeBuildProjectFileSystemLocation[];
  }

  public get buildBatchConfig(): CodeBuildResponsesRetryBuildBatchBuildBatchBuildBatchConfig {
    return new CodeBuildResponsesRetryBuildBatchBuildBatchBuildBatchConfig(this.__scope, this.__resources, this.__input);
  }

  public get buildGroups(): shapes.CodeBuildBuildGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.buildGroups'),
        outputPath: 'buildBatch.buildGroups',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.buildGroups', props);
    return resource.getResponseField('buildBatch.buildGroups') as unknown as shapes.CodeBuildBuildGroup[];
  }

  public get debugSessionEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.debugSessionEnabled'),
        outputPath: 'buildBatch.debugSessionEnabled',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.debugSessionEnabled', props);
    return resource.getResponseField('buildBatch.debugSessionEnabled') as unknown as boolean;
  }

}

export class CodeBuildResponsesRetryBuildBatchBuildBatchSource {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildRetryBuildBatchInput) {
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.source.type'),
        outputPath: 'buildBatch.source.type',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.source.type', props);
    return resource.getResponseField('buildBatch.source.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.source.location'),
        outputPath: 'buildBatch.source.location',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.source.location', props);
    return resource.getResponseField('buildBatch.source.location') as unknown as string;
  }

  public get gitCloneDepth(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.source.gitCloneDepth'),
        outputPath: 'buildBatch.source.gitCloneDepth',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.source.gitCloneDepth', props);
    return resource.getResponseField('buildBatch.source.gitCloneDepth') as unknown as number;
  }

  public get gitSubmodulesConfig(): CodeBuildResponsesRetryBuildBatchBuildBatchSourceGitSubmodulesConfig {
    return new CodeBuildResponsesRetryBuildBatchBuildBatchSourceGitSubmodulesConfig(this.__scope, this.__resources, this.__input);
  }

  public get buildspec(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.source.buildspec'),
        outputPath: 'buildBatch.source.buildspec',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.source.buildspec', props);
    return resource.getResponseField('buildBatch.source.buildspec') as unknown as string;
  }

  public get auth(): CodeBuildResponsesRetryBuildBatchBuildBatchSourceAuth {
    return new CodeBuildResponsesRetryBuildBatchBuildBatchSourceAuth(this.__scope, this.__resources, this.__input);
  }

  public get reportBuildStatus(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.source.reportBuildStatus'),
        outputPath: 'buildBatch.source.reportBuildStatus',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.source.reportBuildStatus', props);
    return resource.getResponseField('buildBatch.source.reportBuildStatus') as unknown as boolean;
  }

  public get buildStatusConfig(): CodeBuildResponsesRetryBuildBatchBuildBatchSourceBuildStatusConfig {
    return new CodeBuildResponsesRetryBuildBatchBuildBatchSourceBuildStatusConfig(this.__scope, this.__resources, this.__input);
  }

  public get insecureSsl(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.source.insecureSsl'),
        outputPath: 'buildBatch.source.insecureSsl',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.source.insecureSsl', props);
    return resource.getResponseField('buildBatch.source.insecureSsl') as unknown as boolean;
  }

  public get sourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.source.sourceIdentifier'),
        outputPath: 'buildBatch.source.sourceIdentifier',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.source.sourceIdentifier', props);
    return resource.getResponseField('buildBatch.source.sourceIdentifier') as unknown as string;
  }

}

export class CodeBuildResponsesRetryBuildBatchBuildBatchSourceGitSubmodulesConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildRetryBuildBatchInput) {
  }

  public get fetchSubmodules(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.source.gitSubmodulesConfig.fetchSubmodules'),
        outputPath: 'buildBatch.source.gitSubmodulesConfig.fetchSubmodules',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.source.gitSubmodulesConfig.fetchSubmodules', props);
    return resource.getResponseField('buildBatch.source.gitSubmodulesConfig.fetchSubmodules') as unknown as boolean;
  }

}

export class CodeBuildResponsesRetryBuildBatchBuildBatchSourceAuth {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildRetryBuildBatchInput) {
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.source.auth.type'),
        outputPath: 'buildBatch.source.auth.type',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.source.auth.type', props);
    return resource.getResponseField('buildBatch.source.auth.type') as unknown as string;
  }

  public get resource(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.source.auth.resource'),
        outputPath: 'buildBatch.source.auth.resource',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.source.auth.resource', props);
    return resource.getResponseField('buildBatch.source.auth.resource') as unknown as string;
  }

}

export class CodeBuildResponsesRetryBuildBatchBuildBatchSourceBuildStatusConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildRetryBuildBatchInput) {
  }

  public get context(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.source.buildStatusConfig.context'),
        outputPath: 'buildBatch.source.buildStatusConfig.context',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.source.buildStatusConfig.context', props);
    return resource.getResponseField('buildBatch.source.buildStatusConfig.context') as unknown as string;
  }

  public get targetUrl(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.source.buildStatusConfig.targetUrl'),
        outputPath: 'buildBatch.source.buildStatusConfig.targetUrl',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.source.buildStatusConfig.targetUrl', props);
    return resource.getResponseField('buildBatch.source.buildStatusConfig.targetUrl') as unknown as string;
  }

}

export class CodeBuildResponsesRetryBuildBatchBuildBatchArtifacts {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildRetryBuildBatchInput) {
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.artifacts.location'),
        outputPath: 'buildBatch.artifacts.location',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.artifacts.location', props);
    return resource.getResponseField('buildBatch.artifacts.location') as unknown as string;
  }

  public get sha256Sum(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.artifacts.sha256sum'),
        outputPath: 'buildBatch.artifacts.sha256sum',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.artifacts.sha256sum', props);
    return resource.getResponseField('buildBatch.artifacts.sha256sum') as unknown as string;
  }

  public get md5Sum(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.artifacts.md5sum'),
        outputPath: 'buildBatch.artifacts.md5sum',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.artifacts.md5sum', props);
    return resource.getResponseField('buildBatch.artifacts.md5sum') as unknown as string;
  }

  public get overrideArtifactName(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.artifacts.overrideArtifactName'),
        outputPath: 'buildBatch.artifacts.overrideArtifactName',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.artifacts.overrideArtifactName', props);
    return resource.getResponseField('buildBatch.artifacts.overrideArtifactName') as unknown as boolean;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.artifacts.encryptionDisabled'),
        outputPath: 'buildBatch.artifacts.encryptionDisabled',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.artifacts.encryptionDisabled', props);
    return resource.getResponseField('buildBatch.artifacts.encryptionDisabled') as unknown as boolean;
  }

  public get artifactIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.artifacts.artifactIdentifier'),
        outputPath: 'buildBatch.artifacts.artifactIdentifier',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.artifacts.artifactIdentifier', props);
    return resource.getResponseField('buildBatch.artifacts.artifactIdentifier') as unknown as string;
  }

  public get bucketOwnerAccess(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.artifacts.bucketOwnerAccess'),
        outputPath: 'buildBatch.artifacts.bucketOwnerAccess',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.artifacts.bucketOwnerAccess', props);
    return resource.getResponseField('buildBatch.artifacts.bucketOwnerAccess') as unknown as string;
  }

}

export class CodeBuildResponsesRetryBuildBatchBuildBatchCache {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildRetryBuildBatchInput) {
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.cache.type'),
        outputPath: 'buildBatch.cache.type',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.cache.type', props);
    return resource.getResponseField('buildBatch.cache.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.cache.location'),
        outputPath: 'buildBatch.cache.location',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.cache.location', props);
    return resource.getResponseField('buildBatch.cache.location') as unknown as string;
  }

  public get modes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.cache.modes'),
        outputPath: 'buildBatch.cache.modes',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.cache.modes', props);
    return resource.getResponseField('buildBatch.cache.modes') as unknown as string[];
  }

}

export class CodeBuildResponsesRetryBuildBatchBuildBatchEnvironment {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildRetryBuildBatchInput) {
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.environment.type'),
        outputPath: 'buildBatch.environment.type',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.environment.type', props);
    return resource.getResponseField('buildBatch.environment.type') as unknown as string;
  }

  public get image(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.environment.image'),
        outputPath: 'buildBatch.environment.image',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.environment.image', props);
    return resource.getResponseField('buildBatch.environment.image') as unknown as string;
  }

  public get computeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.environment.computeType'),
        outputPath: 'buildBatch.environment.computeType',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.environment.computeType', props);
    return resource.getResponseField('buildBatch.environment.computeType') as unknown as string;
  }

  public get environmentVariables(): shapes.CodeBuildEnvironmentVariable[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.environment.environmentVariables'),
        outputPath: 'buildBatch.environment.environmentVariables',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.environment.environmentVariables', props);
    return resource.getResponseField('buildBatch.environment.environmentVariables') as unknown as shapes.CodeBuildEnvironmentVariable[];
  }

  public get privilegedMode(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.environment.privilegedMode'),
        outputPath: 'buildBatch.environment.privilegedMode',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.environment.privilegedMode', props);
    return resource.getResponseField('buildBatch.environment.privilegedMode') as unknown as boolean;
  }

  public get certificate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.environment.certificate'),
        outputPath: 'buildBatch.environment.certificate',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.environment.certificate', props);
    return resource.getResponseField('buildBatch.environment.certificate') as unknown as string;
  }

  public get registryCredential(): CodeBuildResponsesRetryBuildBatchBuildBatchEnvironmentRegistryCredential {
    return new CodeBuildResponsesRetryBuildBatchBuildBatchEnvironmentRegistryCredential(this.__scope, this.__resources, this.__input);
  }

  public get imagePullCredentialsType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.environment.imagePullCredentialsType'),
        outputPath: 'buildBatch.environment.imagePullCredentialsType',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.environment.imagePullCredentialsType', props);
    return resource.getResponseField('buildBatch.environment.imagePullCredentialsType') as unknown as string;
  }

}

export class CodeBuildResponsesRetryBuildBatchBuildBatchEnvironmentRegistryCredential {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildRetryBuildBatchInput) {
  }

  public get credential(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.environment.registryCredential.credential'),
        outputPath: 'buildBatch.environment.registryCredential.credential',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.environment.registryCredential.credential', props);
    return resource.getResponseField('buildBatch.environment.registryCredential.credential') as unknown as string;
  }

  public get credentialProvider(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.environment.registryCredential.credentialProvider'),
        outputPath: 'buildBatch.environment.registryCredential.credentialProvider',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.environment.registryCredential.credentialProvider', props);
    return resource.getResponseField('buildBatch.environment.registryCredential.credentialProvider') as unknown as string;
  }

}

export class CodeBuildResponsesRetryBuildBatchBuildBatchLogConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildRetryBuildBatchInput) {
  }

  public get cloudWatchLogs(): CodeBuildResponsesRetryBuildBatchBuildBatchLogConfigCloudWatchLogs {
    return new CodeBuildResponsesRetryBuildBatchBuildBatchLogConfigCloudWatchLogs(this.__scope, this.__resources, this.__input);
  }

  public get s3Logs(): CodeBuildResponsesRetryBuildBatchBuildBatchLogConfigS3Logs {
    return new CodeBuildResponsesRetryBuildBatchBuildBatchLogConfigS3Logs(this.__scope, this.__resources, this.__input);
  }

}

export class CodeBuildResponsesRetryBuildBatchBuildBatchLogConfigCloudWatchLogs {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildRetryBuildBatchInput) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.logConfig.cloudWatchLogs.status'),
        outputPath: 'buildBatch.logConfig.cloudWatchLogs.status',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.logConfig.cloudWatchLogs.status', props);
    return resource.getResponseField('buildBatch.logConfig.cloudWatchLogs.status') as unknown as string;
  }

  public get groupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.logConfig.cloudWatchLogs.groupName'),
        outputPath: 'buildBatch.logConfig.cloudWatchLogs.groupName',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.logConfig.cloudWatchLogs.groupName', props);
    return resource.getResponseField('buildBatch.logConfig.cloudWatchLogs.groupName') as unknown as string;
  }

  public get streamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.logConfig.cloudWatchLogs.streamName'),
        outputPath: 'buildBatch.logConfig.cloudWatchLogs.streamName',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.logConfig.cloudWatchLogs.streamName', props);
    return resource.getResponseField('buildBatch.logConfig.cloudWatchLogs.streamName') as unknown as string;
  }

}

export class CodeBuildResponsesRetryBuildBatchBuildBatchLogConfigS3Logs {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildRetryBuildBatchInput) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.logConfig.s3Logs.status'),
        outputPath: 'buildBatch.logConfig.s3Logs.status',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.logConfig.s3Logs.status', props);
    return resource.getResponseField('buildBatch.logConfig.s3Logs.status') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.logConfig.s3Logs.location'),
        outputPath: 'buildBatch.logConfig.s3Logs.location',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.logConfig.s3Logs.location', props);
    return resource.getResponseField('buildBatch.logConfig.s3Logs.location') as unknown as string;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.logConfig.s3Logs.encryptionDisabled'),
        outputPath: 'buildBatch.logConfig.s3Logs.encryptionDisabled',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.logConfig.s3Logs.encryptionDisabled', props);
    return resource.getResponseField('buildBatch.logConfig.s3Logs.encryptionDisabled') as unknown as boolean;
  }

  public get bucketOwnerAccess(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.logConfig.s3Logs.bucketOwnerAccess'),
        outputPath: 'buildBatch.logConfig.s3Logs.bucketOwnerAccess',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.logConfig.s3Logs.bucketOwnerAccess', props);
    return resource.getResponseField('buildBatch.logConfig.s3Logs.bucketOwnerAccess') as unknown as string;
  }

}

export class CodeBuildResponsesRetryBuildBatchBuildBatchVpcConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildRetryBuildBatchInput) {
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.vpcConfig.vpcId'),
        outputPath: 'buildBatch.vpcConfig.vpcId',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.vpcConfig.vpcId', props);
    return resource.getResponseField('buildBatch.vpcConfig.vpcId') as unknown as string;
  }

  public get subnets(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.vpcConfig.subnets'),
        outputPath: 'buildBatch.vpcConfig.subnets',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.vpcConfig.subnets', props);
    return resource.getResponseField('buildBatch.vpcConfig.subnets') as unknown as string[];
  }

  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.vpcConfig.securityGroupIds'),
        outputPath: 'buildBatch.vpcConfig.securityGroupIds',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.vpcConfig.securityGroupIds', props);
    return resource.getResponseField('buildBatch.vpcConfig.securityGroupIds') as unknown as string[];
  }

}

export class CodeBuildResponsesRetryBuildBatchBuildBatchBuildBatchConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildRetryBuildBatchInput) {
  }

  public get serviceRole(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.buildBatchConfig.serviceRole'),
        outputPath: 'buildBatch.buildBatchConfig.serviceRole',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.buildBatchConfig.serviceRole', props);
    return resource.getResponseField('buildBatch.buildBatchConfig.serviceRole') as unknown as string;
  }

  public get combineArtifacts(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.buildBatchConfig.combineArtifacts'),
        outputPath: 'buildBatch.buildBatchConfig.combineArtifacts',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.buildBatchConfig.combineArtifacts', props);
    return resource.getResponseField('buildBatch.buildBatchConfig.combineArtifacts') as unknown as boolean;
  }

  public get restrictions(): CodeBuildResponsesRetryBuildBatchBuildBatchBuildBatchConfigRestrictions {
    return new CodeBuildResponsesRetryBuildBatchBuildBatchBuildBatchConfigRestrictions(this.__scope, this.__resources, this.__input);
  }

  public get timeoutInMins(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.buildBatchConfig.timeoutInMins'),
        outputPath: 'buildBatch.buildBatchConfig.timeoutInMins',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.buildBatchConfig.timeoutInMins', props);
    return resource.getResponseField('buildBatch.buildBatchConfig.timeoutInMins') as unknown as number;
  }

}

export class CodeBuildResponsesRetryBuildBatchBuildBatchBuildBatchConfigRestrictions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildRetryBuildBatchInput) {
  }

  public get maximumBuildsAllowed(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.buildBatchConfig.restrictions.maximumBuildsAllowed'),
        outputPath: 'buildBatch.buildBatchConfig.restrictions.maximumBuildsAllowed',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.buildBatchConfig.restrictions.maximumBuildsAllowed', props);
    return resource.getResponseField('buildBatch.buildBatchConfig.restrictions.maximumBuildsAllowed') as unknown as number;
  }

  public get computeTypesAllowed(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'retryBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.RetryBuildBatch.buildBatch.buildBatchConfig.restrictions.computeTypesAllowed'),
        outputPath: 'buildBatch.buildBatchConfig.restrictions.computeTypesAllowed',
        parameters: {
          id: this.__input.id,
          idempotencyToken: this.__input.idempotencyToken,
          retryType: this.__input.retryType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RetryBuildBatch.buildBatch.buildBatchConfig.restrictions.computeTypesAllowed', props);
    return resource.getResponseField('buildBatch.buildBatchConfig.restrictions.computeTypesAllowed') as unknown as string[];
  }

}

export class CodeBuildResponsesStartBuild {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStartBuildInput) {
  }

  public get build2(): CodeBuildResponsesStartBuildBuild2 {
    return new CodeBuildResponsesStartBuildBuild2(this.__scope, this.__resources, this.__input);
  }

}

export class CodeBuildResponsesStartBuildBuild2 {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStartBuildInput) {
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.id'),
        outputPath: 'build.id',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.id', props);
    return resource.getResponseField('build.id') as unknown as string;
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.arn'),
        outputPath: 'build.arn',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.arn', props);
    return resource.getResponseField('build.arn') as unknown as string;
  }

  public get buildNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.buildNumber'),
        outputPath: 'build.buildNumber',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.buildNumber', props);
    return resource.getResponseField('build.buildNumber') as unknown as number;
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.startTime'),
        outputPath: 'build.startTime',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.startTime', props);
    return resource.getResponseField('build.startTime') as unknown as string;
  }

  public get endTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.endTime'),
        outputPath: 'build.endTime',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.endTime', props);
    return resource.getResponseField('build.endTime') as unknown as string;
  }

  public get currentPhase(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.currentPhase'),
        outputPath: 'build.currentPhase',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.currentPhase', props);
    return resource.getResponseField('build.currentPhase') as unknown as string;
  }

  public get buildStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.buildStatus'),
        outputPath: 'build.buildStatus',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.buildStatus', props);
    return resource.getResponseField('build.buildStatus') as unknown as string;
  }

  public get sourceVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.sourceVersion'),
        outputPath: 'build.sourceVersion',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.sourceVersion', props);
    return resource.getResponseField('build.sourceVersion') as unknown as string;
  }

  public get resolvedSourceVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.resolvedSourceVersion'),
        outputPath: 'build.resolvedSourceVersion',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.resolvedSourceVersion', props);
    return resource.getResponseField('build.resolvedSourceVersion') as unknown as string;
  }

  public get projectName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.projectName'),
        outputPath: 'build.projectName',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.projectName', props);
    return resource.getResponseField('build.projectName') as unknown as string;
  }

  public get phases(): shapes.CodeBuildBuildPhase[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.phases'),
        outputPath: 'build.phases',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.phases', props);
    return resource.getResponseField('build.phases') as unknown as shapes.CodeBuildBuildPhase[];
  }

  public get source(): CodeBuildResponsesStartBuildBuild2Source {
    return new CodeBuildResponsesStartBuildBuild2Source(this.__scope, this.__resources, this.__input);
  }

  public get secondarySources(): shapes.CodeBuildProjectSource[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.secondarySources'),
        outputPath: 'build.secondarySources',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.secondarySources', props);
    return resource.getResponseField('build.secondarySources') as unknown as shapes.CodeBuildProjectSource[];
  }

  public get secondarySourceVersions(): shapes.CodeBuildProjectSourceVersion[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.secondarySourceVersions'),
        outputPath: 'build.secondarySourceVersions',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.secondarySourceVersions', props);
    return resource.getResponseField('build.secondarySourceVersions') as unknown as shapes.CodeBuildProjectSourceVersion[];
  }

  public get artifacts(): CodeBuildResponsesStartBuildBuild2Artifacts {
    return new CodeBuildResponsesStartBuildBuild2Artifacts(this.__scope, this.__resources, this.__input);
  }

  public get secondaryArtifacts(): shapes.CodeBuildBuildArtifacts[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.secondaryArtifacts'),
        outputPath: 'build.secondaryArtifacts',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.secondaryArtifacts', props);
    return resource.getResponseField('build.secondaryArtifacts') as unknown as shapes.CodeBuildBuildArtifacts[];
  }

  public get cache(): CodeBuildResponsesStartBuildBuild2Cache {
    return new CodeBuildResponsesStartBuildBuild2Cache(this.__scope, this.__resources, this.__input);
  }

  public get environment(): CodeBuildResponsesStartBuildBuild2Environment {
    return new CodeBuildResponsesStartBuildBuild2Environment(this.__scope, this.__resources, this.__input);
  }

  public get serviceRole(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.serviceRole'),
        outputPath: 'build.serviceRole',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.serviceRole', props);
    return resource.getResponseField('build.serviceRole') as unknown as string;
  }

  public get logs(): CodeBuildResponsesStartBuildBuild2Logs {
    return new CodeBuildResponsesStartBuildBuild2Logs(this.__scope, this.__resources, this.__input);
  }

  public get timeoutInMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.timeoutInMinutes'),
        outputPath: 'build.timeoutInMinutes',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.timeoutInMinutes', props);
    return resource.getResponseField('build.timeoutInMinutes') as unknown as number;
  }

  public get queuedTimeoutInMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.queuedTimeoutInMinutes'),
        outputPath: 'build.queuedTimeoutInMinutes',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.queuedTimeoutInMinutes', props);
    return resource.getResponseField('build.queuedTimeoutInMinutes') as unknown as number;
  }

  public get buildComplete(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.buildComplete'),
        outputPath: 'build.buildComplete',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.buildComplete', props);
    return resource.getResponseField('build.buildComplete') as unknown as boolean;
  }

  public get initiator(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.initiator'),
        outputPath: 'build.initiator',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.initiator', props);
    return resource.getResponseField('build.initiator') as unknown as string;
  }

  public get vpcConfig(): CodeBuildResponsesStartBuildBuild2VpcConfig {
    return new CodeBuildResponsesStartBuildBuild2VpcConfig(this.__scope, this.__resources, this.__input);
  }

  public get networkInterface(): CodeBuildResponsesStartBuildBuild2NetworkInterface {
    return new CodeBuildResponsesStartBuildBuild2NetworkInterface(this.__scope, this.__resources, this.__input);
  }

  public get encryptionKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.encryptionKey'),
        outputPath: 'build.encryptionKey',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.encryptionKey', props);
    return resource.getResponseField('build.encryptionKey') as unknown as string;
  }

  public get exportedEnvironmentVariables(): shapes.CodeBuildExportedEnvironmentVariable[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.exportedEnvironmentVariables'),
        outputPath: 'build.exportedEnvironmentVariables',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.exportedEnvironmentVariables', props);
    return resource.getResponseField('build.exportedEnvironmentVariables') as unknown as shapes.CodeBuildExportedEnvironmentVariable[];
  }

  public get reportArns(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.reportArns'),
        outputPath: 'build.reportArns',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.reportArns', props);
    return resource.getResponseField('build.reportArns') as unknown as string[];
  }

  public get fileSystemLocations(): shapes.CodeBuildProjectFileSystemLocation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.fileSystemLocations'),
        outputPath: 'build.fileSystemLocations',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.fileSystemLocations', props);
    return resource.getResponseField('build.fileSystemLocations') as unknown as shapes.CodeBuildProjectFileSystemLocation[];
  }

  public get debugSession(): CodeBuildResponsesStartBuildBuild2DebugSession {
    return new CodeBuildResponsesStartBuildBuild2DebugSession(this.__scope, this.__resources, this.__input);
  }

  public get buildBatchArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.buildBatchArn'),
        outputPath: 'build.buildBatchArn',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.buildBatchArn', props);
    return resource.getResponseField('build.buildBatchArn') as unknown as string;
  }

}

export class CodeBuildResponsesStartBuildBuild2Source {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStartBuildInput) {
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.source.type'),
        outputPath: 'build.source.type',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.source.type', props);
    return resource.getResponseField('build.source.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.source.location'),
        outputPath: 'build.source.location',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.source.location', props);
    return resource.getResponseField('build.source.location') as unknown as string;
  }

  public get gitCloneDepth(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.source.gitCloneDepth'),
        outputPath: 'build.source.gitCloneDepth',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.source.gitCloneDepth', props);
    return resource.getResponseField('build.source.gitCloneDepth') as unknown as number;
  }

  public get gitSubmodulesConfig(): CodeBuildResponsesStartBuildBuild2SourceGitSubmodulesConfig {
    return new CodeBuildResponsesStartBuildBuild2SourceGitSubmodulesConfig(this.__scope, this.__resources, this.__input);
  }

  public get buildspec(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.source.buildspec'),
        outputPath: 'build.source.buildspec',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.source.buildspec', props);
    return resource.getResponseField('build.source.buildspec') as unknown as string;
  }

  public get auth(): CodeBuildResponsesStartBuildBuild2SourceAuth {
    return new CodeBuildResponsesStartBuildBuild2SourceAuth(this.__scope, this.__resources, this.__input);
  }

  public get reportBuildStatus(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.source.reportBuildStatus'),
        outputPath: 'build.source.reportBuildStatus',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.source.reportBuildStatus', props);
    return resource.getResponseField('build.source.reportBuildStatus') as unknown as boolean;
  }

  public get buildStatusConfig(): CodeBuildResponsesStartBuildBuild2SourceBuildStatusConfig {
    return new CodeBuildResponsesStartBuildBuild2SourceBuildStatusConfig(this.__scope, this.__resources, this.__input);
  }

  public get insecureSsl(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.source.insecureSsl'),
        outputPath: 'build.source.insecureSsl',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.source.insecureSsl', props);
    return resource.getResponseField('build.source.insecureSsl') as unknown as boolean;
  }

  public get sourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.source.sourceIdentifier'),
        outputPath: 'build.source.sourceIdentifier',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.source.sourceIdentifier', props);
    return resource.getResponseField('build.source.sourceIdentifier') as unknown as string;
  }

}

export class CodeBuildResponsesStartBuildBuild2SourceGitSubmodulesConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStartBuildInput) {
  }

  public get fetchSubmodules(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.source.gitSubmodulesConfig.fetchSubmodules'),
        outputPath: 'build.source.gitSubmodulesConfig.fetchSubmodules',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.source.gitSubmodulesConfig.fetchSubmodules', props);
    return resource.getResponseField('build.source.gitSubmodulesConfig.fetchSubmodules') as unknown as boolean;
  }

}

export class CodeBuildResponsesStartBuildBuild2SourceAuth {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStartBuildInput) {
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.source.auth.type'),
        outputPath: 'build.source.auth.type',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.source.auth.type', props);
    return resource.getResponseField('build.source.auth.type') as unknown as string;
  }

  public get resource(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.source.auth.resource'),
        outputPath: 'build.source.auth.resource',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.source.auth.resource', props);
    return resource.getResponseField('build.source.auth.resource') as unknown as string;
  }

}

export class CodeBuildResponsesStartBuildBuild2SourceBuildStatusConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStartBuildInput) {
  }

  public get context(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.source.buildStatusConfig.context'),
        outputPath: 'build.source.buildStatusConfig.context',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.source.buildStatusConfig.context', props);
    return resource.getResponseField('build.source.buildStatusConfig.context') as unknown as string;
  }

  public get targetUrl(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.source.buildStatusConfig.targetUrl'),
        outputPath: 'build.source.buildStatusConfig.targetUrl',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.source.buildStatusConfig.targetUrl', props);
    return resource.getResponseField('build.source.buildStatusConfig.targetUrl') as unknown as string;
  }

}

export class CodeBuildResponsesStartBuildBuild2Artifacts {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStartBuildInput) {
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.artifacts.location'),
        outputPath: 'build.artifacts.location',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.artifacts.location', props);
    return resource.getResponseField('build.artifacts.location') as unknown as string;
  }

  public get sha256Sum(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.artifacts.sha256sum'),
        outputPath: 'build.artifacts.sha256sum',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.artifacts.sha256sum', props);
    return resource.getResponseField('build.artifacts.sha256sum') as unknown as string;
  }

  public get md5Sum(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.artifacts.md5sum'),
        outputPath: 'build.artifacts.md5sum',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.artifacts.md5sum', props);
    return resource.getResponseField('build.artifacts.md5sum') as unknown as string;
  }

  public get overrideArtifactName(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.artifacts.overrideArtifactName'),
        outputPath: 'build.artifacts.overrideArtifactName',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.artifacts.overrideArtifactName', props);
    return resource.getResponseField('build.artifacts.overrideArtifactName') as unknown as boolean;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.artifacts.encryptionDisabled'),
        outputPath: 'build.artifacts.encryptionDisabled',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.artifacts.encryptionDisabled', props);
    return resource.getResponseField('build.artifacts.encryptionDisabled') as unknown as boolean;
  }

  public get artifactIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.artifacts.artifactIdentifier'),
        outputPath: 'build.artifacts.artifactIdentifier',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.artifacts.artifactIdentifier', props);
    return resource.getResponseField('build.artifacts.artifactIdentifier') as unknown as string;
  }

  public get bucketOwnerAccess(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.artifacts.bucketOwnerAccess'),
        outputPath: 'build.artifacts.bucketOwnerAccess',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.artifacts.bucketOwnerAccess', props);
    return resource.getResponseField('build.artifacts.bucketOwnerAccess') as unknown as string;
  }

}

export class CodeBuildResponsesStartBuildBuild2Cache {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStartBuildInput) {
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.cache.type'),
        outputPath: 'build.cache.type',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.cache.type', props);
    return resource.getResponseField('build.cache.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.cache.location'),
        outputPath: 'build.cache.location',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.cache.location', props);
    return resource.getResponseField('build.cache.location') as unknown as string;
  }

  public get modes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.cache.modes'),
        outputPath: 'build.cache.modes',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.cache.modes', props);
    return resource.getResponseField('build.cache.modes') as unknown as string[];
  }

}

export class CodeBuildResponsesStartBuildBuild2Environment {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStartBuildInput) {
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.environment.type'),
        outputPath: 'build.environment.type',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.environment.type', props);
    return resource.getResponseField('build.environment.type') as unknown as string;
  }

  public get image(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.environment.image'),
        outputPath: 'build.environment.image',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.environment.image', props);
    return resource.getResponseField('build.environment.image') as unknown as string;
  }

  public get computeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.environment.computeType'),
        outputPath: 'build.environment.computeType',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.environment.computeType', props);
    return resource.getResponseField('build.environment.computeType') as unknown as string;
  }

  public get environmentVariables(): shapes.CodeBuildEnvironmentVariable[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.environment.environmentVariables'),
        outputPath: 'build.environment.environmentVariables',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.environment.environmentVariables', props);
    return resource.getResponseField('build.environment.environmentVariables') as unknown as shapes.CodeBuildEnvironmentVariable[];
  }

  public get privilegedMode(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.environment.privilegedMode'),
        outputPath: 'build.environment.privilegedMode',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.environment.privilegedMode', props);
    return resource.getResponseField('build.environment.privilegedMode') as unknown as boolean;
  }

  public get certificate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.environment.certificate'),
        outputPath: 'build.environment.certificate',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.environment.certificate', props);
    return resource.getResponseField('build.environment.certificate') as unknown as string;
  }

  public get registryCredential(): CodeBuildResponsesStartBuildBuild2EnvironmentRegistryCredential {
    return new CodeBuildResponsesStartBuildBuild2EnvironmentRegistryCredential(this.__scope, this.__resources, this.__input);
  }

  public get imagePullCredentialsType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.environment.imagePullCredentialsType'),
        outputPath: 'build.environment.imagePullCredentialsType',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.environment.imagePullCredentialsType', props);
    return resource.getResponseField('build.environment.imagePullCredentialsType') as unknown as string;
  }

}

export class CodeBuildResponsesStartBuildBuild2EnvironmentRegistryCredential {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStartBuildInput) {
  }

  public get credential(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.environment.registryCredential.credential'),
        outputPath: 'build.environment.registryCredential.credential',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.environment.registryCredential.credential', props);
    return resource.getResponseField('build.environment.registryCredential.credential') as unknown as string;
  }

  public get credentialProvider(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.environment.registryCredential.credentialProvider'),
        outputPath: 'build.environment.registryCredential.credentialProvider',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.environment.registryCredential.credentialProvider', props);
    return resource.getResponseField('build.environment.registryCredential.credentialProvider') as unknown as string;
  }

}

export class CodeBuildResponsesStartBuildBuild2Logs {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStartBuildInput) {
  }

  public get groupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.logs.groupName'),
        outputPath: 'build.logs.groupName',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.logs.groupName', props);
    return resource.getResponseField('build.logs.groupName') as unknown as string;
  }

  public get streamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.logs.streamName'),
        outputPath: 'build.logs.streamName',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.logs.streamName', props);
    return resource.getResponseField('build.logs.streamName') as unknown as string;
  }

  public get deepLink(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.logs.deepLink'),
        outputPath: 'build.logs.deepLink',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.logs.deepLink', props);
    return resource.getResponseField('build.logs.deepLink') as unknown as string;
  }

  public get s3DeepLink(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.logs.s3DeepLink'),
        outputPath: 'build.logs.s3DeepLink',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.logs.s3DeepLink', props);
    return resource.getResponseField('build.logs.s3DeepLink') as unknown as string;
  }

  public get cloudWatchLogsArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.logs.cloudWatchLogsArn'),
        outputPath: 'build.logs.cloudWatchLogsArn',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.logs.cloudWatchLogsArn', props);
    return resource.getResponseField('build.logs.cloudWatchLogsArn') as unknown as string;
  }

  public get s3LogsArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.logs.s3LogsArn'),
        outputPath: 'build.logs.s3LogsArn',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.logs.s3LogsArn', props);
    return resource.getResponseField('build.logs.s3LogsArn') as unknown as string;
  }

  public get cloudWatchLogs(): CodeBuildResponsesStartBuildBuild2LogsCloudWatchLogs {
    return new CodeBuildResponsesStartBuildBuild2LogsCloudWatchLogs(this.__scope, this.__resources, this.__input);
  }

  public get s3Logs(): CodeBuildResponsesStartBuildBuild2LogsS3Logs {
    return new CodeBuildResponsesStartBuildBuild2LogsS3Logs(this.__scope, this.__resources, this.__input);
  }

}

export class CodeBuildResponsesStartBuildBuild2LogsCloudWatchLogs {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStartBuildInput) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.logs.cloudWatchLogs.status'),
        outputPath: 'build.logs.cloudWatchLogs.status',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.logs.cloudWatchLogs.status', props);
    return resource.getResponseField('build.logs.cloudWatchLogs.status') as unknown as string;
  }

  public get groupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.logs.cloudWatchLogs.groupName'),
        outputPath: 'build.logs.cloudWatchLogs.groupName',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.logs.cloudWatchLogs.groupName', props);
    return resource.getResponseField('build.logs.cloudWatchLogs.groupName') as unknown as string;
  }

  public get streamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.logs.cloudWatchLogs.streamName'),
        outputPath: 'build.logs.cloudWatchLogs.streamName',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.logs.cloudWatchLogs.streamName', props);
    return resource.getResponseField('build.logs.cloudWatchLogs.streamName') as unknown as string;
  }

}

export class CodeBuildResponsesStartBuildBuild2LogsS3Logs {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStartBuildInput) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.logs.s3Logs.status'),
        outputPath: 'build.logs.s3Logs.status',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.logs.s3Logs.status', props);
    return resource.getResponseField('build.logs.s3Logs.status') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.logs.s3Logs.location'),
        outputPath: 'build.logs.s3Logs.location',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.logs.s3Logs.location', props);
    return resource.getResponseField('build.logs.s3Logs.location') as unknown as string;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.logs.s3Logs.encryptionDisabled'),
        outputPath: 'build.logs.s3Logs.encryptionDisabled',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.logs.s3Logs.encryptionDisabled', props);
    return resource.getResponseField('build.logs.s3Logs.encryptionDisabled') as unknown as boolean;
  }

  public get bucketOwnerAccess(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.logs.s3Logs.bucketOwnerAccess'),
        outputPath: 'build.logs.s3Logs.bucketOwnerAccess',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.logs.s3Logs.bucketOwnerAccess', props);
    return resource.getResponseField('build.logs.s3Logs.bucketOwnerAccess') as unknown as string;
  }

}

export class CodeBuildResponsesStartBuildBuild2VpcConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStartBuildInput) {
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.vpcConfig.vpcId'),
        outputPath: 'build.vpcConfig.vpcId',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.vpcConfig.vpcId', props);
    return resource.getResponseField('build.vpcConfig.vpcId') as unknown as string;
  }

  public get subnets(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.vpcConfig.subnets'),
        outputPath: 'build.vpcConfig.subnets',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.vpcConfig.subnets', props);
    return resource.getResponseField('build.vpcConfig.subnets') as unknown as string[];
  }

  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.vpcConfig.securityGroupIds'),
        outputPath: 'build.vpcConfig.securityGroupIds',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.vpcConfig.securityGroupIds', props);
    return resource.getResponseField('build.vpcConfig.securityGroupIds') as unknown as string[];
  }

}

export class CodeBuildResponsesStartBuildBuild2NetworkInterface {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStartBuildInput) {
  }

  public get subnetId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.networkInterface.subnetId'),
        outputPath: 'build.networkInterface.subnetId',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.networkInterface.subnetId', props);
    return resource.getResponseField('build.networkInterface.subnetId') as unknown as string;
  }

  public get networkInterfaceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.networkInterface.networkInterfaceId'),
        outputPath: 'build.networkInterface.networkInterfaceId',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.networkInterface.networkInterfaceId', props);
    return resource.getResponseField('build.networkInterface.networkInterfaceId') as unknown as string;
  }

}

export class CodeBuildResponsesStartBuildBuild2DebugSession {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStartBuildInput) {
  }

  public get sessionEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.debugSession.sessionEnabled'),
        outputPath: 'build.debugSession.sessionEnabled',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.debugSession.sessionEnabled', props);
    return resource.getResponseField('build.debugSession.sessionEnabled') as unknown as boolean;
  }

  public get sessionTarget(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuild.build.debugSession.sessionTarget'),
        outputPath: 'build.debugSession.sessionTarget',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildStatusOverride: this.__input.reportBuildStatusOverride,
          buildStatusConfigOverride: {
            context: this.__input.buildStatusConfigOverride?.context,
            targetUrl: this.__input.buildStatusConfigOverride?.targetUrl,
          },
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          timeoutInMinutesOverride: this.__input.timeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuild.build.debugSession.sessionTarget', props);
    return resource.getResponseField('build.debugSession.sessionTarget') as unknown as string;
  }

}

export class CodeBuildResponsesStartBuildBatch {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStartBuildBatchInput) {
  }

  public get buildBatch(): CodeBuildResponsesStartBuildBatchBuildBatch {
    return new CodeBuildResponsesStartBuildBatchBuildBatch(this.__scope, this.__resources, this.__input);
  }

}

export class CodeBuildResponsesStartBuildBatchBuildBatch {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStartBuildBatchInput) {
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.id'),
        outputPath: 'buildBatch.id',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.id', props);
    return resource.getResponseField('buildBatch.id') as unknown as string;
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.arn'),
        outputPath: 'buildBatch.arn',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.arn', props);
    return resource.getResponseField('buildBatch.arn') as unknown as string;
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.startTime'),
        outputPath: 'buildBatch.startTime',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.startTime', props);
    return resource.getResponseField('buildBatch.startTime') as unknown as string;
  }

  public get endTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.endTime'),
        outputPath: 'buildBatch.endTime',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.endTime', props);
    return resource.getResponseField('buildBatch.endTime') as unknown as string;
  }

  public get currentPhase(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.currentPhase'),
        outputPath: 'buildBatch.currentPhase',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.currentPhase', props);
    return resource.getResponseField('buildBatch.currentPhase') as unknown as string;
  }

  public get buildBatchStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.buildBatchStatus'),
        outputPath: 'buildBatch.buildBatchStatus',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.buildBatchStatus', props);
    return resource.getResponseField('buildBatch.buildBatchStatus') as unknown as string;
  }

  public get sourceVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.sourceVersion'),
        outputPath: 'buildBatch.sourceVersion',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.sourceVersion', props);
    return resource.getResponseField('buildBatch.sourceVersion') as unknown as string;
  }

  public get resolvedSourceVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.resolvedSourceVersion'),
        outputPath: 'buildBatch.resolvedSourceVersion',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.resolvedSourceVersion', props);
    return resource.getResponseField('buildBatch.resolvedSourceVersion') as unknown as string;
  }

  public get projectName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.projectName'),
        outputPath: 'buildBatch.projectName',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.projectName', props);
    return resource.getResponseField('buildBatch.projectName') as unknown as string;
  }

  public get phases(): shapes.CodeBuildBuildBatchPhase[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.phases'),
        outputPath: 'buildBatch.phases',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.phases', props);
    return resource.getResponseField('buildBatch.phases') as unknown as shapes.CodeBuildBuildBatchPhase[];
  }

  public get source(): CodeBuildResponsesStartBuildBatchBuildBatchSource {
    return new CodeBuildResponsesStartBuildBatchBuildBatchSource(this.__scope, this.__resources, this.__input);
  }

  public get secondarySources(): shapes.CodeBuildProjectSource[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.secondarySources'),
        outputPath: 'buildBatch.secondarySources',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.secondarySources', props);
    return resource.getResponseField('buildBatch.secondarySources') as unknown as shapes.CodeBuildProjectSource[];
  }

  public get secondarySourceVersions(): shapes.CodeBuildProjectSourceVersion[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.secondarySourceVersions'),
        outputPath: 'buildBatch.secondarySourceVersions',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.secondarySourceVersions', props);
    return resource.getResponseField('buildBatch.secondarySourceVersions') as unknown as shapes.CodeBuildProjectSourceVersion[];
  }

  public get artifacts(): CodeBuildResponsesStartBuildBatchBuildBatchArtifacts {
    return new CodeBuildResponsesStartBuildBatchBuildBatchArtifacts(this.__scope, this.__resources, this.__input);
  }

  public get secondaryArtifacts(): shapes.CodeBuildBuildArtifacts[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.secondaryArtifacts'),
        outputPath: 'buildBatch.secondaryArtifacts',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.secondaryArtifacts', props);
    return resource.getResponseField('buildBatch.secondaryArtifacts') as unknown as shapes.CodeBuildBuildArtifacts[];
  }

  public get cache(): CodeBuildResponsesStartBuildBatchBuildBatchCache {
    return new CodeBuildResponsesStartBuildBatchBuildBatchCache(this.__scope, this.__resources, this.__input);
  }

  public get environment(): CodeBuildResponsesStartBuildBatchBuildBatchEnvironment {
    return new CodeBuildResponsesStartBuildBatchBuildBatchEnvironment(this.__scope, this.__resources, this.__input);
  }

  public get serviceRole(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.serviceRole'),
        outputPath: 'buildBatch.serviceRole',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.serviceRole', props);
    return resource.getResponseField('buildBatch.serviceRole') as unknown as string;
  }

  public get logConfig(): CodeBuildResponsesStartBuildBatchBuildBatchLogConfig {
    return new CodeBuildResponsesStartBuildBatchBuildBatchLogConfig(this.__scope, this.__resources, this.__input);
  }

  public get buildTimeoutInMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.buildTimeoutInMinutes'),
        outputPath: 'buildBatch.buildTimeoutInMinutes',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.buildTimeoutInMinutes', props);
    return resource.getResponseField('buildBatch.buildTimeoutInMinutes') as unknown as number;
  }

  public get queuedTimeoutInMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.queuedTimeoutInMinutes'),
        outputPath: 'buildBatch.queuedTimeoutInMinutes',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.queuedTimeoutInMinutes', props);
    return resource.getResponseField('buildBatch.queuedTimeoutInMinutes') as unknown as number;
  }

  public get complete(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.complete'),
        outputPath: 'buildBatch.complete',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.complete', props);
    return resource.getResponseField('buildBatch.complete') as unknown as boolean;
  }

  public get initiator(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.initiator'),
        outputPath: 'buildBatch.initiator',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.initiator', props);
    return resource.getResponseField('buildBatch.initiator') as unknown as string;
  }

  public get vpcConfig(): CodeBuildResponsesStartBuildBatchBuildBatchVpcConfig {
    return new CodeBuildResponsesStartBuildBatchBuildBatchVpcConfig(this.__scope, this.__resources, this.__input);
  }

  public get encryptionKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.encryptionKey'),
        outputPath: 'buildBatch.encryptionKey',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.encryptionKey', props);
    return resource.getResponseField('buildBatch.encryptionKey') as unknown as string;
  }

  public get buildBatchNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.buildBatchNumber'),
        outputPath: 'buildBatch.buildBatchNumber',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.buildBatchNumber', props);
    return resource.getResponseField('buildBatch.buildBatchNumber') as unknown as number;
  }

  public get fileSystemLocations(): shapes.CodeBuildProjectFileSystemLocation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.fileSystemLocations'),
        outputPath: 'buildBatch.fileSystemLocations',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.fileSystemLocations', props);
    return resource.getResponseField('buildBatch.fileSystemLocations') as unknown as shapes.CodeBuildProjectFileSystemLocation[];
  }

  public get buildBatchConfig(): CodeBuildResponsesStartBuildBatchBuildBatchBuildBatchConfig {
    return new CodeBuildResponsesStartBuildBatchBuildBatchBuildBatchConfig(this.__scope, this.__resources, this.__input);
  }

  public get buildGroups(): shapes.CodeBuildBuildGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.buildGroups'),
        outputPath: 'buildBatch.buildGroups',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.buildGroups', props);
    return resource.getResponseField('buildBatch.buildGroups') as unknown as shapes.CodeBuildBuildGroup[];
  }

  public get debugSessionEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.debugSessionEnabled'),
        outputPath: 'buildBatch.debugSessionEnabled',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.debugSessionEnabled', props);
    return resource.getResponseField('buildBatch.debugSessionEnabled') as unknown as boolean;
  }

}

export class CodeBuildResponsesStartBuildBatchBuildBatchSource {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStartBuildBatchInput) {
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.source.type'),
        outputPath: 'buildBatch.source.type',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.source.type', props);
    return resource.getResponseField('buildBatch.source.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.source.location'),
        outputPath: 'buildBatch.source.location',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.source.location', props);
    return resource.getResponseField('buildBatch.source.location') as unknown as string;
  }

  public get gitCloneDepth(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.source.gitCloneDepth'),
        outputPath: 'buildBatch.source.gitCloneDepth',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.source.gitCloneDepth', props);
    return resource.getResponseField('buildBatch.source.gitCloneDepth') as unknown as number;
  }

  public get gitSubmodulesConfig(): CodeBuildResponsesStartBuildBatchBuildBatchSourceGitSubmodulesConfig {
    return new CodeBuildResponsesStartBuildBatchBuildBatchSourceGitSubmodulesConfig(this.__scope, this.__resources, this.__input);
  }

  public get buildspec(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.source.buildspec'),
        outputPath: 'buildBatch.source.buildspec',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.source.buildspec', props);
    return resource.getResponseField('buildBatch.source.buildspec') as unknown as string;
  }

  public get auth(): CodeBuildResponsesStartBuildBatchBuildBatchSourceAuth {
    return new CodeBuildResponsesStartBuildBatchBuildBatchSourceAuth(this.__scope, this.__resources, this.__input);
  }

  public get reportBuildStatus(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.source.reportBuildStatus'),
        outputPath: 'buildBatch.source.reportBuildStatus',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.source.reportBuildStatus', props);
    return resource.getResponseField('buildBatch.source.reportBuildStatus') as unknown as boolean;
  }

  public get buildStatusConfig(): CodeBuildResponsesStartBuildBatchBuildBatchSourceBuildStatusConfig {
    return new CodeBuildResponsesStartBuildBatchBuildBatchSourceBuildStatusConfig(this.__scope, this.__resources, this.__input);
  }

  public get insecureSsl(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.source.insecureSsl'),
        outputPath: 'buildBatch.source.insecureSsl',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.source.insecureSsl', props);
    return resource.getResponseField('buildBatch.source.insecureSsl') as unknown as boolean;
  }

  public get sourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.source.sourceIdentifier'),
        outputPath: 'buildBatch.source.sourceIdentifier',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.source.sourceIdentifier', props);
    return resource.getResponseField('buildBatch.source.sourceIdentifier') as unknown as string;
  }

}

export class CodeBuildResponsesStartBuildBatchBuildBatchSourceGitSubmodulesConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStartBuildBatchInput) {
  }

  public get fetchSubmodules(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.source.gitSubmodulesConfig.fetchSubmodules'),
        outputPath: 'buildBatch.source.gitSubmodulesConfig.fetchSubmodules',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.source.gitSubmodulesConfig.fetchSubmodules', props);
    return resource.getResponseField('buildBatch.source.gitSubmodulesConfig.fetchSubmodules') as unknown as boolean;
  }

}

export class CodeBuildResponsesStartBuildBatchBuildBatchSourceAuth {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStartBuildBatchInput) {
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.source.auth.type'),
        outputPath: 'buildBatch.source.auth.type',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.source.auth.type', props);
    return resource.getResponseField('buildBatch.source.auth.type') as unknown as string;
  }

  public get resource(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.source.auth.resource'),
        outputPath: 'buildBatch.source.auth.resource',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.source.auth.resource', props);
    return resource.getResponseField('buildBatch.source.auth.resource') as unknown as string;
  }

}

export class CodeBuildResponsesStartBuildBatchBuildBatchSourceBuildStatusConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStartBuildBatchInput) {
  }

  public get context(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.source.buildStatusConfig.context'),
        outputPath: 'buildBatch.source.buildStatusConfig.context',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.source.buildStatusConfig.context', props);
    return resource.getResponseField('buildBatch.source.buildStatusConfig.context') as unknown as string;
  }

  public get targetUrl(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.source.buildStatusConfig.targetUrl'),
        outputPath: 'buildBatch.source.buildStatusConfig.targetUrl',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.source.buildStatusConfig.targetUrl', props);
    return resource.getResponseField('buildBatch.source.buildStatusConfig.targetUrl') as unknown as string;
  }

}

export class CodeBuildResponsesStartBuildBatchBuildBatchArtifacts {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStartBuildBatchInput) {
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.artifacts.location'),
        outputPath: 'buildBatch.artifacts.location',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.artifacts.location', props);
    return resource.getResponseField('buildBatch.artifacts.location') as unknown as string;
  }

  public get sha256Sum(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.artifacts.sha256sum'),
        outputPath: 'buildBatch.artifacts.sha256sum',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.artifacts.sha256sum', props);
    return resource.getResponseField('buildBatch.artifacts.sha256sum') as unknown as string;
  }

  public get md5Sum(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.artifacts.md5sum'),
        outputPath: 'buildBatch.artifacts.md5sum',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.artifacts.md5sum', props);
    return resource.getResponseField('buildBatch.artifacts.md5sum') as unknown as string;
  }

  public get overrideArtifactName(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.artifacts.overrideArtifactName'),
        outputPath: 'buildBatch.artifacts.overrideArtifactName',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.artifacts.overrideArtifactName', props);
    return resource.getResponseField('buildBatch.artifacts.overrideArtifactName') as unknown as boolean;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.artifacts.encryptionDisabled'),
        outputPath: 'buildBatch.artifacts.encryptionDisabled',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.artifacts.encryptionDisabled', props);
    return resource.getResponseField('buildBatch.artifacts.encryptionDisabled') as unknown as boolean;
  }

  public get artifactIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.artifacts.artifactIdentifier'),
        outputPath: 'buildBatch.artifacts.artifactIdentifier',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.artifacts.artifactIdentifier', props);
    return resource.getResponseField('buildBatch.artifacts.artifactIdentifier') as unknown as string;
  }

  public get bucketOwnerAccess(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.artifacts.bucketOwnerAccess'),
        outputPath: 'buildBatch.artifacts.bucketOwnerAccess',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.artifacts.bucketOwnerAccess', props);
    return resource.getResponseField('buildBatch.artifacts.bucketOwnerAccess') as unknown as string;
  }

}

export class CodeBuildResponsesStartBuildBatchBuildBatchCache {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStartBuildBatchInput) {
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.cache.type'),
        outputPath: 'buildBatch.cache.type',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.cache.type', props);
    return resource.getResponseField('buildBatch.cache.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.cache.location'),
        outputPath: 'buildBatch.cache.location',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.cache.location', props);
    return resource.getResponseField('buildBatch.cache.location') as unknown as string;
  }

  public get modes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.cache.modes'),
        outputPath: 'buildBatch.cache.modes',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.cache.modes', props);
    return resource.getResponseField('buildBatch.cache.modes') as unknown as string[];
  }

}

export class CodeBuildResponsesStartBuildBatchBuildBatchEnvironment {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStartBuildBatchInput) {
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.environment.type'),
        outputPath: 'buildBatch.environment.type',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.environment.type', props);
    return resource.getResponseField('buildBatch.environment.type') as unknown as string;
  }

  public get image(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.environment.image'),
        outputPath: 'buildBatch.environment.image',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.environment.image', props);
    return resource.getResponseField('buildBatch.environment.image') as unknown as string;
  }

  public get computeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.environment.computeType'),
        outputPath: 'buildBatch.environment.computeType',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.environment.computeType', props);
    return resource.getResponseField('buildBatch.environment.computeType') as unknown as string;
  }

  public get environmentVariables(): shapes.CodeBuildEnvironmentVariable[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.environment.environmentVariables'),
        outputPath: 'buildBatch.environment.environmentVariables',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.environment.environmentVariables', props);
    return resource.getResponseField('buildBatch.environment.environmentVariables') as unknown as shapes.CodeBuildEnvironmentVariable[];
  }

  public get privilegedMode(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.environment.privilegedMode'),
        outputPath: 'buildBatch.environment.privilegedMode',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.environment.privilegedMode', props);
    return resource.getResponseField('buildBatch.environment.privilegedMode') as unknown as boolean;
  }

  public get certificate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.environment.certificate'),
        outputPath: 'buildBatch.environment.certificate',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.environment.certificate', props);
    return resource.getResponseField('buildBatch.environment.certificate') as unknown as string;
  }

  public get registryCredential(): CodeBuildResponsesStartBuildBatchBuildBatchEnvironmentRegistryCredential {
    return new CodeBuildResponsesStartBuildBatchBuildBatchEnvironmentRegistryCredential(this.__scope, this.__resources, this.__input);
  }

  public get imagePullCredentialsType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.environment.imagePullCredentialsType'),
        outputPath: 'buildBatch.environment.imagePullCredentialsType',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.environment.imagePullCredentialsType', props);
    return resource.getResponseField('buildBatch.environment.imagePullCredentialsType') as unknown as string;
  }

}

export class CodeBuildResponsesStartBuildBatchBuildBatchEnvironmentRegistryCredential {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStartBuildBatchInput) {
  }

  public get credential(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.environment.registryCredential.credential'),
        outputPath: 'buildBatch.environment.registryCredential.credential',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.environment.registryCredential.credential', props);
    return resource.getResponseField('buildBatch.environment.registryCredential.credential') as unknown as string;
  }

  public get credentialProvider(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.environment.registryCredential.credentialProvider'),
        outputPath: 'buildBatch.environment.registryCredential.credentialProvider',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.environment.registryCredential.credentialProvider', props);
    return resource.getResponseField('buildBatch.environment.registryCredential.credentialProvider') as unknown as string;
  }

}

export class CodeBuildResponsesStartBuildBatchBuildBatchLogConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStartBuildBatchInput) {
  }

  public get cloudWatchLogs(): CodeBuildResponsesStartBuildBatchBuildBatchLogConfigCloudWatchLogs {
    return new CodeBuildResponsesStartBuildBatchBuildBatchLogConfigCloudWatchLogs(this.__scope, this.__resources, this.__input);
  }

  public get s3Logs(): CodeBuildResponsesStartBuildBatchBuildBatchLogConfigS3Logs {
    return new CodeBuildResponsesStartBuildBatchBuildBatchLogConfigS3Logs(this.__scope, this.__resources, this.__input);
  }

}

export class CodeBuildResponsesStartBuildBatchBuildBatchLogConfigCloudWatchLogs {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStartBuildBatchInput) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.logConfig.cloudWatchLogs.status'),
        outputPath: 'buildBatch.logConfig.cloudWatchLogs.status',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.logConfig.cloudWatchLogs.status', props);
    return resource.getResponseField('buildBatch.logConfig.cloudWatchLogs.status') as unknown as string;
  }

  public get groupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.logConfig.cloudWatchLogs.groupName'),
        outputPath: 'buildBatch.logConfig.cloudWatchLogs.groupName',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.logConfig.cloudWatchLogs.groupName', props);
    return resource.getResponseField('buildBatch.logConfig.cloudWatchLogs.groupName') as unknown as string;
  }

  public get streamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.logConfig.cloudWatchLogs.streamName'),
        outputPath: 'buildBatch.logConfig.cloudWatchLogs.streamName',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.logConfig.cloudWatchLogs.streamName', props);
    return resource.getResponseField('buildBatch.logConfig.cloudWatchLogs.streamName') as unknown as string;
  }

}

export class CodeBuildResponsesStartBuildBatchBuildBatchLogConfigS3Logs {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStartBuildBatchInput) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.logConfig.s3Logs.status'),
        outputPath: 'buildBatch.logConfig.s3Logs.status',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.logConfig.s3Logs.status', props);
    return resource.getResponseField('buildBatch.logConfig.s3Logs.status') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.logConfig.s3Logs.location'),
        outputPath: 'buildBatch.logConfig.s3Logs.location',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.logConfig.s3Logs.location', props);
    return resource.getResponseField('buildBatch.logConfig.s3Logs.location') as unknown as string;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.logConfig.s3Logs.encryptionDisabled'),
        outputPath: 'buildBatch.logConfig.s3Logs.encryptionDisabled',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.logConfig.s3Logs.encryptionDisabled', props);
    return resource.getResponseField('buildBatch.logConfig.s3Logs.encryptionDisabled') as unknown as boolean;
  }

  public get bucketOwnerAccess(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.logConfig.s3Logs.bucketOwnerAccess'),
        outputPath: 'buildBatch.logConfig.s3Logs.bucketOwnerAccess',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.logConfig.s3Logs.bucketOwnerAccess', props);
    return resource.getResponseField('buildBatch.logConfig.s3Logs.bucketOwnerAccess') as unknown as string;
  }

}

export class CodeBuildResponsesStartBuildBatchBuildBatchVpcConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStartBuildBatchInput) {
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.vpcConfig.vpcId'),
        outputPath: 'buildBatch.vpcConfig.vpcId',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.vpcConfig.vpcId', props);
    return resource.getResponseField('buildBatch.vpcConfig.vpcId') as unknown as string;
  }

  public get subnets(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.vpcConfig.subnets'),
        outputPath: 'buildBatch.vpcConfig.subnets',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.vpcConfig.subnets', props);
    return resource.getResponseField('buildBatch.vpcConfig.subnets') as unknown as string[];
  }

  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.vpcConfig.securityGroupIds'),
        outputPath: 'buildBatch.vpcConfig.securityGroupIds',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.vpcConfig.securityGroupIds', props);
    return resource.getResponseField('buildBatch.vpcConfig.securityGroupIds') as unknown as string[];
  }

}

export class CodeBuildResponsesStartBuildBatchBuildBatchBuildBatchConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStartBuildBatchInput) {
  }

  public get serviceRole(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.buildBatchConfig.serviceRole'),
        outputPath: 'buildBatch.buildBatchConfig.serviceRole',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.buildBatchConfig.serviceRole', props);
    return resource.getResponseField('buildBatch.buildBatchConfig.serviceRole') as unknown as string;
  }

  public get combineArtifacts(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.buildBatchConfig.combineArtifacts'),
        outputPath: 'buildBatch.buildBatchConfig.combineArtifacts',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.buildBatchConfig.combineArtifacts', props);
    return resource.getResponseField('buildBatch.buildBatchConfig.combineArtifacts') as unknown as boolean;
  }

  public get restrictions(): CodeBuildResponsesStartBuildBatchBuildBatchBuildBatchConfigRestrictions {
    return new CodeBuildResponsesStartBuildBatchBuildBatchBuildBatchConfigRestrictions(this.__scope, this.__resources, this.__input);
  }

  public get timeoutInMins(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.buildBatchConfig.timeoutInMins'),
        outputPath: 'buildBatch.buildBatchConfig.timeoutInMins',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.buildBatchConfig.timeoutInMins', props);
    return resource.getResponseField('buildBatch.buildBatchConfig.timeoutInMins') as unknown as number;
  }

}

export class CodeBuildResponsesStartBuildBatchBuildBatchBuildBatchConfigRestrictions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStartBuildBatchInput) {
  }

  public get maximumBuildsAllowed(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.buildBatchConfig.restrictions.maximumBuildsAllowed'),
        outputPath: 'buildBatch.buildBatchConfig.restrictions.maximumBuildsAllowed',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.buildBatchConfig.restrictions.maximumBuildsAllowed', props);
    return resource.getResponseField('buildBatch.buildBatchConfig.restrictions.maximumBuildsAllowed') as unknown as number;
  }

  public get computeTypesAllowed(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StartBuildBatch.buildBatch.buildBatchConfig.restrictions.computeTypesAllowed'),
        outputPath: 'buildBatch.buildBatchConfig.restrictions.computeTypesAllowed',
        parameters: {
          projectName: this.__input.projectName,
          secondarySourcesOverride: this.__input.secondarySourcesOverride,
          secondarySourcesVersionOverride: this.__input.secondarySourcesVersionOverride,
          sourceVersion: this.__input.sourceVersion,
          artifactsOverride: {
            type: this.__input.artifactsOverride?.type,
            location: this.__input.artifactsOverride?.location,
            path: this.__input.artifactsOverride?.path,
            namespaceType: this.__input.artifactsOverride?.namespaceType,
            name: this.__input.artifactsOverride?.name,
            packaging: this.__input.artifactsOverride?.packaging,
            overrideArtifactName: this.__input.artifactsOverride?.overrideArtifactName,
            encryptionDisabled: this.__input.artifactsOverride?.encryptionDisabled,
            artifactIdentifier: this.__input.artifactsOverride?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifactsOverride?.bucketOwnerAccess,
          },
          secondaryArtifactsOverride: this.__input.secondaryArtifactsOverride,
          environmentVariablesOverride: this.__input.environmentVariablesOverride,
          sourceTypeOverride: this.__input.sourceTypeOverride,
          sourceLocationOverride: this.__input.sourceLocationOverride,
          sourceAuthOverride: {
            type: this.__input.sourceAuthOverride?.type,
            resource: this.__input.sourceAuthOverride?.resource,
          },
          gitCloneDepthOverride: this.__input.gitCloneDepthOverride,
          gitSubmodulesConfigOverride: {
            fetchSubmodules: this.__input.gitSubmodulesConfigOverride?.fetchSubmodules,
          },
          buildspecOverride: this.__input.buildspecOverride,
          insecureSslOverride: this.__input.insecureSslOverride,
          reportBuildBatchStatusOverride: this.__input.reportBuildBatchStatusOverride,
          environmentTypeOverride: this.__input.environmentTypeOverride,
          imageOverride: this.__input.imageOverride,
          computeTypeOverride: this.__input.computeTypeOverride,
          certificateOverride: this.__input.certificateOverride,
          cacheOverride: {
            type: this.__input.cacheOverride?.type,
            location: this.__input.cacheOverride?.location,
            modes: this.__input.cacheOverride?.modes,
          },
          serviceRoleOverride: this.__input.serviceRoleOverride,
          privilegedModeOverride: this.__input.privilegedModeOverride,
          buildTimeoutInMinutesOverride: this.__input.buildTimeoutInMinutesOverride,
          queuedTimeoutInMinutesOverride: this.__input.queuedTimeoutInMinutesOverride,
          encryptionKeyOverride: this.__input.encryptionKeyOverride,
          idempotencyToken: this.__input.idempotencyToken,
          logsConfigOverride: {
            cloudWatchLogs: {
              status: this.__input.logsConfigOverride?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfigOverride?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfigOverride?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfigOverride?.s3Logs?.status,
              location: this.__input.logsConfigOverride?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfigOverride?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfigOverride?.s3Logs?.bucketOwnerAccess,
            },
          },
          registryCredentialOverride: {
            credential: this.__input.registryCredentialOverride?.credential,
            credentialProvider: this.__input.registryCredentialOverride?.credentialProvider,
          },
          imagePullCredentialsTypeOverride: this.__input.imagePullCredentialsTypeOverride,
          buildBatchConfigOverride: {
            serviceRole: this.__input.buildBatchConfigOverride?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfigOverride?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfigOverride?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfigOverride?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfigOverride?.timeoutInMins,
          },
          debugSessionEnabled: this.__input.debugSessionEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartBuildBatch.buildBatch.buildBatchConfig.restrictions.computeTypesAllowed', props);
    return resource.getResponseField('buildBatch.buildBatchConfig.restrictions.computeTypesAllowed') as unknown as string[];
  }

}

export class CodeBuildResponsesStopBuild {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStopBuildInput) {
  }

  public get build2(): CodeBuildResponsesStopBuildBuild2 {
    return new CodeBuildResponsesStopBuildBuild2(this.__scope, this.__resources, this.__input);
  }

}

export class CodeBuildResponsesStopBuildBuild2 {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStopBuildInput) {
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.id'),
        outputPath: 'build.id',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.id', props);
    return resource.getResponseField('build.id') as unknown as string;
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.arn'),
        outputPath: 'build.arn',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.arn', props);
    return resource.getResponseField('build.arn') as unknown as string;
  }

  public get buildNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.buildNumber'),
        outputPath: 'build.buildNumber',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.buildNumber', props);
    return resource.getResponseField('build.buildNumber') as unknown as number;
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.startTime'),
        outputPath: 'build.startTime',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.startTime', props);
    return resource.getResponseField('build.startTime') as unknown as string;
  }

  public get endTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.endTime'),
        outputPath: 'build.endTime',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.endTime', props);
    return resource.getResponseField('build.endTime') as unknown as string;
  }

  public get currentPhase(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.currentPhase'),
        outputPath: 'build.currentPhase',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.currentPhase', props);
    return resource.getResponseField('build.currentPhase') as unknown as string;
  }

  public get buildStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.buildStatus'),
        outputPath: 'build.buildStatus',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.buildStatus', props);
    return resource.getResponseField('build.buildStatus') as unknown as string;
  }

  public get sourceVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.sourceVersion'),
        outputPath: 'build.sourceVersion',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.sourceVersion', props);
    return resource.getResponseField('build.sourceVersion') as unknown as string;
  }

  public get resolvedSourceVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.resolvedSourceVersion'),
        outputPath: 'build.resolvedSourceVersion',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.resolvedSourceVersion', props);
    return resource.getResponseField('build.resolvedSourceVersion') as unknown as string;
  }

  public get projectName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.projectName'),
        outputPath: 'build.projectName',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.projectName', props);
    return resource.getResponseField('build.projectName') as unknown as string;
  }

  public get phases(): shapes.CodeBuildBuildPhase[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.phases'),
        outputPath: 'build.phases',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.phases', props);
    return resource.getResponseField('build.phases') as unknown as shapes.CodeBuildBuildPhase[];
  }

  public get source(): CodeBuildResponsesStopBuildBuild2Source {
    return new CodeBuildResponsesStopBuildBuild2Source(this.__scope, this.__resources, this.__input);
  }

  public get secondarySources(): shapes.CodeBuildProjectSource[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.secondarySources'),
        outputPath: 'build.secondarySources',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.secondarySources', props);
    return resource.getResponseField('build.secondarySources') as unknown as shapes.CodeBuildProjectSource[];
  }

  public get secondarySourceVersions(): shapes.CodeBuildProjectSourceVersion[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.secondarySourceVersions'),
        outputPath: 'build.secondarySourceVersions',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.secondarySourceVersions', props);
    return resource.getResponseField('build.secondarySourceVersions') as unknown as shapes.CodeBuildProjectSourceVersion[];
  }

  public get artifacts(): CodeBuildResponsesStopBuildBuild2Artifacts {
    return new CodeBuildResponsesStopBuildBuild2Artifacts(this.__scope, this.__resources, this.__input);
  }

  public get secondaryArtifacts(): shapes.CodeBuildBuildArtifacts[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.secondaryArtifacts'),
        outputPath: 'build.secondaryArtifacts',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.secondaryArtifacts', props);
    return resource.getResponseField('build.secondaryArtifacts') as unknown as shapes.CodeBuildBuildArtifacts[];
  }

  public get cache(): CodeBuildResponsesStopBuildBuild2Cache {
    return new CodeBuildResponsesStopBuildBuild2Cache(this.__scope, this.__resources, this.__input);
  }

  public get environment(): CodeBuildResponsesStopBuildBuild2Environment {
    return new CodeBuildResponsesStopBuildBuild2Environment(this.__scope, this.__resources, this.__input);
  }

  public get serviceRole(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.serviceRole'),
        outputPath: 'build.serviceRole',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.serviceRole', props);
    return resource.getResponseField('build.serviceRole') as unknown as string;
  }

  public get logs(): CodeBuildResponsesStopBuildBuild2Logs {
    return new CodeBuildResponsesStopBuildBuild2Logs(this.__scope, this.__resources, this.__input);
  }

  public get timeoutInMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.timeoutInMinutes'),
        outputPath: 'build.timeoutInMinutes',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.timeoutInMinutes', props);
    return resource.getResponseField('build.timeoutInMinutes') as unknown as number;
  }

  public get queuedTimeoutInMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.queuedTimeoutInMinutes'),
        outputPath: 'build.queuedTimeoutInMinutes',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.queuedTimeoutInMinutes', props);
    return resource.getResponseField('build.queuedTimeoutInMinutes') as unknown as number;
  }

  public get buildComplete(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.buildComplete'),
        outputPath: 'build.buildComplete',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.buildComplete', props);
    return resource.getResponseField('build.buildComplete') as unknown as boolean;
  }

  public get initiator(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.initiator'),
        outputPath: 'build.initiator',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.initiator', props);
    return resource.getResponseField('build.initiator') as unknown as string;
  }

  public get vpcConfig(): CodeBuildResponsesStopBuildBuild2VpcConfig {
    return new CodeBuildResponsesStopBuildBuild2VpcConfig(this.__scope, this.__resources, this.__input);
  }

  public get networkInterface(): CodeBuildResponsesStopBuildBuild2NetworkInterface {
    return new CodeBuildResponsesStopBuildBuild2NetworkInterface(this.__scope, this.__resources, this.__input);
  }

  public get encryptionKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.encryptionKey'),
        outputPath: 'build.encryptionKey',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.encryptionKey', props);
    return resource.getResponseField('build.encryptionKey') as unknown as string;
  }

  public get exportedEnvironmentVariables(): shapes.CodeBuildExportedEnvironmentVariable[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.exportedEnvironmentVariables'),
        outputPath: 'build.exportedEnvironmentVariables',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.exportedEnvironmentVariables', props);
    return resource.getResponseField('build.exportedEnvironmentVariables') as unknown as shapes.CodeBuildExportedEnvironmentVariable[];
  }

  public get reportArns(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.reportArns'),
        outputPath: 'build.reportArns',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.reportArns', props);
    return resource.getResponseField('build.reportArns') as unknown as string[];
  }

  public get fileSystemLocations(): shapes.CodeBuildProjectFileSystemLocation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.fileSystemLocations'),
        outputPath: 'build.fileSystemLocations',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.fileSystemLocations', props);
    return resource.getResponseField('build.fileSystemLocations') as unknown as shapes.CodeBuildProjectFileSystemLocation[];
  }

  public get debugSession(): CodeBuildResponsesStopBuildBuild2DebugSession {
    return new CodeBuildResponsesStopBuildBuild2DebugSession(this.__scope, this.__resources, this.__input);
  }

  public get buildBatchArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.buildBatchArn'),
        outputPath: 'build.buildBatchArn',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.buildBatchArn', props);
    return resource.getResponseField('build.buildBatchArn') as unknown as string;
  }

}

export class CodeBuildResponsesStopBuildBuild2Source {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStopBuildInput) {
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.source.type'),
        outputPath: 'build.source.type',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.source.type', props);
    return resource.getResponseField('build.source.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.source.location'),
        outputPath: 'build.source.location',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.source.location', props);
    return resource.getResponseField('build.source.location') as unknown as string;
  }

  public get gitCloneDepth(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.source.gitCloneDepth'),
        outputPath: 'build.source.gitCloneDepth',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.source.gitCloneDepth', props);
    return resource.getResponseField('build.source.gitCloneDepth') as unknown as number;
  }

  public get gitSubmodulesConfig(): CodeBuildResponsesStopBuildBuild2SourceGitSubmodulesConfig {
    return new CodeBuildResponsesStopBuildBuild2SourceGitSubmodulesConfig(this.__scope, this.__resources, this.__input);
  }

  public get buildspec(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.source.buildspec'),
        outputPath: 'build.source.buildspec',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.source.buildspec', props);
    return resource.getResponseField('build.source.buildspec') as unknown as string;
  }

  public get auth(): CodeBuildResponsesStopBuildBuild2SourceAuth {
    return new CodeBuildResponsesStopBuildBuild2SourceAuth(this.__scope, this.__resources, this.__input);
  }

  public get reportBuildStatus(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.source.reportBuildStatus'),
        outputPath: 'build.source.reportBuildStatus',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.source.reportBuildStatus', props);
    return resource.getResponseField('build.source.reportBuildStatus') as unknown as boolean;
  }

  public get buildStatusConfig(): CodeBuildResponsesStopBuildBuild2SourceBuildStatusConfig {
    return new CodeBuildResponsesStopBuildBuild2SourceBuildStatusConfig(this.__scope, this.__resources, this.__input);
  }

  public get insecureSsl(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.source.insecureSsl'),
        outputPath: 'build.source.insecureSsl',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.source.insecureSsl', props);
    return resource.getResponseField('build.source.insecureSsl') as unknown as boolean;
  }

  public get sourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.source.sourceIdentifier'),
        outputPath: 'build.source.sourceIdentifier',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.source.sourceIdentifier', props);
    return resource.getResponseField('build.source.sourceIdentifier') as unknown as string;
  }

}

export class CodeBuildResponsesStopBuildBuild2SourceGitSubmodulesConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStopBuildInput) {
  }

  public get fetchSubmodules(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.source.gitSubmodulesConfig.fetchSubmodules'),
        outputPath: 'build.source.gitSubmodulesConfig.fetchSubmodules',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.source.gitSubmodulesConfig.fetchSubmodules', props);
    return resource.getResponseField('build.source.gitSubmodulesConfig.fetchSubmodules') as unknown as boolean;
  }

}

export class CodeBuildResponsesStopBuildBuild2SourceAuth {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStopBuildInput) {
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.source.auth.type'),
        outputPath: 'build.source.auth.type',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.source.auth.type', props);
    return resource.getResponseField('build.source.auth.type') as unknown as string;
  }

  public get resource(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.source.auth.resource'),
        outputPath: 'build.source.auth.resource',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.source.auth.resource', props);
    return resource.getResponseField('build.source.auth.resource') as unknown as string;
  }

}

export class CodeBuildResponsesStopBuildBuild2SourceBuildStatusConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStopBuildInput) {
  }

  public get context(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.source.buildStatusConfig.context'),
        outputPath: 'build.source.buildStatusConfig.context',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.source.buildStatusConfig.context', props);
    return resource.getResponseField('build.source.buildStatusConfig.context') as unknown as string;
  }

  public get targetUrl(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.source.buildStatusConfig.targetUrl'),
        outputPath: 'build.source.buildStatusConfig.targetUrl',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.source.buildStatusConfig.targetUrl', props);
    return resource.getResponseField('build.source.buildStatusConfig.targetUrl') as unknown as string;
  }

}

export class CodeBuildResponsesStopBuildBuild2Artifacts {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStopBuildInput) {
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.artifacts.location'),
        outputPath: 'build.artifacts.location',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.artifacts.location', props);
    return resource.getResponseField('build.artifacts.location') as unknown as string;
  }

  public get sha256Sum(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.artifacts.sha256sum'),
        outputPath: 'build.artifacts.sha256sum',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.artifacts.sha256sum', props);
    return resource.getResponseField('build.artifacts.sha256sum') as unknown as string;
  }

  public get md5Sum(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.artifacts.md5sum'),
        outputPath: 'build.artifacts.md5sum',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.artifacts.md5sum', props);
    return resource.getResponseField('build.artifacts.md5sum') as unknown as string;
  }

  public get overrideArtifactName(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.artifacts.overrideArtifactName'),
        outputPath: 'build.artifacts.overrideArtifactName',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.artifacts.overrideArtifactName', props);
    return resource.getResponseField('build.artifacts.overrideArtifactName') as unknown as boolean;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.artifacts.encryptionDisabled'),
        outputPath: 'build.artifacts.encryptionDisabled',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.artifacts.encryptionDisabled', props);
    return resource.getResponseField('build.artifacts.encryptionDisabled') as unknown as boolean;
  }

  public get artifactIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.artifacts.artifactIdentifier'),
        outputPath: 'build.artifacts.artifactIdentifier',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.artifacts.artifactIdentifier', props);
    return resource.getResponseField('build.artifacts.artifactIdentifier') as unknown as string;
  }

  public get bucketOwnerAccess(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.artifacts.bucketOwnerAccess'),
        outputPath: 'build.artifacts.bucketOwnerAccess',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.artifacts.bucketOwnerAccess', props);
    return resource.getResponseField('build.artifacts.bucketOwnerAccess') as unknown as string;
  }

}

export class CodeBuildResponsesStopBuildBuild2Cache {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStopBuildInput) {
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.cache.type'),
        outputPath: 'build.cache.type',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.cache.type', props);
    return resource.getResponseField('build.cache.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.cache.location'),
        outputPath: 'build.cache.location',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.cache.location', props);
    return resource.getResponseField('build.cache.location') as unknown as string;
  }

  public get modes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.cache.modes'),
        outputPath: 'build.cache.modes',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.cache.modes', props);
    return resource.getResponseField('build.cache.modes') as unknown as string[];
  }

}

export class CodeBuildResponsesStopBuildBuild2Environment {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStopBuildInput) {
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.environment.type'),
        outputPath: 'build.environment.type',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.environment.type', props);
    return resource.getResponseField('build.environment.type') as unknown as string;
  }

  public get image(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.environment.image'),
        outputPath: 'build.environment.image',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.environment.image', props);
    return resource.getResponseField('build.environment.image') as unknown as string;
  }

  public get computeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.environment.computeType'),
        outputPath: 'build.environment.computeType',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.environment.computeType', props);
    return resource.getResponseField('build.environment.computeType') as unknown as string;
  }

  public get environmentVariables(): shapes.CodeBuildEnvironmentVariable[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.environment.environmentVariables'),
        outputPath: 'build.environment.environmentVariables',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.environment.environmentVariables', props);
    return resource.getResponseField('build.environment.environmentVariables') as unknown as shapes.CodeBuildEnvironmentVariable[];
  }

  public get privilegedMode(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.environment.privilegedMode'),
        outputPath: 'build.environment.privilegedMode',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.environment.privilegedMode', props);
    return resource.getResponseField('build.environment.privilegedMode') as unknown as boolean;
  }

  public get certificate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.environment.certificate'),
        outputPath: 'build.environment.certificate',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.environment.certificate', props);
    return resource.getResponseField('build.environment.certificate') as unknown as string;
  }

  public get registryCredential(): CodeBuildResponsesStopBuildBuild2EnvironmentRegistryCredential {
    return new CodeBuildResponsesStopBuildBuild2EnvironmentRegistryCredential(this.__scope, this.__resources, this.__input);
  }

  public get imagePullCredentialsType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.environment.imagePullCredentialsType'),
        outputPath: 'build.environment.imagePullCredentialsType',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.environment.imagePullCredentialsType', props);
    return resource.getResponseField('build.environment.imagePullCredentialsType') as unknown as string;
  }

}

export class CodeBuildResponsesStopBuildBuild2EnvironmentRegistryCredential {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStopBuildInput) {
  }

  public get credential(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.environment.registryCredential.credential'),
        outputPath: 'build.environment.registryCredential.credential',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.environment.registryCredential.credential', props);
    return resource.getResponseField('build.environment.registryCredential.credential') as unknown as string;
  }

  public get credentialProvider(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.environment.registryCredential.credentialProvider'),
        outputPath: 'build.environment.registryCredential.credentialProvider',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.environment.registryCredential.credentialProvider', props);
    return resource.getResponseField('build.environment.registryCredential.credentialProvider') as unknown as string;
  }

}

export class CodeBuildResponsesStopBuildBuild2Logs {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStopBuildInput) {
  }

  public get groupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.logs.groupName'),
        outputPath: 'build.logs.groupName',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.logs.groupName', props);
    return resource.getResponseField('build.logs.groupName') as unknown as string;
  }

  public get streamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.logs.streamName'),
        outputPath: 'build.logs.streamName',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.logs.streamName', props);
    return resource.getResponseField('build.logs.streamName') as unknown as string;
  }

  public get deepLink(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.logs.deepLink'),
        outputPath: 'build.logs.deepLink',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.logs.deepLink', props);
    return resource.getResponseField('build.logs.deepLink') as unknown as string;
  }

  public get s3DeepLink(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.logs.s3DeepLink'),
        outputPath: 'build.logs.s3DeepLink',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.logs.s3DeepLink', props);
    return resource.getResponseField('build.logs.s3DeepLink') as unknown as string;
  }

  public get cloudWatchLogsArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.logs.cloudWatchLogsArn'),
        outputPath: 'build.logs.cloudWatchLogsArn',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.logs.cloudWatchLogsArn', props);
    return resource.getResponseField('build.logs.cloudWatchLogsArn') as unknown as string;
  }

  public get s3LogsArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.logs.s3LogsArn'),
        outputPath: 'build.logs.s3LogsArn',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.logs.s3LogsArn', props);
    return resource.getResponseField('build.logs.s3LogsArn') as unknown as string;
  }

  public get cloudWatchLogs(): CodeBuildResponsesStopBuildBuild2LogsCloudWatchLogs {
    return new CodeBuildResponsesStopBuildBuild2LogsCloudWatchLogs(this.__scope, this.__resources, this.__input);
  }

  public get s3Logs(): CodeBuildResponsesStopBuildBuild2LogsS3Logs {
    return new CodeBuildResponsesStopBuildBuild2LogsS3Logs(this.__scope, this.__resources, this.__input);
  }

}

export class CodeBuildResponsesStopBuildBuild2LogsCloudWatchLogs {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStopBuildInput) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.logs.cloudWatchLogs.status'),
        outputPath: 'build.logs.cloudWatchLogs.status',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.logs.cloudWatchLogs.status', props);
    return resource.getResponseField('build.logs.cloudWatchLogs.status') as unknown as string;
  }

  public get groupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.logs.cloudWatchLogs.groupName'),
        outputPath: 'build.logs.cloudWatchLogs.groupName',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.logs.cloudWatchLogs.groupName', props);
    return resource.getResponseField('build.logs.cloudWatchLogs.groupName') as unknown as string;
  }

  public get streamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.logs.cloudWatchLogs.streamName'),
        outputPath: 'build.logs.cloudWatchLogs.streamName',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.logs.cloudWatchLogs.streamName', props);
    return resource.getResponseField('build.logs.cloudWatchLogs.streamName') as unknown as string;
  }

}

export class CodeBuildResponsesStopBuildBuild2LogsS3Logs {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStopBuildInput) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.logs.s3Logs.status'),
        outputPath: 'build.logs.s3Logs.status',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.logs.s3Logs.status', props);
    return resource.getResponseField('build.logs.s3Logs.status') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.logs.s3Logs.location'),
        outputPath: 'build.logs.s3Logs.location',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.logs.s3Logs.location', props);
    return resource.getResponseField('build.logs.s3Logs.location') as unknown as string;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.logs.s3Logs.encryptionDisabled'),
        outputPath: 'build.logs.s3Logs.encryptionDisabled',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.logs.s3Logs.encryptionDisabled', props);
    return resource.getResponseField('build.logs.s3Logs.encryptionDisabled') as unknown as boolean;
  }

  public get bucketOwnerAccess(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.logs.s3Logs.bucketOwnerAccess'),
        outputPath: 'build.logs.s3Logs.bucketOwnerAccess',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.logs.s3Logs.bucketOwnerAccess', props);
    return resource.getResponseField('build.logs.s3Logs.bucketOwnerAccess') as unknown as string;
  }

}

export class CodeBuildResponsesStopBuildBuild2VpcConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStopBuildInput) {
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.vpcConfig.vpcId'),
        outputPath: 'build.vpcConfig.vpcId',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.vpcConfig.vpcId', props);
    return resource.getResponseField('build.vpcConfig.vpcId') as unknown as string;
  }

  public get subnets(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.vpcConfig.subnets'),
        outputPath: 'build.vpcConfig.subnets',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.vpcConfig.subnets', props);
    return resource.getResponseField('build.vpcConfig.subnets') as unknown as string[];
  }

  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.vpcConfig.securityGroupIds'),
        outputPath: 'build.vpcConfig.securityGroupIds',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.vpcConfig.securityGroupIds', props);
    return resource.getResponseField('build.vpcConfig.securityGroupIds') as unknown as string[];
  }

}

export class CodeBuildResponsesStopBuildBuild2NetworkInterface {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStopBuildInput) {
  }

  public get subnetId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.networkInterface.subnetId'),
        outputPath: 'build.networkInterface.subnetId',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.networkInterface.subnetId', props);
    return resource.getResponseField('build.networkInterface.subnetId') as unknown as string;
  }

  public get networkInterfaceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.networkInterface.networkInterfaceId'),
        outputPath: 'build.networkInterface.networkInterfaceId',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.networkInterface.networkInterfaceId', props);
    return resource.getResponseField('build.networkInterface.networkInterfaceId') as unknown as string;
  }

}

export class CodeBuildResponsesStopBuildBuild2DebugSession {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStopBuildInput) {
  }

  public get sessionEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.debugSession.sessionEnabled'),
        outputPath: 'build.debugSession.sessionEnabled',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.debugSession.sessionEnabled', props);
    return resource.getResponseField('build.debugSession.sessionEnabled') as unknown as boolean;
  }

  public get sessionTarget(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuild',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuild.build.debugSession.sessionTarget'),
        outputPath: 'build.debugSession.sessionTarget',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuild.build.debugSession.sessionTarget', props);
    return resource.getResponseField('build.debugSession.sessionTarget') as unknown as string;
  }

}

export class CodeBuildResponsesStopBuildBatch {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStopBuildBatchInput) {
  }

  public get buildBatch(): CodeBuildResponsesStopBuildBatchBuildBatch {
    return new CodeBuildResponsesStopBuildBatchBuildBatch(this.__scope, this.__resources, this.__input);
  }

}

export class CodeBuildResponsesStopBuildBatchBuildBatch {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStopBuildBatchInput) {
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.id'),
        outputPath: 'buildBatch.id',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.id', props);
    return resource.getResponseField('buildBatch.id') as unknown as string;
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.arn'),
        outputPath: 'buildBatch.arn',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.arn', props);
    return resource.getResponseField('buildBatch.arn') as unknown as string;
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.startTime'),
        outputPath: 'buildBatch.startTime',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.startTime', props);
    return resource.getResponseField('buildBatch.startTime') as unknown as string;
  }

  public get endTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.endTime'),
        outputPath: 'buildBatch.endTime',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.endTime', props);
    return resource.getResponseField('buildBatch.endTime') as unknown as string;
  }

  public get currentPhase(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.currentPhase'),
        outputPath: 'buildBatch.currentPhase',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.currentPhase', props);
    return resource.getResponseField('buildBatch.currentPhase') as unknown as string;
  }

  public get buildBatchStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.buildBatchStatus'),
        outputPath: 'buildBatch.buildBatchStatus',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.buildBatchStatus', props);
    return resource.getResponseField('buildBatch.buildBatchStatus') as unknown as string;
  }

  public get sourceVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.sourceVersion'),
        outputPath: 'buildBatch.sourceVersion',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.sourceVersion', props);
    return resource.getResponseField('buildBatch.sourceVersion') as unknown as string;
  }

  public get resolvedSourceVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.resolvedSourceVersion'),
        outputPath: 'buildBatch.resolvedSourceVersion',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.resolvedSourceVersion', props);
    return resource.getResponseField('buildBatch.resolvedSourceVersion') as unknown as string;
  }

  public get projectName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.projectName'),
        outputPath: 'buildBatch.projectName',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.projectName', props);
    return resource.getResponseField('buildBatch.projectName') as unknown as string;
  }

  public get phases(): shapes.CodeBuildBuildBatchPhase[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.phases'),
        outputPath: 'buildBatch.phases',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.phases', props);
    return resource.getResponseField('buildBatch.phases') as unknown as shapes.CodeBuildBuildBatchPhase[];
  }

  public get source(): CodeBuildResponsesStopBuildBatchBuildBatchSource {
    return new CodeBuildResponsesStopBuildBatchBuildBatchSource(this.__scope, this.__resources, this.__input);
  }

  public get secondarySources(): shapes.CodeBuildProjectSource[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.secondarySources'),
        outputPath: 'buildBatch.secondarySources',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.secondarySources', props);
    return resource.getResponseField('buildBatch.secondarySources') as unknown as shapes.CodeBuildProjectSource[];
  }

  public get secondarySourceVersions(): shapes.CodeBuildProjectSourceVersion[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.secondarySourceVersions'),
        outputPath: 'buildBatch.secondarySourceVersions',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.secondarySourceVersions', props);
    return resource.getResponseField('buildBatch.secondarySourceVersions') as unknown as shapes.CodeBuildProjectSourceVersion[];
  }

  public get artifacts(): CodeBuildResponsesStopBuildBatchBuildBatchArtifacts {
    return new CodeBuildResponsesStopBuildBatchBuildBatchArtifacts(this.__scope, this.__resources, this.__input);
  }

  public get secondaryArtifacts(): shapes.CodeBuildBuildArtifacts[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.secondaryArtifacts'),
        outputPath: 'buildBatch.secondaryArtifacts',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.secondaryArtifacts', props);
    return resource.getResponseField('buildBatch.secondaryArtifacts') as unknown as shapes.CodeBuildBuildArtifacts[];
  }

  public get cache(): CodeBuildResponsesStopBuildBatchBuildBatchCache {
    return new CodeBuildResponsesStopBuildBatchBuildBatchCache(this.__scope, this.__resources, this.__input);
  }

  public get environment(): CodeBuildResponsesStopBuildBatchBuildBatchEnvironment {
    return new CodeBuildResponsesStopBuildBatchBuildBatchEnvironment(this.__scope, this.__resources, this.__input);
  }

  public get serviceRole(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.serviceRole'),
        outputPath: 'buildBatch.serviceRole',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.serviceRole', props);
    return resource.getResponseField('buildBatch.serviceRole') as unknown as string;
  }

  public get logConfig(): CodeBuildResponsesStopBuildBatchBuildBatchLogConfig {
    return new CodeBuildResponsesStopBuildBatchBuildBatchLogConfig(this.__scope, this.__resources, this.__input);
  }

  public get buildTimeoutInMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.buildTimeoutInMinutes'),
        outputPath: 'buildBatch.buildTimeoutInMinutes',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.buildTimeoutInMinutes', props);
    return resource.getResponseField('buildBatch.buildTimeoutInMinutes') as unknown as number;
  }

  public get queuedTimeoutInMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.queuedTimeoutInMinutes'),
        outputPath: 'buildBatch.queuedTimeoutInMinutes',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.queuedTimeoutInMinutes', props);
    return resource.getResponseField('buildBatch.queuedTimeoutInMinutes') as unknown as number;
  }

  public get complete(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.complete'),
        outputPath: 'buildBatch.complete',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.complete', props);
    return resource.getResponseField('buildBatch.complete') as unknown as boolean;
  }

  public get initiator(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.initiator'),
        outputPath: 'buildBatch.initiator',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.initiator', props);
    return resource.getResponseField('buildBatch.initiator') as unknown as string;
  }

  public get vpcConfig(): CodeBuildResponsesStopBuildBatchBuildBatchVpcConfig {
    return new CodeBuildResponsesStopBuildBatchBuildBatchVpcConfig(this.__scope, this.__resources, this.__input);
  }

  public get encryptionKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.encryptionKey'),
        outputPath: 'buildBatch.encryptionKey',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.encryptionKey', props);
    return resource.getResponseField('buildBatch.encryptionKey') as unknown as string;
  }

  public get buildBatchNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.buildBatchNumber'),
        outputPath: 'buildBatch.buildBatchNumber',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.buildBatchNumber', props);
    return resource.getResponseField('buildBatch.buildBatchNumber') as unknown as number;
  }

  public get fileSystemLocations(): shapes.CodeBuildProjectFileSystemLocation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.fileSystemLocations'),
        outputPath: 'buildBatch.fileSystemLocations',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.fileSystemLocations', props);
    return resource.getResponseField('buildBatch.fileSystemLocations') as unknown as shapes.CodeBuildProjectFileSystemLocation[];
  }

  public get buildBatchConfig(): CodeBuildResponsesStopBuildBatchBuildBatchBuildBatchConfig {
    return new CodeBuildResponsesStopBuildBatchBuildBatchBuildBatchConfig(this.__scope, this.__resources, this.__input);
  }

  public get buildGroups(): shapes.CodeBuildBuildGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.buildGroups'),
        outputPath: 'buildBatch.buildGroups',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.buildGroups', props);
    return resource.getResponseField('buildBatch.buildGroups') as unknown as shapes.CodeBuildBuildGroup[];
  }

  public get debugSessionEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.debugSessionEnabled'),
        outputPath: 'buildBatch.debugSessionEnabled',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.debugSessionEnabled', props);
    return resource.getResponseField('buildBatch.debugSessionEnabled') as unknown as boolean;
  }

}

export class CodeBuildResponsesStopBuildBatchBuildBatchSource {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStopBuildBatchInput) {
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.source.type'),
        outputPath: 'buildBatch.source.type',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.source.type', props);
    return resource.getResponseField('buildBatch.source.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.source.location'),
        outputPath: 'buildBatch.source.location',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.source.location', props);
    return resource.getResponseField('buildBatch.source.location') as unknown as string;
  }

  public get gitCloneDepth(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.source.gitCloneDepth'),
        outputPath: 'buildBatch.source.gitCloneDepth',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.source.gitCloneDepth', props);
    return resource.getResponseField('buildBatch.source.gitCloneDepth') as unknown as number;
  }

  public get gitSubmodulesConfig(): CodeBuildResponsesStopBuildBatchBuildBatchSourceGitSubmodulesConfig {
    return new CodeBuildResponsesStopBuildBatchBuildBatchSourceGitSubmodulesConfig(this.__scope, this.__resources, this.__input);
  }

  public get buildspec(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.source.buildspec'),
        outputPath: 'buildBatch.source.buildspec',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.source.buildspec', props);
    return resource.getResponseField('buildBatch.source.buildspec') as unknown as string;
  }

  public get auth(): CodeBuildResponsesStopBuildBatchBuildBatchSourceAuth {
    return new CodeBuildResponsesStopBuildBatchBuildBatchSourceAuth(this.__scope, this.__resources, this.__input);
  }

  public get reportBuildStatus(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.source.reportBuildStatus'),
        outputPath: 'buildBatch.source.reportBuildStatus',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.source.reportBuildStatus', props);
    return resource.getResponseField('buildBatch.source.reportBuildStatus') as unknown as boolean;
  }

  public get buildStatusConfig(): CodeBuildResponsesStopBuildBatchBuildBatchSourceBuildStatusConfig {
    return new CodeBuildResponsesStopBuildBatchBuildBatchSourceBuildStatusConfig(this.__scope, this.__resources, this.__input);
  }

  public get insecureSsl(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.source.insecureSsl'),
        outputPath: 'buildBatch.source.insecureSsl',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.source.insecureSsl', props);
    return resource.getResponseField('buildBatch.source.insecureSsl') as unknown as boolean;
  }

  public get sourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.source.sourceIdentifier'),
        outputPath: 'buildBatch.source.sourceIdentifier',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.source.sourceIdentifier', props);
    return resource.getResponseField('buildBatch.source.sourceIdentifier') as unknown as string;
  }

}

export class CodeBuildResponsesStopBuildBatchBuildBatchSourceGitSubmodulesConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStopBuildBatchInput) {
  }

  public get fetchSubmodules(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.source.gitSubmodulesConfig.fetchSubmodules'),
        outputPath: 'buildBatch.source.gitSubmodulesConfig.fetchSubmodules',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.source.gitSubmodulesConfig.fetchSubmodules', props);
    return resource.getResponseField('buildBatch.source.gitSubmodulesConfig.fetchSubmodules') as unknown as boolean;
  }

}

export class CodeBuildResponsesStopBuildBatchBuildBatchSourceAuth {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStopBuildBatchInput) {
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.source.auth.type'),
        outputPath: 'buildBatch.source.auth.type',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.source.auth.type', props);
    return resource.getResponseField('buildBatch.source.auth.type') as unknown as string;
  }

  public get resource(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.source.auth.resource'),
        outputPath: 'buildBatch.source.auth.resource',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.source.auth.resource', props);
    return resource.getResponseField('buildBatch.source.auth.resource') as unknown as string;
  }

}

export class CodeBuildResponsesStopBuildBatchBuildBatchSourceBuildStatusConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStopBuildBatchInput) {
  }

  public get context(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.source.buildStatusConfig.context'),
        outputPath: 'buildBatch.source.buildStatusConfig.context',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.source.buildStatusConfig.context', props);
    return resource.getResponseField('buildBatch.source.buildStatusConfig.context') as unknown as string;
  }

  public get targetUrl(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.source.buildStatusConfig.targetUrl'),
        outputPath: 'buildBatch.source.buildStatusConfig.targetUrl',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.source.buildStatusConfig.targetUrl', props);
    return resource.getResponseField('buildBatch.source.buildStatusConfig.targetUrl') as unknown as string;
  }

}

export class CodeBuildResponsesStopBuildBatchBuildBatchArtifacts {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStopBuildBatchInput) {
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.artifacts.location'),
        outputPath: 'buildBatch.artifacts.location',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.artifacts.location', props);
    return resource.getResponseField('buildBatch.artifacts.location') as unknown as string;
  }

  public get sha256Sum(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.artifacts.sha256sum'),
        outputPath: 'buildBatch.artifacts.sha256sum',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.artifacts.sha256sum', props);
    return resource.getResponseField('buildBatch.artifacts.sha256sum') as unknown as string;
  }

  public get md5Sum(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.artifacts.md5sum'),
        outputPath: 'buildBatch.artifacts.md5sum',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.artifacts.md5sum', props);
    return resource.getResponseField('buildBatch.artifacts.md5sum') as unknown as string;
  }

  public get overrideArtifactName(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.artifacts.overrideArtifactName'),
        outputPath: 'buildBatch.artifacts.overrideArtifactName',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.artifacts.overrideArtifactName', props);
    return resource.getResponseField('buildBatch.artifacts.overrideArtifactName') as unknown as boolean;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.artifacts.encryptionDisabled'),
        outputPath: 'buildBatch.artifacts.encryptionDisabled',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.artifacts.encryptionDisabled', props);
    return resource.getResponseField('buildBatch.artifacts.encryptionDisabled') as unknown as boolean;
  }

  public get artifactIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.artifacts.artifactIdentifier'),
        outputPath: 'buildBatch.artifacts.artifactIdentifier',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.artifacts.artifactIdentifier', props);
    return resource.getResponseField('buildBatch.artifacts.artifactIdentifier') as unknown as string;
  }

  public get bucketOwnerAccess(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.artifacts.bucketOwnerAccess'),
        outputPath: 'buildBatch.artifacts.bucketOwnerAccess',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.artifacts.bucketOwnerAccess', props);
    return resource.getResponseField('buildBatch.artifacts.bucketOwnerAccess') as unknown as string;
  }

}

export class CodeBuildResponsesStopBuildBatchBuildBatchCache {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStopBuildBatchInput) {
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.cache.type'),
        outputPath: 'buildBatch.cache.type',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.cache.type', props);
    return resource.getResponseField('buildBatch.cache.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.cache.location'),
        outputPath: 'buildBatch.cache.location',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.cache.location', props);
    return resource.getResponseField('buildBatch.cache.location') as unknown as string;
  }

  public get modes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.cache.modes'),
        outputPath: 'buildBatch.cache.modes',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.cache.modes', props);
    return resource.getResponseField('buildBatch.cache.modes') as unknown as string[];
  }

}

export class CodeBuildResponsesStopBuildBatchBuildBatchEnvironment {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStopBuildBatchInput) {
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.environment.type'),
        outputPath: 'buildBatch.environment.type',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.environment.type', props);
    return resource.getResponseField('buildBatch.environment.type') as unknown as string;
  }

  public get image(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.environment.image'),
        outputPath: 'buildBatch.environment.image',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.environment.image', props);
    return resource.getResponseField('buildBatch.environment.image') as unknown as string;
  }

  public get computeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.environment.computeType'),
        outputPath: 'buildBatch.environment.computeType',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.environment.computeType', props);
    return resource.getResponseField('buildBatch.environment.computeType') as unknown as string;
  }

  public get environmentVariables(): shapes.CodeBuildEnvironmentVariable[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.environment.environmentVariables'),
        outputPath: 'buildBatch.environment.environmentVariables',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.environment.environmentVariables', props);
    return resource.getResponseField('buildBatch.environment.environmentVariables') as unknown as shapes.CodeBuildEnvironmentVariable[];
  }

  public get privilegedMode(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.environment.privilegedMode'),
        outputPath: 'buildBatch.environment.privilegedMode',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.environment.privilegedMode', props);
    return resource.getResponseField('buildBatch.environment.privilegedMode') as unknown as boolean;
  }

  public get certificate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.environment.certificate'),
        outputPath: 'buildBatch.environment.certificate',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.environment.certificate', props);
    return resource.getResponseField('buildBatch.environment.certificate') as unknown as string;
  }

  public get registryCredential(): CodeBuildResponsesStopBuildBatchBuildBatchEnvironmentRegistryCredential {
    return new CodeBuildResponsesStopBuildBatchBuildBatchEnvironmentRegistryCredential(this.__scope, this.__resources, this.__input);
  }

  public get imagePullCredentialsType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.environment.imagePullCredentialsType'),
        outputPath: 'buildBatch.environment.imagePullCredentialsType',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.environment.imagePullCredentialsType', props);
    return resource.getResponseField('buildBatch.environment.imagePullCredentialsType') as unknown as string;
  }

}

export class CodeBuildResponsesStopBuildBatchBuildBatchEnvironmentRegistryCredential {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStopBuildBatchInput) {
  }

  public get credential(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.environment.registryCredential.credential'),
        outputPath: 'buildBatch.environment.registryCredential.credential',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.environment.registryCredential.credential', props);
    return resource.getResponseField('buildBatch.environment.registryCredential.credential') as unknown as string;
  }

  public get credentialProvider(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.environment.registryCredential.credentialProvider'),
        outputPath: 'buildBatch.environment.registryCredential.credentialProvider',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.environment.registryCredential.credentialProvider', props);
    return resource.getResponseField('buildBatch.environment.registryCredential.credentialProvider') as unknown as string;
  }

}

export class CodeBuildResponsesStopBuildBatchBuildBatchLogConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStopBuildBatchInput) {
  }

  public get cloudWatchLogs(): CodeBuildResponsesStopBuildBatchBuildBatchLogConfigCloudWatchLogs {
    return new CodeBuildResponsesStopBuildBatchBuildBatchLogConfigCloudWatchLogs(this.__scope, this.__resources, this.__input);
  }

  public get s3Logs(): CodeBuildResponsesStopBuildBatchBuildBatchLogConfigS3Logs {
    return new CodeBuildResponsesStopBuildBatchBuildBatchLogConfigS3Logs(this.__scope, this.__resources, this.__input);
  }

}

export class CodeBuildResponsesStopBuildBatchBuildBatchLogConfigCloudWatchLogs {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStopBuildBatchInput) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.logConfig.cloudWatchLogs.status'),
        outputPath: 'buildBatch.logConfig.cloudWatchLogs.status',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.logConfig.cloudWatchLogs.status', props);
    return resource.getResponseField('buildBatch.logConfig.cloudWatchLogs.status') as unknown as string;
  }

  public get groupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.logConfig.cloudWatchLogs.groupName'),
        outputPath: 'buildBatch.logConfig.cloudWatchLogs.groupName',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.logConfig.cloudWatchLogs.groupName', props);
    return resource.getResponseField('buildBatch.logConfig.cloudWatchLogs.groupName') as unknown as string;
  }

  public get streamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.logConfig.cloudWatchLogs.streamName'),
        outputPath: 'buildBatch.logConfig.cloudWatchLogs.streamName',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.logConfig.cloudWatchLogs.streamName', props);
    return resource.getResponseField('buildBatch.logConfig.cloudWatchLogs.streamName') as unknown as string;
  }

}

export class CodeBuildResponsesStopBuildBatchBuildBatchLogConfigS3Logs {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStopBuildBatchInput) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.logConfig.s3Logs.status'),
        outputPath: 'buildBatch.logConfig.s3Logs.status',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.logConfig.s3Logs.status', props);
    return resource.getResponseField('buildBatch.logConfig.s3Logs.status') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.logConfig.s3Logs.location'),
        outputPath: 'buildBatch.logConfig.s3Logs.location',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.logConfig.s3Logs.location', props);
    return resource.getResponseField('buildBatch.logConfig.s3Logs.location') as unknown as string;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.logConfig.s3Logs.encryptionDisabled'),
        outputPath: 'buildBatch.logConfig.s3Logs.encryptionDisabled',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.logConfig.s3Logs.encryptionDisabled', props);
    return resource.getResponseField('buildBatch.logConfig.s3Logs.encryptionDisabled') as unknown as boolean;
  }

  public get bucketOwnerAccess(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.logConfig.s3Logs.bucketOwnerAccess'),
        outputPath: 'buildBatch.logConfig.s3Logs.bucketOwnerAccess',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.logConfig.s3Logs.bucketOwnerAccess', props);
    return resource.getResponseField('buildBatch.logConfig.s3Logs.bucketOwnerAccess') as unknown as string;
  }

}

export class CodeBuildResponsesStopBuildBatchBuildBatchVpcConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStopBuildBatchInput) {
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.vpcConfig.vpcId'),
        outputPath: 'buildBatch.vpcConfig.vpcId',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.vpcConfig.vpcId', props);
    return resource.getResponseField('buildBatch.vpcConfig.vpcId') as unknown as string;
  }

  public get subnets(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.vpcConfig.subnets'),
        outputPath: 'buildBatch.vpcConfig.subnets',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.vpcConfig.subnets', props);
    return resource.getResponseField('buildBatch.vpcConfig.subnets') as unknown as string[];
  }

  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.vpcConfig.securityGroupIds'),
        outputPath: 'buildBatch.vpcConfig.securityGroupIds',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.vpcConfig.securityGroupIds', props);
    return resource.getResponseField('buildBatch.vpcConfig.securityGroupIds') as unknown as string[];
  }

}

export class CodeBuildResponsesStopBuildBatchBuildBatchBuildBatchConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStopBuildBatchInput) {
  }

  public get serviceRole(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.buildBatchConfig.serviceRole'),
        outputPath: 'buildBatch.buildBatchConfig.serviceRole',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.buildBatchConfig.serviceRole', props);
    return resource.getResponseField('buildBatch.buildBatchConfig.serviceRole') as unknown as string;
  }

  public get combineArtifacts(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.buildBatchConfig.combineArtifacts'),
        outputPath: 'buildBatch.buildBatchConfig.combineArtifacts',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.buildBatchConfig.combineArtifacts', props);
    return resource.getResponseField('buildBatch.buildBatchConfig.combineArtifacts') as unknown as boolean;
  }

  public get restrictions(): CodeBuildResponsesStopBuildBatchBuildBatchBuildBatchConfigRestrictions {
    return new CodeBuildResponsesStopBuildBatchBuildBatchBuildBatchConfigRestrictions(this.__scope, this.__resources, this.__input);
  }

  public get timeoutInMins(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.buildBatchConfig.timeoutInMins'),
        outputPath: 'buildBatch.buildBatchConfig.timeoutInMins',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.buildBatchConfig.timeoutInMins', props);
    return resource.getResponseField('buildBatch.buildBatchConfig.timeoutInMins') as unknown as number;
  }

}

export class CodeBuildResponsesStopBuildBatchBuildBatchBuildBatchConfigRestrictions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildStopBuildBatchInput) {
  }

  public get maximumBuildsAllowed(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.buildBatchConfig.restrictions.maximumBuildsAllowed'),
        outputPath: 'buildBatch.buildBatchConfig.restrictions.maximumBuildsAllowed',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.buildBatchConfig.restrictions.maximumBuildsAllowed', props);
    return resource.getResponseField('buildBatch.buildBatchConfig.restrictions.maximumBuildsAllowed') as unknown as number;
  }

  public get computeTypesAllowed(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopBuildBatch',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.StopBuildBatch.buildBatch.buildBatchConfig.restrictions.computeTypesAllowed'),
        outputPath: 'buildBatch.buildBatchConfig.restrictions.computeTypesAllowed',
        parameters: {
          id: this.__input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopBuildBatch.buildBatch.buildBatchConfig.restrictions.computeTypesAllowed', props);
    return resource.getResponseField('buildBatch.buildBatchConfig.restrictions.computeTypesAllowed') as unknown as string[];
  }

}

export class CodeBuildResponsesUpdateProject {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildUpdateProjectInput) {
  }

  public get project(): CodeBuildResponsesUpdateProjectProject {
    return new CodeBuildResponsesUpdateProjectProject(this.__scope, this.__resources, this.__input);
  }

}

export class CodeBuildResponsesUpdateProjectProject {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildUpdateProjectInput) {
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.name'),
        outputPath: 'project.name',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.name', props);
    return resource.getResponseField('project.name') as unknown as string;
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.arn'),
        outputPath: 'project.arn',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.arn', props);
    return resource.getResponseField('project.arn') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.description'),
        outputPath: 'project.description',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.description', props);
    return resource.getResponseField('project.description') as unknown as string;
  }

  public get source(): CodeBuildResponsesUpdateProjectProjectSource {
    return new CodeBuildResponsesUpdateProjectProjectSource(this.__scope, this.__resources, this.__input);
  }

  public get secondarySources(): shapes.CodeBuildProjectSource[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.secondarySources'),
        outputPath: 'project.secondarySources',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.secondarySources', props);
    return resource.getResponseField('project.secondarySources') as unknown as shapes.CodeBuildProjectSource[];
  }

  public get sourceVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.sourceVersion'),
        outputPath: 'project.sourceVersion',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.sourceVersion', props);
    return resource.getResponseField('project.sourceVersion') as unknown as string;
  }

  public get secondarySourceVersions(): shapes.CodeBuildProjectSourceVersion[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.secondarySourceVersions'),
        outputPath: 'project.secondarySourceVersions',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.secondarySourceVersions', props);
    return resource.getResponseField('project.secondarySourceVersions') as unknown as shapes.CodeBuildProjectSourceVersion[];
  }

  public get artifacts(): CodeBuildResponsesUpdateProjectProjectArtifacts {
    return new CodeBuildResponsesUpdateProjectProjectArtifacts(this.__scope, this.__resources, this.__input);
  }

  public get secondaryArtifacts(): shapes.CodeBuildProjectArtifacts[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.secondaryArtifacts'),
        outputPath: 'project.secondaryArtifacts',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.secondaryArtifacts', props);
    return resource.getResponseField('project.secondaryArtifacts') as unknown as shapes.CodeBuildProjectArtifacts[];
  }

  public get cache(): CodeBuildResponsesUpdateProjectProjectCache {
    return new CodeBuildResponsesUpdateProjectProjectCache(this.__scope, this.__resources, this.__input);
  }

  public get environment(): CodeBuildResponsesUpdateProjectProjectEnvironment {
    return new CodeBuildResponsesUpdateProjectProjectEnvironment(this.__scope, this.__resources, this.__input);
  }

  public get serviceRole(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.serviceRole'),
        outputPath: 'project.serviceRole',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.serviceRole', props);
    return resource.getResponseField('project.serviceRole') as unknown as string;
  }

  public get timeoutInMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.timeoutInMinutes'),
        outputPath: 'project.timeoutInMinutes',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.timeoutInMinutes', props);
    return resource.getResponseField('project.timeoutInMinutes') as unknown as number;
  }

  public get queuedTimeoutInMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.queuedTimeoutInMinutes'),
        outputPath: 'project.queuedTimeoutInMinutes',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.queuedTimeoutInMinutes', props);
    return resource.getResponseField('project.queuedTimeoutInMinutes') as unknown as number;
  }

  public get encryptionKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.encryptionKey'),
        outputPath: 'project.encryptionKey',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.encryptionKey', props);
    return resource.getResponseField('project.encryptionKey') as unknown as string;
  }

  public get tags(): shapes.CodeBuildTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.tags'),
        outputPath: 'project.tags',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.tags', props);
    return resource.getResponseField('project.tags') as unknown as shapes.CodeBuildTag[];
  }

  public get created(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.created'),
        outputPath: 'project.created',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.created', props);
    return resource.getResponseField('project.created') as unknown as string;
  }

  public get lastModified(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.lastModified'),
        outputPath: 'project.lastModified',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.lastModified', props);
    return resource.getResponseField('project.lastModified') as unknown as string;
  }

  public get webhook(): CodeBuildResponsesUpdateProjectProjectWebhook {
    return new CodeBuildResponsesUpdateProjectProjectWebhook(this.__scope, this.__resources, this.__input);
  }

  public get vpcConfig(): CodeBuildResponsesUpdateProjectProjectVpcConfig {
    return new CodeBuildResponsesUpdateProjectProjectVpcConfig(this.__scope, this.__resources, this.__input);
  }

  public get badge(): CodeBuildResponsesUpdateProjectProjectBadge {
    return new CodeBuildResponsesUpdateProjectProjectBadge(this.__scope, this.__resources, this.__input);
  }

  public get logsConfig(): CodeBuildResponsesUpdateProjectProjectLogsConfig {
    return new CodeBuildResponsesUpdateProjectProjectLogsConfig(this.__scope, this.__resources, this.__input);
  }

  public get fileSystemLocations(): shapes.CodeBuildProjectFileSystemLocation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.fileSystemLocations'),
        outputPath: 'project.fileSystemLocations',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.fileSystemLocations', props);
    return resource.getResponseField('project.fileSystemLocations') as unknown as shapes.CodeBuildProjectFileSystemLocation[];
  }

  public get buildBatchConfig(): CodeBuildResponsesUpdateProjectProjectBuildBatchConfig {
    return new CodeBuildResponsesUpdateProjectProjectBuildBatchConfig(this.__scope, this.__resources, this.__input);
  }

  public get concurrentBuildLimit(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.concurrentBuildLimit'),
        outputPath: 'project.concurrentBuildLimit',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.concurrentBuildLimit', props);
    return resource.getResponseField('project.concurrentBuildLimit') as unknown as number;
  }

}

export class CodeBuildResponsesUpdateProjectProjectSource {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildUpdateProjectInput) {
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.source.type'),
        outputPath: 'project.source.type',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.source.type', props);
    return resource.getResponseField('project.source.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.source.location'),
        outputPath: 'project.source.location',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.source.location', props);
    return resource.getResponseField('project.source.location') as unknown as string;
  }

  public get gitCloneDepth(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.source.gitCloneDepth'),
        outputPath: 'project.source.gitCloneDepth',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.source.gitCloneDepth', props);
    return resource.getResponseField('project.source.gitCloneDepth') as unknown as number;
  }

  public get gitSubmodulesConfig(): CodeBuildResponsesUpdateProjectProjectSourceGitSubmodulesConfig {
    return new CodeBuildResponsesUpdateProjectProjectSourceGitSubmodulesConfig(this.__scope, this.__resources, this.__input);
  }

  public get buildspec(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.source.buildspec'),
        outputPath: 'project.source.buildspec',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.source.buildspec', props);
    return resource.getResponseField('project.source.buildspec') as unknown as string;
  }

  public get auth(): CodeBuildResponsesUpdateProjectProjectSourceAuth {
    return new CodeBuildResponsesUpdateProjectProjectSourceAuth(this.__scope, this.__resources, this.__input);
  }

  public get reportBuildStatus(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.source.reportBuildStatus'),
        outputPath: 'project.source.reportBuildStatus',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.source.reportBuildStatus', props);
    return resource.getResponseField('project.source.reportBuildStatus') as unknown as boolean;
  }

  public get buildStatusConfig(): CodeBuildResponsesUpdateProjectProjectSourceBuildStatusConfig {
    return new CodeBuildResponsesUpdateProjectProjectSourceBuildStatusConfig(this.__scope, this.__resources, this.__input);
  }

  public get insecureSsl(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.source.insecureSsl'),
        outputPath: 'project.source.insecureSsl',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.source.insecureSsl', props);
    return resource.getResponseField('project.source.insecureSsl') as unknown as boolean;
  }

  public get sourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.source.sourceIdentifier'),
        outputPath: 'project.source.sourceIdentifier',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.source.sourceIdentifier', props);
    return resource.getResponseField('project.source.sourceIdentifier') as unknown as string;
  }

}

export class CodeBuildResponsesUpdateProjectProjectSourceGitSubmodulesConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildUpdateProjectInput) {
  }

  public get fetchSubmodules(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.source.gitSubmodulesConfig.fetchSubmodules'),
        outputPath: 'project.source.gitSubmodulesConfig.fetchSubmodules',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.source.gitSubmodulesConfig.fetchSubmodules', props);
    return resource.getResponseField('project.source.gitSubmodulesConfig.fetchSubmodules') as unknown as boolean;
  }

}

export class CodeBuildResponsesUpdateProjectProjectSourceAuth {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildUpdateProjectInput) {
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.source.auth.type'),
        outputPath: 'project.source.auth.type',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.source.auth.type', props);
    return resource.getResponseField('project.source.auth.type') as unknown as string;
  }

  public get resource(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.source.auth.resource'),
        outputPath: 'project.source.auth.resource',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.source.auth.resource', props);
    return resource.getResponseField('project.source.auth.resource') as unknown as string;
  }

}

export class CodeBuildResponsesUpdateProjectProjectSourceBuildStatusConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildUpdateProjectInput) {
  }

  public get context(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.source.buildStatusConfig.context'),
        outputPath: 'project.source.buildStatusConfig.context',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.source.buildStatusConfig.context', props);
    return resource.getResponseField('project.source.buildStatusConfig.context') as unknown as string;
  }

  public get targetUrl(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.source.buildStatusConfig.targetUrl'),
        outputPath: 'project.source.buildStatusConfig.targetUrl',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.source.buildStatusConfig.targetUrl', props);
    return resource.getResponseField('project.source.buildStatusConfig.targetUrl') as unknown as string;
  }

}

export class CodeBuildResponsesUpdateProjectProjectArtifacts {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildUpdateProjectInput) {
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.artifacts.type'),
        outputPath: 'project.artifacts.type',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.artifacts.type', props);
    return resource.getResponseField('project.artifacts.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.artifacts.location'),
        outputPath: 'project.artifacts.location',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.artifacts.location', props);
    return resource.getResponseField('project.artifacts.location') as unknown as string;
  }

  public get path(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.artifacts.path'),
        outputPath: 'project.artifacts.path',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.artifacts.path', props);
    return resource.getResponseField('project.artifacts.path') as unknown as string;
  }

  public get namespaceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.artifacts.namespaceType'),
        outputPath: 'project.artifacts.namespaceType',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.artifacts.namespaceType', props);
    return resource.getResponseField('project.artifacts.namespaceType') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.artifacts.name'),
        outputPath: 'project.artifacts.name',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.artifacts.name', props);
    return resource.getResponseField('project.artifacts.name') as unknown as string;
  }

  public get packaging(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.artifacts.packaging'),
        outputPath: 'project.artifacts.packaging',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.artifacts.packaging', props);
    return resource.getResponseField('project.artifacts.packaging') as unknown as string;
  }

  public get overrideArtifactName(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.artifacts.overrideArtifactName'),
        outputPath: 'project.artifacts.overrideArtifactName',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.artifacts.overrideArtifactName', props);
    return resource.getResponseField('project.artifacts.overrideArtifactName') as unknown as boolean;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.artifacts.encryptionDisabled'),
        outputPath: 'project.artifacts.encryptionDisabled',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.artifacts.encryptionDisabled', props);
    return resource.getResponseField('project.artifacts.encryptionDisabled') as unknown as boolean;
  }

  public get artifactIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.artifacts.artifactIdentifier'),
        outputPath: 'project.artifacts.artifactIdentifier',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.artifacts.artifactIdentifier', props);
    return resource.getResponseField('project.artifacts.artifactIdentifier') as unknown as string;
  }

  public get bucketOwnerAccess(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.artifacts.bucketOwnerAccess'),
        outputPath: 'project.artifacts.bucketOwnerAccess',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.artifacts.bucketOwnerAccess', props);
    return resource.getResponseField('project.artifacts.bucketOwnerAccess') as unknown as string;
  }

}

export class CodeBuildResponsesUpdateProjectProjectCache {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildUpdateProjectInput) {
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.cache.type'),
        outputPath: 'project.cache.type',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.cache.type', props);
    return resource.getResponseField('project.cache.type') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.cache.location'),
        outputPath: 'project.cache.location',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.cache.location', props);
    return resource.getResponseField('project.cache.location') as unknown as string;
  }

  public get modes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.cache.modes'),
        outputPath: 'project.cache.modes',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.cache.modes', props);
    return resource.getResponseField('project.cache.modes') as unknown as string[];
  }

}

export class CodeBuildResponsesUpdateProjectProjectEnvironment {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildUpdateProjectInput) {
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.environment.type'),
        outputPath: 'project.environment.type',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.environment.type', props);
    return resource.getResponseField('project.environment.type') as unknown as string;
  }

  public get image(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.environment.image'),
        outputPath: 'project.environment.image',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.environment.image', props);
    return resource.getResponseField('project.environment.image') as unknown as string;
  }

  public get computeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.environment.computeType'),
        outputPath: 'project.environment.computeType',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.environment.computeType', props);
    return resource.getResponseField('project.environment.computeType') as unknown as string;
  }

  public get environmentVariables(): shapes.CodeBuildEnvironmentVariable[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.environment.environmentVariables'),
        outputPath: 'project.environment.environmentVariables',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.environment.environmentVariables', props);
    return resource.getResponseField('project.environment.environmentVariables') as unknown as shapes.CodeBuildEnvironmentVariable[];
  }

  public get privilegedMode(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.environment.privilegedMode'),
        outputPath: 'project.environment.privilegedMode',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.environment.privilegedMode', props);
    return resource.getResponseField('project.environment.privilegedMode') as unknown as boolean;
  }

  public get certificate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.environment.certificate'),
        outputPath: 'project.environment.certificate',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.environment.certificate', props);
    return resource.getResponseField('project.environment.certificate') as unknown as string;
  }

  public get registryCredential(): CodeBuildResponsesUpdateProjectProjectEnvironmentRegistryCredential {
    return new CodeBuildResponsesUpdateProjectProjectEnvironmentRegistryCredential(this.__scope, this.__resources, this.__input);
  }

  public get imagePullCredentialsType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.environment.imagePullCredentialsType'),
        outputPath: 'project.environment.imagePullCredentialsType',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.environment.imagePullCredentialsType', props);
    return resource.getResponseField('project.environment.imagePullCredentialsType') as unknown as string;
  }

}

export class CodeBuildResponsesUpdateProjectProjectEnvironmentRegistryCredential {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildUpdateProjectInput) {
  }

  public get credential(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.environment.registryCredential.credential'),
        outputPath: 'project.environment.registryCredential.credential',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.environment.registryCredential.credential', props);
    return resource.getResponseField('project.environment.registryCredential.credential') as unknown as string;
  }

  public get credentialProvider(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.environment.registryCredential.credentialProvider'),
        outputPath: 'project.environment.registryCredential.credentialProvider',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.environment.registryCredential.credentialProvider', props);
    return resource.getResponseField('project.environment.registryCredential.credentialProvider') as unknown as string;
  }

}

export class CodeBuildResponsesUpdateProjectProjectWebhook {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildUpdateProjectInput) {
  }

  public get url(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.webhook.url'),
        outputPath: 'project.webhook.url',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.webhook.url', props);
    return resource.getResponseField('project.webhook.url') as unknown as string;
  }

  public get payloadUrl(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.webhook.payloadUrl'),
        outputPath: 'project.webhook.payloadUrl',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.webhook.payloadUrl', props);
    return resource.getResponseField('project.webhook.payloadUrl') as unknown as string;
  }

  public get secret(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.webhook.secret'),
        outputPath: 'project.webhook.secret',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.webhook.secret', props);
    return resource.getResponseField('project.webhook.secret') as unknown as string;
  }

  public get branchFilter(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.webhook.branchFilter'),
        outputPath: 'project.webhook.branchFilter',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.webhook.branchFilter', props);
    return resource.getResponseField('project.webhook.branchFilter') as unknown as string;
  }

  public get filterGroups(): shapes.CodeBuildWebhookFilter[][] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.webhook.filterGroups'),
        outputPath: 'project.webhook.filterGroups',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.webhook.filterGroups', props);
    return resource.getResponseField('project.webhook.filterGroups') as unknown as shapes.CodeBuildWebhookFilter[][];
  }

  public get buildType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.webhook.buildType'),
        outputPath: 'project.webhook.buildType',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.webhook.buildType', props);
    return resource.getResponseField('project.webhook.buildType') as unknown as string;
  }

  public get lastModifiedSecret(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.webhook.lastModifiedSecret'),
        outputPath: 'project.webhook.lastModifiedSecret',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.webhook.lastModifiedSecret', props);
    return resource.getResponseField('project.webhook.lastModifiedSecret') as unknown as string;
  }

}

export class CodeBuildResponsesUpdateProjectProjectVpcConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildUpdateProjectInput) {
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.vpcConfig.vpcId'),
        outputPath: 'project.vpcConfig.vpcId',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.vpcConfig.vpcId', props);
    return resource.getResponseField('project.vpcConfig.vpcId') as unknown as string;
  }

  public get subnets(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.vpcConfig.subnets'),
        outputPath: 'project.vpcConfig.subnets',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.vpcConfig.subnets', props);
    return resource.getResponseField('project.vpcConfig.subnets') as unknown as string[];
  }

  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.vpcConfig.securityGroupIds'),
        outputPath: 'project.vpcConfig.securityGroupIds',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.vpcConfig.securityGroupIds', props);
    return resource.getResponseField('project.vpcConfig.securityGroupIds') as unknown as string[];
  }

}

export class CodeBuildResponsesUpdateProjectProjectBadge {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildUpdateProjectInput) {
  }

  public get badgeEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.badge.badgeEnabled'),
        outputPath: 'project.badge.badgeEnabled',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.badge.badgeEnabled', props);
    return resource.getResponseField('project.badge.badgeEnabled') as unknown as boolean;
  }

  public get badgeRequestUrl(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.badge.badgeRequestUrl'),
        outputPath: 'project.badge.badgeRequestUrl',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.badge.badgeRequestUrl', props);
    return resource.getResponseField('project.badge.badgeRequestUrl') as unknown as string;
  }

}

export class CodeBuildResponsesUpdateProjectProjectLogsConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildUpdateProjectInput) {
  }

  public get cloudWatchLogs(): CodeBuildResponsesUpdateProjectProjectLogsConfigCloudWatchLogs {
    return new CodeBuildResponsesUpdateProjectProjectLogsConfigCloudWatchLogs(this.__scope, this.__resources, this.__input);
  }

  public get s3Logs(): CodeBuildResponsesUpdateProjectProjectLogsConfigS3Logs {
    return new CodeBuildResponsesUpdateProjectProjectLogsConfigS3Logs(this.__scope, this.__resources, this.__input);
  }

}

export class CodeBuildResponsesUpdateProjectProjectLogsConfigCloudWatchLogs {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildUpdateProjectInput) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.logsConfig.cloudWatchLogs.status'),
        outputPath: 'project.logsConfig.cloudWatchLogs.status',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.logsConfig.cloudWatchLogs.status', props);
    return resource.getResponseField('project.logsConfig.cloudWatchLogs.status') as unknown as string;
  }

  public get groupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.logsConfig.cloudWatchLogs.groupName'),
        outputPath: 'project.logsConfig.cloudWatchLogs.groupName',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.logsConfig.cloudWatchLogs.groupName', props);
    return resource.getResponseField('project.logsConfig.cloudWatchLogs.groupName') as unknown as string;
  }

  public get streamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.logsConfig.cloudWatchLogs.streamName'),
        outputPath: 'project.logsConfig.cloudWatchLogs.streamName',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.logsConfig.cloudWatchLogs.streamName', props);
    return resource.getResponseField('project.logsConfig.cloudWatchLogs.streamName') as unknown as string;
  }

}

export class CodeBuildResponsesUpdateProjectProjectLogsConfigS3Logs {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildUpdateProjectInput) {
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.logsConfig.s3Logs.status'),
        outputPath: 'project.logsConfig.s3Logs.status',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.logsConfig.s3Logs.status', props);
    return resource.getResponseField('project.logsConfig.s3Logs.status') as unknown as string;
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.logsConfig.s3Logs.location'),
        outputPath: 'project.logsConfig.s3Logs.location',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.logsConfig.s3Logs.location', props);
    return resource.getResponseField('project.logsConfig.s3Logs.location') as unknown as string;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.logsConfig.s3Logs.encryptionDisabled'),
        outputPath: 'project.logsConfig.s3Logs.encryptionDisabled',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.logsConfig.s3Logs.encryptionDisabled', props);
    return resource.getResponseField('project.logsConfig.s3Logs.encryptionDisabled') as unknown as boolean;
  }

  public get bucketOwnerAccess(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.logsConfig.s3Logs.bucketOwnerAccess'),
        outputPath: 'project.logsConfig.s3Logs.bucketOwnerAccess',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.logsConfig.s3Logs.bucketOwnerAccess', props);
    return resource.getResponseField('project.logsConfig.s3Logs.bucketOwnerAccess') as unknown as string;
  }

}

export class CodeBuildResponsesUpdateProjectProjectBuildBatchConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildUpdateProjectInput) {
  }

  public get serviceRole(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.buildBatchConfig.serviceRole'),
        outputPath: 'project.buildBatchConfig.serviceRole',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.buildBatchConfig.serviceRole', props);
    return resource.getResponseField('project.buildBatchConfig.serviceRole') as unknown as string;
  }

  public get combineArtifacts(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.buildBatchConfig.combineArtifacts'),
        outputPath: 'project.buildBatchConfig.combineArtifacts',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.buildBatchConfig.combineArtifacts', props);
    return resource.getResponseField('project.buildBatchConfig.combineArtifacts') as unknown as boolean;
  }

  public get restrictions(): CodeBuildResponsesUpdateProjectProjectBuildBatchConfigRestrictions {
    return new CodeBuildResponsesUpdateProjectProjectBuildBatchConfigRestrictions(this.__scope, this.__resources, this.__input);
  }

  public get timeoutInMins(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.buildBatchConfig.timeoutInMins'),
        outputPath: 'project.buildBatchConfig.timeoutInMins',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.buildBatchConfig.timeoutInMins', props);
    return resource.getResponseField('project.buildBatchConfig.timeoutInMins') as unknown as number;
  }

}

export class CodeBuildResponsesUpdateProjectProjectBuildBatchConfigRestrictions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildUpdateProjectInput) {
  }

  public get maximumBuildsAllowed(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.buildBatchConfig.restrictions.maximumBuildsAllowed'),
        outputPath: 'project.buildBatchConfig.restrictions.maximumBuildsAllowed',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.buildBatchConfig.restrictions.maximumBuildsAllowed', props);
    return resource.getResponseField('project.buildBatchConfig.restrictions.maximumBuildsAllowed') as unknown as number;
  }

  public get computeTypesAllowed(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateProject',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateProject.project.buildBatchConfig.restrictions.computeTypesAllowed'),
        outputPath: 'project.buildBatchConfig.restrictions.computeTypesAllowed',
        parameters: {
          name: this.__input.name,
          description: this.__input.description,
          source: {
            type: this.__input.source?.type,
            location: this.__input.source?.location,
            gitCloneDepth: this.__input.source?.gitCloneDepth,
            gitSubmodulesConfig: {
              fetchSubmodules: this.__input.source?.gitSubmodulesConfig?.fetchSubmodules,
            },
            buildspec: this.__input.source?.buildspec,
            auth: {
              type: this.__input.source?.auth?.type,
              resource: this.__input.source?.auth?.resource,
            },
            reportBuildStatus: this.__input.source?.reportBuildStatus,
            buildStatusConfig: {
              context: this.__input.source?.buildStatusConfig?.context,
              targetUrl: this.__input.source?.buildStatusConfig?.targetUrl,
            },
            insecureSsl: this.__input.source?.insecureSsl,
            sourceIdentifier: this.__input.source?.sourceIdentifier,
          },
          secondarySources: this.__input.secondarySources,
          sourceVersion: this.__input.sourceVersion,
          secondarySourceVersions: this.__input.secondarySourceVersions,
          artifacts: {
            type: this.__input.artifacts?.type,
            location: this.__input.artifacts?.location,
            path: this.__input.artifacts?.path,
            namespaceType: this.__input.artifacts?.namespaceType,
            name: this.__input.artifacts?.name,
            packaging: this.__input.artifacts?.packaging,
            overrideArtifactName: this.__input.artifacts?.overrideArtifactName,
            encryptionDisabled: this.__input.artifacts?.encryptionDisabled,
            artifactIdentifier: this.__input.artifacts?.artifactIdentifier,
            bucketOwnerAccess: this.__input.artifacts?.bucketOwnerAccess,
          },
          secondaryArtifacts: this.__input.secondaryArtifacts,
          cache: {
            type: this.__input.cache?.type,
            location: this.__input.cache?.location,
            modes: this.__input.cache?.modes,
          },
          environment: {
            type: this.__input.environment?.type,
            image: this.__input.environment?.image,
            computeType: this.__input.environment?.computeType,
            environmentVariables: this.__input.environment?.environmentVariables,
            privilegedMode: this.__input.environment?.privilegedMode,
            certificate: this.__input.environment?.certificate,
            registryCredential: {
              credential: this.__input.environment?.registryCredential?.credential,
              credentialProvider: this.__input.environment?.registryCredential?.credentialProvider,
            },
            imagePullCredentialsType: this.__input.environment?.imagePullCredentialsType,
          },
          serviceRole: this.__input.serviceRole,
          timeoutInMinutes: this.__input.timeoutInMinutes,
          queuedTimeoutInMinutes: this.__input.queuedTimeoutInMinutes,
          encryptionKey: this.__input.encryptionKey,
          tags: this.__input.tags,
          vpcConfig: {
            vpcId: this.__input.vpcConfig?.vpcId,
            subnets: this.__input.vpcConfig?.subnets,
            securityGroupIds: this.__input.vpcConfig?.securityGroupIds,
          },
          badgeEnabled: this.__input.badgeEnabled,
          logsConfig: {
            cloudWatchLogs: {
              status: this.__input.logsConfig?.cloudWatchLogs?.status,
              groupName: this.__input.logsConfig?.cloudWatchLogs?.groupName,
              streamName: this.__input.logsConfig?.cloudWatchLogs?.streamName,
            },
            s3Logs: {
              status: this.__input.logsConfig?.s3Logs?.status,
              location: this.__input.logsConfig?.s3Logs?.location,
              encryptionDisabled: this.__input.logsConfig?.s3Logs?.encryptionDisabled,
              bucketOwnerAccess: this.__input.logsConfig?.s3Logs?.bucketOwnerAccess,
            },
          },
          fileSystemLocations: this.__input.fileSystemLocations,
          buildBatchConfig: {
            serviceRole: this.__input.buildBatchConfig?.serviceRole,
            combineArtifacts: this.__input.buildBatchConfig?.combineArtifacts,
            restrictions: {
              maximumBuildsAllowed: this.__input.buildBatchConfig?.restrictions?.maximumBuildsAllowed,
              computeTypesAllowed: this.__input.buildBatchConfig?.restrictions?.computeTypesAllowed,
            },
            timeoutInMins: this.__input.buildBatchConfig?.timeoutInMins,
          },
          concurrentBuildLimit: this.__input.concurrentBuildLimit,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateProject.project.buildBatchConfig.restrictions.computeTypesAllowed', props);
    return resource.getResponseField('project.buildBatchConfig.restrictions.computeTypesAllowed') as unknown as string[];
  }

}

export class CodeBuildResponsesUpdateReportGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildUpdateReportGroupInput) {
  }

  public get reportGroup(): CodeBuildResponsesUpdateReportGroupReportGroup {
    return new CodeBuildResponsesUpdateReportGroupReportGroup(this.__scope, this.__resources, this.__input);
  }

}

export class CodeBuildResponsesUpdateReportGroupReportGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildUpdateReportGroupInput) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateReportGroup.reportGroup.arn'),
        outputPath: 'reportGroup.arn',
        parameters: {
          arn: this.__input.arn,
          exportConfig: {
            exportConfigType: this.__input.exportConfig?.exportConfigType,
            s3Destination: {
              bucket: this.__input.exportConfig?.s3Destination?.bucket,
              bucketOwner: this.__input.exportConfig?.s3Destination?.bucketOwner,
              path: this.__input.exportConfig?.s3Destination?.path,
              packaging: this.__input.exportConfig?.s3Destination?.packaging,
              encryptionKey: this.__input.exportConfig?.s3Destination?.encryptionKey,
              encryptionDisabled: this.__input.exportConfig?.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReportGroup.reportGroup.arn', props);
    return resource.getResponseField('reportGroup.arn') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateReportGroup.reportGroup.name'),
        outputPath: 'reportGroup.name',
        parameters: {
          arn: this.__input.arn,
          exportConfig: {
            exportConfigType: this.__input.exportConfig?.exportConfigType,
            s3Destination: {
              bucket: this.__input.exportConfig?.s3Destination?.bucket,
              bucketOwner: this.__input.exportConfig?.s3Destination?.bucketOwner,
              path: this.__input.exportConfig?.s3Destination?.path,
              packaging: this.__input.exportConfig?.s3Destination?.packaging,
              encryptionKey: this.__input.exportConfig?.s3Destination?.encryptionKey,
              encryptionDisabled: this.__input.exportConfig?.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReportGroup.reportGroup.name', props);
    return resource.getResponseField('reportGroup.name') as unknown as string;
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateReportGroup.reportGroup.type'),
        outputPath: 'reportGroup.type',
        parameters: {
          arn: this.__input.arn,
          exportConfig: {
            exportConfigType: this.__input.exportConfig?.exportConfigType,
            s3Destination: {
              bucket: this.__input.exportConfig?.s3Destination?.bucket,
              bucketOwner: this.__input.exportConfig?.s3Destination?.bucketOwner,
              path: this.__input.exportConfig?.s3Destination?.path,
              packaging: this.__input.exportConfig?.s3Destination?.packaging,
              encryptionKey: this.__input.exportConfig?.s3Destination?.encryptionKey,
              encryptionDisabled: this.__input.exportConfig?.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReportGroup.reportGroup.type', props);
    return resource.getResponseField('reportGroup.type') as unknown as string;
  }

  public get exportConfig(): CodeBuildResponsesUpdateReportGroupReportGroupExportConfig {
    return new CodeBuildResponsesUpdateReportGroupReportGroupExportConfig(this.__scope, this.__resources, this.__input);
  }

  public get created(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateReportGroup.reportGroup.created'),
        outputPath: 'reportGroup.created',
        parameters: {
          arn: this.__input.arn,
          exportConfig: {
            exportConfigType: this.__input.exportConfig?.exportConfigType,
            s3Destination: {
              bucket: this.__input.exportConfig?.s3Destination?.bucket,
              bucketOwner: this.__input.exportConfig?.s3Destination?.bucketOwner,
              path: this.__input.exportConfig?.s3Destination?.path,
              packaging: this.__input.exportConfig?.s3Destination?.packaging,
              encryptionKey: this.__input.exportConfig?.s3Destination?.encryptionKey,
              encryptionDisabled: this.__input.exportConfig?.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReportGroup.reportGroup.created', props);
    return resource.getResponseField('reportGroup.created') as unknown as string;
  }

  public get lastModified(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateReportGroup.reportGroup.lastModified'),
        outputPath: 'reportGroup.lastModified',
        parameters: {
          arn: this.__input.arn,
          exportConfig: {
            exportConfigType: this.__input.exportConfig?.exportConfigType,
            s3Destination: {
              bucket: this.__input.exportConfig?.s3Destination?.bucket,
              bucketOwner: this.__input.exportConfig?.s3Destination?.bucketOwner,
              path: this.__input.exportConfig?.s3Destination?.path,
              packaging: this.__input.exportConfig?.s3Destination?.packaging,
              encryptionKey: this.__input.exportConfig?.s3Destination?.encryptionKey,
              encryptionDisabled: this.__input.exportConfig?.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReportGroup.reportGroup.lastModified', props);
    return resource.getResponseField('reportGroup.lastModified') as unknown as string;
  }

  public get tags(): shapes.CodeBuildTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateReportGroup.reportGroup.tags'),
        outputPath: 'reportGroup.tags',
        parameters: {
          arn: this.__input.arn,
          exportConfig: {
            exportConfigType: this.__input.exportConfig?.exportConfigType,
            s3Destination: {
              bucket: this.__input.exportConfig?.s3Destination?.bucket,
              bucketOwner: this.__input.exportConfig?.s3Destination?.bucketOwner,
              path: this.__input.exportConfig?.s3Destination?.path,
              packaging: this.__input.exportConfig?.s3Destination?.packaging,
              encryptionKey: this.__input.exportConfig?.s3Destination?.encryptionKey,
              encryptionDisabled: this.__input.exportConfig?.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReportGroup.reportGroup.tags', props);
    return resource.getResponseField('reportGroup.tags') as unknown as shapes.CodeBuildTag[];
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateReportGroup.reportGroup.status'),
        outputPath: 'reportGroup.status',
        parameters: {
          arn: this.__input.arn,
          exportConfig: {
            exportConfigType: this.__input.exportConfig?.exportConfigType,
            s3Destination: {
              bucket: this.__input.exportConfig?.s3Destination?.bucket,
              bucketOwner: this.__input.exportConfig?.s3Destination?.bucketOwner,
              path: this.__input.exportConfig?.s3Destination?.path,
              packaging: this.__input.exportConfig?.s3Destination?.packaging,
              encryptionKey: this.__input.exportConfig?.s3Destination?.encryptionKey,
              encryptionDisabled: this.__input.exportConfig?.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReportGroup.reportGroup.status', props);
    return resource.getResponseField('reportGroup.status') as unknown as string;
  }

}

export class CodeBuildResponsesUpdateReportGroupReportGroupExportConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildUpdateReportGroupInput) {
  }

  public get exportConfigType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateReportGroup.reportGroup.exportConfig.exportConfigType'),
        outputPath: 'reportGroup.exportConfig.exportConfigType',
        parameters: {
          arn: this.__input.arn,
          exportConfig: {
            exportConfigType: this.__input.exportConfig?.exportConfigType,
            s3Destination: {
              bucket: this.__input.exportConfig?.s3Destination?.bucket,
              bucketOwner: this.__input.exportConfig?.s3Destination?.bucketOwner,
              path: this.__input.exportConfig?.s3Destination?.path,
              packaging: this.__input.exportConfig?.s3Destination?.packaging,
              encryptionKey: this.__input.exportConfig?.s3Destination?.encryptionKey,
              encryptionDisabled: this.__input.exportConfig?.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReportGroup.reportGroup.exportConfig.exportConfigType', props);
    return resource.getResponseField('reportGroup.exportConfig.exportConfigType') as unknown as string;
  }

  public get s3Destination(): CodeBuildResponsesUpdateReportGroupReportGroupExportConfigS3Destination {
    return new CodeBuildResponsesUpdateReportGroupReportGroupExportConfigS3Destination(this.__scope, this.__resources, this.__input);
  }

}

export class CodeBuildResponsesUpdateReportGroupReportGroupExportConfigS3Destination {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildUpdateReportGroupInput) {
  }

  public get bucket(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateReportGroup.reportGroup.exportConfig.s3Destination.bucket'),
        outputPath: 'reportGroup.exportConfig.s3Destination.bucket',
        parameters: {
          arn: this.__input.arn,
          exportConfig: {
            exportConfigType: this.__input.exportConfig?.exportConfigType,
            s3Destination: {
              bucket: this.__input.exportConfig?.s3Destination?.bucket,
              bucketOwner: this.__input.exportConfig?.s3Destination?.bucketOwner,
              path: this.__input.exportConfig?.s3Destination?.path,
              packaging: this.__input.exportConfig?.s3Destination?.packaging,
              encryptionKey: this.__input.exportConfig?.s3Destination?.encryptionKey,
              encryptionDisabled: this.__input.exportConfig?.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReportGroup.reportGroup.exportConfig.s3Destination.bucket', props);
    return resource.getResponseField('reportGroup.exportConfig.s3Destination.bucket') as unknown as string;
  }

  public get bucketOwner(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateReportGroup.reportGroup.exportConfig.s3Destination.bucketOwner'),
        outputPath: 'reportGroup.exportConfig.s3Destination.bucketOwner',
        parameters: {
          arn: this.__input.arn,
          exportConfig: {
            exportConfigType: this.__input.exportConfig?.exportConfigType,
            s3Destination: {
              bucket: this.__input.exportConfig?.s3Destination?.bucket,
              bucketOwner: this.__input.exportConfig?.s3Destination?.bucketOwner,
              path: this.__input.exportConfig?.s3Destination?.path,
              packaging: this.__input.exportConfig?.s3Destination?.packaging,
              encryptionKey: this.__input.exportConfig?.s3Destination?.encryptionKey,
              encryptionDisabled: this.__input.exportConfig?.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReportGroup.reportGroup.exportConfig.s3Destination.bucketOwner', props);
    return resource.getResponseField('reportGroup.exportConfig.s3Destination.bucketOwner') as unknown as string;
  }

  public get path(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateReportGroup.reportGroup.exportConfig.s3Destination.path'),
        outputPath: 'reportGroup.exportConfig.s3Destination.path',
        parameters: {
          arn: this.__input.arn,
          exportConfig: {
            exportConfigType: this.__input.exportConfig?.exportConfigType,
            s3Destination: {
              bucket: this.__input.exportConfig?.s3Destination?.bucket,
              bucketOwner: this.__input.exportConfig?.s3Destination?.bucketOwner,
              path: this.__input.exportConfig?.s3Destination?.path,
              packaging: this.__input.exportConfig?.s3Destination?.packaging,
              encryptionKey: this.__input.exportConfig?.s3Destination?.encryptionKey,
              encryptionDisabled: this.__input.exportConfig?.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReportGroup.reportGroup.exportConfig.s3Destination.path', props);
    return resource.getResponseField('reportGroup.exportConfig.s3Destination.path') as unknown as string;
  }

  public get packaging(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateReportGroup.reportGroup.exportConfig.s3Destination.packaging'),
        outputPath: 'reportGroup.exportConfig.s3Destination.packaging',
        parameters: {
          arn: this.__input.arn,
          exportConfig: {
            exportConfigType: this.__input.exportConfig?.exportConfigType,
            s3Destination: {
              bucket: this.__input.exportConfig?.s3Destination?.bucket,
              bucketOwner: this.__input.exportConfig?.s3Destination?.bucketOwner,
              path: this.__input.exportConfig?.s3Destination?.path,
              packaging: this.__input.exportConfig?.s3Destination?.packaging,
              encryptionKey: this.__input.exportConfig?.s3Destination?.encryptionKey,
              encryptionDisabled: this.__input.exportConfig?.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReportGroup.reportGroup.exportConfig.s3Destination.packaging', props);
    return resource.getResponseField('reportGroup.exportConfig.s3Destination.packaging') as unknown as string;
  }

  public get encryptionKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateReportGroup.reportGroup.exportConfig.s3Destination.encryptionKey'),
        outputPath: 'reportGroup.exportConfig.s3Destination.encryptionKey',
        parameters: {
          arn: this.__input.arn,
          exportConfig: {
            exportConfigType: this.__input.exportConfig?.exportConfigType,
            s3Destination: {
              bucket: this.__input.exportConfig?.s3Destination?.bucket,
              bucketOwner: this.__input.exportConfig?.s3Destination?.bucketOwner,
              path: this.__input.exportConfig?.s3Destination?.path,
              packaging: this.__input.exportConfig?.s3Destination?.packaging,
              encryptionKey: this.__input.exportConfig?.s3Destination?.encryptionKey,
              encryptionDisabled: this.__input.exportConfig?.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReportGroup.reportGroup.exportConfig.s3Destination.encryptionKey', props);
    return resource.getResponseField('reportGroup.exportConfig.s3Destination.encryptionKey') as unknown as string;
  }

  public get encryptionDisabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReportGroup',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateReportGroup.reportGroup.exportConfig.s3Destination.encryptionDisabled'),
        outputPath: 'reportGroup.exportConfig.s3Destination.encryptionDisabled',
        parameters: {
          arn: this.__input.arn,
          exportConfig: {
            exportConfigType: this.__input.exportConfig?.exportConfigType,
            s3Destination: {
              bucket: this.__input.exportConfig?.s3Destination?.bucket,
              bucketOwner: this.__input.exportConfig?.s3Destination?.bucketOwner,
              path: this.__input.exportConfig?.s3Destination?.path,
              packaging: this.__input.exportConfig?.s3Destination?.packaging,
              encryptionKey: this.__input.exportConfig?.s3Destination?.encryptionKey,
              encryptionDisabled: this.__input.exportConfig?.s3Destination?.encryptionDisabled,
            },
          },
          tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReportGroup.reportGroup.exportConfig.s3Destination.encryptionDisabled', props);
    return resource.getResponseField('reportGroup.exportConfig.s3Destination.encryptionDisabled') as unknown as boolean;
  }

}

export class CodeBuildResponsesUpdateWebhook {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildUpdateWebhookInput) {
  }

  public get webhook(): CodeBuildResponsesUpdateWebhookWebhook {
    return new CodeBuildResponsesUpdateWebhookWebhook(this.__scope, this.__resources, this.__input);
  }

}

export class CodeBuildResponsesUpdateWebhookWebhook {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.CodeBuildUpdateWebhookInput) {
  }

  public get url(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateWebhook',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateWebhook.webhook.url'),
        outputPath: 'webhook.url',
        parameters: {
          projectName: this.__input.projectName,
          branchFilter: this.__input.branchFilter,
          rotateSecret: this.__input.rotateSecret,
          filterGroups: this.__input.filterGroups,
          buildType: this.__input.buildType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateWebhook.webhook.url', props);
    return resource.getResponseField('webhook.url') as unknown as string;
  }

  public get payloadUrl(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateWebhook',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateWebhook.webhook.payloadUrl'),
        outputPath: 'webhook.payloadUrl',
        parameters: {
          projectName: this.__input.projectName,
          branchFilter: this.__input.branchFilter,
          rotateSecret: this.__input.rotateSecret,
          filterGroups: this.__input.filterGroups,
          buildType: this.__input.buildType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateWebhook.webhook.payloadUrl', props);
    return resource.getResponseField('webhook.payloadUrl') as unknown as string;
  }

  public get secret(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateWebhook',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateWebhook.webhook.secret'),
        outputPath: 'webhook.secret',
        parameters: {
          projectName: this.__input.projectName,
          branchFilter: this.__input.branchFilter,
          rotateSecret: this.__input.rotateSecret,
          filterGroups: this.__input.filterGroups,
          buildType: this.__input.buildType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateWebhook.webhook.secret', props);
    return resource.getResponseField('webhook.secret') as unknown as string;
  }

  public get branchFilter(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateWebhook',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateWebhook.webhook.branchFilter'),
        outputPath: 'webhook.branchFilter',
        parameters: {
          projectName: this.__input.projectName,
          branchFilter: this.__input.branchFilter,
          rotateSecret: this.__input.rotateSecret,
          filterGroups: this.__input.filterGroups,
          buildType: this.__input.buildType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateWebhook.webhook.branchFilter', props);
    return resource.getResponseField('webhook.branchFilter') as unknown as string;
  }

  public get filterGroups(): shapes.CodeBuildWebhookFilter[][] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateWebhook',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateWebhook.webhook.filterGroups'),
        outputPath: 'webhook.filterGroups',
        parameters: {
          projectName: this.__input.projectName,
          branchFilter: this.__input.branchFilter,
          rotateSecret: this.__input.rotateSecret,
          filterGroups: this.__input.filterGroups,
          buildType: this.__input.buildType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateWebhook.webhook.filterGroups', props);
    return resource.getResponseField('webhook.filterGroups') as unknown as shapes.CodeBuildWebhookFilter[][];
  }

  public get buildType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateWebhook',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateWebhook.webhook.buildType'),
        outputPath: 'webhook.buildType',
        parameters: {
          projectName: this.__input.projectName,
          branchFilter: this.__input.branchFilter,
          rotateSecret: this.__input.rotateSecret,
          filterGroups: this.__input.filterGroups,
          buildType: this.__input.buildType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateWebhook.webhook.buildType', props);
    return resource.getResponseField('webhook.buildType') as unknown as string;
  }

  public get lastModifiedSecret(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateWebhook',
        service: 'CodeBuild',
        physicalResourceId: cr.PhysicalResourceId.of('CodeBuild.UpdateWebhook.webhook.lastModifiedSecret'),
        outputPath: 'webhook.lastModifiedSecret',
        parameters: {
          projectName: this.__input.projectName,
          branchFilter: this.__input.branchFilter,
          rotateSecret: this.__input.rotateSecret,
          filterGroups: this.__input.filterGroups,
          buildType: this.__input.buildType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateWebhook.webhook.lastModifiedSecret', props);
    return resource.getResponseField('webhook.lastModifiedSecret') as unknown as string;
  }

}

