import * as cdk from '@aws-cdk/core';
import * as cr from '@aws-cdk/custom-resources';
import * as shapes from './shapes';

export class ElasticsearchService extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[]) {
    super(scope, id);
  }
  public acceptInboundCrossClusterSearchConnection(input: shapes.AcceptInboundCrossClusterSearchConnectionRequest): ElasticsearchService_AcceptInboundCrossClusterSearchConnectionResponse {
    return new ElasticsearchService_AcceptInboundCrossClusterSearchConnectionResponse(this, 'AcceptInboundCrossClusterSearchConnectionResponse', this.resources, input);
  }
  public addTags(input: shapes.AddTagsRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'addTags',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.AddTags.'),
        parameters: {
          arn: input.arn,
          tagList: input.tagList,
        },
      },
    };
    new cr.AwsCustomResource(this, 'AddTags', props);
  }
  public associatePackage(input: shapes.AssociatePackageRequest): ElasticsearchService_AssociatePackageResponse {
    return new ElasticsearchService_AssociatePackageResponse(this, 'AssociatePackageResponse', this.resources, input);
  }
  public cancelElasticsearchServiceSoftwareUpdate(input: shapes.CancelElasticsearchServiceSoftwareUpdateRequest): ElasticsearchService_CancelElasticsearchServiceSoftwareUpdateResponse {
    return new ElasticsearchService_CancelElasticsearchServiceSoftwareUpdateResponse(this, 'CancelElasticsearchServiceSoftwareUpdateResponse', this.resources, input);
  }
  public createElasticsearchDomain(input: shapes.CreateElasticsearchDomainRequest): ElasticsearchService_CreateElasticsearchDomainResponse {
    return new ElasticsearchService_CreateElasticsearchDomainResponse(this, 'CreateElasticsearchDomainResponse', this.resources, input);
  }
  public createOutboundCrossClusterSearchConnection(input: shapes.CreateOutboundCrossClusterSearchConnectionRequest): ElasticsearchService_CreateOutboundCrossClusterSearchConnectionResponse {
    return new ElasticsearchService_CreateOutboundCrossClusterSearchConnectionResponse(this, 'CreateOutboundCrossClusterSearchConnectionResponse', this.resources, input);
  }
  public createPackage(input: shapes.CreatePackageRequest): ElasticsearchService_CreatePackageResponse {
    return new ElasticsearchService_CreatePackageResponse(this, 'CreatePackageResponse', this.resources, input);
  }
  public deleteElasticsearchDomain(input: shapes.DeleteElasticsearchDomainRequest): ElasticsearchService_DeleteElasticsearchDomainResponse {
    return new ElasticsearchService_DeleteElasticsearchDomainResponse(this, 'DeleteElasticsearchDomainResponse', this.resources, input);
  }
  public deleteElasticsearchServiceRole(): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchServiceRole',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchServiceRole.'),
      },
    };
    new cr.AwsCustomResource(this, 'DeleteElasticsearchServiceRole', props);
  }
  public deleteInboundCrossClusterSearchConnection(input: shapes.DeleteInboundCrossClusterSearchConnectionRequest): ElasticsearchService_DeleteInboundCrossClusterSearchConnectionResponse {
    return new ElasticsearchService_DeleteInboundCrossClusterSearchConnectionResponse(this, 'DeleteInboundCrossClusterSearchConnectionResponse', this.resources, input);
  }
  public deleteOutboundCrossClusterSearchConnection(input: shapes.DeleteOutboundCrossClusterSearchConnectionRequest): ElasticsearchService_DeleteOutboundCrossClusterSearchConnectionResponse {
    return new ElasticsearchService_DeleteOutboundCrossClusterSearchConnectionResponse(this, 'DeleteOutboundCrossClusterSearchConnectionResponse', this.resources, input);
  }
  public deletePackage(input: shapes.DeletePackageRequest): ElasticsearchService_DeletePackageResponse {
    return new ElasticsearchService_DeletePackageResponse(this, 'DeletePackageResponse', this.resources, input);
  }
  public describeElasticsearchDomain(input: shapes.DescribeElasticsearchDomainRequest): ElasticsearchService_DescribeElasticsearchDomainResponse {
    return new ElasticsearchService_DescribeElasticsearchDomainResponse(this, 'DescribeElasticsearchDomainResponse', this.resources, input);
  }
  public describeElasticsearchDomainConfig(input: shapes.DescribeElasticsearchDomainConfigRequest): ElasticsearchService_DescribeElasticsearchDomainConfigResponse {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse(this, 'DescribeElasticsearchDomainConfigResponse', this.resources, input);
  }
  public describeElasticsearchDomains(input: shapes.DescribeElasticsearchDomainsRequest): ElasticsearchService_DescribeElasticsearchDomainsResponse {
    return new ElasticsearchService_DescribeElasticsearchDomainsResponse(this, 'DescribeElasticsearchDomainsResponse', this.resources, input);
  }
  public describeElasticsearchInstanceTypeLimits(input: shapes.DescribeElasticsearchInstanceTypeLimitsRequest): ElasticsearchService_DescribeElasticsearchInstanceTypeLimitsResponse {
    return new ElasticsearchService_DescribeElasticsearchInstanceTypeLimitsResponse(this, 'DescribeElasticsearchInstanceTypeLimitsResponse', this.resources, input);
  }
  public describeInboundCrossClusterSearchConnections(input: shapes.DescribeInboundCrossClusterSearchConnectionsRequest): ElasticsearchService_DescribeInboundCrossClusterSearchConnectionsResponse {
    return new ElasticsearchService_DescribeInboundCrossClusterSearchConnectionsResponse(this, 'DescribeInboundCrossClusterSearchConnectionsResponse', this.resources, input);
  }
  public describeOutboundCrossClusterSearchConnections(input: shapes.DescribeOutboundCrossClusterSearchConnectionsRequest): ElasticsearchService_DescribeOutboundCrossClusterSearchConnectionsResponse {
    return new ElasticsearchService_DescribeOutboundCrossClusterSearchConnectionsResponse(this, 'DescribeOutboundCrossClusterSearchConnectionsResponse', this.resources, input);
  }
  public describePackages(input: shapes.DescribePackagesRequest): ElasticsearchService_DescribePackagesResponse {
    return new ElasticsearchService_DescribePackagesResponse(this, 'DescribePackagesResponse', this.resources, input);
  }
  public describeReservedElasticsearchInstanceOfferings(input: shapes.DescribeReservedElasticsearchInstanceOfferingsRequest): ElasticsearchService_DescribeReservedElasticsearchInstanceOfferingsResponse {
    return new ElasticsearchService_DescribeReservedElasticsearchInstanceOfferingsResponse(this, 'DescribeReservedElasticsearchInstanceOfferingsResponse', this.resources, input);
  }
  public describeReservedElasticsearchInstances(input: shapes.DescribeReservedElasticsearchInstancesRequest): ElasticsearchService_DescribeReservedElasticsearchInstancesResponse {
    return new ElasticsearchService_DescribeReservedElasticsearchInstancesResponse(this, 'DescribeReservedElasticsearchInstancesResponse', this.resources, input);
  }
  public dissociatePackage(input: shapes.DissociatePackageRequest): ElasticsearchService_DissociatePackageResponse {
    return new ElasticsearchService_DissociatePackageResponse(this, 'DissociatePackageResponse', this.resources, input);
  }
  public getCompatibleElasticsearchVersions(input: shapes.GetCompatibleElasticsearchVersionsRequest): ElasticsearchService_GetCompatibleElasticsearchVersionsResponse {
    return new ElasticsearchService_GetCompatibleElasticsearchVersionsResponse(this, 'GetCompatibleElasticsearchVersionsResponse', this.resources, input);
  }
  public getPackageVersionHistory(input: shapes.GetPackageVersionHistoryRequest): ElasticsearchService_GetPackageVersionHistoryResponse {
    return new ElasticsearchService_GetPackageVersionHistoryResponse(this, 'GetPackageVersionHistoryResponse', this.resources, input);
  }
  public getUpgradeHistory(input: shapes.GetUpgradeHistoryRequest): ElasticsearchService_GetUpgradeHistoryResponse {
    return new ElasticsearchService_GetUpgradeHistoryResponse(this, 'GetUpgradeHistoryResponse', this.resources, input);
  }
  public getUpgradeStatus(input: shapes.GetUpgradeStatusRequest): ElasticsearchService_GetUpgradeStatusResponse {
    return new ElasticsearchService_GetUpgradeStatusResponse(this, 'GetUpgradeStatusResponse', this.resources, input);
  }
  public listDomainNames(): ElasticsearchService_ListDomainNamesResponse {
    return new ElasticsearchService_ListDomainNamesResponse(this, 'ListDomainNamesResponse', this.resources);
  }
  public listDomainsForPackage(input: shapes.ListDomainsForPackageRequest): ElasticsearchService_ListDomainsForPackageResponse {
    return new ElasticsearchService_ListDomainsForPackageResponse(this, 'ListDomainsForPackageResponse', this.resources, input);
  }
  public listElasticsearchInstanceTypes(input: shapes.ListElasticsearchInstanceTypesRequest): ElasticsearchService_ListElasticsearchInstanceTypesResponse {
    return new ElasticsearchService_ListElasticsearchInstanceTypesResponse(this, 'ListElasticsearchInstanceTypesResponse', this.resources, input);
  }
  public listElasticsearchVersions(input: shapes.ListElasticsearchVersionsRequest): ElasticsearchService_ListElasticsearchVersionsResponse {
    return new ElasticsearchService_ListElasticsearchVersionsResponse(this, 'ListElasticsearchVersionsResponse', this.resources, input);
  }
  public listPackagesForDomain(input: shapes.ListPackagesForDomainRequest): ElasticsearchService_ListPackagesForDomainResponse {
    return new ElasticsearchService_ListPackagesForDomainResponse(this, 'ListPackagesForDomainResponse', this.resources, input);
  }
  public listTags(input: shapes.ListTagsRequest): ElasticsearchService_ListTagsResponse {
    return new ElasticsearchService_ListTagsResponse(this, 'ListTagsResponse', this.resources, input);
  }
  public purchaseReservedElasticsearchInstanceOffering(input: shapes.PurchaseReservedElasticsearchInstanceOfferingRequest): ElasticsearchService_PurchaseReservedElasticsearchInstanceOfferingResponse {
    return new ElasticsearchService_PurchaseReservedElasticsearchInstanceOfferingResponse(this, 'PurchaseReservedElasticsearchInstanceOfferingResponse', this.resources, input);
  }
  public rejectInboundCrossClusterSearchConnection(input: shapes.RejectInboundCrossClusterSearchConnectionRequest): ElasticsearchService_RejectInboundCrossClusterSearchConnectionResponse {
    return new ElasticsearchService_RejectInboundCrossClusterSearchConnectionResponse(this, 'RejectInboundCrossClusterSearchConnectionResponse', this.resources, input);
  }
  public removeTags(input: shapes.RemoveTagsRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'removeTags',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.RemoveTags.'),
        parameters: {
          arn: input.arn,
          tagKeys: input.tagKeys,
        },
      },
    };
    new cr.AwsCustomResource(this, 'RemoveTags', props);
  }
  public startElasticsearchServiceSoftwareUpdate(input: shapes.StartElasticsearchServiceSoftwareUpdateRequest): ElasticsearchService_StartElasticsearchServiceSoftwareUpdateResponse {
    return new ElasticsearchService_StartElasticsearchServiceSoftwareUpdateResponse(this, 'StartElasticsearchServiceSoftwareUpdateResponse', this.resources, input);
  }
  public updateElasticsearchDomainConfig(input: shapes.UpdateElasticsearchDomainConfigRequest): ElasticsearchService_UpdateElasticsearchDomainConfigResponse {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse(this, 'UpdateElasticsearchDomainConfigResponse', this.resources, input);
  }
  public updatePackage(input: shapes.UpdatePackageRequest): ElasticsearchService_UpdatePackageResponse {
    return new ElasticsearchService_UpdatePackageResponse(this, 'UpdatePackageResponse', this.resources, input);
  }
  public upgradeElasticsearchDomain(input: shapes.UpgradeElasticsearchDomainRequest): ElasticsearchService_UpgradeElasticsearchDomainResponse {
    return new ElasticsearchService_UpgradeElasticsearchDomainResponse(this, 'UpgradeElasticsearchDomainResponse', this.resources, input);
  }
}
export class ElasticsearchService_AcceptInboundCrossClusterSearchConnectionResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.AcceptInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get crossClusterSearchConnection(): ElasticsearchService_AcceptInboundCrossClusterSearchConnectionResponse_InboundCrossClusterSearchConnection {
    return new ElasticsearchService_AcceptInboundCrossClusterSearchConnectionResponse_InboundCrossClusterSearchConnection(this, 'InboundCrossClusterSearchConnection', this.resources, this.input);
  }
}
export class ElasticsearchService_AcceptInboundCrossClusterSearchConnectionResponse_InboundCrossClusterSearchConnection extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.AcceptInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get sourceDomainInfo(): ElasticsearchService_AcceptInboundCrossClusterSearchConnectionResponse_InboundCrossClusterSearchConnection_DomainInformation {
    return new ElasticsearchService_AcceptInboundCrossClusterSearchConnectionResponse_InboundCrossClusterSearchConnection_DomainInformation(this, 'DomainInformation', this.resources, this.input);
  }
  public get destinationDomainInfo(): ElasticsearchService_AcceptInboundCrossClusterSearchConnectionResponse_InboundCrossClusterSearchConnection_DomainInformation {
    return new ElasticsearchService_AcceptInboundCrossClusterSearchConnectionResponse_InboundCrossClusterSearchConnection_DomainInformation(this, 'DomainInformation', this.resources, this.input);
  }
  public get crossClusterSearchConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId'),
        outputPath: 'CrossClusterSearchConnection.CrossClusterSearchConnectionId',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId', props);
    return resource.getResponseField('CrossClusterSearchConnection.CrossClusterSearchConnectionId') as unknown as string;
  }
  public get connectionStatus(): ElasticsearchService_AcceptInboundCrossClusterSearchConnectionResponse_InboundCrossClusterSearchConnection_InboundCrossClusterSearchConnectionStatus {
    return new ElasticsearchService_AcceptInboundCrossClusterSearchConnectionResponse_InboundCrossClusterSearchConnection_InboundCrossClusterSearchConnectionStatus(this, 'InboundCrossClusterSearchConnectionStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_AcceptInboundCrossClusterSearchConnectionResponse_InboundCrossClusterSearchConnection_DomainInformation extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.AcceptInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId') as unknown as string;
  }
  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName') as unknown as string;
  }
  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region') as unknown as string;
  }
}
export class ElasticsearchService_AcceptInboundCrossClusterSearchConnectionResponse_InboundCrossClusterSearchConnection_InboundCrossClusterSearchConnectionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.AcceptInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get statusCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode') as unknown as string;
  }
  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message') as unknown as string;
  }
}
export class ElasticsearchService_AssociatePackageResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.AssociatePackageRequest) {
    super(scope, id);
  }
  public get domainPackageDetails(): ElasticsearchService_AssociatePackageResponse_DomainPackageDetails {
    return new ElasticsearchService_AssociatePackageResponse_DomainPackageDetails(this, 'DomainPackageDetails', this.resources, this.input);
  }
}
export class ElasticsearchService_AssociatePackageResponse_DomainPackageDetails extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.AssociatePackageRequest) {
    super(scope, id);
  }
  public get packageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.AssociatePackage.DomainPackageDetails.PackageID'),
        outputPath: 'DomainPackageDetails.PackageID',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.PackageID', props);
    return resource.getResponseField('DomainPackageDetails.PackageID') as unknown as string;
  }
  public get packageName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.AssociatePackage.DomainPackageDetails.PackageName'),
        outputPath: 'DomainPackageDetails.PackageName',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.PackageName', props);
    return resource.getResponseField('DomainPackageDetails.PackageName') as unknown as string;
  }
  public get packageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.AssociatePackage.DomainPackageDetails.PackageType'),
        outputPath: 'DomainPackageDetails.PackageType',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.PackageType', props);
    return resource.getResponseField('DomainPackageDetails.PackageType') as unknown as string;
  }
  public get lastUpdated(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.AssociatePackage.DomainPackageDetails.LastUpdated'),
        outputPath: 'DomainPackageDetails.LastUpdated',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.LastUpdated', props);
    return resource.getResponseField('DomainPackageDetails.LastUpdated') as unknown as string;
  }
  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.AssociatePackage.DomainPackageDetails.DomainName'),
        outputPath: 'DomainPackageDetails.DomainName',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.DomainName', props);
    return resource.getResponseField('DomainPackageDetails.DomainName') as unknown as string;
  }
  public get domainPackageStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.AssociatePackage.DomainPackageDetails.DomainPackageStatus'),
        outputPath: 'DomainPackageDetails.DomainPackageStatus',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.DomainPackageStatus', props);
    return resource.getResponseField('DomainPackageDetails.DomainPackageStatus') as unknown as string;
  }
  public get packageVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.AssociatePackage.DomainPackageDetails.PackageVersion'),
        outputPath: 'DomainPackageDetails.PackageVersion',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.PackageVersion', props);
    return resource.getResponseField('DomainPackageDetails.PackageVersion') as unknown as string;
  }
  public get referencePath(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.AssociatePackage.DomainPackageDetails.ReferencePath'),
        outputPath: 'DomainPackageDetails.ReferencePath',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.ReferencePath', props);
    return resource.getResponseField('DomainPackageDetails.ReferencePath') as unknown as string;
  }
  public get errorDetails(): ElasticsearchService_AssociatePackageResponse_DomainPackageDetails_ErrorDetails {
    return new ElasticsearchService_AssociatePackageResponse_DomainPackageDetails_ErrorDetails(this, 'ErrorDetails', this.resources, this.input);
  }
}
export class ElasticsearchService_AssociatePackageResponse_DomainPackageDetails_ErrorDetails extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.AssociatePackageRequest) {
    super(scope, id);
  }
  public get errorType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.AssociatePackage.DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorType'),
        outputPath: 'DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorType',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorType', props);
    return resource.getResponseField('DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorType') as unknown as string;
  }
  public get errorMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.AssociatePackage.DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorMessage'),
        outputPath: 'DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorMessage',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorMessage', props);
    return resource.getResponseField('DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorMessage') as unknown as string;
  }
}
export class ElasticsearchService_CancelElasticsearchServiceSoftwareUpdateResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CancelElasticsearchServiceSoftwareUpdateRequest) {
    super(scope, id);
  }
  public get serviceSoftwareOptions(): ElasticsearchService_CancelElasticsearchServiceSoftwareUpdateResponse_ServiceSoftwareOptions {
    return new ElasticsearchService_CancelElasticsearchServiceSoftwareUpdateResponse_ServiceSoftwareOptions(this, 'ServiceSoftwareOptions', this.resources, this.input);
  }
}
export class ElasticsearchService_CancelElasticsearchServiceSoftwareUpdateResponse_ServiceSoftwareOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CancelElasticsearchServiceSoftwareUpdateRequest) {
    super(scope, id);
  }
  public get currentVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.CurrentVersion'),
        outputPath: 'ServiceSoftwareOptions.CurrentVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.CurrentVersion', props);
    return resource.getResponseField('ServiceSoftwareOptions.CurrentVersion') as unknown as string;
  }
  public get newVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.NewVersion'),
        outputPath: 'ServiceSoftwareOptions.NewVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.NewVersion', props);
    return resource.getResponseField('ServiceSoftwareOptions.NewVersion') as unknown as string;
  }
  public get updateAvailable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateAvailable'),
        outputPath: 'ServiceSoftwareOptions.UpdateAvailable',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateAvailable', props);
    return resource.getResponseField('ServiceSoftwareOptions.UpdateAvailable') as unknown as boolean;
  }
  public get cancellable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Cancellable'),
        outputPath: 'ServiceSoftwareOptions.Cancellable',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Cancellable', props);
    return resource.getResponseField('ServiceSoftwareOptions.Cancellable') as unknown as boolean;
  }
  public get updateStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateStatus'),
        outputPath: 'ServiceSoftwareOptions.UpdateStatus',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateStatus', props);
    return resource.getResponseField('ServiceSoftwareOptions.UpdateStatus') as unknown as string;
  }
  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Description'),
        outputPath: 'ServiceSoftwareOptions.Description',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Description', props);
    return resource.getResponseField('ServiceSoftwareOptions.Description') as unknown as string;
  }
  public get automatedUpdateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.AutomatedUpdateDate'),
        outputPath: 'ServiceSoftwareOptions.AutomatedUpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.AutomatedUpdateDate', props);
    return resource.getResponseField('ServiceSoftwareOptions.AutomatedUpdateDate') as unknown as string;
  }
  public get optionalDeployment(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.OptionalDeployment'),
        outputPath: 'ServiceSoftwareOptions.OptionalDeployment',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.OptionalDeployment', props);
    return resource.getResponseField('ServiceSoftwareOptions.OptionalDeployment') as unknown as boolean;
  }
}
export class ElasticsearchService_CreateElasticsearchDomainResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get domainStatus(): ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus {
    return new ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus(this, 'ElasticsearchDomainStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get domainId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.DomainId'),
        outputPath: 'DomainStatus.DomainId',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.DomainId', props);
    return resource.getResponseField('DomainStatus.DomainId') as unknown as string;
  }
  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.DomainName'),
        outputPath: 'DomainStatus.DomainName',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.DomainName', props);
    return resource.getResponseField('DomainStatus.DomainName') as unknown as string;
  }
  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.ARN'),
        outputPath: 'DomainStatus.ARN',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ARN', props);
    return resource.getResponseField('DomainStatus.ARN') as unknown as string;
  }
  public get created(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.Created'),
        outputPath: 'DomainStatus.Created',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.Created', props);
    return resource.getResponseField('DomainStatus.Created') as unknown as boolean;
  }
  public get deleted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.Deleted'),
        outputPath: 'DomainStatus.Deleted',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.Deleted', props);
    return resource.getResponseField('DomainStatus.Deleted') as unknown as boolean;
  }
  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.Endpoint'),
        outputPath: 'DomainStatus.Endpoint',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.Endpoint', props);
    return resource.getResponseField('DomainStatus.Endpoint') as unknown as string;
  }
  public get endpoints(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.Endpoints'),
        outputPath: 'DomainStatus.Endpoints',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.Endpoints', props);
    return resource.getResponseField('DomainStatus.Endpoints') as unknown as Record<string, string>;
  }
  public get processing(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.Processing'),
        outputPath: 'DomainStatus.Processing',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.Processing', props);
    return resource.getResponseField('DomainStatus.Processing') as unknown as boolean;
  }
  public get upgradeProcessing(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.UpgradeProcessing'),
        outputPath: 'DomainStatus.UpgradeProcessing',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.UpgradeProcessing', props);
    return resource.getResponseField('DomainStatus.UpgradeProcessing') as unknown as boolean;
  }
  public get elasticsearchVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.ElasticsearchVersion'),
        outputPath: 'DomainStatus.ElasticsearchVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchVersion', props);
    return resource.getResponseField('DomainStatus.ElasticsearchVersion') as unknown as string;
  }
  public get elasticsearchClusterConfig(): ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_ElasticsearchClusterConfig {
    return new ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_ElasticsearchClusterConfig(this, 'ElasticsearchClusterConfig', this.resources, this.input);
  }
  public get ebsOptions(): ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_EBSOptions {
    return new ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_EBSOptions(this, 'EBSOptions', this.resources, this.input);
  }
  public get accessPolicies(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.AccessPolicies'),
        outputPath: 'DomainStatus.AccessPolicies',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AccessPolicies', props);
    return resource.getResponseField('DomainStatus.AccessPolicies') as unknown as string;
  }
  public get snapshotOptions(): ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_SnapshotOptions {
    return new ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_SnapshotOptions(this, 'SnapshotOptions', this.resources, this.input);
  }
  public get vpcOptions(): ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_VPCDerivedInfo {
    return new ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_VPCDerivedInfo(this, 'VPCDerivedInfo', this.resources, this.input);
  }
  public get cognitoOptions(): ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_CognitoOptions {
    return new ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_CognitoOptions(this, 'CognitoOptions', this.resources, this.input);
  }
  public get encryptionAtRestOptions(): ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_EncryptionAtRestOptions {
    return new ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_EncryptionAtRestOptions(this, 'EncryptionAtRestOptions', this.resources, this.input);
  }
  public get nodeToNodeEncryptionOptions(): ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_NodeToNodeEncryptionOptions {
    return new ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_NodeToNodeEncryptionOptions(this, 'NodeToNodeEncryptionOptions', this.resources, this.input);
  }
  public get advancedOptions(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.AdvancedOptions'),
        outputPath: 'DomainStatus.AdvancedOptions',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedOptions', props);
    return resource.getResponseField('DomainStatus.AdvancedOptions') as unknown as Record<string, string>;
  }
  public get logPublishingOptions(): Record<string, shapes.LogPublishingOption> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.LogPublishingOptions'),
        outputPath: 'DomainStatus.LogPublishingOptions',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.LogPublishingOptions', props);
    return resource.getResponseField('DomainStatus.LogPublishingOptions') as unknown as Record<string, shapes.LogPublishingOption>;
  }
  public get serviceSoftwareOptions(): ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_ServiceSoftwareOptions {
    return new ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_ServiceSoftwareOptions(this, 'ServiceSoftwareOptions', this.resources, this.input);
  }
  public get domainEndpointOptions(): ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_DomainEndpointOptions {
    return new ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_DomainEndpointOptions(this, 'DomainEndpointOptions', this.resources, this.input);
  }
  public get advancedSecurityOptions(): ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_AdvancedSecurityOptions {
    return new ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_AdvancedSecurityOptions(this, 'AdvancedSecurityOptions', this.resources, this.input);
  }
}
export class ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_ElasticsearchClusterConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get instanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType') as unknown as string;
  }
  public get instanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount') as unknown as number;
  }
  public get dedicatedMasterEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled') as unknown as boolean;
  }
  public get zoneAwarenessEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled') as unknown as boolean;
  }
  public get zoneAwarenessConfig(): ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_ElasticsearchClusterConfig_ZoneAwarenessConfig {
    return new ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_ElasticsearchClusterConfig_ZoneAwarenessConfig(this, 'ZoneAwarenessConfig', this.resources, this.input);
  }
  public get dedicatedMasterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType') as unknown as string;
  }
  public get dedicatedMasterCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount') as unknown as number;
  }
  public get warmEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled') as unknown as boolean;
  }
  public get warmType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType') as unknown as string;
  }
  public get warmCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount') as unknown as number;
  }
}
export class ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_ElasticsearchClusterConfig_ZoneAwarenessConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get availabilityZoneCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount') as unknown as number;
  }
}
export class ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_EBSOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get ebsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.EBSEnabled'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.EBSEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.EBSEnabled', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.EBSEnabled') as unknown as boolean;
  }
  public get volumeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeType'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.VolumeType',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeType', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.VolumeType') as unknown as string;
  }
  public get volumeSize(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeSize'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.VolumeSize',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeSize', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.VolumeSize') as unknown as number;
  }
  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.Iops'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.Iops',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.Iops', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.Iops') as unknown as number;
  }
}
export class ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_SnapshotOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get automatedSnapshotStartHour(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour'),
        outputPath: 'DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour', props);
    return resource.getResponseField('DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour') as unknown as number;
  }
}
export class ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_VPCDerivedInfo extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.VPCId'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.VPCId',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.VPCId', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.VPCId') as unknown as string;
  }
  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SubnetIds'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.SubnetIds',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SubnetIds', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.SubnetIds') as unknown as string[];
  }
  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.AvailabilityZones'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.AvailabilityZones',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.AvailabilityZones', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.AvailabilityZones') as unknown as string[];
  }
  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds') as unknown as string[];
  }
}
export class ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_CognitoOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.Enabled'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.Enabled') as unknown as boolean;
  }
  public get userPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.UserPoolId'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.UserPoolId',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.UserPoolId', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.UserPoolId') as unknown as string;
  }
  public get identityPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId') as unknown as string;
  }
  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.RoleArn'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.RoleArn',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.RoleArn', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.RoleArn') as unknown as string;
  }
}
export class ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_EncryptionAtRestOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled'),
        outputPath: 'DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled') as unknown as boolean;
  }
  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId'),
        outputPath: 'DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId', props);
    return resource.getResponseField('DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId') as unknown as string;
  }
}
export class ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_NodeToNodeEncryptionOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled'),
        outputPath: 'DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled') as unknown as boolean;
  }
}
export class ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_ServiceSoftwareOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get currentVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion') as unknown as string;
  }
  public get newVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion') as unknown as string;
  }
  public get updateAvailable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable') as unknown as boolean;
  }
  public get cancellable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable') as unknown as boolean;
  }
  public get updateStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus') as unknown as string;
  }
  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description') as unknown as string;
  }
  public get automatedUpdateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate') as unknown as string;
  }
  public get optionalDeployment(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment') as unknown as boolean;
  }
}
export class ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_DomainEndpointOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enforceHttps(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS') as unknown as boolean;
  }
  public get tlsSecurityPolicy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy') as unknown as string;
  }
  public get customEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled') as unknown as boolean;
  }
  public get customEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint') as unknown as string;
  }
  public get customEndpointCertificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn') as unknown as string;
  }
}
export class ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_AdvancedSecurityOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled') as unknown as boolean;
  }
  public get internalUserDatabaseEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled') as unknown as boolean;
  }
  public get samlOptions(): ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_AdvancedSecurityOptions_SAMLOptionsOutput {
    return new ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_AdvancedSecurityOptions_SAMLOptionsOutput(this, 'SAMLOptionsOutput', this.resources, this.input);
  }
}
export class ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_AdvancedSecurityOptions_SAMLOptionsOutput extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled') as unknown as boolean;
  }
  public get idp(): ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_AdvancedSecurityOptions_SAMLOptionsOutput_SAMLIdp {
    return new ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_AdvancedSecurityOptions_SAMLOptionsOutput_SAMLIdp(this, 'SAMLIdp', this.resources, this.input);
  }
  public get subjectKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey') as unknown as string;
  }
  public get rolesKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey') as unknown as string;
  }
  public get sessionTimeoutMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes') as unknown as number;
  }
}
export class ElasticsearchService_CreateElasticsearchDomainResponse_ElasticsearchDomainStatus_AdvancedSecurityOptions_SAMLOptionsOutput_SAMLIdp extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get metadataContent(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent') as unknown as string;
  }
  public get entityId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId') as unknown as string;
  }
}
export class ElasticsearchService_CreateOutboundCrossClusterSearchConnectionResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateOutboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get sourceDomainInfo(): ElasticsearchService_CreateOutboundCrossClusterSearchConnectionResponse_DomainInformation {
    return new ElasticsearchService_CreateOutboundCrossClusterSearchConnectionResponse_DomainInformation(this, 'DomainInformation', this.resources, this.input);
  }
  public get destinationDomainInfo(): ElasticsearchService_CreateOutboundCrossClusterSearchConnectionResponse_DomainInformation {
    return new ElasticsearchService_CreateOutboundCrossClusterSearchConnectionResponse_DomainInformation(this, 'DomainInformation', this.resources, this.input);
  }
  public get connectionAlias(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateOutboundCrossClusterSearchConnection.'),
        outputPath: '',
        parameters: {
          sourceDomainInfo: {
            ownerId: this.input.sourceDomainInfo.ownerId,
            domainName: this.input.sourceDomainInfo.domainName,
            region: this.input.sourceDomainInfo.region,
          },
          destinationDomainInfo: {
            ownerId: this.input.destinationDomainInfo.ownerId,
            domainName: this.input.destinationDomainInfo.domainName,
            region: this.input.destinationDomainInfo.region,
          },
          connectionAlias: this.input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOutboundCrossClusterSearchConnection.', props);
    return resource.getResponseField('') as unknown as string;
  }
  public get connectionStatus(): ElasticsearchService_CreateOutboundCrossClusterSearchConnectionResponse_OutboundCrossClusterSearchConnectionStatus {
    return new ElasticsearchService_CreateOutboundCrossClusterSearchConnectionResponse_OutboundCrossClusterSearchConnectionStatus(this, 'OutboundCrossClusterSearchConnectionStatus', this.resources, this.input);
  }
  public get crossClusterSearchConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateOutboundCrossClusterSearchConnection.'),
        outputPath: '',
        parameters: {
          sourceDomainInfo: {
            ownerId: this.input.sourceDomainInfo.ownerId,
            domainName: this.input.sourceDomainInfo.domainName,
            region: this.input.sourceDomainInfo.region,
          },
          destinationDomainInfo: {
            ownerId: this.input.destinationDomainInfo.ownerId,
            domainName: this.input.destinationDomainInfo.domainName,
            region: this.input.destinationDomainInfo.region,
          },
          connectionAlias: this.input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOutboundCrossClusterSearchConnection.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class ElasticsearchService_CreateOutboundCrossClusterSearchConnectionResponse_DomainInformation extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateOutboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.OwnerId'),
        outputPath: 'SourceDomainInfo.OwnerId',
        parameters: {
          sourceDomainInfo: {
            ownerId: this.input.sourceDomainInfo.ownerId,
            domainName: this.input.sourceDomainInfo.domainName,
            region: this.input.sourceDomainInfo.region,
          },
          destinationDomainInfo: {
            ownerId: this.input.destinationDomainInfo.ownerId,
            domainName: this.input.destinationDomainInfo.domainName,
            region: this.input.destinationDomainInfo.region,
          },
          connectionAlias: this.input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.OwnerId', props);
    return resource.getResponseField('SourceDomainInfo.OwnerId') as unknown as string;
  }
  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.DomainName'),
        outputPath: 'SourceDomainInfo.DomainName',
        parameters: {
          sourceDomainInfo: {
            ownerId: this.input.sourceDomainInfo.ownerId,
            domainName: this.input.sourceDomainInfo.domainName,
            region: this.input.sourceDomainInfo.region,
          },
          destinationDomainInfo: {
            ownerId: this.input.destinationDomainInfo.ownerId,
            domainName: this.input.destinationDomainInfo.domainName,
            region: this.input.destinationDomainInfo.region,
          },
          connectionAlias: this.input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.DomainName', props);
    return resource.getResponseField('SourceDomainInfo.DomainName') as unknown as string;
  }
  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.Region'),
        outputPath: 'SourceDomainInfo.Region',
        parameters: {
          sourceDomainInfo: {
            ownerId: this.input.sourceDomainInfo.ownerId,
            domainName: this.input.sourceDomainInfo.domainName,
            region: this.input.sourceDomainInfo.region,
          },
          destinationDomainInfo: {
            ownerId: this.input.destinationDomainInfo.ownerId,
            domainName: this.input.destinationDomainInfo.domainName,
            region: this.input.destinationDomainInfo.region,
          },
          connectionAlias: this.input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.Region', props);
    return resource.getResponseField('SourceDomainInfo.Region') as unknown as string;
  }
}
export class ElasticsearchService_CreateOutboundCrossClusterSearchConnectionResponse_OutboundCrossClusterSearchConnectionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateOutboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get statusCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateOutboundCrossClusterSearchConnection.ConnectionStatus.StatusCode'),
        outputPath: 'ConnectionStatus.StatusCode',
        parameters: {
          sourceDomainInfo: {
            ownerId: this.input.sourceDomainInfo.ownerId,
            domainName: this.input.sourceDomainInfo.domainName,
            region: this.input.sourceDomainInfo.region,
          },
          destinationDomainInfo: {
            ownerId: this.input.destinationDomainInfo.ownerId,
            domainName: this.input.destinationDomainInfo.domainName,
            region: this.input.destinationDomainInfo.region,
          },
          connectionAlias: this.input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOutboundCrossClusterSearchConnection.ConnectionStatus.StatusCode', props);
    return resource.getResponseField('ConnectionStatus.StatusCode') as unknown as string;
  }
  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreateOutboundCrossClusterSearchConnection.ConnectionStatus.Message'),
        outputPath: 'ConnectionStatus.Message',
        parameters: {
          sourceDomainInfo: {
            ownerId: this.input.sourceDomainInfo.ownerId,
            domainName: this.input.sourceDomainInfo.domainName,
            region: this.input.sourceDomainInfo.region,
          },
          destinationDomainInfo: {
            ownerId: this.input.destinationDomainInfo.ownerId,
            domainName: this.input.destinationDomainInfo.domainName,
            region: this.input.destinationDomainInfo.region,
          },
          connectionAlias: this.input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOutboundCrossClusterSearchConnection.ConnectionStatus.Message', props);
    return resource.getResponseField('ConnectionStatus.Message') as unknown as string;
  }
}
export class ElasticsearchService_CreatePackageResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreatePackageRequest) {
    super(scope, id);
  }
  public get packageDetails(): ElasticsearchService_CreatePackageResponse_PackageDetails {
    return new ElasticsearchService_CreatePackageResponse_PackageDetails(this, 'PackageDetails', this.resources, this.input);
  }
}
export class ElasticsearchService_CreatePackageResponse_PackageDetails extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreatePackageRequest) {
    super(scope, id);
  }
  public get packageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreatePackage.PackageDetails.PackageID'),
        outputPath: 'PackageDetails.PackageID',
        parameters: {
          packageName: this.input.packageName,
          packageType: this.input.packageType,
          packageDescription: this.input.packageDescription,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.PackageID', props);
    return resource.getResponseField('PackageDetails.PackageID') as unknown as string;
  }
  public get packageName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreatePackage.PackageDetails.PackageName'),
        outputPath: 'PackageDetails.PackageName',
        parameters: {
          packageName: this.input.packageName,
          packageType: this.input.packageType,
          packageDescription: this.input.packageDescription,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.PackageName', props);
    return resource.getResponseField('PackageDetails.PackageName') as unknown as string;
  }
  public get packageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreatePackage.PackageDetails.PackageType'),
        outputPath: 'PackageDetails.PackageType',
        parameters: {
          packageName: this.input.packageName,
          packageType: this.input.packageType,
          packageDescription: this.input.packageDescription,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.PackageType', props);
    return resource.getResponseField('PackageDetails.PackageType') as unknown as string;
  }
  public get packageDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreatePackage.PackageDetails.PackageDescription'),
        outputPath: 'PackageDetails.PackageDescription',
        parameters: {
          packageName: this.input.packageName,
          packageType: this.input.packageType,
          packageDescription: this.input.packageDescription,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.PackageDescription', props);
    return resource.getResponseField('PackageDetails.PackageDescription') as unknown as string;
  }
  public get packageStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreatePackage.PackageDetails.PackageStatus'),
        outputPath: 'PackageDetails.PackageStatus',
        parameters: {
          packageName: this.input.packageName,
          packageType: this.input.packageType,
          packageDescription: this.input.packageDescription,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.PackageStatus', props);
    return resource.getResponseField('PackageDetails.PackageStatus') as unknown as string;
  }
  public get createdAt(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreatePackage.PackageDetails.CreatedAt'),
        outputPath: 'PackageDetails.CreatedAt',
        parameters: {
          packageName: this.input.packageName,
          packageType: this.input.packageType,
          packageDescription: this.input.packageDescription,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.CreatedAt', props);
    return resource.getResponseField('PackageDetails.CreatedAt') as unknown as string;
  }
  public get lastUpdatedAt(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreatePackage.PackageDetails.LastUpdatedAt'),
        outputPath: 'PackageDetails.LastUpdatedAt',
        parameters: {
          packageName: this.input.packageName,
          packageType: this.input.packageType,
          packageDescription: this.input.packageDescription,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.LastUpdatedAt', props);
    return resource.getResponseField('PackageDetails.LastUpdatedAt') as unknown as string;
  }
  public get availablePackageVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreatePackage.PackageDetails.AvailablePackageVersion'),
        outputPath: 'PackageDetails.AvailablePackageVersion',
        parameters: {
          packageName: this.input.packageName,
          packageType: this.input.packageType,
          packageDescription: this.input.packageDescription,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.AvailablePackageVersion', props);
    return resource.getResponseField('PackageDetails.AvailablePackageVersion') as unknown as string;
  }
  public get errorDetails(): ElasticsearchService_CreatePackageResponse_PackageDetails_ErrorDetails {
    return new ElasticsearchService_CreatePackageResponse_PackageDetails_ErrorDetails(this, 'ErrorDetails', this.resources, this.input);
  }
}
export class ElasticsearchService_CreatePackageResponse_PackageDetails_ErrorDetails extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreatePackageRequest) {
    super(scope, id);
  }
  public get errorType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreatePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorType'),
        outputPath: 'PackageDetails.ErrorDetails.ErrorDetails.ErrorType',
        parameters: {
          packageName: this.input.packageName,
          packageType: this.input.packageType,
          packageDescription: this.input.packageDescription,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorType', props);
    return resource.getResponseField('PackageDetails.ErrorDetails.ErrorDetails.ErrorType') as unknown as string;
  }
  public get errorMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.CreatePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage'),
        outputPath: 'PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage',
        parameters: {
          packageName: this.input.packageName,
          packageType: this.input.packageType,
          packageDescription: this.input.packageDescription,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage', props);
    return resource.getResponseField('PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage') as unknown as string;
  }
}
export class ElasticsearchService_DeleteElasticsearchDomainResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get domainStatus(): ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus {
    return new ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus(this, 'ElasticsearchDomainStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get domainId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.DomainId'),
        outputPath: 'DomainStatus.DomainId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.DomainId', props);
    return resource.getResponseField('DomainStatus.DomainId') as unknown as string;
  }
  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.DomainName'),
        outputPath: 'DomainStatus.DomainName',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.DomainName', props);
    return resource.getResponseField('DomainStatus.DomainName') as unknown as string;
  }
  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ARN'),
        outputPath: 'DomainStatus.ARN',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ARN', props);
    return resource.getResponseField('DomainStatus.ARN') as unknown as string;
  }
  public get created(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.Created'),
        outputPath: 'DomainStatus.Created',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.Created', props);
    return resource.getResponseField('DomainStatus.Created') as unknown as boolean;
  }
  public get deleted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.Deleted'),
        outputPath: 'DomainStatus.Deleted',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.Deleted', props);
    return resource.getResponseField('DomainStatus.Deleted') as unknown as boolean;
  }
  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.Endpoint'),
        outputPath: 'DomainStatus.Endpoint',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.Endpoint', props);
    return resource.getResponseField('DomainStatus.Endpoint') as unknown as string;
  }
  public get endpoints(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.Endpoints'),
        outputPath: 'DomainStatus.Endpoints',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.Endpoints', props);
    return resource.getResponseField('DomainStatus.Endpoints') as unknown as Record<string, string>;
  }
  public get processing(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.Processing'),
        outputPath: 'DomainStatus.Processing',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.Processing', props);
    return resource.getResponseField('DomainStatus.Processing') as unknown as boolean;
  }
  public get upgradeProcessing(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.UpgradeProcessing'),
        outputPath: 'DomainStatus.UpgradeProcessing',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.UpgradeProcessing', props);
    return resource.getResponseField('DomainStatus.UpgradeProcessing') as unknown as boolean;
  }
  public get elasticsearchVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ElasticsearchVersion'),
        outputPath: 'DomainStatus.ElasticsearchVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchVersion', props);
    return resource.getResponseField('DomainStatus.ElasticsearchVersion') as unknown as string;
  }
  public get elasticsearchClusterConfig(): ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_ElasticsearchClusterConfig {
    return new ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_ElasticsearchClusterConfig(this, 'ElasticsearchClusterConfig', this.resources, this.input);
  }
  public get ebsOptions(): ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_EBSOptions {
    return new ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_EBSOptions(this, 'EBSOptions', this.resources, this.input);
  }
  public get accessPolicies(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.AccessPolicies'),
        outputPath: 'DomainStatus.AccessPolicies',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AccessPolicies', props);
    return resource.getResponseField('DomainStatus.AccessPolicies') as unknown as string;
  }
  public get snapshotOptions(): ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_SnapshotOptions {
    return new ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_SnapshotOptions(this, 'SnapshotOptions', this.resources, this.input);
  }
  public get vpcOptions(): ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_VPCDerivedInfo {
    return new ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_VPCDerivedInfo(this, 'VPCDerivedInfo', this.resources, this.input);
  }
  public get cognitoOptions(): ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_CognitoOptions {
    return new ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_CognitoOptions(this, 'CognitoOptions', this.resources, this.input);
  }
  public get encryptionAtRestOptions(): ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_EncryptionAtRestOptions {
    return new ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_EncryptionAtRestOptions(this, 'EncryptionAtRestOptions', this.resources, this.input);
  }
  public get nodeToNodeEncryptionOptions(): ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_NodeToNodeEncryptionOptions {
    return new ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_NodeToNodeEncryptionOptions(this, 'NodeToNodeEncryptionOptions', this.resources, this.input);
  }
  public get advancedOptions(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.AdvancedOptions'),
        outputPath: 'DomainStatus.AdvancedOptions',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedOptions', props);
    return resource.getResponseField('DomainStatus.AdvancedOptions') as unknown as Record<string, string>;
  }
  public get logPublishingOptions(): Record<string, shapes.LogPublishingOption> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.LogPublishingOptions'),
        outputPath: 'DomainStatus.LogPublishingOptions',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.LogPublishingOptions', props);
    return resource.getResponseField('DomainStatus.LogPublishingOptions') as unknown as Record<string, shapes.LogPublishingOption>;
  }
  public get serviceSoftwareOptions(): ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_ServiceSoftwareOptions {
    return new ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_ServiceSoftwareOptions(this, 'ServiceSoftwareOptions', this.resources, this.input);
  }
  public get domainEndpointOptions(): ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_DomainEndpointOptions {
    return new ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_DomainEndpointOptions(this, 'DomainEndpointOptions', this.resources, this.input);
  }
  public get advancedSecurityOptions(): ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_AdvancedSecurityOptions {
    return new ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_AdvancedSecurityOptions(this, 'AdvancedSecurityOptions', this.resources, this.input);
  }
}
export class ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_ElasticsearchClusterConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get instanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType') as unknown as string;
  }
  public get instanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount') as unknown as number;
  }
  public get dedicatedMasterEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled') as unknown as boolean;
  }
  public get zoneAwarenessEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled') as unknown as boolean;
  }
  public get zoneAwarenessConfig(): ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_ElasticsearchClusterConfig_ZoneAwarenessConfig {
    return new ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_ElasticsearchClusterConfig_ZoneAwarenessConfig(this, 'ZoneAwarenessConfig', this.resources, this.input);
  }
  public get dedicatedMasterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType') as unknown as string;
  }
  public get dedicatedMasterCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount') as unknown as number;
  }
  public get warmEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled') as unknown as boolean;
  }
  public get warmType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType') as unknown as string;
  }
  public get warmCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount') as unknown as number;
  }
}
export class ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_ElasticsearchClusterConfig_ZoneAwarenessConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get availabilityZoneCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount') as unknown as number;
  }
}
export class ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_EBSOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get ebsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.EBSEnabled'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.EBSEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.EBSEnabled', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.EBSEnabled') as unknown as boolean;
  }
  public get volumeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeType'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.VolumeType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeType', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.VolumeType') as unknown as string;
  }
  public get volumeSize(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeSize'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.VolumeSize',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeSize', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.VolumeSize') as unknown as number;
  }
  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.Iops'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.Iops',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.Iops', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.Iops') as unknown as number;
  }
}
export class ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_SnapshotOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get automatedSnapshotStartHour(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour'),
        outputPath: 'DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour', props);
    return resource.getResponseField('DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour') as unknown as number;
  }
}
export class ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_VPCDerivedInfo extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.VPCId'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.VPCId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.VPCId', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.VPCId') as unknown as string;
  }
  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SubnetIds'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.SubnetIds',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SubnetIds', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.SubnetIds') as unknown as string[];
  }
  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.AvailabilityZones'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.AvailabilityZones',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.AvailabilityZones', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.AvailabilityZones') as unknown as string[];
  }
  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds') as unknown as string[];
  }
}
export class ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_CognitoOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.Enabled'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.Enabled') as unknown as boolean;
  }
  public get userPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.UserPoolId'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.UserPoolId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.UserPoolId', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.UserPoolId') as unknown as string;
  }
  public get identityPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId') as unknown as string;
  }
  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.RoleArn'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.RoleArn',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.RoleArn', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.RoleArn') as unknown as string;
  }
}
export class ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_EncryptionAtRestOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled'),
        outputPath: 'DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled') as unknown as boolean;
  }
  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId'),
        outputPath: 'DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId', props);
    return resource.getResponseField('DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId') as unknown as string;
  }
}
export class ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_NodeToNodeEncryptionOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled'),
        outputPath: 'DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled') as unknown as boolean;
  }
}
export class ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_ServiceSoftwareOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get currentVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion') as unknown as string;
  }
  public get newVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion') as unknown as string;
  }
  public get updateAvailable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable') as unknown as boolean;
  }
  public get cancellable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable') as unknown as boolean;
  }
  public get updateStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus') as unknown as string;
  }
  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description') as unknown as string;
  }
  public get automatedUpdateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate') as unknown as string;
  }
  public get optionalDeployment(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment') as unknown as boolean;
  }
}
export class ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_DomainEndpointOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enforceHttps(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS') as unknown as boolean;
  }
  public get tlsSecurityPolicy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy') as unknown as string;
  }
  public get customEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled') as unknown as boolean;
  }
  public get customEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint') as unknown as string;
  }
  public get customEndpointCertificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn') as unknown as string;
  }
}
export class ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_AdvancedSecurityOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled') as unknown as boolean;
  }
  public get internalUserDatabaseEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled') as unknown as boolean;
  }
  public get samlOptions(): ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_AdvancedSecurityOptions_SAMLOptionsOutput {
    return new ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_AdvancedSecurityOptions_SAMLOptionsOutput(this, 'SAMLOptionsOutput', this.resources, this.input);
  }
}
export class ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_AdvancedSecurityOptions_SAMLOptionsOutput extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled') as unknown as boolean;
  }
  public get idp(): ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_AdvancedSecurityOptions_SAMLOptionsOutput_SAMLIdp {
    return new ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_AdvancedSecurityOptions_SAMLOptionsOutput_SAMLIdp(this, 'SAMLIdp', this.resources, this.input);
  }
  public get subjectKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey') as unknown as string;
  }
  public get rolesKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey') as unknown as string;
  }
  public get sessionTimeoutMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes') as unknown as number;
  }
}
export class ElasticsearchService_DeleteElasticsearchDomainResponse_ElasticsearchDomainStatus_AdvancedSecurityOptions_SAMLOptionsOutput_SAMLIdp extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get metadataContent(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent') as unknown as string;
  }
  public get entityId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId') as unknown as string;
  }
}
export class ElasticsearchService_DeleteInboundCrossClusterSearchConnectionResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get crossClusterSearchConnection(): ElasticsearchService_DeleteInboundCrossClusterSearchConnectionResponse_InboundCrossClusterSearchConnection {
    return new ElasticsearchService_DeleteInboundCrossClusterSearchConnectionResponse_InboundCrossClusterSearchConnection(this, 'InboundCrossClusterSearchConnection', this.resources, this.input);
  }
}
export class ElasticsearchService_DeleteInboundCrossClusterSearchConnectionResponse_InboundCrossClusterSearchConnection extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get sourceDomainInfo(): ElasticsearchService_DeleteInboundCrossClusterSearchConnectionResponse_InboundCrossClusterSearchConnection_DomainInformation {
    return new ElasticsearchService_DeleteInboundCrossClusterSearchConnectionResponse_InboundCrossClusterSearchConnection_DomainInformation(this, 'DomainInformation', this.resources, this.input);
  }
  public get destinationDomainInfo(): ElasticsearchService_DeleteInboundCrossClusterSearchConnectionResponse_InboundCrossClusterSearchConnection_DomainInformation {
    return new ElasticsearchService_DeleteInboundCrossClusterSearchConnectionResponse_InboundCrossClusterSearchConnection_DomainInformation(this, 'DomainInformation', this.resources, this.input);
  }
  public get crossClusterSearchConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId'),
        outputPath: 'CrossClusterSearchConnection.CrossClusterSearchConnectionId',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId', props);
    return resource.getResponseField('CrossClusterSearchConnection.CrossClusterSearchConnectionId') as unknown as string;
  }
  public get connectionStatus(): ElasticsearchService_DeleteInboundCrossClusterSearchConnectionResponse_InboundCrossClusterSearchConnection_InboundCrossClusterSearchConnectionStatus {
    return new ElasticsearchService_DeleteInboundCrossClusterSearchConnectionResponse_InboundCrossClusterSearchConnection_InboundCrossClusterSearchConnectionStatus(this, 'InboundCrossClusterSearchConnectionStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_DeleteInboundCrossClusterSearchConnectionResponse_InboundCrossClusterSearchConnection_DomainInformation extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId') as unknown as string;
  }
  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName') as unknown as string;
  }
  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region') as unknown as string;
  }
}
export class ElasticsearchService_DeleteInboundCrossClusterSearchConnectionResponse_InboundCrossClusterSearchConnection_InboundCrossClusterSearchConnectionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get statusCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode') as unknown as string;
  }
  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message') as unknown as string;
  }
}
export class ElasticsearchService_DeleteOutboundCrossClusterSearchConnectionResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteOutboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get crossClusterSearchConnection(): ElasticsearchService_DeleteOutboundCrossClusterSearchConnectionResponse_OutboundCrossClusterSearchConnection {
    return new ElasticsearchService_DeleteOutboundCrossClusterSearchConnectionResponse_OutboundCrossClusterSearchConnection(this, 'OutboundCrossClusterSearchConnection', this.resources, this.input);
  }
}
export class ElasticsearchService_DeleteOutboundCrossClusterSearchConnectionResponse_OutboundCrossClusterSearchConnection extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteOutboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get sourceDomainInfo(): ElasticsearchService_DeleteOutboundCrossClusterSearchConnectionResponse_OutboundCrossClusterSearchConnection_DomainInformation {
    return new ElasticsearchService_DeleteOutboundCrossClusterSearchConnectionResponse_OutboundCrossClusterSearchConnection_DomainInformation(this, 'DomainInformation', this.resources, this.input);
  }
  public get destinationDomainInfo(): ElasticsearchService_DeleteOutboundCrossClusterSearchConnectionResponse_OutboundCrossClusterSearchConnection_DomainInformation {
    return new ElasticsearchService_DeleteOutboundCrossClusterSearchConnectionResponse_OutboundCrossClusterSearchConnection_DomainInformation(this, 'DomainInformation', this.resources, this.input);
  }
  public get crossClusterSearchConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId'),
        outputPath: 'CrossClusterSearchConnection.CrossClusterSearchConnectionId',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId', props);
    return resource.getResponseField('CrossClusterSearchConnection.CrossClusterSearchConnectionId') as unknown as string;
  }
  public get connectionAlias(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionAlias'),
        outputPath: 'CrossClusterSearchConnection.ConnectionAlias',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionAlias', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionAlias') as unknown as string;
  }
  public get connectionStatus(): ElasticsearchService_DeleteOutboundCrossClusterSearchConnectionResponse_OutboundCrossClusterSearchConnection_OutboundCrossClusterSearchConnectionStatus {
    return new ElasticsearchService_DeleteOutboundCrossClusterSearchConnectionResponse_OutboundCrossClusterSearchConnection_OutboundCrossClusterSearchConnectionStatus(this, 'OutboundCrossClusterSearchConnectionStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_DeleteOutboundCrossClusterSearchConnectionResponse_OutboundCrossClusterSearchConnection_DomainInformation extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteOutboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId') as unknown as string;
  }
  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName') as unknown as string;
  }
  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region') as unknown as string;
  }
}
export class ElasticsearchService_DeleteOutboundCrossClusterSearchConnectionResponse_OutboundCrossClusterSearchConnection_OutboundCrossClusterSearchConnectionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteOutboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get statusCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode') as unknown as string;
  }
  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message') as unknown as string;
  }
}
export class ElasticsearchService_DeletePackageResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeletePackageRequest) {
    super(scope, id);
  }
  public get packageDetails(): ElasticsearchService_DeletePackageResponse_PackageDetails {
    return new ElasticsearchService_DeletePackageResponse_PackageDetails(this, 'PackageDetails', this.resources, this.input);
  }
}
export class ElasticsearchService_DeletePackageResponse_PackageDetails extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeletePackageRequest) {
    super(scope, id);
  }
  public get packageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeletePackage.PackageDetails.PackageID'),
        outputPath: 'PackageDetails.PackageID',
        parameters: {
          packageId: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.PackageID', props);
    return resource.getResponseField('PackageDetails.PackageID') as unknown as string;
  }
  public get packageName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeletePackage.PackageDetails.PackageName'),
        outputPath: 'PackageDetails.PackageName',
        parameters: {
          packageId: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.PackageName', props);
    return resource.getResponseField('PackageDetails.PackageName') as unknown as string;
  }
  public get packageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeletePackage.PackageDetails.PackageType'),
        outputPath: 'PackageDetails.PackageType',
        parameters: {
          packageId: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.PackageType', props);
    return resource.getResponseField('PackageDetails.PackageType') as unknown as string;
  }
  public get packageDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeletePackage.PackageDetails.PackageDescription'),
        outputPath: 'PackageDetails.PackageDescription',
        parameters: {
          packageId: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.PackageDescription', props);
    return resource.getResponseField('PackageDetails.PackageDescription') as unknown as string;
  }
  public get packageStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeletePackage.PackageDetails.PackageStatus'),
        outputPath: 'PackageDetails.PackageStatus',
        parameters: {
          packageId: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.PackageStatus', props);
    return resource.getResponseField('PackageDetails.PackageStatus') as unknown as string;
  }
  public get createdAt(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeletePackage.PackageDetails.CreatedAt'),
        outputPath: 'PackageDetails.CreatedAt',
        parameters: {
          packageId: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.CreatedAt', props);
    return resource.getResponseField('PackageDetails.CreatedAt') as unknown as string;
  }
  public get lastUpdatedAt(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeletePackage.PackageDetails.LastUpdatedAt'),
        outputPath: 'PackageDetails.LastUpdatedAt',
        parameters: {
          packageId: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.LastUpdatedAt', props);
    return resource.getResponseField('PackageDetails.LastUpdatedAt') as unknown as string;
  }
  public get availablePackageVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeletePackage.PackageDetails.AvailablePackageVersion'),
        outputPath: 'PackageDetails.AvailablePackageVersion',
        parameters: {
          packageId: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.AvailablePackageVersion', props);
    return resource.getResponseField('PackageDetails.AvailablePackageVersion') as unknown as string;
  }
  public get errorDetails(): ElasticsearchService_DeletePackageResponse_PackageDetails_ErrorDetails {
    return new ElasticsearchService_DeletePackageResponse_PackageDetails_ErrorDetails(this, 'ErrorDetails', this.resources, this.input);
  }
}
export class ElasticsearchService_DeletePackageResponse_PackageDetails_ErrorDetails extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeletePackageRequest) {
    super(scope, id);
  }
  public get errorType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeletePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorType'),
        outputPath: 'PackageDetails.ErrorDetails.ErrorDetails.ErrorType',
        parameters: {
          packageId: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorType', props);
    return resource.getResponseField('PackageDetails.ErrorDetails.ErrorDetails.ErrorType') as unknown as string;
  }
  public get errorMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DeletePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage'),
        outputPath: 'PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage',
        parameters: {
          packageId: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage', props);
    return resource.getResponseField('PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage') as unknown as string;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get domainStatus(): ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus {
    return new ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus(this, 'ElasticsearchDomainStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get domainId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.DomainId'),
        outputPath: 'DomainStatus.DomainId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.DomainId', props);
    return resource.getResponseField('DomainStatus.DomainId') as unknown as string;
  }
  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.DomainName'),
        outputPath: 'DomainStatus.DomainName',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.DomainName', props);
    return resource.getResponseField('DomainStatus.DomainName') as unknown as string;
  }
  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ARN'),
        outputPath: 'DomainStatus.ARN',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ARN', props);
    return resource.getResponseField('DomainStatus.ARN') as unknown as string;
  }
  public get created(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.Created'),
        outputPath: 'DomainStatus.Created',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.Created', props);
    return resource.getResponseField('DomainStatus.Created') as unknown as boolean;
  }
  public get deleted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.Deleted'),
        outputPath: 'DomainStatus.Deleted',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.Deleted', props);
    return resource.getResponseField('DomainStatus.Deleted') as unknown as boolean;
  }
  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.Endpoint'),
        outputPath: 'DomainStatus.Endpoint',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.Endpoint', props);
    return resource.getResponseField('DomainStatus.Endpoint') as unknown as string;
  }
  public get endpoints(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.Endpoints'),
        outputPath: 'DomainStatus.Endpoints',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.Endpoints', props);
    return resource.getResponseField('DomainStatus.Endpoints') as unknown as Record<string, string>;
  }
  public get processing(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.Processing'),
        outputPath: 'DomainStatus.Processing',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.Processing', props);
    return resource.getResponseField('DomainStatus.Processing') as unknown as boolean;
  }
  public get upgradeProcessing(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.UpgradeProcessing'),
        outputPath: 'DomainStatus.UpgradeProcessing',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.UpgradeProcessing', props);
    return resource.getResponseField('DomainStatus.UpgradeProcessing') as unknown as boolean;
  }
  public get elasticsearchVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ElasticsearchVersion'),
        outputPath: 'DomainStatus.ElasticsearchVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchVersion', props);
    return resource.getResponseField('DomainStatus.ElasticsearchVersion') as unknown as string;
  }
  public get elasticsearchClusterConfig(): ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_ElasticsearchClusterConfig {
    return new ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_ElasticsearchClusterConfig(this, 'ElasticsearchClusterConfig', this.resources, this.input);
  }
  public get ebsOptions(): ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_EBSOptions {
    return new ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_EBSOptions(this, 'EBSOptions', this.resources, this.input);
  }
  public get accessPolicies(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.AccessPolicies'),
        outputPath: 'DomainStatus.AccessPolicies',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AccessPolicies', props);
    return resource.getResponseField('DomainStatus.AccessPolicies') as unknown as string;
  }
  public get snapshotOptions(): ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_SnapshotOptions {
    return new ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_SnapshotOptions(this, 'SnapshotOptions', this.resources, this.input);
  }
  public get vpcOptions(): ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_VPCDerivedInfo {
    return new ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_VPCDerivedInfo(this, 'VPCDerivedInfo', this.resources, this.input);
  }
  public get cognitoOptions(): ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_CognitoOptions {
    return new ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_CognitoOptions(this, 'CognitoOptions', this.resources, this.input);
  }
  public get encryptionAtRestOptions(): ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_EncryptionAtRestOptions {
    return new ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_EncryptionAtRestOptions(this, 'EncryptionAtRestOptions', this.resources, this.input);
  }
  public get nodeToNodeEncryptionOptions(): ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_NodeToNodeEncryptionOptions {
    return new ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_NodeToNodeEncryptionOptions(this, 'NodeToNodeEncryptionOptions', this.resources, this.input);
  }
  public get advancedOptions(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.AdvancedOptions'),
        outputPath: 'DomainStatus.AdvancedOptions',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedOptions', props);
    return resource.getResponseField('DomainStatus.AdvancedOptions') as unknown as Record<string, string>;
  }
  public get logPublishingOptions(): Record<string, shapes.LogPublishingOption> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.LogPublishingOptions'),
        outputPath: 'DomainStatus.LogPublishingOptions',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.LogPublishingOptions', props);
    return resource.getResponseField('DomainStatus.LogPublishingOptions') as unknown as Record<string, shapes.LogPublishingOption>;
  }
  public get serviceSoftwareOptions(): ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_ServiceSoftwareOptions {
    return new ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_ServiceSoftwareOptions(this, 'ServiceSoftwareOptions', this.resources, this.input);
  }
  public get domainEndpointOptions(): ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_DomainEndpointOptions {
    return new ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_DomainEndpointOptions(this, 'DomainEndpointOptions', this.resources, this.input);
  }
  public get advancedSecurityOptions(): ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_AdvancedSecurityOptions {
    return new ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_AdvancedSecurityOptions(this, 'AdvancedSecurityOptions', this.resources, this.input);
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_ElasticsearchClusterConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get instanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType') as unknown as string;
  }
  public get instanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount') as unknown as number;
  }
  public get dedicatedMasterEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled') as unknown as boolean;
  }
  public get zoneAwarenessEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled') as unknown as boolean;
  }
  public get zoneAwarenessConfig(): ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_ElasticsearchClusterConfig_ZoneAwarenessConfig {
    return new ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_ElasticsearchClusterConfig_ZoneAwarenessConfig(this, 'ZoneAwarenessConfig', this.resources, this.input);
  }
  public get dedicatedMasterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType') as unknown as string;
  }
  public get dedicatedMasterCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount') as unknown as number;
  }
  public get warmEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled') as unknown as boolean;
  }
  public get warmType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType') as unknown as string;
  }
  public get warmCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount') as unknown as number;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_ElasticsearchClusterConfig_ZoneAwarenessConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get availabilityZoneCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount') as unknown as number;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_EBSOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get ebsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.EBSEnabled'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.EBSEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.EBSEnabled', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.EBSEnabled') as unknown as boolean;
  }
  public get volumeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeType'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.VolumeType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeType', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.VolumeType') as unknown as string;
  }
  public get volumeSize(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeSize'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.VolumeSize',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeSize', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.VolumeSize') as unknown as number;
  }
  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.Iops'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.Iops',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.Iops', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.Iops') as unknown as number;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_SnapshotOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get automatedSnapshotStartHour(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour'),
        outputPath: 'DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour', props);
    return resource.getResponseField('DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour') as unknown as number;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_VPCDerivedInfo extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.VPCId'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.VPCId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.VPCId', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.VPCId') as unknown as string;
  }
  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SubnetIds'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.SubnetIds',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SubnetIds', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.SubnetIds') as unknown as string[];
  }
  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.AvailabilityZones'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.AvailabilityZones',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.AvailabilityZones', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.AvailabilityZones') as unknown as string[];
  }
  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds') as unknown as string[];
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_CognitoOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.Enabled'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.Enabled') as unknown as boolean;
  }
  public get userPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.UserPoolId'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.UserPoolId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.UserPoolId', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.UserPoolId') as unknown as string;
  }
  public get identityPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId') as unknown as string;
  }
  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.RoleArn'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.RoleArn',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.RoleArn', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.RoleArn') as unknown as string;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_EncryptionAtRestOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled'),
        outputPath: 'DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled') as unknown as boolean;
  }
  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId'),
        outputPath: 'DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId', props);
    return resource.getResponseField('DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId') as unknown as string;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_NodeToNodeEncryptionOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled'),
        outputPath: 'DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled') as unknown as boolean;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_ServiceSoftwareOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get currentVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion') as unknown as string;
  }
  public get newVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion') as unknown as string;
  }
  public get updateAvailable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable') as unknown as boolean;
  }
  public get cancellable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable') as unknown as boolean;
  }
  public get updateStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus') as unknown as string;
  }
  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description') as unknown as string;
  }
  public get automatedUpdateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate') as unknown as string;
  }
  public get optionalDeployment(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment') as unknown as boolean;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_DomainEndpointOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enforceHttps(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS') as unknown as boolean;
  }
  public get tlsSecurityPolicy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy') as unknown as string;
  }
  public get customEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled') as unknown as boolean;
  }
  public get customEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint') as unknown as string;
  }
  public get customEndpointCertificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn') as unknown as string;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_AdvancedSecurityOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled') as unknown as boolean;
  }
  public get internalUserDatabaseEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled') as unknown as boolean;
  }
  public get samlOptions(): ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_AdvancedSecurityOptions_SAMLOptionsOutput {
    return new ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_AdvancedSecurityOptions_SAMLOptionsOutput(this, 'SAMLOptionsOutput', this.resources, this.input);
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_AdvancedSecurityOptions_SAMLOptionsOutput extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled') as unknown as boolean;
  }
  public get idp(): ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_AdvancedSecurityOptions_SAMLOptionsOutput_SAMLIdp {
    return new ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_AdvancedSecurityOptions_SAMLOptionsOutput_SAMLIdp(this, 'SAMLIdp', this.resources, this.input);
  }
  public get subjectKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey') as unknown as string;
  }
  public get rolesKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey') as unknown as string;
  }
  public get sessionTimeoutMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes') as unknown as number;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainResponse_ElasticsearchDomainStatus_AdvancedSecurityOptions_SAMLOptionsOutput_SAMLIdp extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get metadataContent(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent') as unknown as string;
  }
  public get entityId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId') as unknown as string;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get domainConfig(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig(this, 'ElasticsearchDomainConfig', this.resources, this.input);
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get elasticsearchVersion(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchVersionStatus {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchVersionStatus(this, 'ElasticsearchVersionStatus', this.resources, this.input);
  }
  public get elasticsearchClusterConfig(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchClusterConfigStatus {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchClusterConfigStatus(this, 'ElasticsearchClusterConfigStatus', this.resources, this.input);
  }
  public get ebsOptions(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EBSOptionsStatus {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EBSOptionsStatus(this, 'EBSOptionsStatus', this.resources, this.input);
  }
  public get accessPolicies(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AccessPoliciesStatus {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AccessPoliciesStatus(this, 'AccessPoliciesStatus', this.resources, this.input);
  }
  public get snapshotOptions(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_SnapshotOptionsStatus {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_SnapshotOptionsStatus(this, 'SnapshotOptionsStatus', this.resources, this.input);
  }
  public get vpcOptions(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_VPCDerivedInfoStatus {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_VPCDerivedInfoStatus(this, 'VPCDerivedInfoStatus', this.resources, this.input);
  }
  public get cognitoOptions(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_CognitoOptionsStatus {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_CognitoOptionsStatus(this, 'CognitoOptionsStatus', this.resources, this.input);
  }
  public get encryptionAtRestOptions(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EncryptionAtRestOptionsStatus {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EncryptionAtRestOptionsStatus(this, 'EncryptionAtRestOptionsStatus', this.resources, this.input);
  }
  public get nodeToNodeEncryptionOptions(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_NodeToNodeEncryptionOptionsStatus {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_NodeToNodeEncryptionOptionsStatus(this, 'NodeToNodeEncryptionOptionsStatus', this.resources, this.input);
  }
  public get advancedOptions(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedOptionsStatus {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedOptionsStatus(this, 'AdvancedOptionsStatus', this.resources, this.input);
  }
  public get logPublishingOptions(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_LogPublishingOptionsStatus {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_LogPublishingOptionsStatus(this, 'LogPublishingOptionsStatus', this.resources, this.input);
  }
  public get domainEndpointOptions(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_DomainEndpointOptionsStatus {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_DomainEndpointOptionsStatus(this, 'DomainEndpointOptionsStatus', this.resources, this.input);
  }
  public get advancedSecurityOptions(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedSecurityOptionsStatus {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedSecurityOptionsStatus(this, 'AdvancedSecurityOptionsStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchVersionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Options'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Options',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Options', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Options') as unknown as string;
  }
  public get status(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchVersionStatus_OptionStatus {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchVersionStatus_OptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchVersionStatus_OptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.State'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchClusterConfigStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchClusterConfigStatus_ElasticsearchClusterConfig {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchClusterConfigStatus_ElasticsearchClusterConfig(this, 'ElasticsearchClusterConfig', this.resources, this.input);
  }
  public get status(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchClusterConfigStatus_OptionStatus {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchClusterConfigStatus_OptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchClusterConfigStatus_ElasticsearchClusterConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get instanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceType'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceType', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceType') as unknown as string;
  }
  public get instanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceCount') as unknown as number;
  }
  public get dedicatedMasterEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterEnabled'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterEnabled', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterEnabled') as unknown as boolean;
  }
  public get zoneAwarenessEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessEnabled'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessEnabled', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessEnabled') as unknown as boolean;
  }
  public get zoneAwarenessConfig(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchClusterConfigStatus_ElasticsearchClusterConfig_ZoneAwarenessConfig {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchClusterConfigStatus_ElasticsearchClusterConfig_ZoneAwarenessConfig(this, 'ZoneAwarenessConfig', this.resources, this.input);
  }
  public get dedicatedMasterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterType'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterType', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterType') as unknown as string;
  }
  public get dedicatedMasterCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterCount') as unknown as number;
  }
  public get warmEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmEnabled'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmEnabled', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmEnabled') as unknown as boolean;
  }
  public get warmType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmType'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmType', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmType') as unknown as string;
  }
  public get warmCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmCount') as unknown as number;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchClusterConfigStatus_ElasticsearchClusterConfig_ZoneAwarenessConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get availabilityZoneCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount') as unknown as number;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchClusterConfigStatus_OptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.State'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EBSOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EBSOptionsStatus_EBSOptions {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EBSOptionsStatus_EBSOptions(this, 'EBSOptions', this.resources, this.input);
  }
  public get status(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EBSOptionsStatus_OptionStatus {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EBSOptionsStatus_OptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EBSOptionsStatus_EBSOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get ebsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.EBSEnabled'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Options.Options.EBSEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.EBSEnabled', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Options.Options.EBSEnabled') as unknown as boolean;
  }
  public get volumeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeType'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeType', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeType') as unknown as string;
  }
  public get volumeSize(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeSize'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeSize',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeSize', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeSize') as unknown as number;
  }
  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.Iops'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Options.Options.Iops',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.Iops', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Options.Options.Iops') as unknown as number;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EBSOptionsStatus_OptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.State'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AccessPoliciesStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Options'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Options',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Options', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Options') as unknown as string;
  }
  public get status(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AccessPoliciesStatus_OptionStatus {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AccessPoliciesStatus_OptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AccessPoliciesStatus_OptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.State'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_SnapshotOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_SnapshotOptionsStatus_SnapshotOptions {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_SnapshotOptionsStatus_SnapshotOptions(this, 'SnapshotOptions', this.resources, this.input);
  }
  public get status(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_SnapshotOptionsStatus_OptionStatus {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_SnapshotOptionsStatus_OptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_SnapshotOptionsStatus_SnapshotOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get automatedSnapshotStartHour(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Options.Options.AutomatedSnapshotStartHour'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Options.Options.AutomatedSnapshotStartHour',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Options.Options.AutomatedSnapshotStartHour', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Options.Options.AutomatedSnapshotStartHour') as unknown as number;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_SnapshotOptionsStatus_OptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.State'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_VPCDerivedInfoStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_VPCDerivedInfoStatus_VPCDerivedInfo {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_VPCDerivedInfoStatus_VPCDerivedInfo(this, 'VPCDerivedInfo', this.resources, this.input);
  }
  public get status(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_VPCDerivedInfoStatus_OptionStatus {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_VPCDerivedInfoStatus_OptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_VPCDerivedInfoStatus_VPCDerivedInfo extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.VPCId'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Options.Options.VPCId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.VPCId', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Options.Options.VPCId') as unknown as string;
  }
  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.SubnetIds'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Options.Options.SubnetIds',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.SubnetIds', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Options.Options.SubnetIds') as unknown as string[];
  }
  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.AvailabilityZones'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Options.Options.AvailabilityZones',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.AvailabilityZones', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Options.Options.AvailabilityZones') as unknown as string[];
  }
  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.SecurityGroupIds'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Options.Options.SecurityGroupIds',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.SecurityGroupIds', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Options.Options.SecurityGroupIds') as unknown as string[];
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_VPCDerivedInfoStatus_OptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.State'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_CognitoOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_CognitoOptionsStatus_CognitoOptions {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_CognitoOptionsStatus_CognitoOptions(this, 'CognitoOptions', this.resources, this.input);
  }
  public get status(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_CognitoOptionsStatus_OptionStatus {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_CognitoOptionsStatus_OptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_CognitoOptionsStatus_CognitoOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.Enabled'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Options.Options.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Options.Options.Enabled') as unknown as boolean;
  }
  public get userPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.UserPoolId'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Options.Options.UserPoolId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.UserPoolId', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Options.Options.UserPoolId') as unknown as string;
  }
  public get identityPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.IdentityPoolId'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Options.Options.IdentityPoolId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.IdentityPoolId', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Options.Options.IdentityPoolId') as unknown as string;
  }
  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.RoleArn'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Options.Options.RoleArn',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.RoleArn', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Options.Options.RoleArn') as unknown as string;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_CognitoOptionsStatus_OptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.State'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EncryptionAtRestOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EncryptionAtRestOptionsStatus_EncryptionAtRestOptions {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EncryptionAtRestOptionsStatus_EncryptionAtRestOptions(this, 'EncryptionAtRestOptions', this.resources, this.input);
  }
  public get status(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EncryptionAtRestOptionsStatus_OptionStatus {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EncryptionAtRestOptionsStatus_OptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EncryptionAtRestOptionsStatus_EncryptionAtRestOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.Enabled'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.Enabled') as unknown as boolean;
  }
  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.KmsKeyId'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.KmsKeyId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.KmsKeyId', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.KmsKeyId') as unknown as string;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EncryptionAtRestOptionsStatus_OptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.State'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_NodeToNodeEncryptionOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_NodeToNodeEncryptionOptionsStatus_NodeToNodeEncryptionOptions {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_NodeToNodeEncryptionOptionsStatus_NodeToNodeEncryptionOptions(this, 'NodeToNodeEncryptionOptions', this.resources, this.input);
  }
  public get status(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_NodeToNodeEncryptionOptionsStatus_OptionStatus {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_NodeToNodeEncryptionOptionsStatus_OptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_NodeToNodeEncryptionOptionsStatus_NodeToNodeEncryptionOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Options.Options.Enabled'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Options.Options.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Options.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Options.Options.Enabled') as unknown as boolean;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_NodeToNodeEncryptionOptionsStatus_OptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.State'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Options'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Options',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Options', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Options') as unknown as Record<string, string>;
  }
  public get status(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedOptionsStatus_OptionStatus {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedOptionsStatus_OptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedOptionsStatus_OptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.State'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_LogPublishingOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): Record<string, shapes.LogPublishingOption> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Options'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Options',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Options', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Options') as unknown as Record<string, shapes.LogPublishingOption>;
  }
  public get status(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_LogPublishingOptionsStatus_OptionStatus {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_LogPublishingOptionsStatus_OptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_LogPublishingOptionsStatus_OptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.State'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_DomainEndpointOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_DomainEndpointOptionsStatus_DomainEndpointOptions {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_DomainEndpointOptionsStatus_DomainEndpointOptions(this, 'DomainEndpointOptions', this.resources, this.input);
  }
  public get status(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_DomainEndpointOptionsStatus_OptionStatus {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_DomainEndpointOptionsStatus_OptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_DomainEndpointOptionsStatus_DomainEndpointOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enforceHttps(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.EnforceHTTPS'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.EnforceHTTPS',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.EnforceHTTPS', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.EnforceHTTPS') as unknown as boolean;
  }
  public get tlsSecurityPolicy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.TLSSecurityPolicy'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.TLSSecurityPolicy',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.TLSSecurityPolicy', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.TLSSecurityPolicy') as unknown as string;
  }
  public get customEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointEnabled'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointEnabled', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointEnabled') as unknown as boolean;
  }
  public get customEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpoint'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpoint',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpoint', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpoint') as unknown as string;
  }
  public get customEndpointCertificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointCertificateArn'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointCertificateArn',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointCertificateArn', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointCertificateArn') as unknown as string;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_DomainEndpointOptionsStatus_OptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.State'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedSecurityOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedSecurityOptionsStatus_AdvancedSecurityOptions {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedSecurityOptionsStatus_AdvancedSecurityOptions(this, 'AdvancedSecurityOptions', this.resources, this.input);
  }
  public get status(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedSecurityOptionsStatus_OptionStatus {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedSecurityOptionsStatus_OptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedSecurityOptionsStatus_AdvancedSecurityOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.Enabled'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.Enabled') as unknown as boolean;
  }
  public get internalUserDatabaseEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.InternalUserDatabaseEnabled'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.InternalUserDatabaseEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.InternalUserDatabaseEnabled', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.InternalUserDatabaseEnabled') as unknown as boolean;
  }
  public get samlOptions(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedSecurityOptionsStatus_AdvancedSecurityOptions_SAMLOptionsOutput {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedSecurityOptionsStatus_AdvancedSecurityOptions_SAMLOptionsOutput(this, 'SAMLOptionsOutput', this.resources, this.input);
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedSecurityOptionsStatus_AdvancedSecurityOptions_SAMLOptionsOutput extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Enabled'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Enabled', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Enabled') as unknown as boolean;
  }
  public get idp(): ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedSecurityOptionsStatus_AdvancedSecurityOptions_SAMLOptionsOutput_SAMLIdp {
    return new ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedSecurityOptionsStatus_AdvancedSecurityOptions_SAMLOptionsOutput_SAMLIdp(this, 'SAMLIdp', this.resources, this.input);
  }
  public get subjectKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SubjectKey'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SubjectKey',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SubjectKey', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SubjectKey') as unknown as string;
  }
  public get rolesKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.RolesKey'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.RolesKey',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.RolesKey', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.RolesKey') as unknown as string;
  }
  public get sessionTimeoutMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SessionTimeoutMinutes'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SessionTimeoutMinutes',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SessionTimeoutMinutes', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SessionTimeoutMinutes') as unknown as number;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedSecurityOptionsStatus_AdvancedSecurityOptions_SAMLOptionsOutput_SAMLIdp extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get metadataContent(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent') as unknown as string;
  }
  public get entityId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.EntityId'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.EntityId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.EntityId', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.EntityId') as unknown as string;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedSecurityOptionsStatus_OptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.State'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ElasticsearchService_DescribeElasticsearchDomainsResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainsRequest) {
    super(scope, id);
  }
  public get domainStatusList(): shapes.ElasticsearchDomainStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomains',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchDomains.'),
        outputPath: '',
        parameters: {
          domainNames: this.input.domainNames,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomains.', props);
    return resource.getResponseField('') as unknown as shapes.ElasticsearchDomainStatus[];
  }
}
export class ElasticsearchService_DescribeElasticsearchInstanceTypeLimitsResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchInstanceTypeLimitsRequest) {
    super(scope, id);
  }
  public get limitsByRole(): Record<string, shapes.Limits> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchInstanceTypeLimits',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeElasticsearchInstanceTypeLimits.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
          instanceType: this.input.instanceType,
          elasticsearchVersion: this.input.elasticsearchVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchInstanceTypeLimits.', props);
    return resource.getResponseField('') as unknown as Record<string, shapes.Limits>;
  }
}
export class ElasticsearchService_DescribeInboundCrossClusterSearchConnectionsResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeInboundCrossClusterSearchConnectionsRequest) {
    super(scope, id);
  }
  public get crossClusterSearchConnections(): shapes.InboundCrossClusterSearchConnection[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeInboundCrossClusterSearchConnections',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeInboundCrossClusterSearchConnections.'),
        outputPath: '',
        parameters: {
          filters: this.input.filters,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInboundCrossClusterSearchConnections.', props);
    return resource.getResponseField('') as unknown as shapes.InboundCrossClusterSearchConnection[];
  }
  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeInboundCrossClusterSearchConnections',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeInboundCrossClusterSearchConnections.'),
        outputPath: '',
        parameters: {
          filters: this.input.filters,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInboundCrossClusterSearchConnections.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class ElasticsearchService_DescribeOutboundCrossClusterSearchConnectionsResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeOutboundCrossClusterSearchConnectionsRequest) {
    super(scope, id);
  }
  public get crossClusterSearchConnections(): shapes.OutboundCrossClusterSearchConnection[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeOutboundCrossClusterSearchConnections',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeOutboundCrossClusterSearchConnections.'),
        outputPath: '',
        parameters: {
          filters: this.input.filters,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOutboundCrossClusterSearchConnections.', props);
    return resource.getResponseField('') as unknown as shapes.OutboundCrossClusterSearchConnection[];
  }
  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeOutboundCrossClusterSearchConnections',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeOutboundCrossClusterSearchConnections.'),
        outputPath: '',
        parameters: {
          filters: this.input.filters,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOutboundCrossClusterSearchConnections.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class ElasticsearchService_DescribePackagesResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribePackagesRequest) {
    super(scope, id);
  }
  public get packageDetailsList(): shapes.PackageDetails[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describePackages',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribePackages.'),
        outputPath: '',
        parameters: {
          filters: this.input.filters,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribePackages.', props);
    return resource.getResponseField('') as unknown as shapes.PackageDetails[];
  }
  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describePackages',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribePackages.'),
        outputPath: '',
        parameters: {
          filters: this.input.filters,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribePackages.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class ElasticsearchService_DescribeReservedElasticsearchInstanceOfferingsResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeReservedElasticsearchInstanceOfferingsRequest) {
    super(scope, id);
  }
  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeReservedElasticsearchInstanceOfferings',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeReservedElasticsearchInstanceOfferings.'),
        outputPath: '',
        parameters: {
          reservedElasticsearchInstanceOfferingId: this.input.reservedElasticsearchInstanceOfferingId,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeReservedElasticsearchInstanceOfferings.', props);
    return resource.getResponseField('') as unknown as string;
  }
  public get reservedElasticsearchInstanceOfferings(): shapes.ReservedElasticsearchInstanceOffering[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeReservedElasticsearchInstanceOfferings',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeReservedElasticsearchInstanceOfferings.'),
        outputPath: '',
        parameters: {
          reservedElasticsearchInstanceOfferingId: this.input.reservedElasticsearchInstanceOfferingId,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeReservedElasticsearchInstanceOfferings.', props);
    return resource.getResponseField('') as unknown as shapes.ReservedElasticsearchInstanceOffering[];
  }
}
export class ElasticsearchService_DescribeReservedElasticsearchInstancesResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeReservedElasticsearchInstancesRequest) {
    super(scope, id);
  }
  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeReservedElasticsearchInstances',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeReservedElasticsearchInstances.'),
        outputPath: '',
        parameters: {
          reservedElasticsearchInstanceId: this.input.reservedElasticsearchInstanceId,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeReservedElasticsearchInstances.', props);
    return resource.getResponseField('') as unknown as string;
  }
  public get reservedElasticsearchInstances(): shapes.ReservedElasticsearchInstance[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeReservedElasticsearchInstances',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DescribeReservedElasticsearchInstances.'),
        outputPath: '',
        parameters: {
          reservedElasticsearchInstanceId: this.input.reservedElasticsearchInstanceId,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeReservedElasticsearchInstances.', props);
    return resource.getResponseField('') as unknown as shapes.ReservedElasticsearchInstance[];
  }
}
export class ElasticsearchService_DissociatePackageResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DissociatePackageRequest) {
    super(scope, id);
  }
  public get domainPackageDetails(): ElasticsearchService_DissociatePackageResponse_DomainPackageDetails {
    return new ElasticsearchService_DissociatePackageResponse_DomainPackageDetails(this, 'DomainPackageDetails', this.resources, this.input);
  }
}
export class ElasticsearchService_DissociatePackageResponse_DomainPackageDetails extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DissociatePackageRequest) {
    super(scope, id);
  }
  public get packageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DissociatePackage.DomainPackageDetails.PackageID'),
        outputPath: 'DomainPackageDetails.PackageID',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.PackageID', props);
    return resource.getResponseField('DomainPackageDetails.PackageID') as unknown as string;
  }
  public get packageName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DissociatePackage.DomainPackageDetails.PackageName'),
        outputPath: 'DomainPackageDetails.PackageName',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.PackageName', props);
    return resource.getResponseField('DomainPackageDetails.PackageName') as unknown as string;
  }
  public get packageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DissociatePackage.DomainPackageDetails.PackageType'),
        outputPath: 'DomainPackageDetails.PackageType',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.PackageType', props);
    return resource.getResponseField('DomainPackageDetails.PackageType') as unknown as string;
  }
  public get lastUpdated(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DissociatePackage.DomainPackageDetails.LastUpdated'),
        outputPath: 'DomainPackageDetails.LastUpdated',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.LastUpdated', props);
    return resource.getResponseField('DomainPackageDetails.LastUpdated') as unknown as string;
  }
  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DissociatePackage.DomainPackageDetails.DomainName'),
        outputPath: 'DomainPackageDetails.DomainName',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.DomainName', props);
    return resource.getResponseField('DomainPackageDetails.DomainName') as unknown as string;
  }
  public get domainPackageStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DissociatePackage.DomainPackageDetails.DomainPackageStatus'),
        outputPath: 'DomainPackageDetails.DomainPackageStatus',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.DomainPackageStatus', props);
    return resource.getResponseField('DomainPackageDetails.DomainPackageStatus') as unknown as string;
  }
  public get packageVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DissociatePackage.DomainPackageDetails.PackageVersion'),
        outputPath: 'DomainPackageDetails.PackageVersion',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.PackageVersion', props);
    return resource.getResponseField('DomainPackageDetails.PackageVersion') as unknown as string;
  }
  public get referencePath(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DissociatePackage.DomainPackageDetails.ReferencePath'),
        outputPath: 'DomainPackageDetails.ReferencePath',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.ReferencePath', props);
    return resource.getResponseField('DomainPackageDetails.ReferencePath') as unknown as string;
  }
  public get errorDetails(): ElasticsearchService_DissociatePackageResponse_DomainPackageDetails_ErrorDetails {
    return new ElasticsearchService_DissociatePackageResponse_DomainPackageDetails_ErrorDetails(this, 'ErrorDetails', this.resources, this.input);
  }
}
export class ElasticsearchService_DissociatePackageResponse_DomainPackageDetails_ErrorDetails extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DissociatePackageRequest) {
    super(scope, id);
  }
  public get errorType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DissociatePackage.DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorType'),
        outputPath: 'DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorType',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorType', props);
    return resource.getResponseField('DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorType') as unknown as string;
  }
  public get errorMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.DissociatePackage.DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorMessage'),
        outputPath: 'DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorMessage',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorMessage', props);
    return resource.getResponseField('DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorMessage') as unknown as string;
  }
}
export class ElasticsearchService_GetCompatibleElasticsearchVersionsResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.GetCompatibleElasticsearchVersionsRequest) {
    super(scope, id);
  }
  public get compatibleElasticsearchVersions(): shapes.CompatibleVersionsMap[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'getCompatibleElasticsearchVersions',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.GetCompatibleElasticsearchVersions.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCompatibleElasticsearchVersions.', props);
    return resource.getResponseField('') as unknown as shapes.CompatibleVersionsMap[];
  }
}
export class ElasticsearchService_GetPackageVersionHistoryResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.GetPackageVersionHistoryRequest) {
    super(scope, id);
  }
  public get packageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'getPackageVersionHistory',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.GetPackageVersionHistory.'),
        outputPath: '',
        parameters: {
          packageId: this.input.packageId,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetPackageVersionHistory.', props);
    return resource.getResponseField('') as unknown as string;
  }
  public get packageVersionHistoryList(): shapes.PackageVersionHistory[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'getPackageVersionHistory',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.GetPackageVersionHistory.'),
        outputPath: '',
        parameters: {
          packageId: this.input.packageId,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetPackageVersionHistory.', props);
    return resource.getResponseField('') as unknown as shapes.PackageVersionHistory[];
  }
  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'getPackageVersionHistory',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.GetPackageVersionHistory.'),
        outputPath: '',
        parameters: {
          packageId: this.input.packageId,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetPackageVersionHistory.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class ElasticsearchService_GetUpgradeHistoryResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.GetUpgradeHistoryRequest) {
    super(scope, id);
  }
  public get upgradeHistories(): shapes.UpgradeHistory[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'getUpgradeHistory',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.GetUpgradeHistory.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetUpgradeHistory.', props);
    return resource.getResponseField('') as unknown as shapes.UpgradeHistory[];
  }
  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'getUpgradeHistory',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.GetUpgradeHistory.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetUpgradeHistory.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class ElasticsearchService_GetUpgradeStatusResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.GetUpgradeStatusRequest) {
    super(scope, id);
  }
  public get upgradeStep(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'getUpgradeStatus',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.GetUpgradeStatus.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetUpgradeStatus.', props);
    return resource.getResponseField('') as unknown as string;
  }
  public get stepStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'getUpgradeStatus',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.GetUpgradeStatus.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetUpgradeStatus.', props);
    return resource.getResponseField('') as unknown as string;
  }
  public get upgradeName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'getUpgradeStatus',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.GetUpgradeStatus.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetUpgradeStatus.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class ElasticsearchService_ListDomainNamesResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[]) {
    super(scope, id);
  }
  public get domainNames(): shapes.DomainInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'listDomainNames',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.ListDomainNames.'),
        outputPath: '',
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDomainNames.', props);
    return resource.getResponseField('') as unknown as shapes.DomainInfo[];
  }
}
export class ElasticsearchService_ListDomainsForPackageResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.ListDomainsForPackageRequest) {
    super(scope, id);
  }
  public get domainPackageDetailsList(): shapes.DomainPackageDetails[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'listDomainsForPackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.ListDomainsForPackage.'),
        outputPath: '',
        parameters: {
          packageId: this.input.packageId,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDomainsForPackage.', props);
    return resource.getResponseField('') as unknown as shapes.DomainPackageDetails[];
  }
  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'listDomainsForPackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.ListDomainsForPackage.'),
        outputPath: '',
        parameters: {
          packageId: this.input.packageId,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDomainsForPackage.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class ElasticsearchService_ListElasticsearchInstanceTypesResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.ListElasticsearchInstanceTypesRequest) {
    super(scope, id);
  }
  public get elasticsearchInstanceTypes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'listElasticsearchInstanceTypes',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.ListElasticsearchInstanceTypes.'),
        outputPath: '',
        parameters: {
          elasticsearchVersion: this.input.elasticsearchVersion,
          domainName: this.input.domainName,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListElasticsearchInstanceTypes.', props);
    return resource.getResponseField('') as unknown as string[];
  }
  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'listElasticsearchInstanceTypes',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.ListElasticsearchInstanceTypes.'),
        outputPath: '',
        parameters: {
          elasticsearchVersion: this.input.elasticsearchVersion,
          domainName: this.input.domainName,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListElasticsearchInstanceTypes.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class ElasticsearchService_ListElasticsearchVersionsResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.ListElasticsearchVersionsRequest) {
    super(scope, id);
  }
  public get elasticsearchVersions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'listElasticsearchVersions',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.ListElasticsearchVersions.'),
        outputPath: '',
        parameters: {
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListElasticsearchVersions.', props);
    return resource.getResponseField('') as unknown as string[];
  }
  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'listElasticsearchVersions',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.ListElasticsearchVersions.'),
        outputPath: '',
        parameters: {
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListElasticsearchVersions.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class ElasticsearchService_ListPackagesForDomainResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.ListPackagesForDomainRequest) {
    super(scope, id);
  }
  public get domainPackageDetailsList(): shapes.DomainPackageDetails[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'listPackagesForDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.ListPackagesForDomain.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListPackagesForDomain.', props);
    return resource.getResponseField('') as unknown as shapes.DomainPackageDetails[];
  }
  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'listPackagesForDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.ListPackagesForDomain.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListPackagesForDomain.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class ElasticsearchService_ListTagsResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.ListTagsRequest) {
    super(scope, id);
  }
  public get tagList(): shapes.Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'listTags',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.ListTags.'),
        outputPath: '',
        parameters: {
          arn: this.input.arn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListTags.', props);
    return resource.getResponseField('') as unknown as shapes.Tag[];
  }
}
export class ElasticsearchService_PurchaseReservedElasticsearchInstanceOfferingResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.PurchaseReservedElasticsearchInstanceOfferingRequest) {
    super(scope, id);
  }
  public get reservedElasticsearchInstanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'purchaseReservedElasticsearchInstanceOffering',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.PurchaseReservedElasticsearchInstanceOffering.'),
        outputPath: '',
        parameters: {
          reservedElasticsearchInstanceOfferingId: this.input.reservedElasticsearchInstanceOfferingId,
          reservationName: this.input.reservationName,
          instanceCount: this.input.instanceCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedElasticsearchInstanceOffering.', props);
    return resource.getResponseField('') as unknown as string;
  }
  public get reservationName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'purchaseReservedElasticsearchInstanceOffering',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.PurchaseReservedElasticsearchInstanceOffering.'),
        outputPath: '',
        parameters: {
          reservedElasticsearchInstanceOfferingId: this.input.reservedElasticsearchInstanceOfferingId,
          reservationName: this.input.reservationName,
          instanceCount: this.input.instanceCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedElasticsearchInstanceOffering.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class ElasticsearchService_RejectInboundCrossClusterSearchConnectionResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.RejectInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get crossClusterSearchConnection(): ElasticsearchService_RejectInboundCrossClusterSearchConnectionResponse_InboundCrossClusterSearchConnection {
    return new ElasticsearchService_RejectInboundCrossClusterSearchConnectionResponse_InboundCrossClusterSearchConnection(this, 'InboundCrossClusterSearchConnection', this.resources, this.input);
  }
}
export class ElasticsearchService_RejectInboundCrossClusterSearchConnectionResponse_InboundCrossClusterSearchConnection extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.RejectInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get sourceDomainInfo(): ElasticsearchService_RejectInboundCrossClusterSearchConnectionResponse_InboundCrossClusterSearchConnection_DomainInformation {
    return new ElasticsearchService_RejectInboundCrossClusterSearchConnectionResponse_InboundCrossClusterSearchConnection_DomainInformation(this, 'DomainInformation', this.resources, this.input);
  }
  public get destinationDomainInfo(): ElasticsearchService_RejectInboundCrossClusterSearchConnectionResponse_InboundCrossClusterSearchConnection_DomainInformation {
    return new ElasticsearchService_RejectInboundCrossClusterSearchConnectionResponse_InboundCrossClusterSearchConnection_DomainInformation(this, 'DomainInformation', this.resources, this.input);
  }
  public get crossClusterSearchConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId'),
        outputPath: 'CrossClusterSearchConnection.CrossClusterSearchConnectionId',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId', props);
    return resource.getResponseField('CrossClusterSearchConnection.CrossClusterSearchConnectionId') as unknown as string;
  }
  public get connectionStatus(): ElasticsearchService_RejectInboundCrossClusterSearchConnectionResponse_InboundCrossClusterSearchConnection_InboundCrossClusterSearchConnectionStatus {
    return new ElasticsearchService_RejectInboundCrossClusterSearchConnectionResponse_InboundCrossClusterSearchConnection_InboundCrossClusterSearchConnectionStatus(this, 'InboundCrossClusterSearchConnectionStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_RejectInboundCrossClusterSearchConnectionResponse_InboundCrossClusterSearchConnection_DomainInformation extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.RejectInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId') as unknown as string;
  }
  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName') as unknown as string;
  }
  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region') as unknown as string;
  }
}
export class ElasticsearchService_RejectInboundCrossClusterSearchConnectionResponse_InboundCrossClusterSearchConnection_InboundCrossClusterSearchConnectionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.RejectInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get statusCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode') as unknown as string;
  }
  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message') as unknown as string;
  }
}
export class ElasticsearchService_StartElasticsearchServiceSoftwareUpdateResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.StartElasticsearchServiceSoftwareUpdateRequest) {
    super(scope, id);
  }
  public get serviceSoftwareOptions(): ElasticsearchService_StartElasticsearchServiceSoftwareUpdateResponse_ServiceSoftwareOptions {
    return new ElasticsearchService_StartElasticsearchServiceSoftwareUpdateResponse_ServiceSoftwareOptions(this, 'ServiceSoftwareOptions', this.resources, this.input);
  }
}
export class ElasticsearchService_StartElasticsearchServiceSoftwareUpdateResponse_ServiceSoftwareOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.StartElasticsearchServiceSoftwareUpdateRequest) {
    super(scope, id);
  }
  public get currentVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.CurrentVersion'),
        outputPath: 'ServiceSoftwareOptions.CurrentVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.CurrentVersion', props);
    return resource.getResponseField('ServiceSoftwareOptions.CurrentVersion') as unknown as string;
  }
  public get newVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.NewVersion'),
        outputPath: 'ServiceSoftwareOptions.NewVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.NewVersion', props);
    return resource.getResponseField('ServiceSoftwareOptions.NewVersion') as unknown as string;
  }
  public get updateAvailable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateAvailable'),
        outputPath: 'ServiceSoftwareOptions.UpdateAvailable',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateAvailable', props);
    return resource.getResponseField('ServiceSoftwareOptions.UpdateAvailable') as unknown as boolean;
  }
  public get cancellable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Cancellable'),
        outputPath: 'ServiceSoftwareOptions.Cancellable',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Cancellable', props);
    return resource.getResponseField('ServiceSoftwareOptions.Cancellable') as unknown as boolean;
  }
  public get updateStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateStatus'),
        outputPath: 'ServiceSoftwareOptions.UpdateStatus',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateStatus', props);
    return resource.getResponseField('ServiceSoftwareOptions.UpdateStatus') as unknown as string;
  }
  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Description'),
        outputPath: 'ServiceSoftwareOptions.Description',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Description', props);
    return resource.getResponseField('ServiceSoftwareOptions.Description') as unknown as string;
  }
  public get automatedUpdateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.AutomatedUpdateDate'),
        outputPath: 'ServiceSoftwareOptions.AutomatedUpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.AutomatedUpdateDate', props);
    return resource.getResponseField('ServiceSoftwareOptions.AutomatedUpdateDate') as unknown as string;
  }
  public get optionalDeployment(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.OptionalDeployment'),
        outputPath: 'ServiceSoftwareOptions.OptionalDeployment',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.OptionalDeployment', props);
    return resource.getResponseField('ServiceSoftwareOptions.OptionalDeployment') as unknown as boolean;
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get domainConfig(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig(this, 'ElasticsearchDomainConfig', this.resources, this.input);
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get elasticsearchVersion(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchVersionStatus {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchVersionStatus(this, 'ElasticsearchVersionStatus', this.resources, this.input);
  }
  public get elasticsearchClusterConfig(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchClusterConfigStatus {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchClusterConfigStatus(this, 'ElasticsearchClusterConfigStatus', this.resources, this.input);
  }
  public get ebsOptions(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EBSOptionsStatus {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EBSOptionsStatus(this, 'EBSOptionsStatus', this.resources, this.input);
  }
  public get accessPolicies(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AccessPoliciesStatus {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AccessPoliciesStatus(this, 'AccessPoliciesStatus', this.resources, this.input);
  }
  public get snapshotOptions(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_SnapshotOptionsStatus {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_SnapshotOptionsStatus(this, 'SnapshotOptionsStatus', this.resources, this.input);
  }
  public get vpcOptions(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_VPCDerivedInfoStatus {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_VPCDerivedInfoStatus(this, 'VPCDerivedInfoStatus', this.resources, this.input);
  }
  public get cognitoOptions(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_CognitoOptionsStatus {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_CognitoOptionsStatus(this, 'CognitoOptionsStatus', this.resources, this.input);
  }
  public get encryptionAtRestOptions(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EncryptionAtRestOptionsStatus {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EncryptionAtRestOptionsStatus(this, 'EncryptionAtRestOptionsStatus', this.resources, this.input);
  }
  public get nodeToNodeEncryptionOptions(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_NodeToNodeEncryptionOptionsStatus {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_NodeToNodeEncryptionOptionsStatus(this, 'NodeToNodeEncryptionOptionsStatus', this.resources, this.input);
  }
  public get advancedOptions(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedOptionsStatus {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedOptionsStatus(this, 'AdvancedOptionsStatus', this.resources, this.input);
  }
  public get logPublishingOptions(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_LogPublishingOptionsStatus {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_LogPublishingOptionsStatus(this, 'LogPublishingOptionsStatus', this.resources, this.input);
  }
  public get domainEndpointOptions(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_DomainEndpointOptionsStatus {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_DomainEndpointOptionsStatus(this, 'DomainEndpointOptionsStatus', this.resources, this.input);
  }
  public get advancedSecurityOptions(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedSecurityOptionsStatus {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedSecurityOptionsStatus(this, 'AdvancedSecurityOptionsStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchVersionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Options'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Options',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Options', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Options') as unknown as string;
  }
  public get status(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchVersionStatus_OptionStatus {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchVersionStatus_OptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchVersionStatus_OptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.State'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchClusterConfigStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchClusterConfigStatus_ElasticsearchClusterConfig {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchClusterConfigStatus_ElasticsearchClusterConfig(this, 'ElasticsearchClusterConfig', this.resources, this.input);
  }
  public get status(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchClusterConfigStatus_OptionStatus {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchClusterConfigStatus_OptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchClusterConfigStatus_ElasticsearchClusterConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get instanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceType'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceType',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceType', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceType') as unknown as string;
  }
  public get instanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceCount',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceCount') as unknown as number;
  }
  public get dedicatedMasterEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterEnabled'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterEnabled', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterEnabled') as unknown as boolean;
  }
  public get zoneAwarenessEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessEnabled'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessEnabled', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessEnabled') as unknown as boolean;
  }
  public get zoneAwarenessConfig(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchClusterConfigStatus_ElasticsearchClusterConfig_ZoneAwarenessConfig {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchClusterConfigStatus_ElasticsearchClusterConfig_ZoneAwarenessConfig(this, 'ZoneAwarenessConfig', this.resources, this.input);
  }
  public get dedicatedMasterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterType'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterType',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterType', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterType') as unknown as string;
  }
  public get dedicatedMasterCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterCount',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterCount') as unknown as number;
  }
  public get warmEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmEnabled'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmEnabled', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmEnabled') as unknown as boolean;
  }
  public get warmType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmType'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmType',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmType', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmType') as unknown as string;
  }
  public get warmCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmCount',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmCount') as unknown as number;
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchClusterConfigStatus_ElasticsearchClusterConfig_ZoneAwarenessConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get availabilityZoneCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount') as unknown as number;
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_ElasticsearchClusterConfigStatus_OptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.State'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EBSOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EBSOptionsStatus_EBSOptions {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EBSOptionsStatus_EBSOptions(this, 'EBSOptions', this.resources, this.input);
  }
  public get status(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EBSOptionsStatus_OptionStatus {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EBSOptionsStatus_OptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EBSOptionsStatus_EBSOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get ebsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.EBSEnabled'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Options.Options.EBSEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.EBSEnabled', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Options.Options.EBSEnabled') as unknown as boolean;
  }
  public get volumeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeType'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeType',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeType', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeType') as unknown as string;
  }
  public get volumeSize(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeSize'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeSize',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeSize', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeSize') as unknown as number;
  }
  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.Iops'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Options.Options.Iops',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.Iops', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Options.Options.Iops') as unknown as number;
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EBSOptionsStatus_OptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.State'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AccessPoliciesStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Options'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Options',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Options', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Options') as unknown as string;
  }
  public get status(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AccessPoliciesStatus_OptionStatus {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AccessPoliciesStatus_OptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AccessPoliciesStatus_OptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.State'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_SnapshotOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_SnapshotOptionsStatus_SnapshotOptions {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_SnapshotOptionsStatus_SnapshotOptions(this, 'SnapshotOptions', this.resources, this.input);
  }
  public get status(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_SnapshotOptionsStatus_OptionStatus {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_SnapshotOptionsStatus_OptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_SnapshotOptionsStatus_SnapshotOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get automatedSnapshotStartHour(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Options.Options.AutomatedSnapshotStartHour'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Options.Options.AutomatedSnapshotStartHour',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Options.Options.AutomatedSnapshotStartHour', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Options.Options.AutomatedSnapshotStartHour') as unknown as number;
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_SnapshotOptionsStatus_OptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.State'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_VPCDerivedInfoStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_VPCDerivedInfoStatus_VPCDerivedInfo {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_VPCDerivedInfoStatus_VPCDerivedInfo(this, 'VPCDerivedInfo', this.resources, this.input);
  }
  public get status(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_VPCDerivedInfoStatus_OptionStatus {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_VPCDerivedInfoStatus_OptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_VPCDerivedInfoStatus_VPCDerivedInfo extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.VPCId'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Options.Options.VPCId',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.VPCId', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Options.Options.VPCId') as unknown as string;
  }
  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.SubnetIds'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Options.Options.SubnetIds',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.SubnetIds', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Options.Options.SubnetIds') as unknown as string[];
  }
  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.AvailabilityZones'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Options.Options.AvailabilityZones',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.AvailabilityZones', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Options.Options.AvailabilityZones') as unknown as string[];
  }
  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.SecurityGroupIds'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Options.Options.SecurityGroupIds',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.SecurityGroupIds', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Options.Options.SecurityGroupIds') as unknown as string[];
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_VPCDerivedInfoStatus_OptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.State'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_CognitoOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_CognitoOptionsStatus_CognitoOptions {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_CognitoOptionsStatus_CognitoOptions(this, 'CognitoOptions', this.resources, this.input);
  }
  public get status(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_CognitoOptionsStatus_OptionStatus {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_CognitoOptionsStatus_OptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_CognitoOptionsStatus_CognitoOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.Enabled'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Options.Options.Enabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Options.Options.Enabled') as unknown as boolean;
  }
  public get userPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.UserPoolId'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Options.Options.UserPoolId',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.UserPoolId', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Options.Options.UserPoolId') as unknown as string;
  }
  public get identityPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.IdentityPoolId'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Options.Options.IdentityPoolId',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.IdentityPoolId', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Options.Options.IdentityPoolId') as unknown as string;
  }
  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.RoleArn'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Options.Options.RoleArn',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.RoleArn', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Options.Options.RoleArn') as unknown as string;
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_CognitoOptionsStatus_OptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.State'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EncryptionAtRestOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EncryptionAtRestOptionsStatus_EncryptionAtRestOptions {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EncryptionAtRestOptionsStatus_EncryptionAtRestOptions(this, 'EncryptionAtRestOptions', this.resources, this.input);
  }
  public get status(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EncryptionAtRestOptionsStatus_OptionStatus {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EncryptionAtRestOptionsStatus_OptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EncryptionAtRestOptionsStatus_EncryptionAtRestOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.Enabled'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.Enabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.Enabled') as unknown as boolean;
  }
  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.KmsKeyId'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.KmsKeyId',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.KmsKeyId', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.KmsKeyId') as unknown as string;
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_EncryptionAtRestOptionsStatus_OptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.State'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_NodeToNodeEncryptionOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_NodeToNodeEncryptionOptionsStatus_NodeToNodeEncryptionOptions {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_NodeToNodeEncryptionOptionsStatus_NodeToNodeEncryptionOptions(this, 'NodeToNodeEncryptionOptions', this.resources, this.input);
  }
  public get status(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_NodeToNodeEncryptionOptionsStatus_OptionStatus {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_NodeToNodeEncryptionOptionsStatus_OptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_NodeToNodeEncryptionOptionsStatus_NodeToNodeEncryptionOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Options.Options.Enabled'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Options.Options.Enabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Options.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Options.Options.Enabled') as unknown as boolean;
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_NodeToNodeEncryptionOptionsStatus_OptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.State'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Options'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Options',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Options', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Options') as unknown as Record<string, string>;
  }
  public get status(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedOptionsStatus_OptionStatus {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedOptionsStatus_OptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedOptionsStatus_OptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.State'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_LogPublishingOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): Record<string, shapes.LogPublishingOption> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Options'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Options',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Options', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Options') as unknown as Record<string, shapes.LogPublishingOption>;
  }
  public get status(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_LogPublishingOptionsStatus_OptionStatus {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_LogPublishingOptionsStatus_OptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_LogPublishingOptionsStatus_OptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.State'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_DomainEndpointOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_DomainEndpointOptionsStatus_DomainEndpointOptions {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_DomainEndpointOptionsStatus_DomainEndpointOptions(this, 'DomainEndpointOptions', this.resources, this.input);
  }
  public get status(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_DomainEndpointOptionsStatus_OptionStatus {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_DomainEndpointOptionsStatus_OptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_DomainEndpointOptionsStatus_DomainEndpointOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enforceHttps(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.EnforceHTTPS'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.EnforceHTTPS',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.EnforceHTTPS', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.EnforceHTTPS') as unknown as boolean;
  }
  public get tlsSecurityPolicy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.TLSSecurityPolicy'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.TLSSecurityPolicy',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.TLSSecurityPolicy', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.TLSSecurityPolicy') as unknown as string;
  }
  public get customEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointEnabled'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointEnabled', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointEnabled') as unknown as boolean;
  }
  public get customEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpoint'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpoint',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpoint', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpoint') as unknown as string;
  }
  public get customEndpointCertificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointCertificateArn'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointCertificateArn',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointCertificateArn', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointCertificateArn') as unknown as string;
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_DomainEndpointOptionsStatus_OptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.State'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedSecurityOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedSecurityOptionsStatus_AdvancedSecurityOptions {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedSecurityOptionsStatus_AdvancedSecurityOptions(this, 'AdvancedSecurityOptions', this.resources, this.input);
  }
  public get status(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedSecurityOptionsStatus_OptionStatus {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedSecurityOptionsStatus_OptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedSecurityOptionsStatus_AdvancedSecurityOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.Enabled'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.Enabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.Enabled') as unknown as boolean;
  }
  public get internalUserDatabaseEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.InternalUserDatabaseEnabled'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.InternalUserDatabaseEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.InternalUserDatabaseEnabled', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.InternalUserDatabaseEnabled') as unknown as boolean;
  }
  public get samlOptions(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedSecurityOptionsStatus_AdvancedSecurityOptions_SAMLOptionsOutput {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedSecurityOptionsStatus_AdvancedSecurityOptions_SAMLOptionsOutput(this, 'SAMLOptionsOutput', this.resources, this.input);
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedSecurityOptionsStatus_AdvancedSecurityOptions_SAMLOptionsOutput extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Enabled'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Enabled', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Enabled') as unknown as boolean;
  }
  public get idp(): ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedSecurityOptionsStatus_AdvancedSecurityOptions_SAMLOptionsOutput_SAMLIdp {
    return new ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedSecurityOptionsStatus_AdvancedSecurityOptions_SAMLOptionsOutput_SAMLIdp(this, 'SAMLIdp', this.resources, this.input);
  }
  public get subjectKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SubjectKey'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SubjectKey',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SubjectKey', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SubjectKey') as unknown as string;
  }
  public get rolesKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.RolesKey'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.RolesKey',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.RolesKey', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.RolesKey') as unknown as string;
  }
  public get sessionTimeoutMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SessionTimeoutMinutes'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SessionTimeoutMinutes',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SessionTimeoutMinutes', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SessionTimeoutMinutes') as unknown as number;
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedSecurityOptionsStatus_AdvancedSecurityOptions_SAMLOptionsOutput_SAMLIdp extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get metadataContent(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent') as unknown as string;
  }
  public get entityId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.EntityId'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.EntityId',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.EntityId', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.EntityId') as unknown as string;
  }
}
export class ElasticsearchService_UpdateElasticsearchDomainConfigResponse_ElasticsearchDomainConfig_AdvancedSecurityOptionsStatus_OptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.State'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ElasticsearchService_UpdatePackageResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdatePackageRequest) {
    super(scope, id);
  }
  public get packageDetails(): ElasticsearchService_UpdatePackageResponse_PackageDetails {
    return new ElasticsearchService_UpdatePackageResponse_PackageDetails(this, 'PackageDetails', this.resources, this.input);
  }
}
export class ElasticsearchService_UpdatePackageResponse_PackageDetails extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdatePackageRequest) {
    super(scope, id);
  }
  public get packageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdatePackage.PackageDetails.PackageID'),
        outputPath: 'PackageDetails.PackageID',
        parameters: {
          packageId: this.input.packageId,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
          packageDescription: this.input.packageDescription,
          commitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.PackageID', props);
    return resource.getResponseField('PackageDetails.PackageID') as unknown as string;
  }
  public get packageName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdatePackage.PackageDetails.PackageName'),
        outputPath: 'PackageDetails.PackageName',
        parameters: {
          packageId: this.input.packageId,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
          packageDescription: this.input.packageDescription,
          commitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.PackageName', props);
    return resource.getResponseField('PackageDetails.PackageName') as unknown as string;
  }
  public get packageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdatePackage.PackageDetails.PackageType'),
        outputPath: 'PackageDetails.PackageType',
        parameters: {
          packageId: this.input.packageId,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
          packageDescription: this.input.packageDescription,
          commitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.PackageType', props);
    return resource.getResponseField('PackageDetails.PackageType') as unknown as string;
  }
  public get packageDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdatePackage.PackageDetails.PackageDescription'),
        outputPath: 'PackageDetails.PackageDescription',
        parameters: {
          packageId: this.input.packageId,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
          packageDescription: this.input.packageDescription,
          commitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.PackageDescription', props);
    return resource.getResponseField('PackageDetails.PackageDescription') as unknown as string;
  }
  public get packageStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdatePackage.PackageDetails.PackageStatus'),
        outputPath: 'PackageDetails.PackageStatus',
        parameters: {
          packageId: this.input.packageId,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
          packageDescription: this.input.packageDescription,
          commitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.PackageStatus', props);
    return resource.getResponseField('PackageDetails.PackageStatus') as unknown as string;
  }
  public get createdAt(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdatePackage.PackageDetails.CreatedAt'),
        outputPath: 'PackageDetails.CreatedAt',
        parameters: {
          packageId: this.input.packageId,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
          packageDescription: this.input.packageDescription,
          commitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.CreatedAt', props);
    return resource.getResponseField('PackageDetails.CreatedAt') as unknown as string;
  }
  public get lastUpdatedAt(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdatePackage.PackageDetails.LastUpdatedAt'),
        outputPath: 'PackageDetails.LastUpdatedAt',
        parameters: {
          packageId: this.input.packageId,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
          packageDescription: this.input.packageDescription,
          commitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.LastUpdatedAt', props);
    return resource.getResponseField('PackageDetails.LastUpdatedAt') as unknown as string;
  }
  public get availablePackageVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdatePackage.PackageDetails.AvailablePackageVersion'),
        outputPath: 'PackageDetails.AvailablePackageVersion',
        parameters: {
          packageId: this.input.packageId,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
          packageDescription: this.input.packageDescription,
          commitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.AvailablePackageVersion', props);
    return resource.getResponseField('PackageDetails.AvailablePackageVersion') as unknown as string;
  }
  public get errorDetails(): ElasticsearchService_UpdatePackageResponse_PackageDetails_ErrorDetails {
    return new ElasticsearchService_UpdatePackageResponse_PackageDetails_ErrorDetails(this, 'ErrorDetails', this.resources, this.input);
  }
}
export class ElasticsearchService_UpdatePackageResponse_PackageDetails_ErrorDetails extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdatePackageRequest) {
    super(scope, id);
  }
  public get errorType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdatePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorType'),
        outputPath: 'PackageDetails.ErrorDetails.ErrorDetails.ErrorType',
        parameters: {
          packageId: this.input.packageId,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
          packageDescription: this.input.packageDescription,
          commitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorType', props);
    return resource.getResponseField('PackageDetails.ErrorDetails.ErrorDetails.ErrorType') as unknown as string;
  }
  public get errorMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpdatePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage'),
        outputPath: 'PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage',
        parameters: {
          packageId: this.input.packageId,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
          packageDescription: this.input.packageDescription,
          commitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage', props);
    return resource.getResponseField('PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage') as unknown as string;
  }
}
export class ElasticsearchService_UpgradeElasticsearchDomainResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpgradeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'upgradeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpgradeElasticsearchDomain.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
          targetVersion: this.input.targetVersion,
          performCheckOnly: this.input.performCheckOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpgradeElasticsearchDomain.', props);
    return resource.getResponseField('') as unknown as string;
  }
  public get targetVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'upgradeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpgradeElasticsearchDomain.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
          targetVersion: this.input.targetVersion,
          performCheckOnly: this.input.performCheckOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpgradeElasticsearchDomain.', props);
    return resource.getResponseField('') as unknown as string;
  }
  public get performCheckOnly(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'upgradeElasticsearchDomain',
        service: 'ElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('ElasticsearchService.UpgradeElasticsearchDomain.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
          targetVersion: this.input.targetVersion,
          performCheckOnly: this.input.performCheckOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpgradeElasticsearchDomain.', props);
    return resource.getResponseField('') as unknown as boolean;
  }
}
